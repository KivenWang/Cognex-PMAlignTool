<?xml version="1.0"?>
<doc>
    <assembly>
        "Cognex.VisionPro3D"
    </assembly>
    <members>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.ClearSetupImage">
            <summary>
This method clears any previously cached SetupImage.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.ComputeSetupImage">
            <summary>
Use the current InputVisionData to produce a maximally sized range
image. This is done using most of the current RunParams settings,
while ignoring the OutputImageXYMode, OutputImageZMode, and
OutputEnable settings. This range image is available via the read-only
SetupImage property.  This range image will be used by
CreateCurrentRecord if available and requested.
</summary>
            <exception cref="!:T:System.ArgumentNullException">
The input vision data argument is null.
</exception>
            <exception cref="!:T:System.ArgumentException">
The supplied input vision data does not contain
the specified output space source.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input range and grey images do not match in size.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input CogVisionDataContainer is not either all range
images or all range / grey image pairs.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input range images do not all contain the specified
shared space.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input range image identified as the output space
source does not contain the specified output space.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.Run">
            <summary>
Runs this Cog3DVisionDataStitchTool using the current
parameter settings.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogTool.Running">
Fires before the tool runs.
</event>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the tool runs. If the run was successful, results are
generated; if the run was not successful, no results are generated
and the previous results are cleared.
</event>
            <event cref="!:E:Cognex.VisionPro.ICogTool.Ran">
Fires after the tool runs.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate 
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants" />.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate 
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordConstants" />.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate 
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants" />.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SetupImage">
            <summary>
The SetupImage from the most recent call to ComputeSetupImage.
This property may be null.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.Result">
            <summary>
The result of the most recent run of this tool.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.RunParams">
            <summary>
The operator that performs the actual stitching.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.InputVisionData">
            <summary>
The input vision data (either range images or range image / grey
image pairs) to be processed by the contained operator.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.OnDeserialization(System.Object)">
            <summary>
Perform post deserialization setup. This method
may safely be called more than once.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.Dispose">
            <summary>
Destruct this Cog3DVisionDataStitchTool.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.#ctor(Cognex.VisionPro3D.Cog3DVisionDataStitchTool)">
            <summary>
Constructs a new instance of this class as a copy
of the given instance.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.#ctor">
            <summary>
Construct a new instance of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.Clone">
            <summary>
Create a clone, or copy, of this Cog3DVisionDataStitchTool.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for Cog3DVisionDataStitchTool object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for a Cog3DVisionDataStitchTool object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfSetupImage">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SetupImage
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfResult">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Result
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfInputVisionData">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by InputVisionData
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by RunParams
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CurrentRecordEnable
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LastRunRecordDiagEnable
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LastRunRecordEnable
may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchTool">
            <summary>
The Cog3DVisionDataStitchTool class facilitates the use of a
Cog3DVisionDataStitch operator.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants">
            <summary>
Enumeration of the diagnostic data that can be provided
in the tool's LasRunRecord.
</summary>
            <remarks>
Use these constants with
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.LastRunRecordDiagEnable" />
to specify the diagnostic
<see cref="!:u:Programming.Tools.Theory.ToolRecords">tool records</see>
that the Cog3DVisionDataStitchTool generates when you call
<see cref="!:M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants.All">
            <summary>
Include all of the diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants.DestinationRectangle">
            <summary>
Draw the (non-interactive) destination rectangle on any displayed
input range image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants.InputGreyImages">
            <summary>
Create a subrecord for each of the input grey images. Images are
by reference.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants.InputRangeImages">
            <summary>
Create a subrecord for each of the input range images. Images are
by reference.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the diagnostic data in the
LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordConstants">
            <summary>
Enumeration of the non-diagnostic data that can be provided
in the tool's LasRunRecord.
</summary>
            <remarks>
Use these constants with
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.LastRunRecordEnable" />
to specify the 
<see cref="!:u:Programming.Tools.Theory.ToolRecords">tool records</see>
that the Cog3DVisionDataStitchTool generates when you call
<see cref="!:M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordConstants.All">
            <summary>
Include all of the non-diagnostic data in the
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordConstants.OutputGreyImage">
            <summary>
Create a subrecord that references the output grey image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordConstants.OutputRangeImage">
            <summary>
Create a subrecord that references the output range image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the
LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants">
            <summary>
Enumeration of the data that can be provided in the tool's CurrentRecord.
</summary>
            <remarks>
Use these constants with
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitchTool.CurrentRecordEnable" />
to specify the
<see cref="!:u:Programming.Tools.Theory.ToolRecords">tool records</see>
that the Cog3DVisionDataStitchTool generates when you call
<secc cref="!:M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</remarks>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants.DestinationRectangle">
            <summary>
Add an interactive CogRectangle as a subrecord of the SetupImage
subrecord. This rectangle is coupled to the RunParam's OutputImageXMin,
OutputImageXMax, OutputImageYMin, and OutputImageYMax parameters.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants.SetupImage">
            <summary>
Create a subrecord for the cached, maximally sized setup image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants.InputGreyImages">
            <summary>
Create a subrecord for each of the input grey images. Images are
by reference.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants.InputRangeImages">
            <summary>
Create a subrecord for each of the input range images. Images are
by reference.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitch.Execute(Cognex.VisionPro.CogVisionDataContainer)">
            <summary>
Perform stitching on the supplied vision data.
</summary>
            <param name="inputVisionData">
The CogVisionDataContainer containing the range images
(and optionally grey images) to be stitched.
</param>
            <returns>
A
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchResult" />
containing the results of the stitching operation.
</returns>
            <exception cref="!:T:System.ArgumentNullException">
The input vision data argument is null.
</exception>
            <exception cref="!:T:System.ArgumentException">
No output is enabled.
</exception>
            <exception cref="!:T:System.ArgumentException">
Grey output is requested but there is no grey input.
</exception>
            <exception cref="!:T:System.ArgumentException">
The supplied input vision data does not contain
the specified output space source.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input range and grey images do not match in size.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input CogVisionDataContainer is not either all range
images or all range / grey image pairs.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input range images do not all contain the specified
shared space.
</exception>
            <exception cref="!:T:System.ArgumentException">
The input range image identified as the output space
source does not contain the specified output space.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageOverlapPriorities">
            <summary>
When
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageOverlapMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitch.Cog3DVisionDataStitchOverlapModeConstants">Priority</see>,
this is how we select an output pixel value from more than one
overlapping input pixel. In such a case, the overlapping input
image with the numerically lowest priority value is chosen.
</summary>
            <remarks>
The structure of this CogDictionary is as follows. There should be
one key/value entry for each input image. The key should be the
same string as that used to idenitify an input image in the
<see cref="!:T:Cognex.VisionPro.CogVisionDataContainer" />
that is supplied to the
<see cref="!:M:Cognex.VisionPro3D.Cog3DVisionDataStitch::Execute" />
method. The value should be a positive integer indicating
priority for that image: zero is the highest priority,
then one, then two, and so on.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageOverlapMode">
            <summary>
How input pixels that overlap in X and Y will be processed to produce
an output pixel value.
</summary>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants">
MaxZ</see>.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentException">
The supplied value is not a member of
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZConsistencyDistance">
            <summary>
The maximum Z difference in client space over which overlapping pixel
values will be averaged. If
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OverlapMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants">
MaxZ</see>, then overlapping pixels whose height is within this distance
of the maximum height at that location will be averaged. And if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OverlapMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants">
MinZ</see>, then overlapping pixels whose height is within this distance of
the minimum height at that location will be averaged. Overlapping pixel
height values that are outside the specified range will be ignored.
Finally, if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OverlapMode" />
is any other value, this parameter is ignored.
</summary>
            <value>
The default is 0.0.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZContinuityThreshold">
            <summary>
The maximum allowable Z difference in client space
(<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D" />)
between adjacent source data positions, between which range image voxels
will be interpolated. Adjacencies whose Z difference exceeds this value
will be disconnected. If
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZContinuityThresholdEnabled" />
is false then this property is ignored and processing is
performed as if this value were set to
<see cref="!:F:System.Double.MaxValue" />).
</summary>
            <value>
The default is 10.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
The supplied value must be greater than or equal to zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZContinuityThresholdEnabled">
            <summary>
Controls whether
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZContinuityThreshold" />
is used during processing. If false, processing is performed
as if the threshold were set to
<see cref="!:F:System.Double.MaxValue" />).
</summary>
            <value>
The default is false.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZMin">
            <summary>
Client space
(<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D" />)
minimum Z. If
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants">
UseZMin</see>, then this parameter will be the output space Z that
corresponds to a minimum output pixel value. This parameter is ignored if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZMode" />
is not
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants">
UseZMin</see>.
</summary>
            <value>
The default is -100.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZMode">
            <summary>
How to handle the Z values of the output range image. There are two
defined modes:
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants">
UseZMin</see> and
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants">
Auto</see>.
</summary>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants">
Auto</see>.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentException">
The supplied value is not a member of
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYMax">
            <summary>
Client space
(<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D" />)
maximum Y bounds for the output range image. Ignored if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXYMode" />
is not
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Limit</see>.
Note that setting this value to less than the current
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYMin" />
will cause OutputImageYMin to be set to the new value as well.
</summary>
            <value>
The default is 100.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYMin">
            <summary>
Client space
(<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D" />)
minimum Y bounds for the output range image. Ignored if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXYMode" />
is not
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Limit</see>.
Note that setting this value to greater than the current
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYMax" />
will cause OutputImageYMax to be set to the new value as well.
</summary>
            <value>
The default is -100.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXMax">
            <summary>
Client space
(<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D" />)
maximum X bounds for the output range image. Ignored if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXYMode" />
is not
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Limit</see>.
Note that setting this value to less than the current
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXMin" />
will cause OutputImageXMin to be set to the new value as well.
</summary>
            <value>
The default is 100.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXMin">
            <summary>
Client space
(<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D" />)
minimum X bounds for the output range image. Ignored if
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXYMode" />
is not
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Limit</see>.
Note that setting this value to greater than the current
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXMax" />
will cause OutputImageXMax to be set to the new value as well.
</summary>
            <value>
The default is -100.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXYMode">
            <summary>
How to define the X, Y bounds of the output image. There are two
defined modes:
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Limit</see> and
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Auto</see>.
</summary>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
Auto</see>.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentException">
The supplied value is not a member of
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZScale">
            <summary>
The Z scale factor to use when generating the output range image.
Ignored when
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageScaleMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants">
UseInputImageScales</see>.
</summary>
            <value>
The default is 1.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
The supplied value must be greater than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYScale">
            <summary>
The Y scale factor to use when generating the output range image.
Ignored when
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageScaleMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants">
UseInputImageScales</see>.
</summary>
            <value>
The default is 1.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
The supplied value must be greater than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXScale">
            <summary>
The X scale factor to use when generating the output range image.
Ignored when
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageScaleMode" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants">
UseInputImageScales</see>.
</summary>
            <value>
The default is 1.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
The supplied value must be greater than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageScaleMode">
            <summary>
How to scale the output range image. This controls the resolution
of the output range image. There are two defined modes:
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants">
UseXYZScales</see> and
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants">
UseInputImageScales</see>.
</summary>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeContants">
UseInputImageSclaes</see></value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentException">
The supplied value is not a member of
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputEnable">
            <summary>
Specify the desired ouputput by bitwise ORing the appropriate
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchOutputConstants" />.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitchOutputContants">
Range</see></value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceName3D">
            <summary>
The name of the 3D space in which the output range image will be
rendered. The
<see cref="!:M:Cognex.VisionPro3D.Cog3DVisionDataStitch.Execute" />
method will throw an ArgumentException if this space name does not
exist within the 3D coordinate space tree of the specified
range image.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentNullException">
The supplied value is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputSpaceSource">
            <summary>
                <para>
The dictionary key of the input range image whose 3D coordinate
space tree holds the desired output space. In the case of input
range / greyscale image pairs, this is the key of the nested
container that in turn holds the range image whose 3D coordinate
space tree holds the desired output space. The
<see cref="!:M:Cognex.VisionPro3D.Cog3DVisionDataStitch.Execute" />
method will throw an ArgumentException if this dictionary key
does not exist within the input
<see cref="!:T:Cognex.VisionPro.CogVisionDataContainer" />.
</para>
                <para>
When set to an empty string, this parameter is treated specially.
An empty string is interpreted to mean that we will use
an arbitrarily chosen input range image as the source of the
output space. This may be usefull when the output space is defined
in all input images.
</para>
            </summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentNullException">
The supplied value is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitch.SharedSpaceName3D">
            <summary>
The name of the 3D space shared by all input range images. The
<see cref="!:M:Cognex.VisionPro3D.Cog3DVisionDataStitch.Execute" />
method will throw an ArgumentException if this space name
does not exist in the 3D coordinate space tree of every input
range image.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="!:T:System.ArgumentNullException">
The supplied value is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitch.#ctor(Cognex.VisionPro3D.Cog3DVisionDataStitch)">
            <summary>
Constructs a new instance of this class as a deep copy of
the given instance.
</summary>
            <param name="Other">
The Cog3DVisionDataStitch object to be copied. May not be null.
</param>
            <exception cref="!:T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitch.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitch.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DVisionDataStitch object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageOverlapPriorities">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageOverlapPriorities
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageOverlapMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageOverlapMode
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageZConsistencyDistance">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageZConsistencyDistance
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageZContinuityThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageZContinuityThreshold
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageZContinuityThresholdEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by
OutputImageZContinuityThresholdEnabled may have
changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageZMin">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageZMin
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageZMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageZMode
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageYMax">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageYMax
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageYMin">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageYMin
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageXMax">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageXMax
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageXMin">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageXMin
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageXYMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageXYMode
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageZScale">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageZScale
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageYScale">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageYScale
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageXScale">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageXScale
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputImageScaleMode">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputImageScaleMode
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputEnable
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputSpaceName3D">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputSpaceName3D
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfOutputSpaceSource">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by OutputSpaceSource
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitch.SfSharedSpaceName3D">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by SharedSpaceName3D
may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitch">
            <summary>
An operator for stitching together three dimensional vision data into
a single result in a user-specified space.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants">
            <summary>
How input pixels that overlap in X and Y will be processed to
produce an output pixel value.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants.Priority">
            <summary>
Select the overlapping visible range image value from the
image with the numerically lowest priority value,
as specified in the OutputImageOverlapPriorities parameter.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants.NearestImageCenter">
            <summary>
Use the overlapping visible range image value from the
image with the closest center.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants.MinZ">
            <summary>
Use the minimum of the input values.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchOverlapModeConstants.MaxZ">
            <summary>
Use the maximum of the input values.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants">
            <summary>
How to handle the Z values of the output range image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants.Auto">
            <summary>
A ZMin value will be automatically computed from the input images by
mapping image Z = 0 corner points into output space and taking the
miniumum mapped Z value.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchZModeConstants.UseZMin">
            <summary>
The
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageZMin" />
parameter will be the output space Z that corresponds to a minimum
output voxel value. Any output voxel at or below the voxel pierced
by the specified output space Z value will be set to this value.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants">
            <summary>
How to define the XY bounds of
<see cref="!:T:Cognex.VisionPro3D.Cot3DVisionDataStitch" />'s
output image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants.Auto">
            <summary>
Automatically size the output range image in X and Y to contain the
bounding corners (at image Z = 0 and at image Z = 64K) of the input
images.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchXYModeConstants.Limit">
            <summary>
Clip the output in X and Y according to
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXMin" />,
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageXMax" />.
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYMin" />,
and
<see cref="!:P:Cognex.VisionPro3D.Cog3DVisionDataStitch.OutputImageYMax" />.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants">
            <summary>
How the <see cref="!:T:Cognex.VisionPro3D.Cog3DVisionDataStitch" /> will
scale the result.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants.UseInputImageScales">
            <summary>
If all input range images have identical X scale values, and they
all have identical Y scale values, and they all have identical
Z scale values, then use those same scale values in the output
range image. Otherwise throw an ArgumentException.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchScaleModeConstants.UseXYZScales">
            <summary>
Always use the specified X, Y, and Z scale values to generate
the output.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchOutputConstants">
            <summary>
What outputs will be generated by a call to
<see cref="!:M:Cognex.VisionPro3D.Cog3DVisionDataStitch.Execute(Cognex.VisionPro.CogVisionDataContainer)" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchOutputConstants.Grey">
            <summary>
Produce a <see cref="!:T:Cognex.VisionPro.CogImage16Grey" />
as part of the output. This will require that the input
include appropriate greyscale images.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DVisionDataStitchOutputConstants.Range">
            <summary>
Produce a <see cref="!:T:Cognex.VisionPro.CogImage16Range" />
as part of the output.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a Cog3DVisionDataStitchResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchResult.VisionData">
            <summary>
This will always point to all of the rendered data. So if you
requested just Range output, this will point to the RangeImage
property. If you request just Grey output, this will point to
the GreyImage property. And if you requested both Range and
Grey output, this will point to a CogVisionDataContainer
object holding both the range and the grey output.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchResult.GreyImage">
            <summary>
The stitched grey image. This will be null if Grey
output was not requested.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVisionDataStitchResult.RangeImage">
            <summary>
The stitched range image. This will be null if Range
output was not requested.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVisionDataStitchResult.#ctor(Cognex.VisionPro3D.Cog3DVisionDataStitchResult)">
            <summary>
Copy construct a Cog3DVisionDataStitchResult object. This
is a shallow copy.
</summary>
            <param name="Other">
The Cog3DVisionDataStitchResult object to be copied.
</param>
            <exception cref="!:T:System.ArgumentNullException">
If Other is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVisionDataStitchResult">
            <summary>
This is the result produced by a call to the
Execute method of the Cog3DVisionDataStitch class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionPointCircle
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Returns the point of the circle
</summary>
            <param name="profile">
The point is computed in the profile selected space name.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfPoint</item>
                    <item>SfPointInImage</item>
                    <item>SfPointInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The point was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The point was computed successfully but failed tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The operator failed.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedToCompute</see></item><item> The line segment was not found in the collection at run time.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfStatus</para>
                    <para>SfPoint</para>
                    <para>SfPointInImage</para>
                    <para>SfPointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of extracted line segment.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.SetCircleUsingOperator(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operator producing Circle.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
line segment operator.
</param>
            <param name="op">
The operator object producing Circle.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCircle</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segment using the operator's object. 
The operator is not held internally, it is used to extract
the internal unique id of the operator. The id is used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator is not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.PointInImage3D">
            <summary>
Gets the point computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the point was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.PointInImage">
            <summary>
Gets the point computed by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Point">
            <summary>
Gets the point computed by the execute method.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Circle">
            <summary>
Gets or sets the name of the operator producing Circle.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCircle</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Circle is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionPointCircle.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionPointCircle.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionPointCircle object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionPointCircle object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Circle" /> property
refer to 
internal id within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection and
its value is meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionPointCircle object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.SfPointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.SfPointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.SfPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.SfCircle">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Circle may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle">
            <summary>
The class to return a point of a circle
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointCircle.Circle" />
property hold the internal id of the operator producing the circle, 
and the operator must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionExtractCircleFit 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Extracts a circle.
</summary>
            <param name="profile">
The circle is extracted and reported in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the regions selected space name was not found in the profile space tree.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfCircle</item>
                    <item>SfCircleInImage</item>
                    <item>SfCircleInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The circle was extracted successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The circle was extracted successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The circle was not extracted because because not enough points were found to extract the line.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FeatureNoExtracted </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfRMSError</para>
                    <para>SfCircle</para>
                    <para>SfCircleInImage</para>
                    <para>SfCircleInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions.
The output graphic is the circle graphic.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.RadiusTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to 
tolerance the Radius. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.CenterYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to 
tolerance the CenterY position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.CenterXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to 
tolerance the CenterX position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.RMSTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object for 
the RMS error. 
</summary>
            <remarks>
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.RMSError">
            <summary>
Gets the RMS error of the circle.
</summary>
            <remarks>
RMS is the root mean squared perpendicular error between 
the line and all of the points in the user specified region
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.CircleInImage3D">
            <summary>
Gets the circle extracted by the execute method. Note that the circle is seen as a LineSegment in the image.
</summary>
            <remarks>
The circle is in the SelectedSpaceName3D of the range image
stored in the profile.
Return null is the circle was not computed.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.CircleInImage">
            <summary>
Gets the circle extracted by the execute method. Note that the circle is seen as a LineSegment in the image.
</summary>
            <remarks>
The circle is in the SelectedSpaceName of the range image
stored in the profile.
Return null is the circle was not computed.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.Circle">
            <summary>
Gets the circle extracted by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The circle is in the ProfileSelectedSpaceName.
Return null is the circle was not computed.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionExtractCircleFit.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionExtractCircleFit.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionExtractCircleFit object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionExtractCircleFit object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionExtractCircleFit object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.SfCircleInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CircleInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.SfCircleInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CircleInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.SfCircle">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Circle may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit.SfRMSError">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by RMSError may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCircleFit">
            <summary>
The class to fit a circle on a profile points that are within the regions.
This operator holds a collection of regions. There must be always one region in the
collection. The user may add and delete any region as long as the count does not dip below 1.
NOTE: this is a circle fitter not a circle finder operator. It will fit a circle using the given point
and not try to find a circle on the given points
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionPointAreaResult 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Extracts a point.
</summary>
            <param name="profile">
The point is extracted and reported in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the regions selected space name was not found in the profile space tree.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfPoint</item>
                    <item>SfPointInImage</item>
                    <item>SfPointInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The point was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The point was computed successfully but failed tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance</see></item><item> The point was not computed (missing from the input AreaResult).
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FeatureNotComputed</see></item><item> The input AreaResult is not available.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing</see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfPoint</para>
                    <para>SfPointInImage</para>
                    <para>SfPointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.PointInImage3D">
            <summary>
Gets the point extracted by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the corner was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.PointInImage">
            <summary>
Gets the point extracted by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.Point">
            <summary>
Gets the point extracted by the execute method.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.PointType">
            <summary>
Gets or sets the point type. Specifies the point to extract.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPointType</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SetAreaResultUsingOperator(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase)">
            <summary>
Sets the operator producing AreaResult.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
line segment operator.
</param>
            <param name="op">
The operator object producing AreaResult.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfArea</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the AreaResult using the operator's object. 
The operator is not held internally, it is used to extract
the internal unique id of the operator. The id is used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator is not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.Area">
            <summary>
Gets or sets the name of the operator producing the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult">AreaResult</see>.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfArea</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing AreaResult is not found
in the collection.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionPointAreaResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionPointAreaResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionPointAreaResult object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionPointAreaResult object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionPointAreaResult object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SfArea">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Area may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SfPointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SfPointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SfPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult.SfPointType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointType may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointAreaResult">
            <summary>
The class To get a point from the AreaResult object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionAreaLineSegments 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.CreateResultInputGraphics(Cognex.VisionPro.CogGraphicCollection,System.String,System.String,Cognex.VisionPro.CogTransform2DLinear)">
            <summary>
Create the input graphics and add them to the graphicCollection provided.. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="profileDefaultSpace">
The default space name of the profile
</param>
            <param name="profileSelectedSpaceName">
The selected space name of the profile
</param>
            <param name="xformProfileDefaultFromProfileSSN">
The 2D linear transform that maps from the profile's selected space to the profile's default space
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.InputAvailable">
            <summary>
Returns whether all the line segments that are specified as inputs are available or not
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.RemoveLineSegment(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Removed a line segment from the inputs by its operator
</summary>
            <param name="op">
The operator instance that produces the line segment
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.RemoveLineSegment(System.Int32)">
            <summary>
Removes the line segment from the inputs by index
</summary>
            <param name="index">
The index of the line segment to be removed
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.RemoveLineSegment(System.String)">
            <summary>
Removes the line segment from the inputs by its name
</summary>
            <param name="name">
The name of the operator that produces the line segment
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.AddLineSegment(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Adds a line segment as an input by its operator
</summary>
            <param name="op">
The operator instance that produces the line segment
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.AddLineSegment(System.String)">
            <summary>
Adds a line segment as an input by its name
</summary>
            <param name="name">
The name of the operator that produces the line segment
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.LineSegmentNames">
            <summary>
Gets the name of the input line segments
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.ReferenceProfile">
            <summary>
Gets os sets how to create the reference profile from the line segments. Either use the highest or the lowest linesegment.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionAreaLineSegments.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionAreaLineSegments.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionAreaLineSegments object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionAreaLineSegments object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionAreaLineSegments object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.SfLineSegmentNames">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegmentNames may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments.SfReferenceProfile">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ReferenceProfile may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaLineSegments">
            <summary>
The class to do difference measurements between a CrossSection and line segments.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionOperatorMultipleInputs 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionOperatorMultipleInputs.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionOperatorMultipleInputs.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionOperatorMultipleInputs object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionOperatorMultipleInputs object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Construct a default Cog3DRangeImageCrossSectionOperatorMultipleInputs object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.SfInputShapes">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputShapes may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs.SfInputOperatorNames">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputOperatorNames may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorMultipleInputs">
            <summary>
The class is a helper class for every operator that has multiple inputs
It provides the necessary function to Add / Remove / List the input operators of this operator
INTERNAL USE ONLY!
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.InputAvailable">
            <summary>
Called at the beginning of the Execute method to check if the result of the input operator is available or not
If not it does not even try to execute the operator and returns with InputFeatureMissing
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.WeightThreshold">
            <summary>
Gets the weight threshold. Always returns 0.
In VisionPro if a profile data has a weight higher than 0 it counts
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.InputOperatorType">
            <summary>
Returns the type of the input operator of this operator
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionAreaOperatorBase 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Compute the area between the input profile and the reference profile.
</summary>
            <param name="profile">
The area and the points of interest and reported in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the regions selected space name was not found in the profile space tree.
</exception>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <para>SfMeasurementResult</para>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The measurement was successful and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The measurement was successful but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance</see></item><item> The measurement was not successful for any reason.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedToMeasure</see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.ExecuteMeasureArea(c3img_crossSectionConst!System.Runtime.CompilerServices.IsConst*,cmath_shapeRegionSet!System.Runtime.CompilerServices.IsConst*,c3ip_crossSectionDiffMeasureResult*)">
            <summary>
This method needs to be overridden in the inherited class to perform the 
conrecte operator specific area measurement
</summary>
            <param name="crossSection">
The CrossSection to perform the area measurement on
</param>
            <param name="regionSet">
The set of user defined regions
</param>
            <param name="result">
The pointer to result structure holding the results of the area measurement
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfAreaResult</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions and input graphics of the specific area measurement operator
The output graphic is the difference cross section.
The base classes method draws everything except the concrete operator specific input graphics
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.CreateResultInputGraphics(Cognex.VisionPro.CogGraphicCollection,System.String,System.String,Cognex.VisionPro.CogTransform2DLinear)">
            <summary>
Create the input graphics and add them to the provided graphicCollection 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection to add the graphics to.
</param>
            <param name="profileDefaultSpace">
The profile's default sapcen name
</param>
            <param name="profileSelectedSpaceName">
The profile's selected space name
</param>
            <param name="xformProfileDefaultFromProfileSSN">
The 2D transformation to map shapes from the profile's SelectedSpaceName to the profile's DefaultSpaceName
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawThresholdGraphics">
            <summary>
Gets or sets whether the threshold graphics will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawThresholdGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawFarthestPointBelowReferenceProfileGraphics">
            <summary>
Gets or sets whether the Farthest point below the reference profile will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawFarthestPointBelowReferenceProfileGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawClosestPointBelowReferenceProfileGraphics">
            <summary>
Gets or sets whether the closest point below the reference profile will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawClosestPointBelowReferenceProfileGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawFarthestPointAboveReferenceProfileGraphics">
            <summary>
Gets or sets whether the Farthest point Above the reference profile will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawFarthestPointAboveReferenceProfileGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawClosestPointAboveReferenceProfileGraphics">
            <summary>
Gets or sets whether the closest point above the reference profile will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawClosestPointAboveReferenceProfileGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawRightPointGraphics">
            <summary>
Gets or sets whether the rightmost point of the computed area will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawRightPointGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawLeftPointGraphics">
            <summary>
Gets or sets whether the leftmost point of the computed area will be drawn or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawLeftPointGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.DrawAreaBackgroundGraphics">
            <summary>
Gets or sets whether the computed area's background will be painted or not
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDrawAreaBackgroundGraphics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.ClosestPointBelowReferenceProfileYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's Y coordinate that is below the reference profile and closest to it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.ClosestPointBelowReferenceProfileXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's X coordinate that is below the reference profile and closest to it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.FarthestPointBelowReferenceProfileYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's Y coordinate that is below the reference profile and farthest from it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.FarthestPointBelowReferenceProfileXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's X coordinate that is below the reference profile and farthest from it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.ClosestPointAboveReferenceProfileYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's Y coordinate that is above the reference profile and closes to it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.ClosestPointAboveReferenceProfileXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's X coordinate that is above the reference profile and closest to it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.FarthestPointAboveReferenceProfileYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's Y coordinate that is above the reference profile and farthest from it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.FarthestPointAboveReferenceProfileXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the point's X coordinate that is above the reference profile and farthest from it. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.RightPointYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the right point's Y coordinate. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.RightPointXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the right point's X coordinate. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.LeftPointYTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the the left point's Y coordinate. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.LeftPointXTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the left point's X coordinate. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.AreaTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">Cog3DRangeImageCrossSectionTolerance</see> object to tolerance
the area. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.AreaResult">
            <summary>
Gets the result computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The result is in the ProfileSelectedSpaceName.
Returns null if the result was not computed.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.Area">
            <summary>
Gets or sets what area is being measured: abover or below the reference profile or both of those
and if both, how they are combined
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfArea</item>
                </list>
            </event>
            <exception cref="!:T:System.ArgumentException">
If the value is not <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaConstants" /></exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.MaxFillLength">
            <summary>
Gets or sets max length of a missing stretch to fill along x-axis in ProfileSelectedSpaceName.
</summary>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMaxFillLength</item>
                </list>
            </event>
            <exception cref="!:T:System.ArgumentException">
If the value is less than 0.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.HeightThreshold">
            <summary>
Gets or sets the height threshold.
Points with heights below this threshold are treated as noise
and are thus excluded from the computations.  Note that 'height'
in this context means the difference in height between the cross
section and the lines. The heights are measured in
ProfileSelectedSpaceName units along the Image Y axis.
</summary>
            <value> 
Please note that because of the nature of the surfaces in the real world
and the accuracy of the sensor setting a height threshold to 0.0 will not 
benefit the calculation at all. We stringly recommend to set it to a value
higher than 0.0.
</value>
            <event cref="!:E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfHeightThreshold</item>
                </list>
            </event>
            <exception cref="!:T:System.ArgumentException">
If the value is less than 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionAreaOperatorBase.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionAreaOperatorBase.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionAreaOperatorBase object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionAreaOperatorBase object to be copied. 
</param>
            <exception cref="!:T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.#ctor(System.String,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaInputOperatorTypeConstants)">
            <summary>
Construct a default Cog3DRangeImageCrossSectionAreaOperatorBase object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawThresholdGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawThresholdGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawFarthestPointBelowReferenceProfileGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawFarthestPointBelowReferenceProfileGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawClosestPointBelowReferenceProfileGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawClosestPointBelowReferenceProfileGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawFarthestPointAboveReferenceProfileGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawFarthestPointAboveReferenceProfileGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawClosestPointAboveReferenceProfileGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawClosestPointAboveReferenceProfileGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawRightPointGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawRightPointGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawLeftPointGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawLeftPointGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfDrawAreaBackgroundGraphics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DrawAreaBackgroundGraphics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfInputOperator">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputOperator may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfArea">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Area may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfMeasurementPosition">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by MeasurementPosition may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfMaxFillLength">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by MaxFillLength may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfHeightThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by HeightThreshold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase.SfAreaResult">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by AreaResult may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaOperatorBase">
            <summary>
The class is the base class for every CrossSectionTool operator that performs area measurement
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionTool object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.RunParams">
            <summary>
Gets or sets the RunParams.
</summary>
            <value>
A default constructed 
Cog3DRangeImageCrossSectionRunParams.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRunParams</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.InputImage">
            <summary>
Gets or sets the input range image for use in the Cross Section.
</summary>
            <value>
The default is null.
</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If the supplied input image is not CogImage16Range.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputImage</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageCrossSectionLastRunRecordDiagConstants.
</summary>
            <value>
The default is (int)Cog3DRangeImageCrossSectionLastRunRecordDiagConstants::InputImageByReference | (int)Cog3DRangeImageCrossSectionLastRunRecordDiagConstants::Region
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLastRunRecordDiagEnable</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageCrossSectionLastRunRecordConstants.
</summary>
            <value>
The default is Cog3DRangeImageCrossSectionLastRunRecordConstants::All
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLastRunRecordEnable</item>
                    <item>SfCreateLastRunRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageCrossSectionCurrentRecordConstants.
</summary>
            <value>
The default is (int)Cog3DRangeImageCrossSectionCurrentRecordConstants::InputImage | (int)Cog3DRangeImageCrossSectionCurrentRecordConstants::Region
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCurrentRecordEnable</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionTool object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionTool object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool)">
            <summary>
Construct a deep copy of the supplied Cog3DRangeImageCrossSectionTool object.
</summary>
            <param name="Other">
The Cog3DRangeImageCrossSectionTool object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionTool object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.SfRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.SfInputImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CurrentRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LastRunRecordDiagEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LastRunRecordEnable may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTool">
            <summary>
The Cross Section tool allows you to take a thin slice of the part in the range image, 
look at it from the side, make measurements and apply tolerances. 
</summary>
            <remarks>
The highlights of the Cross Section tool:
<list type="bullet"><item>
The tool allows a user to specify a region in the X-Y plane of the range image to create the vertical profile. 
The vertical profile lies parallel to the z-axis of the range image.
</item><item>
To make measurements within the profile, we establish a family of coordinate spaces that lie within the cutting plane. 
The profile coordinate spaces are 2D x-y coordinate spaces, glued to the profile, 
typically expressed in physical units (e.g. millimeters).
</item><item>
The tool provides a user with a set of operators to
extract features from the profile such as corners or line segments,
compute features using other features such as midpoints or line intersections and
perform measurements on the features. For example, you can measure the angle 
between 2 line segments or the distance between 2 points.
Optionally perform tolerance checking on all geometry data.
</item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionRunParams 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Execute the ProfileParams.Execute() and OperatorsParams.Execute().
</summary>
            <remarks>
The outputs of the execute are:
<list type="bullet"><item>the OutputProfile</item><item>The OperatorsParams.Status, the overall status of executing all the operators </item><item>The operators' results</item></list></remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
If the image is null
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If the image is not a CogImage16Range
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileParams is null
</exception>
            <exception cref="T:System.ArgumentNullException">
If the OperatorsParams is null
</exception>
            <exception cref="T:System.ArgumentNullException">
If the InputProfile is null and UseInputProfile is set to true.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the OutputProfile produced by the ProfileParams is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.OperatorsParams">
            <summary>Gets or sets the OperatorsParams.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfOperatorsParams</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
If the value is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.ProfileParams">
            <summary>Gets or sets the ProfileParams.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfProfileParams</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
If the value is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.InputProfile">
            <summary>Gets or sets the InputProfile.
The InputProfile will not be used by the tool
unless the UseInputProfile is set to true.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfInputProfile</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.OutputProfile">
            <summary>Gets the OutputProfile produced by the execute method.
The OutputProfile cannot be set by the user.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfOutputProfile</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.UseInputProfile">
            <summary>
Gets or sets the UseInputProfile. If True, use the InputProfile 
attached to the RunParams.
</summary>
            <value>Default value is false.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfUseInputProfile</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionRunParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionRunParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionRunParams object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionRunParams object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionRunParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.SfOutputProfile">
            <summary>This bit will be set in the EventArgs of a Changed event 
every time the value returned by OutputProfile may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.SfUseInputProfile">
            <summary>This bit will be set in the EventArgs of a Changed event 
every time the value returned by UseInputProfile may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.SfInputProfile">
            <summary>This bit will be set in the EventArgs of a Changed event 
every time the value returned by InputProfile may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.SfOperatorsParams">
            <summary>This bit will be set in the EventArgs of a Changed event 
every time the value returned by OperatorsParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams.SfProfileParams">
            <summary>This bit will be set in the EventArgs of a Changed event 
every time the value returned by ProfileParams may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionRunParams">
            <summary>
  This class is the RunParams class of the cross section tool.
  The Cross Section tool has 2 parts: one to create the profile and the other 
  to run the operators. This class provides a central location for executing 
  both parts. The first part can be skipped if the user passes in the profile.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionDistancePointLine 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the distance between the point and the line segment.
</summary>
            <param name="profile">
The distance is computed in the profile selected space name.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfDistance</item>
                </list>
            </event>
            <remarks> 
The status returned can be one of the following:
<list type="bullet"><item> The distance was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The distance was computed successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The point and/or the line segment were/was not found at run time
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfDistance</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided.
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of input features.
The output graphic is a line segment representing the distance.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.SetLineSegmentPointUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operators producing LineSegment and Point.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
operators.
</param>
            <param name="lineSegOp">
The operator object producing LineSegment.
</param>
            <param name="pointOp">
The operator object producing pointOp.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                    <item>SfPoint</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segment and the point using the operators' objects. 
The operators are not held internally, they are used to extract
the internal unique ids of the operators. The ids are used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If lineSegOp and/or pointOp were not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Distance">
            <summary>
Gets the distance computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The measured distance is in the profile selected space name.
</remarks>
            <exception cref="T:System.ArgumentException">
If the distance was not computed. 
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.NearestType">
            <summary>
Gets or sets NearestType.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNearestType</item>
                </list>
            </event>
            <remarks>
Specifies whether or not to treat a line
segment as an infinite line when determining the point "on" the
segment that is nearest to a given point.
</remarks>
            <exception cref="T:System.ArgumentException">
The value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.LineSegment">
            <summary>
Gets or sets the name of the operator producing LineSegment.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Point">
            <summary>
Gets or sets the name of the operator producing Point.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Point is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.DistanceTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">tolerance</see> object for 
the distance. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionDistancePointLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionDistancePointLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionDistancePointLine object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionDistancePointLine object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Point" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.LineSegment" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> 
collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionDistancePointLine object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.SfDistance">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Distance may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.SfNearestType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NearestType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.SfLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.SfPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine">
            <summary>
The class to compute the shortest distance between a point and a line that extends from the line segment or
the shortest distance between a point and the line segment.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.Point" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointLine.LineSegment" /> properties hold the internal ids 
of the operators producing the features, and these operators must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionNearestPoint 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the nearest point.
</summary>
            <param name="profile">
The nearest point is computed in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection. The parent is null.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfNearestPoint</item>
                    <item>SfNearestPointInImage</item>
                    <item>SfNearestPointInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The nearest point was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The nearest point was computed successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The point and/or the line was/were not found at run time
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfStatus</para>
                    <para>SfNearestPoint</para>
                    <para>SfNearestPointInImage</para>
                    <para>SfNearestPointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided.
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of input features.
The output graphic is a point.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SetLineSegmentPointUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operators producing LineSegment and Point.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
operators.
</param>
            <param name="lineSegOp">
The operator object producing LineSegment.
</param>
            <param name="pointOp">
The operator object producing pointOp.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                    <item>SfPoint</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segment and the point using the operators' objects. 
The operators are not held internally, they are used to extract
the internal unique ids of the operators. The ids are used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If lineSegOp and/or pointOp were not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.NearestPointInImage3D">
            <summary>
Gets the nearest point found by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the nearest point was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.NearestPointInImage">
            <summary>
Gets the nearest point found by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.NearestPoint">
            <summary>
Gets the nearest point found by the execute method.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.NearestType">
            <summary>
Gets or sets NearestType.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNearestType</item>
                </list>
            </event>
            <remarks>
Specifies whether or not to treat a line
segment as an infinite line when determining the point "on" the
segment that is nearest to a given point.
</remarks>
            <exception cref="T:System.ArgumentException">
The value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.Point">
            <summary>
Gets or sets the name of the operator producing Point.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Point is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.LineSegment">
            <summary>
Gets or sets the name of the operator producing LineSegment.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionNearestPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionNearestPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionNearestPoint object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionNearestPoint object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.Point" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.LineSegment" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> 
collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionNearestPoint object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfNearestPointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NearestPointInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfNearestPointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NearestPointInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfNearestPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NearestPoint may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfNearestType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NearestType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.SfPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint">
            <summary>
The class to compute the nearest point on a line segment or the nearest point on a line that extends from the line segment. 
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.Point" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestPoint.LineSegment" /> properties hold the internal ids 
of the operators producing the features, and these operators must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionDistancePointPoint 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the distance between tow points.
</summary>
            <param name="profile">
The distance is computed in the profile selected space name.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfDistance</item>
                </list>
            </event>
            <remarks> 
The status returned can be one of the following:
<list type="bullet"><item> The distance was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The distance was computed successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The point and/or the line segment were/was not found at run time
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfDistance</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided.
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of input features.
The output graphic is a line segment representing the distance.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.SetPointsUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operators producing Point1 and Point2.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams object that holds the
operators.
</param>
            <param name="operator1">
The operator object producing Point1.
</param>
            <param name="operator2">
The operator object producing Point2.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint1</item>
                    <item>SfPoint2</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to set
the points using the operators' objects. 
The operators are not held internally, they are used to extract
the internal unique index of the operators. The indices are used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator1 and/or operator2 were not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in the parentCollection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Distance">
            <summary>
Gets the distance computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The measured distance is in the profile selected space name.
</remarks>
            <exception cref="T:System.ArgumentException">
If the distance was not computed. 
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.DistanceType">
            <summary>
Gets or sets DistanceType.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDistanceType</item>
                </list>
            </event>
            <remarks>
To compute the distance between 2 points, the user can select
the euclidean distance, the distance in X or the distance in Y.
All of the measurements are in profile selected space name.
The distance in X is the width between the 2 points. 
The distance in Y is the height between the 2 points.
</remarks>
            <exception cref="T:System.ArgumentException">
The value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Point2">
            <summary>
Gets or sets the name of the operator producing Point2.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint2</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Poin2t is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Point1">
            <summary>
Gets or sets the name of the operator producing Point1.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint1</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Point1 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.DistanceTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">tolerance</see> object for 
the distance. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionDistancePointLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionDistancePointPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionDistancePointPoint object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionDistancePointPoint object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Point1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Point2" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> 
collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionDistancePointPoint object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.SfDistance">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Distance may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.SfDistanceType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DistanceType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.SfPoint2">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point2 may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.SfPoint1">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point1 may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint">
            <summary>
The operator class to compute the distance between 2 points.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Point1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistancePointPoint.Point2" /> properties hold the internal ids 
of the operators producing the features, and these operators must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionLineSegmentPointPoint 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the line segment using 2 points.
</summary>
            <param name="profile">
The line segment is computed in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfLineSegment</item>
                    <item>SfLineSegmentInImage</item>
                    <item>SfLineSegmentInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The line segment was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The line segment was computed successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The point(s) was/were not found at run time
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfStatus</para>
                    <para>SfLineSegment</para>
                    <para>SfLineSegmentInImage</para>
                    <para>SfLineSegmentInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided.
</summary>
            <param name="graphicCollection">
The constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of input features.
The output graphic is the line segment.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SetPointsUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operators producing Point1 and Point2.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams object that holds the
operators.
</param>
            <param name="operator1">
The operator object producing Point1.
</param>
            <param name="operator2">
The operator object producing Point2.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint1</item>
                    <item>SfPoint2</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to set
the points using the operators' objects. 
The operators are not held internally, they are used to extract
the internal unique index of the operators. The indices are used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator1 and/or operator2 were not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in the parentCollection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.LineSegmentInImage3D">
            <summary>
Gets the line segment computed by the execute method.
</summary>
            <remarks>
The line segment is in the SelectedSpaceName3D of the range image
stored in the profile.
Returns null if the line segment was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.LineSegmentInImage">
            <summary>
Gets the line segment computed by the execute method.
</summary>
            <remarks>
The line segment is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the line segment was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.LineSegment">
            <summary>
Gets the line segment computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The line segment is in the ProfileSelectedSpaceName.
Returns null if the line segment was not computed. 
</remarks>
            <exception cref="T:System.ArgumentException">
If the line segment was not computed. 
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Point2">
            <summary>
Gets or sets the name of the operator producing Point2.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint2</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Poin2t is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Point1">
            <summary>
Gets or sets the name of the operator producing Point1.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint1</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Point1 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.AngleTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">tolerance</see> object for 
the angle. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in radians.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionLineSegmentPointPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionLineSegmentPointPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionLineSegmentPointPoint object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionLineSegmentPointPoint object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Point1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Point2" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionLineSegmentPointPoint object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SfLineSegmentInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegmentInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SfLineSegmentInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegmentInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SfLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SfPoint2">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point2 may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.SfPoint1">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point1 may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint">
            <summary>
The class computes a line segment using 2 points.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Point1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointPoint.Point2" /> properties hold the internal ids of the operators producing the points, 
and these operators must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionMidpointPointPoint
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the midpoint between 2 points.
</summary>
            <param name="profile">
The midpoint is computed in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection. The parent is null.
</exception>
            <para>Fires when this property changes.</para>
            <para>The following state flag may be affected:</para>
            <list type="bullet">
                <item>SfStatus</item>
                <item>SfMidpoint</item>
                <item>SfMidpointInImage</item>
                <item>SfMidpointInImage3D</item>
            </list>
            <remarks>
                <para>
The status returned can be one of the following:
<para> The midpoint was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></para><para> The midpoint was computed successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></para><para> The point(s) was/were not found in the collection at run time.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></para></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>Status</para>
                    <para>Midpoint</para>
                    <para>MidpointInImage</para>
                    <para>MidpointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of the input points.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SetPointsUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operators producing Point1 and Point2.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams object that holds the
operators.
</param>
            <param name="operator1">
The operator object producing Point1.
</param>
            <param name="operator2">
The operator object producing Point2.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint1</item>
                    <item>SfPoint2</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to set
the points using the operators' object. 
The operators are not held internally, they are used to extract
the internal unique index of the operators. The indices are used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator1 and/or operator2 were not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in the parentCollection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.MidpointInImage3D">
            <summary>
Gets the midpoint found by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the midpoint was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.MidpointInImage">
            <summary>
Gets the midpoint found by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Midpoint">
            <summary>
Gets the point computed by the execute method.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Point2">
            <summary>
Gets or sets the name of the operator producing Point2.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint2</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Poin2 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Point1">
            <summary>
Gets or sets the name of the operator producing Point1.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPoint1</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the point and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing Point1 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionMidpointPointPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionMidpointPointPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionMidpointPointPoint object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionMidpointPointPoint object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Point1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Point2" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> 
collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionMidpointPointPoint object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SfMidpointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by MidpointInRangeImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SfMidpointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by MidpointInRangeImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SfMidpoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Midpoint may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SfPoint2">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point2 may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.SfPoint1">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point1 may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint">
            <summary>
The class to compute the midpoint between two points.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Point1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionMidpointPointPoint.Point2" /> properties hold the internal ids 
of the operators producing the features, and these operators must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionPointLineSegment
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Returns the point on the line segment.
</summary>
            <param name="profile">
The point is computed in the profile selected space name.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfPoint</item>
                    <item>SfPointInImage</item>
                    <item>SfPointInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The point was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The point was computed successfully but failed tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The operator failed.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedToCompute</see></item><item> The line segment was not found in the collection at run time.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfStatus</para>
                    <para>SfPoint</para>
                    <para>SfPointInImage</para>
                    <para>SfPointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of extracted line segment.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SetLineSegmentUsingOperator(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operator producing LineSegment.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
line segment operator.
</param>
            <param name="op">
The operator object producing LineSegment.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segment using the operator's object. 
The operator is not held internally, it is used to extract
the internal unique id of the operator. The id is used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator is not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.PointInImage3D">
            <summary>
Gets the point computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the point was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.PointInImage">
            <summary>
Gets the point computed by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.Point">
            <summary>
Gets the point computed by the execute method.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.LineSegmentPoint">
            <summary>
Gets or sets the LineSegmentPoint. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegmentPoint</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
            <remarks>
Specifies which point on the line segment to return.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.LineSegment">
            <summary>
Gets or sets the name of the operator producing LineSegment.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionPointLineSegment.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionPointLineSegment.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionPointLineSegment object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionPointLineSegment object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.LineSegment" /> property
refer to 
internal id within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection and
its value is meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionPointLineSegment object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SfPointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SfPointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SfPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SfLineSegmentPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegmentPoint may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.SfLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment">
            <summary>
The class to return a point on a line segment.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointLineSegment.LineSegment" />
property hold the internal id of the operator producing the line segment, 
and the operator must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionAngleLineLine 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the angle between the lines that extend from the two line segments.
</summary>
            <param name="profile">
The angle is computed in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfAngle</item>
                </list>
            </event>
            <remarks> 
The status returned can be one of the following:
<list type="bullet"><item> The angle was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The angle was computed successfully but failed tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The operator failed.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedToMeasure</see></item><item> The line segment(s) was/were not found in the collection at run time.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided.. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of extracted line segments.
The output graphics are the angle graphics.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <remarks>
                <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                    <para>Fires when this method is called.</para>
                    <para>The following state flag may be affected:</para>
                    <list type="bullet">
                        <item>SfAngle</item>
                    </list>
                </event>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SetLineSegmentsUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operators producing LineSegment1 and LineSegment2.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
line segments' operators.
</param>
            <param name="operator1">
The operator object producing LineSegment1.
</param>
            <param name="operator2">
The operator object producing LineSegment2.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment1</item>
                    <item>SfLineSegment2</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segments using the operators' objects. 
The operators are not held internally, they are used to extract
the internal unique ids of the operators. The ids are used 
by this operator at run time. 
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator1 and/or operator2 were/was not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.Angle">
            <summary>
Gets the angle computed by the execute method. 
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The angle is measured from LineSegment1 to LineSegment2. 
If SupplementaryAngle is true, the angle is measured from -LineSegment2 to 
LineSegment1.
The measured angle is in the profile selected space name and 
it is reported in radians.
</remarks>
            <exception cref="T:System.ArgumentException">
If the angle was not computed. 
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment2">
            <summary>
Gets or sets the name of the operator producing LineSegment2.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment2</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment2 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment1">
            <summary>
Gets or sets the name of the operator producing LineSegment1.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment1</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment1 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SupplementaryAngle">
            <summary>
Gets or sets the SupplementaryAngle.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSupplementaryAngle</item>
                </list>
            </event>
            <remarks>
If true, the angle returned is the supplementary angle.
The SupplementaryAngle is measured from -LineSegment2 to LineSegment1. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.AngleTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">tolerance</see> object for 
the angle. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in radians.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionAngleLineLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionAngleLineLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionAngleLineLine object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionAngleLineLine object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment2" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionAngleLineLine object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SfAngle">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Angle may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SfSupplementaryAngle">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SupplementaryAngle may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SfLineSegment2">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment2 may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.SfLineSegment1">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment1 may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine">
            <summary>
The class to compute the angle between the lines that extend from the two line segments.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment2" /> properties hold the internal ids of the operators producing the line segments, and these operators must also be in the operators collection.
<para>
The angle is measured from <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment1" /> to 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAngleLineLine.LineSegment2" />. 
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionIntersectLineLine 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Computes the intersect point.
</summary>
            <param name="profile">
The intersect point is computed in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfIntersectPoint</item>
                    <item>SfIntersectPointInImage</item>
                    <item>SfIntersectPointInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The intersect point was computed successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The intersect point was computed successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The line segment(s) was/were not found in the collection at run time.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">InputFeatureMissing </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfStatus</para>
                    <para>SfIntersectPoint</para>
                    <para>SfIntersectPointInImage</para>
                    <para>SfIntersectPointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of extracted line segment.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SetLineSegmentsUsingOperators(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operator producing LineSegment1 and LineSegment2.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
line segment operator.
</param>
            <param name="operator1">
The operator object producing LineSegment.
</param>
            <param name="operator2">
The operator object producing LineSegment.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segments using the operators' objects. 
The operators are not held internally, they are used to extract
the internal unique ids of the operators. The ids are used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator is not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.IntersectPointInImage3D">
            <summary>
Gets the point computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the point was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.IntersectPointInImage">
            <summary>
Gets the point computed by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.IntersectPoint">
            <summary>
Gets the point computed by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.LineSegment2">
            <summary>
Gets or sets the name of the operator producing LineSegment2.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment2</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment2 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.LineSegment1">
            <summary>
Gets or sets the name of the operator producing LineSegment1.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment1</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment1 is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionIntersectLineLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionIntersectLineLine.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionIntersectLineLine object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionIntersectLineLine object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
The copy constructor is meant to be used with the collection 
copy constructor. 
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.LineSegment1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.LineSegment2" /> properties
refer to 
internal ids within the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection and
their values are meaningless outside a collection.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionIntersectLineLine object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SfIntersectPointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by IntersectPointInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SfIntersectPointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by IntersectPointInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SfIntersectPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by IntersectPoint may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SfLineSegment2">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment2 may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.SfLineSegment1">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment1 may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine">
            <summary>
The class to compute the intersect point between the lines that extend from the two line segments.
This operator must be added to the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">operators</see> collection before it
is configured. The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.LineSegment1" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionIntersectLineLine.LineSegment2" /> properties hold the internal ids of the operators producing the line segments, and these operators must also be in the operators collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionExtractCorner 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.NumCorners">
            <summary>
Returns the number of corners found within the regions.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNumCorners</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Extracts a corner.
</summary>
            <param name="profile">
The corner is extracted and reported in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the regions selected space name was not found in the profile space tree.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfCorner</item>
                    <item>SfCornerInImage</item>
                    <item>SfCornerInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The corner was extracted successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The corner was extracted successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The corner was not extracted because not enough points were found to extract the corner, 
the corner was below the sharpness threshold or the corner index is outside the range. 
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FeatureNoExtracted </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfCorner</para>
                    <para>SfCornerInImage</para>
                    <para>SfCornerInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions of extracted line segment.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.CornerInImage3D">
            <summary>
Gets the corner extracted by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The corner position is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the corner was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.CornerInImage">
            <summary>
Gets the corner extracted by the execute method.
</summary>
            <remarks>
The corner position is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the corner was not extracted. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.Corner">
            <summary>
Gets the corner extracted by the execute method.  
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The corner position is in the ProfileSelectedSpaceName.
The corner returned is the corner specified by the cornerIndex property.
Returns null if the corner was not extracted. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.CornerIndex">
            <summary>
Gets or sets the CornerIndex.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCornerIndex</item>
                </list>
            </event>
            <remarks> 
The corner with the specified index to be returned as the found corner.
If more than one corner are found, the corners are sorted first and then
the corner with the index specified is returned.
</remarks>
            <exception cref="T:System.ArgumentException">
If the value is less than 0;
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.FilterHalfSizeInPixels">
            <summary>
Gets or sets the FilterHalfSizeInPixels. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFilterHalfSizeInPixels</item>
                </list>
            </event>
            <remarks> This field holds the half-length of the filter. The actual
  filter length is 1+2*(FilterHalfSizeInPixels). 
</remarks>
            <exception cref="T:System.ArgumentException">
If the value is less than 1;
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SortDirectionAngle">
            <summary>
Gets or sets the SortDirectionAngle. The default is 0.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSortDirectionAngle</item>
                </list>
            </event>
            <remarks> 
The field specifies the direction along which the SortType is applied to.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SharpnessThreshold">
            <summary>
Gets or sets the SharpnessThreshold. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSharpnessThreshold</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is less than 0 or greater than 65535
</exception>
            <remarks>
The sharpness threshold is the minimum value of the sharpness needed for the profile point to be treated
as corner. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SortType">
            <summary>
Gets or sets the SortType. Specifies how to sort the corners before finding
the one specified by the order number.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSortType</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.Polarity">
            <summary>
Gets or sets the corner polarity. Specifies the sign of the sharpness of the corner in the profile.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPolarity</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionExtractCorner.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionExtractCorner.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionExtractCorner object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionExtractCorner object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionExtractCorner object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfNumCorners">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NumCorners may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfCornerInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CornerInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfCornerInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CornerInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfCorner">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Corner may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfSharpnessThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SharpnessThershold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfFilterHalfSizeInPixels">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FilterHalfSizeInPixels may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfCornerIndex">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CornerIndex may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfSortDirectionAngle">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SortDirectionAngle may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfSortType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SortType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner.SfPolarity">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Polarity may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractCorner">
            <summary>
The class to extract a corner from profile points that are within the regions.
This operator holds a collection of regions. There must be always one region in the
collection. The user may add and delete any region as long as the count does not dip below 1.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionExtractPoint 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Extracts a point.
</summary>
            <param name="profile">
The point is extracted and reported in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the regions selected space name was not found in the profile space tree.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfPoint</item>
                    <item>SfPointInImage</item>
                    <item>SfPointInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The point was extracted successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The point was extracted successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The point was not extracted.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FeatureNoExtracted </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfPoint</para>
                    <para>SfPointInImage</para>
                    <para>SfPointInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions.
The output graphic is the point graphic.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.YTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the Y position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.XTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the X position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.PointInImage3D">
            <summary>
Gets the point extracted by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The point is in the SelectedSpaceName3D of the range image
stored in the profile.
</remarks>
            <exception cref="T:System.ArgumentException">
If the corner was not computed. 
The Cog3DVect3 is a ValueType and cannot return a null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.PointInImage">
            <summary>
Gets the point extracted by the execute method.
</summary>
            <remarks>
The point is in the SelectedSpaceName of the range image
stored in the profile.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.Point">
            <summary>
Gets the point extracted by the execute method.
</summary>
            <remarks>
The point is in the ProfileSelectedSpaceName.
Returns null if the point was not computed. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SetLineSegmentUsingOperator(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams,Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Sets the name of the operator producing LineSegment.
</summary>
            <param name="parentCollection">
The Cog3DRangeImageCrossSectionOperatorsParams collection that holds the
line segment operator.
</param>
            <param name="op">
The operator object producing LineSegment.
</param>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
This is a convenience setter for programmatic users to specify
the line segment using the operator's object. 
The operator is not held internally, it is used to extract
the internal unique id of the operator. The id is used 
by this operator at run time.
</remarks>
            <remarks>
The method can be called before the operator is
added to the collection.
</remarks>
            <exception cref="T:System.ArgumentException">
If operator is not found
in the parentCollection provided.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the parentCollection in null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionRelativeToLineSegment">
            <summary>
Gets or sets the direction of the point extraction relative to the line segment.
The value of this property will be used only if <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionSelectionMode" />
is set to <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromLineSegment" /></summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDirectionRelativeToLineSegment</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.LineSegment">
            <summary>
Gets or sets the name of the operator producing LineSegment.
The value of this property will be used only if <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionSelectionMode" />
is set to <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromLineSegment" /></summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineSegment</item>
                </list>
            </event>
            <remarks>
The property is a link between the operator producing the line segment and this operator, and
therefore requires that all operators are added to the collection before it can be called.
The name of the operator is not held internally. It is used to extract
the internal unique id of the operator within the collection.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If the operator is not in a collection.
</exception>
            <exception cref="T:System.ArgumentException">
If the name of the operator producing LineSegment is not found
in the collection.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.AngleSelectedSpace">
            <summary>
Gets or sets the selected space of the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.Angle" />.
The value of this property will be used only if <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionSelectionMode" />
is set to <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromAngle" /></summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAngleSelectedSpace</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.Angle">
            <summary>
Gets or sets the Angle in radians from the X-axis. 
The X-axis is either in profile default space or profile selected space based on the value of <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.AngleSelectedSpace" />
The value of this property will be used only if <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionSelectionMode" />
is set to <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromAngle" /></summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAngle</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionSelectionMode">
            <summary>
Gets or sets the how the direction of the point extraction will be specified.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfDirectionSelectionMode</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.PointType">
            <summary>
Gets or sets the point type. Specifies the point to extract.
The value of this property will be used only if <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.DirectionSelectionMode" />
is set to <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromPredefinedList" /></summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPointType</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is invalid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionExtractPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionExtractPoint.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionExtractPoint object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionExtractPoint object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionExtractPoint object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfDirectionRelativeToLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DirectionRelativeToLineSegment may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfAngle">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Angle may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfAngleSelectedSpace">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by AngleSelectedSpace may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfDirectionSelectionMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DirectionSelectionMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfPointInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfPointInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfPoint">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Point may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint.SfPointType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PointType may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPoint">
            <summary>
The class To extract a point.
This operator holds a collection of regions. There must be always one region in the
collection. The user may add and delete any region as long as the count does not dip below 1.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionExtractLineSegment 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Extracts a line segment.
</summary>
            <param name="profile">
The line segment is extracted and reported in the profile selected space name. 
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the regions selected space name was not found in the profile space tree.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfLineSegment</item>
                    <item>SfLineSegmentInImage</item>
                    <item>SfLineSegmentInImage3D</item>
                </list>
            </event>
            <remarks>
                <para>
The status returned can be one of the following:
<list type="bullet"><item> The line segment was extracted successfully and passed any enabled tolerance checking.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">Passed</see></item><item> The line segment was extracted successfully but failed tolerance checking
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FailedTolerance </see></item><item> The line segment was not extracted because because not enough points were found to extract the line.
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">FeatureNoExtracted </see></item></list></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.ClearResults">
            <summary>
Clear the results' properties of this class. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <para>SfRMSError</para>
                    <para>SfLineSegment</para>
                    <para>SfLineSegmentInImage</para>
                    <para>SfLineSegmentInImage3D</para>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
            <remarks>
The input graphics are the regions.
The output graphic is the line segment graphic.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.EndYTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the EndY position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.EndXTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the EndX position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.StartYTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the StartY position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.StartXTolerance">
            <summary>
Gets the Cog3DRangeImageCrossSectionTolerance object to 
tolerance the StartX position. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in profile selected space name.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.RMSTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">tolerance</see> object for 
the RMS error. 
</summary>
            <remarks>
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.AngleTolerance">
            <summary>
Gets the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">tolerance</see> object for 
the angle. 
</summary>
            <remarks>
The <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min" /> and 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max" /> values are specified in radians.
If the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled" /> property is set to true, the tolerance
check will be performed at run time.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.RMSError">
            <summary>
Gets the RMS error of the line segment.
</summary>
            <remarks>
RMS is the root mean squared perpendicular error between 
the line and all of the points in the user specified region
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.LineSegmentInImage3D">
            <summary>
Gets the line segment extracted by the execute method.
</summary>
            <remarks>
The line segment is in the SelectedSpaceName3D of the range image
stored in the profile.
Return null is the line segment was not computed.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.LineSegmentInImage">
            <summary>
Gets the line segment extracted by the execute method.
</summary>
            <remarks>
The line segment is in the SelectedSpaceName of the range image
stored in the profile.
Return null is the line segment was not computed.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.LineSegment">
            <summary>
Gets the line segment extracted by the execute method.
Always check the status of the operator to be either Passed or FailedTolerance before calling the getter.
</summary>
            <remarks>
The line segment is in the ProfileSelectedSpaceName.
Return null is the line segment was not computed.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionExtractLineSegment.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionExtractLineSegment.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionExtractLineSegment object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionExtractLineSegment object to be copied. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionExtractLineSegment object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.SfLineSegmentInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegmentInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.SfLineSegmentInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegmentInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.SfLineSegment">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LineSegment may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment.SfRMSError">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by RMSError may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractLineSegment">
            <summary>
The class to extract a line segment from a profile points that are within the regions.
This operator holds a collection of regions. There must be always one region in the
collection. The user may add and delete any region as long as the count does not dip below 1.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Parent">
            <summary>
Cognex Internal Use Only.
</summary>
returns the parent of the operator which is a pointer to OperatorsParams.
</member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.InternalID">
            <summary>
Cognex Internal Use Only.
</summary>
returns the internal unique ID of the operator
</member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionOperatorBase 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.GetDefaultRegion">
            <summary>
Gets the default location for a new region
The default location is a 10x10mm rectangle in the center of the profile
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SetRegionToDefaultLocation(System.Int32)">
            <summary>
Sets the region with the given index to the default region location
Cognex Internal Use Only.
</summary>
            <param name="idx">
The index of the region to be set to the default location.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.AddDefaultRegion">
            <summary>
Adds a new region to the operator with a default location
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.ImageUsedForProfileDisplay">
            <summary>
Cognex Internal Use Only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.CreateResultGraphics(Cognex.VisionPro.CogGraphicCollection,System.Boolean)">
            <summary>
Create the graphics and add them to the graphicCollection provided.. 
</summary>
            <param name="graphicCollection">
A constructed CogGraphicCollection.
</param>
            <param name="lastRun">
If lastRun is true, do not include the input graphics.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.ClearResults">
            <summary>
Clear the results' properties. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this method is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                    <item>SfResultObject</item>
                    <item>SfFeatureInImage</item>
                    <item>SfFeatureInImage3D</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.FeatureInImage3D">
            <summary>
If the operator produces a feature, the feature is returned
in the range image SelectedSpaceName3D stored in the profile.
The FeatureInImage3D is available after the operator was run.
The FeatureInImage3D is set to null at the beginning of the tool run.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFeatureInImage3D</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.FeatureInImage">
            <summary>
If the operator produces a feature, the feature is returned
in the range image SelectedSpaceName stored in the profile.
The FeatureInImage is available after the operator was run.
The FeatureInImage is set to null at the beginning of the tool run.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFeatureInImage</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.ResultObject">
            <summary>
Gets the ResultObject of the operator.
The ResultObject is available after the operator was run.
The ResultObject is set to null at the beginning of the tool run.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfResultObject</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.GetNamesOfOperatorsByType(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants)">
            <summary>
Gets the names of the operators by output type from the OperatorsParams 
collection.
It returns only the operators that are listed prior to this operator
in the OperatorsParams collection.
Returns null if no operator was found.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Runs the operator. 
</summary>
            <param name="profile">
The profile.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.OutputType">
            <summary>
Gets the OutputType of the operator.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Name">
            <summary>
Gets or sets the name of the operator.
When the operator is within a collection, the name is checked for uniqueness.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfName</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the supplied argument is null or contains white spaces.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied argument is not unique.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Status">
            <summary>
Gets the status.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.CombineGraphicsEnabled">
            <summary>
Gets or sets the CombineGraphicsEnabled.
When true, the combined graphics will be displayed in the last run record.
Combined graphics usually are the features or measurements produced by an 
operator.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCombineGraphicsEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.OutputGraphicsEnabled">
            <summary>
Gets or sets the OutputGraphicsEnabled.
When true, the output graphics will be displayed in the current record.
Output graphics usually are the features or measurements produced by an 
operator.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfOutputGraphicsEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.InputGraphicsEnabled">
            <summary>
Gets or sets the InputGraphicsEnabled.
When true, the input graphics will be displayed in the current record.
Input graphics usually are the regions.
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputGraphicsEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SelectedRegionIndex">
            <summary>
Cognex Internal Use Only. 
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Regions">
            <summary>
Gets the Regions. The regions property is a collection of ICogRegion. 
</summary>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRegions</item>
                </list>
            </event>
            <remarks> Extract operator creates one region during construction. 
The last region cannot be deleted. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Tolerances(System.String)">
            <summary>
Gets the Tolerance object of an item specified by name. 
if name is not found, the return is null.
</summary>
            <param name="name">
The name of the tolerance object requested. 
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.ToleranceCollection">
            <summary>
Gets the ToleranceCollection. The ToleranceCollection is initialiazed by the operator and the user
will not be able to delete or add to it. Each operator adds a pre-defined set based on the operator 
result object. By default, all tolerances are disabled.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionOperatorBase.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionOperatorBase.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionOperatorBase object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionOperatorBase object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants)">
            <summary>
Construct a default Cog3DRangeImageCrossSectionOperatorBase object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfFeatureInImage3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FeatureInImage3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfFeatureInImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FeatureInImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfToleranceCollection">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ToleranceCollection may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfSelectedRegionIndex">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SelectedRegionIndex may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfRegions">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Regions may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfCombineGraphicsEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CombinedGraphicsEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfOutputGraphicsEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by OutputGraphicsEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfInputGraphicsEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputGraphicsEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfResultObject">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ResultObject may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfStatus">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Status may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.SfName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Name may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase">
            <summary>
The Cross Section operator base class.
The class holds common properties across operators. 
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionProfileParams 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
The execute method in this class is responsible for:
<list type="bullet"><item>Fixturing the profile: adding a user defined space 
to the profile space tree in the output profile  (optional)
</item><item> Running the operators. The operators are run in the resulting
profile space. The operators interpret their regions in that space 
and produce results in that space.
</item></list></summary>
            <param name="profile">
The profile.
</param>
            <exception cref="T:System.ArgumentNullException">
                <para> If the supplied profile is null. </para>
                <para> If the ProfileNewSpaceName is null and ProfileSpaceSelection 
is set to New.
</para>
                <para> If the ProfileExistingSpaceName is null and ProfileSpaceSelection 
is set to Existing.
</para>
            </exception>
            <exception cref="T:System.ArgumentException">
If the supplied profile is invalid.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing bit for this class cannot be confirmed.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when execute is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.IsNameUnique(System.String)">
            <summary>
Checks if the name is unique within the collection.
Return true if unique, false otherwise.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileExistingSpaceName">
            <summary>
Gets or sets the ProfileExistingSpaceName.
</summary>
            <value>
The default is null.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is null or an empty string.
</exception>
            <remarks>
The name of the OutputProfile.ProfileSelectedSpaceName 
when the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileSpaceSelection" /> is 
<see cref="!:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants">Existing</see>.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileNewSpaceName">
            <summary>
Gets or sets the ProfileNewSpaceName.
</summary>
            <value>
The default is null.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is null or an empty string.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
if the value is not a valid syntax.
</exception>
            <remarks>
This is the space name of the DefaultFromNewTransform.
The name of the OutputProfile.ProfileSelectedSpaceName  
when the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileSpaceSelection" /> is 
<see cref="!:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants">New</see>.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.DefautFromNewTransform">
            <summary>
Gets or sets the DefaultFromNewTransform.
</summary>
            <value>
The default is an identity transform.
</value>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <remarks>
Defines the transform that will be added to the ProfileSpaceTree at runtime 
when the <see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileSpaceSelection" /> is 
<see cref="!:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants">New</see>.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SelectedOperatorIndex">
            <summary>
Gets or sets the SelectedOperatorIndex.
</summary>
            <value>
The default is 0.
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied value is out of range.
</exception>
            <remarks>
The Cross Section tool CreateCurrentRecord() method will create
the graphics only for the selected operator.
This property is used by the control, it is attached to the selected opertor
in the grid.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.InternalProfile">
            <summary>
Internal Cognex use only.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileSpaceSelection">
            <summary>
Gets or sets the ProfileSpaceSelection. 
</summary>
            <value>
The default is Default.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfProfileSpaceSelection</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied value is out of range.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.PinRegions">
            <summary>
Gets or sets the PinRegions.
</summary>
            <value>
The default is false.
</value>
            <remarks> 
The PinRegions allows the user to pin the profile regions specified in the operators 
to their current location while the user is changing the profile space selection or 
the new space transform. The profile regions with the default selected space name 
equal to “.” will be updated. 
The profile regions with any other selected space name will not be pinned, updated or modified.
The PinRegions applies only during setup of the Cross Section tool, it is ignored at runtime. 
This property is only used by the control; the programmatic interface ignores this property.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.Status">
            <summary>
Gets the status.
</summary>
            <value>
The default is true.
</value>
            <remarks>
The status is set at runtime.
The overall status of executing all the operators. 
True indicates that all the operators passed. False indicates at least one operator failed. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.OnDeserialization(System.Object)">
            <summary>
Internal Cognex use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionOperatorsParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionOperatorsParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionOperatorsParams object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionOperatorsParams object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionOperatorsParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfInternalProfile">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InternalProfile may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfSelectedOperatorIndex">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SelectedOperatorIndex may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfProfileExistingSpaceName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileExistingSpaceName may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfProfileSpaceSelection">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileSpaceSelection may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfProfileNewSpaceName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileNewSpaceName may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfDefautFromNewTransform">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by DefaultFromNewTransform may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfPinRegions">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PinRegions may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.SfStatus">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Status may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">
            <summary>
the Cross Section operators collection class.
</summary>
            <remarks>
The operators collection is responsible for optionally fixturing the profile and managing 
all the operators.
<para>
The operators are the methods for extracting features from the profile, computing features 
based on other features, and making measurements. Each operator will produce either a single feature
(like a point, or a line segment) or a single measurement (like a distance, or an angle).  
</para><para>
Operators that extract a feature from the profile data typically require the user to provide 
one or more regions (in the selected profile space). These regions identify the subset of the 
profile data that should be used during feature extraction. The extracted feature can then be 
used by other operators for additional computation or measurement.
</para><para>
Operators that make computations or measurements using extracted features never take the 
features themselves as inputs.  Instead, these operators accept a reference to the operator 
that produces the feature. The concept of referencing operators is similar to linking a property 
from one tool to the next. This concept fits nicely here because we execute the operators 
in sequence and each operator produce a single object so there is no ambiguity.
</para><para>
The operators are not meant to be used standalone. 
It is recommended that the operator is added to the collection and then configured. 
This sequence is very important for the operators that reference other operators. 
The paradigm of the operators is closely aligned with a tool group, for example 
you cannot link the properties of a tool to other tools without adding the tool 
first to the tool group. The operators that reference other operators are linking the operators together. 
</para><para>
The overall status of executing all the operators is set in the status property. The status type is Boolean. 
True indicates that all the operators passed. False indicates at least one operator failed. 
</para><para>
The operator can be added only to one collection. The operator internal unique id within a collection is set 
at the time the operator is added. Once the id is set, adding the operator to another collection will not be
allowed.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.PointsBelowReferenceProfileAreValid">
            <summary>
Returns true when values of the FarthestPointBelowReferenceProfile and
ClosestPointBelowReferenceProfile have been successfully computed.
Otherwise returns false. 
When computing these points only those points of the profile are considered valid 
that are in region and the difference at those points between the profile 
and the input shapes is outside the height threshold
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.PointsAboveReferenceProfileAreValid">
            <summary>
Returns true when values of the FarthestPointAboveReferenceProfile and
ClosestPointAboveReferenceProfile have been successfully computed.
Otherwise returns false. 
When computing these points only those points of the profile are considered valid 
that are in region and the difference at those points between the profile 
and the input shapes is outside the height threshold
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.LeftAndRightPointsAreValid">
            <summary>
Returns true when values of the LeftPoint and RightPoint have been successfully computed.
Otherwise returns false. 
When computing these points only those points of the profile are considered valid 
that are in region and the difference at those points between the profile 
and the input shapes is outside the height threshold
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.RightPoint">
            <summary>
Gets the calculated rightmost point on the input profile. 
The point has to be in range, the difference cannot be 0 
and it has to be outside the height threshold.
</summary>
            <exception cref="!:T:System.ArgumentException">
when PointsAreValid is False.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.LeftPoint">
            <summary>
Gets the calculated leftmost point on the input profile. 
The point has to be in range, the difference cannot be 0 
and it has to be outside the height threshold.
</summary>
            <exception cref="!:T:System.ArgumentException">
when PointsAreValid is False.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.ClosestPointBelowReferenceProfile">
            <summary>
Gets the calculated point (if exists) of the input profile  
that is below the reference profile and 
where the difference is the minimum between the input profile and
the reference profile
The difference is measured in the profile image’s Y direction. 
The point has to be in range, the difference cannot be 0 and it has to be 
outside the height threshold.
</summary>
            <exception cref="!:T:System.ArgumentException">
when PointsBelowReferenceProfileAreValid is False.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.FarthestPointBelowReferenceProfile">
            <summary>
Gets the calculated point (if exists) of the input profile
that is below the reference profile and 
where the difference is the maximum between the input profile and
the reference profile
The difference is measured in the profile image’s Y direction. 
The point has to be in range, the difference cannot be 0 and it has to be 
outside the height threshold.
</summary>
            <exception cref="!:T:System.ArgumentException">
when PointsBelowReferenceProfileAreValid is False.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.ClosestPointAboveReferenceProfile">
            <summary>
Gets the calculated point (if exists) of the input profile  
that is above the reference profile and 
where the difference is the minimum between the input profile and
the reference profile
The difference is measured in the profile image’s Y direction. 
The point has to be in range, the difference cannot be 0 and it has to be 
outside the height threshold.
</summary>
            <exception cref="!:T:System.ArgumentException">
when PointsAboveReferenceProfileAreValid is False.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.FarthestPointAboveReferenceProfile">
            <summary>
Gets the calculated point (if exists) of the input profile
that is above the reference profile and 
where the difference is the maximum between the input profile and
the reference profile
The difference is measured in the profile image’s Y direction. 
The point has to be in range, the difference cannot be 0 and it has to be 
outside the height threshold.
</summary>
            <exception cref="!:T:System.ArgumentException">
when PointsAboveReferenceProfileAreValid is False.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.Area">
            <summary>
Gets the calculated area value. The value of the area depends 
on the measurement position of Positive / Negative / Both
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionAreaResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionAreaResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult)">
            <summary>
Copy constructs a Cog3DRangeImageCrossSectionAreaResult object. This is a
deep copy.
</summary>
            <param name="other">
The result object to be copied. May not be null.
</param>
            <exception cref="!:T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.#ctor(System.Double,System.Boolean,Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2,System.Boolean,Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2,System.Boolean,Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Constructs a Cog3DRangeImageCrossSectionAreaResult object.
</summary>
            <param name="area">
The are value.
</param>
            <exception cref="!:T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization construct a Cog3DRangeImageCrossSectionAreaResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaResult">
            <summary />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionProfileParams 
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Creates the profile.
</summary>
            <returns>
The Cog3DRangeImageCrossSectionProfile.
</returns>
            <param name="image">
The range image.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If the supplied input image argument is not a CogImage16Range.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
If the supplied input image argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this class cannot be confirmed.
</exception>
            <exception cref="T:System.ArgumentException">
If the region is less than 2 pixels in width or less than 1 pixel in height.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.ProfileDefaultSpaceName">
            <summary>
Gets or sets the ProfileDefaultSpaceName.
</summary>
            <value>
The default is "Profile2D"
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfProfileDefaultSpaceName</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the supplied argument is null or an empty string.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
if the value is not a valid syntax.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.Region">
            <summary>
Gets or sets the 2D region in the range image.
</summary>
            <value>
The default is a default constructed region.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRegion</item>
                </list>
            </event>
            <remarks>
The region is an affine rectangle that lies in the image X-Y plane of 
the range image. It is specified in any space within the 2D 
coordinate space tree of the range image.
The region must be at least 2 pixel in width and 1 pixel in height.
A run time error is returned if the region does not meet the requrements.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionProfileParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionProfileParams.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionProfileParams object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionProfileParams object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionProfileParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.SfProfileDefaultSpaceName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileDefaultSpaceName may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams.SfRegion">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Region may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileParams">
            <summary>
The Cross Section profile params class.
It is a lightweight class with two properties: a region specified in the range image 2D selected space name and
the ProfileDefaultSpaceName.
The execute method creates the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile">profile</see>. 
The region specifies how the slice is aligned with the part in the range image. 
The region in this tool is very similar to the region used in the caliper tool. 
The region is limited to an affine rectangle like the region in the caliper tool.
</summary>
            <remarks>
The origin of the default profile space is defined by the rectangle that specifies the cutting plane:
The profile default space x-axis begins at the start point of the cutting plane rectangle (start of the region). 
The end point of the cutting plane rectangle identifies the positive direction of the x-axis (end of the region). 
The start point of the profile is always associated with midpoint of the region affine rectangle between CornerOrigin and CornerY.
The profile default space y-axis begins where image z is equal to 0 in the range image. 
The default y axis is directed out of the range image, straight toward the viewer, through the “start” point.  
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionProfile object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetBoundingBoxInProfileDefaultSpace">
            <summary>
Gets the bounding rectangle of the profile in ProfileDefaultSpace
Returns null if the ProfileRoot is null.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ImageUsedForProfileDisplay">
            <summary>
Cognex Internal use only.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.BuildProfileGraphics(System.Boolean)">
            <summary>
Creates the profile graphics for the current and the last run records.
</summary>
            <param name="bLastRunRecord">
When true (in case of CombinedGraphics record), the coordinate x-axis is drawn closer to the profile data.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.BuildProfileSharpnessGraphics(Cognex.VisionPro.CogGraphicCollection,System.Int32,System.Double)">
            <summary>
Creates the profile sharpness graphics used as a visual aid
with the extract corner operator.
</summary>
            <param name="profileGraphics">
The constructed graphic collection returned from BuildProfileGraphics().
</param>
            <param name="filterHalfSizeInPixels">
The filter half size used to apply to the profile data and generate the sharpness data.
</param>
            <param name="sharpnessThreshold">
The sharpness threshold to draw the cutoff lines.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetUniqueSpaceName">
            <summary>
Returns a unique space name within the ProfileSpaceTree.
The name will have Fixture as a base and the next available
index such as Fixture1 or Fixture2.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetProfileSSNParent">
            <summary>
Returns the parent space name of the ProfileSelectedSpaceName.
Returns null if the ProfileSpaceTree is null.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetProfileDefaultSpace">
            <summary>
Returns the first space in the ProfileSpaceTree.
The value is the ProfileDefaultSpaceName specified by
the tool that creates the profile.
</summary>
            <exception cref="T:System.ArgumentException">
If the ProfileSpaceTree has no spaces in it.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.CuttingPlane">
            <summary>
Returns the cutting plane. 
The cutting plane lies parallel to the image z-axis of the range image 
at the centerline of the region.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.MapCircleToRangeImage3D(Cognex.VisionPro.CogCircle,System.String)">
            <summary>
Maps a profile circle to a circle in the range image SelectedSpaceName3D.
</summary>
            <param name="profileCircle">
The circle in the profile.
</param>
            <param name="spaceName">
The 3D space name from the CoordinateSpaceTree3D.
</param>
            <returns>
A Cog3DCircle in the spaceName specified.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the spaceName is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the CoordinateSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSelectedSpaceName is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
If the spaceName is not found in the CoordinateSpaceTree3D.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.MapCircleToRangeImage(Cognex.VisionPro.CogCircle,System.String)">
            <summary>
Maps a profile circle to a line segment in the range image SelectedSpaceName.
</summary>
            <param name="profileCircle">
The circle in the profile.
</param>
            <param name="spaceName">
The 2D space name from the CoordinateSpaceTree.
</param>
            <returns>
A CogLineSegment in the spaceName specified.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the spaceName is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the CoordinateSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSelectedSpaceName is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
If the spaceName is not found in the CoordinateSpaceTree.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.MapLineSegmentToRangeImage3D(Cognex.VisionPro.CogLineSegment,System.String)">
            <summary>
Maps a profile line segment to a line segment in the range image SelectedSpaceName3D.
</summary>
            <param name="profileLineSeg">
The line segment in the profile.
</param>
            <param name="spaceName">
The 3D space name from the CoordinateSpaceTree3D.
</param>
            <returns>
A Cog3DLineSeg in the spaceName specified.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the spaceName is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the CoordinateSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSelectedSpaceName is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
If the spaceName is not found in the CoordinateSpaceTree3D.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.MapLineSegmentToRangeImage(Cognex.VisionPro.CogLineSegment,System.String)">
            <summary>
Maps a profile line segment to a line segment in the range image SelectedSpaceName.
</summary>
            <param name="profileLineSeg">
The line segment in the profile.
</param>
            <param name="spaceName">
The 2D space name from the CoordinateSpaceTree.
</param>
            <returns>
A CogLineSegment in the spaceName specified.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the spaceName is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the CoordinateSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSelectedSpaceName is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
If the spaceName is not found in the CoordinateSpaceTree.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.MapPointToRangeImage3D(System.Double,System.Double,System.String)">
            <summary>
Maps a profile point to a point in the range image SelectedSpaceName3D.
</summary>
            <param name="profilePointX">
The x-coordinate of the profile point.
</param>
            <param name="profilePointY">
The y-coordinate of the profile point.
</param>
            <param name="spaceName">
The 3D space name within the CoordinateSpaceTree3D.
</param>
            <returns>
A point in the spaceName specified as a Cog3DVect3 object.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the spaceName is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the CoordinateSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSelectedSpaceName is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
If the spaceName is not found in the CoordinateSpaceTree3D.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.MapPointToRangeImage(System.Double,System.Double,System.String,System.Double@,System.Double@)">
            <summary>
Maps a profile point to a point in the range image SelectedSpaceName.
</summary>
            <param name="profilePointX">
The x-coordinate of the profile point.
</param>
            <param name="profilePointY">
The y-coordinate of the profile point.
</param>
            <param name="spaceName">
The 2D space name within the CoordinateSpaceTree.
</param>
            <param name="mappedX">
The resulting mapped x-coordinate in the spaceName specified.
</param>
            <param name="mappedY">
The resulting mapped Y-coordinate in the spaceName specified.
</param>
            <exception cref="T:System.ArgumentNullException">
If the spaceName is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the CoordinateSpaceTree is null.
</exception>
            <exception cref="T:System.ArgumentNullException">
If the ProfileSelectedSpaceName is null.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
If the spaceName is not found in the CoordinateSpaceTree.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.Copy">
            <summary>
Shallow copy of the profile.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.PixelFromRootTransform">
            <summary>
Gets the PixelFromRootTransform. The transform is computed from PixelFromRootTransform3D.
Returns null if PixelFromRootTransform3D is null.
</summary>
            <value>
The default is set when the profile is created.
</value>
            <remarks>
The below ground transform, also known as the pixel from 
root transform, records how the range image pixels within 
the region were transformed and mangled to become the profile.  
This transform links the range image coordinate spaces to the 
profile spaces and define the bond between the range image 
pixels and the profile data.
</remarks>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPixelFromRootTransform</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.PixelFromRootTransform3D">
            <summary>
Gets or sets the PixelFromRootTransform3D.
</summary>
            <value>
The default is set when the profile is created.
</value>
            <remarks>
The below ground transform, also known as the pixel from 
root transform, records how the range image pixels within 
the region were transformed and mangled to become the profile.  
This transform links the range image coordinate spaces to the 
profile spaces and define the bond between the range image 
pixels and the profile data.
</remarks>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPixelFromRootTransform3D</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
If the value is null.
</exception>
            <remarks>
It is not recommended to overwrite the transform.
The integrity of the profile will break and the
tool may not operate properly.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ProfileSelectedSpaceName">
            <summary>
Gets or sets the ProfileSelectedSpaceName
</summary>
            <value>
The default is set when the profile is created.
The value depends on the OperatorsParams.ProfileSpaceSelection and
ProfileParams.ProfileDefaultSpaceName.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfProfileSelectedSpaceName</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentException">
if the value is null or empty string.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
if the value is not a valid syntax.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ProjectionHeight">
            <summary>
Gets the ProjectionHeight.
</summary>
            <remarks>
The number of pixels in the projection direction will also be contained in the profile. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.CoordinateSpaceTree">
            <summary>
Gets or sets the CoordinateSpaceTree.
</summary>
            <remarks>
The CoordinateSpaceTree will contain a reference to the
CoordinateSpaceTree held by the range image. 
</remarks>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCoordinateSpaceTree</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
If the value is null.
</exception>
            <remarks>
It is not recommended to overwrite the tree.
The integrity of the profile will break and the
tool may not operate properly.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ProfileRoot">
            <summary>
Gets the ProfileRoot. The ProfileRoot object contains
the profile height data and the weights.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SelectedSpaceName3D">
            <summary>
Gets or sets the SelectedSpaceName3D.
</summary>
            <value>
The default is null.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is null or an empty string.
</exception>
            <remarks>
The SelectedSpaceName3D is used to map the features found in the profile to the range image.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SelectedSpaceName">
            <summary>
Gets or sets the SelectedSpaceName.
</summary>
            <value>
The default is null.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is null or an empty string.
</exception>
            <remarks>
The SelectedSpaceName is used to map the features found in the profile to the range image.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.CoordinateSpaceTree3D">
            <summary>
Gets or sets the CoordinateSpaceTree3D.
</summary>
            <value>
The CoordinateSpaceTree3D will contain the "Sensor3D" space. 
Eventually it will hold a reference to the range image 
CoordinateSpaceTree3D.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCoordinateSpaceTree3D</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
If the value is null.
</exception>
            <remarks>
It is not recommended to overwrite the tree.
The integrity of the profile will break and the
tool may not operate properly.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ProfileSpaceTree">
            <summary>
Gets or sets the ProfileSpaceTree.
</summary>
            <value>
The ProfileSpaceTree, when the profile is created, will contain one space to convert the 
profile data to physical units of the range image.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfProfileSpaceTree</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
If the value is null.
</exception>
            <remarks>
The profile space tree stores a family of 2D coordinate spaces that 
lie within the cutting plane.  These profile spaces are typically 
expressed in physical units (e.g. millimeters), with x and y axes 
that are orthogonal in physical space.
<para>
It is not recommended to overwrite the tree.
The integrity of the profile will break and the
tool may not operate properly.
</para></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetWeights">
            <summary>
Gets the weights for each height value in the profile data.
The weight will indicate the number of pixels contributing 
to the height value in the corresponding profile datum. 
The weight value is between 0 and 1. A value of 0 indicates 
that all pixels contributing to the height are missing. 
Returns null if the ProfileRoot is null.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetProfileDataInRangeImageSelectedSpaceName3D(System.String)">
            <summary>
Returns the profile data in the specified 3D space that can be found in the 
CoogrdinateSpaceTree3D of the range image. 
Each point in the profile is mapped back to the specified 3D space,
packaged as a Cog3DVect3 object, and added to the Cog3DVect3Collection.
Returns null if the ProfileRoot is null, or if the 
profile has zero points.
</summary>
            <param name="ssn3D">
A user specified profile selected space name. 
If the value is null or ".", then the SelectedSpaceName3D
is used.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
if the ssn is not in the tree.
</exception>
            <remarks>
The user should rely on the weights array (returned by GetWeights()) 
to determine what action to take with regards to non-visible pixels.  
The weights array is of the same size as the profile data array, 
and should be used to determine which points in the profile data are "missing".  
Any point whose weight is zero is considered "missing" and should not be 
examined: its height (z-value) is meaningless.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetProfileDataInProfileSelectedSpaceName(System.String)">
            <summary>
Returns the profile data in the specified space. 
Each point in the profile is mapped from pels to the specified space,
packaged as a Cog3DVect2 object, and added to the Cog3DVect2Collection.
Returns null if the ProfileRoot is null, or if the 
profile has zero points.
</summary>
            <param name="ssn">
A user specified profile selected space name. 
If the value is null or ".", then the ProfileSelectedSpaceName
is used.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
if the ssn is not in the tree.
</exception>
            <remarks>
The user should rely on the weights array (returned by GetWeights()) 
to determine what action to take with regards to non-visible pixels.  
The weights array is of the same size as the profile data array, 
and should be used to determine which points in the profile data are "missing".  
Any point whose weight is zero is considered "missing", and should not be 
examined: its height (y-value) is meaningless.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.GetProfileData">
            <summary>
Gets the profile height data in pixels.
Returns null if the ProfileRoot is null.
</summary>
            <remarks>
The user should rely on the weights array (returned by GetWeights()) 
to determine what action to take with regards to non-visible pixels.  
The weights array is of the same size as the profile data array, 
and should be used to determine which points in the profile data are "missing".  
Any point whose weight is zero is considered "missing", and should not be 
examined: its height (y-value) is meaningless.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionProfile.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionProfile.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionProfile object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionProfile object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionProfile object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfSelectedSpaceName3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SelectedSpaceName3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfSelectedSpaceName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by SelectedSpaceName may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfCuttingPlane">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CuttingPlane may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfPixelFromRootTransform">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PixelFromRootTransform may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfCoordinateSpaceTree">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CoordinateSpaceTree may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfPixelFromRootTransform3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by PixelFromRootTransform3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfCoordinateSpaceTree3D">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CoordinateSpaceTree3D may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfProfileSelectedSpaceName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileSelectedSpaceName may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfProfileSpaceTree">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileSpaceTree may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfProjectionHeight">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProjectionHeight may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.SfProfileRoot">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ProfileRoot may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile">
            <summary>
The Cross Section profile class.
</summary>
            <remarks>
The profile is the new image-like container of the 1-D height data.
It holds the one-dimensional height data and the one-dimensional 
weight data produced by projection. The profile resembles a 1-D range image, 
but it is not a true image.  It does not support the ICogImage interface. 
And the data it holds is a "sideways" view of the original image.
<para>
Similar to the image, the profile also has a profile selected space name. 
All positional measurements from the operators will be reported in the profile selected space name.
</para><para>
To map points from the profile data back to the range image and to perform the mapping in the 2D and 3D user defined spaces, the profile holds on to:
<list type="bullet"><item>The 3D coordinate space tree of the range image</item><item>The 2D coordinate space tree of the range image </item><item>	A 3D below ground transform linking the profile data to the range image pixels</item><item>A 2D below ground transform linking the profile data to the range image pixels</item></list></para><para>
There is no default constructor for the profile. It must be created by
running the tool.
</para></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for ProfileData and Weights vector objects.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionProfileRoot object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.GetWeights">
            <summary>
Gets the weights. The weight value is between 0 and 1.
Returns null if the raw data is null.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.GetProfileData">
            <summary>
Gets the profile height data in pixels.
Returns null if the raw data is null.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionProfileRoot.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionProfileRoot.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionProfileRoot object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionProfileRoot object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.#ctor">
            <summary>
Construct a default Cog3DRangeImageCrossSectionProfileRoot object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileRoot">
            <summary>
The Cross Section profile root class. This class hold the actual
raw height and weight values of the profile. 
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImageCrossSectionTolerance  
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.isAngle">
            <summary>Return true if the name is Angle.</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Max">
            <summary>Gets or sets the maximum value to use for tolerance.
</summary>
            <value>Default value is 0.</value>
            <remarks>
If Min is less than Max, then Min value will be changed to be equal 
to Max.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfMax</item>
                    <item>SfMin</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Min">
            <summary>Gets or sets the minimum value to use for tolerance.
</summary>
            <value>Default value is 0.</value>
            <remarks>
If Max is less than Min, then Max value will be changed to be equal 
to Min.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
</para>
                <list type="bullet">
                    <item>SfMin</item>
                    <item>SfMax</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Enabled">
            <summary>If True, the operator will check at run time
that the value is within the Min and Max values.
</summary>
            <value>Default value is false.</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the value of this property changes.
<list type="bullet"><item>SfEnabled</item></list></para>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Name">
            <summary>
Gets the name of the item being toleranced.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Finalize">
            <summary>
Finalize this Cog3DRangeImageCrossSectionTolerance.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.Dispose">
            <summary>
Destruct this Cog3DRangeImageCrossSectionTolerance.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.#ctor(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance)">
            <summary>
Construct a deep copy of the supplied 
Cog3DRangeImageCrossSectionTolerance
object.
</summary>
            <param name="other">
The Cog3DRangeImageCrossSectionTolerance object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.#ctor(System.String)">
            <summary>
Construct a default Cog3DRangeImageCrossSectionTolerance object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.SfNextSf">
            <summary>
NextSf state flag.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.SfMax">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Max may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.SfMin">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Min may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance.SfEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Enabled may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionTolerance">
            <summary>
A common class to define the tolerance for a property.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointLineSegmentDirectionConstants">
            <summary>
An enumeration that specifies the direction of the extraction with respect to the given line segment
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointLineSegmentDirectionConstants.RightPerpendicular">
            <summary>
In the direction of the right perpendicular of the line segment
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointLineSegmentDirectionConstants.LeftPerpendicular">
            <summary>
In the direction of the left perpendicular of the line segment
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointLineSegmentDirectionConstants.OppositeOfLineSegment">
            <summary>
In the opposite direction of the line segment
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointLineSegmentDirectionConstants.AlongLineSegment">
            <summary>
In the direction of the line segment
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionSpaceSelectionConstants">
            <summary>
An enumeration that specifies whether a value should be understood in profile default space or profile selected space
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionSpaceSelectionConstants.ProfileSelectedSpace">
            <summary>
The value is specified in ProfileSelectedSpace
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionSpaceSelectionConstants.ProfileDefaultSpace">
            <summary>
The value is specified in ProfileDefaultSpace
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants">
            <summary>
An enumeration that specifies how the direction of the point extarction extraction will be defined.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromLineSegment">
            <summary>
The direction is specified by a line segment
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromAngle">
            <summary>
The direction is specified by a user given angle
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionExtractPointDirectionSelectionModeConstants.DirectionFromPredefinedList">
            <summary>
The direction is specified by one of the points from the predefined list: top, left, etc...
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaMeasurementInputPointTypeConstants.AboveThresholdPoint">
            <summary>
The point of the input profile had a value outside the threshold
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaMeasurementInputPointTypeConstants.InRegionPoint">
            <summary>
The point of the input profile was in the given regions
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaMeasurementInputPointTypeConstants.FilledPoint">
            <summary>
The point of the input profile was missing but has been filled before the measurement
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaMeasurementInputPointTypeConstants.MissingPoint">
            <summary>
The point of the input profile was missing
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants">
            <summary>
An enumeration that specifies the point to find within one or more
profile regions.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants.ClosestPointBelowReferenceProfile">
            <summary>
ClosestPointBelowReferenceProfile of the AreaResult (if exist): 
the closest point below the reference profile.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants.FarthestPointBelowReferenceProfile">
            <summary>
FarthestPointBelowReferenceProfile of the AreaResult (if exist): 
the farthest point below the reference profile.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants.ClosestPointAboveReferenceProfile">
            <summary>
ClosestPointAboveReferenceProfile of the AreaResult (if exist): 
the closest point above the reference profile.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants.FarthestPointAboveReferenceProfile">
            <summary>
FarthestPointAboveReferenceProfile of the AreaResult (if exist): 
the farthest point above the reference profile.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants.RightPoint">
            <summary>
RightPoint of the AreaResult (if exist): the point with the highest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaPointTypeConstants.LeftPoint">
            <summary>
LeftPoint of the AreaResult (if exist): the point with the lowest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaInputOperatorTypeConstants.Circle">
            <summary>
The input operator is one that provides CogCircle as output.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaInputOperatorTypeConstants.LineSegment">
            <summary>
The input operator is one that provides CogLineSegment as output.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaReferenceProfileCreationConstants">
            <summary>
Parameters for creating the reference profile from the input shapes.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaReferenceProfileCreationConstants.CreateFromLowest">
            <summary>
Create the reference profile from the lowest shapes.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaReferenceProfileCreationConstants.CreateFromHighest">
            <summary>
Create the reference profile from the highest shapes.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaConstants">
            <summary>
An enumeration that specifies which area is being measured
- above the reference profile and below the input profile
- bwloe the reference profile and above the input profile
- above and below the reference profile and they added together
- above and below the reference profile and the below the below area is substracted from the above area
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaConstants.AreaAboveMinusAreaBelow">
            <summary>
The area being measured is both the above and below part and 
the below area is subtracted from the above area
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaConstants.AreaAbovePlusAreaBelow">
            <summary>
The area being measured is both the above and below part and they are added together
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaConstants.AreaBelowReferenceProfile">
            <summary>
The area being measured is below the reference profile and above the input profile
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionAreaConstants.AreaAboveReferenceProfile">
            <summary>
The area being measured is above the reference profile and below the input profile
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordDiagConstants">
            <summary>
Enumeration of diagnostic data that can be provided in the
Tool's LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordDiagConstants.All">
            <summary>
Include all of the diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordDiagConstants.Region">
            <summary>
Include a copy of the region in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordConstants">
            <summary>
Enumeration of non-diagnostic data that can be provided in
the Tool's LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordConstants.All">
            <summary>
Include all of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordConstants.Measurements">
            <summary>
Include only the measurements in the LastRunRecord.CombinedGraphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordConstants.Features">
            <summary>
Include only the features in the LastRunRecord.CombinedGraphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCurrentRecordConstants.FixturedCoordinateAxes">
            <summary>
Include the fixtured coordinate space origin
in the CurrentRecord.Profile
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCurrentRecordConstants.Region">
            <summary>
Include the (interactive) region to be used as a mask
in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants">
            <summary>
An enumeration that specifies the status of an operator when run.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.InputFeatureMissing">
            <summary>
The operator ran but one or more of its input operators were not found.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.FailedToMeasure">
            <summary>
The operator ran but failed to produce a measurement.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.FeatureNotExtracted">
            <summary>
The operator ran but failed to extract a feature.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.FeatureNotComputed">
            <summary>
The operator ran but failed to compute a feature.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.FailedTolerance">
            <summary>
The operator ran but one or more of the tolerances failed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.Passed">
            <summary>
The operator ran and passed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorResultConstants.NotRun">
            <summary>
The operator has not been run.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants">
            <summary>
An enumeration that specifies the 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorBase.OutputType" />
of an operator.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants.Circle">
            <summary>
The operator output is a Circle.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants.AreaResult">
            <summary>
The operator output is a AreaStatistics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants.Value">
            <summary>
The operator output is a numerical value.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants.Angle">
            <summary>
The operator output is an angle: a double value,
measured in radians.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants.LineSegment">
            <summary>
The operator output is a CogLineSegment.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOutputTypeConstants.Point">
            <summary>
The operator output is a CogPointMarker.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants">
            <summary>
An enumeration that specifies which profile coordinate space will
be used as the 
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ProfileSelectedSpaceName">
selected profile space</see> when the
<see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams">
operators</see> are executed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants.New">
            <summary>
A new profile coordinate space will created and used as the
selected profile space.  The name of the new space is given by
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileNewSpaceName" />
and its transform is given by
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.DefautFromNewTransform" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants.Existing">
            <summary>
An existing profile coordinate space will be used as the selected
profile space.  The name of the existing space is given by
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.ProfileExistingSpaceName" />.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfileSpaceSelectionConstants.Default">
            <summary>
The selected profile space will not be changed.  It is already
specified by the
<see cref="!:P:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile.ProfileSelectedSpaceName" />
of the <see cref="!:T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile">
profile </see> that is passed into the 
<see cref="!:M:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionOperatorsParams.Execute(Cognex.VisionPro3D.Cog3DRangeImageCrossSectionProfile)" />
method.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants">
            <summary>
An enumeration that specifies the point to find within one or more
profile regions.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.BottomRight">
            <summary>
BottomRight point: the point with the lowest y coordinate and highest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.BottomLeft">
            <summary>
BottomLeft point: the point with the lowest y coordinate and lowest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.TopRight">
            <summary>
TopRight point: the point with the highest y coordinate and highest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.TopLeft">
            <summary>
TopLeft point: the point with the highest y coordinate and lowest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.Average">
            <summary>
Average point: the average position of all points within one or
more profile regions.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.Right">
            <summary>
Rightmost point: the point with the highest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.Left">
            <summary>
Leftmost point: the point with the lowest x coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.Bottom">
            <summary>
Bottommost point: the point with the lowest y coordinate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionPointTypeConstants.Top">
            <summary>
Topmost point: the point with the highest y coordinate.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerSortConstants">
            <summary>
An enumeration that specifies the sorting order when multiple
corners are found within one or more profile regions.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerSortConstants.Sharpness">
            <summary>
The sorting order is based on the sharpness of the corner.
The corners are sorted from sharpest to least sharp.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerSortConstants.RightToLeft">
            <summary>
The sorting order is based on the x-axis position of the corner.
The corners are sorted from right to left.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerSortConstants.LeftToRight">
            <summary>
The sorting order is based on the x-axis position of the corner.
The corners are sorted from left to right.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerPolarityConstants">
            <summary>
An enumeration that specifies the polarity of a corner.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerPolarityConstants.Both">
            <summary>
The desired corner can be either a peak or a valley.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerPolarityConstants.Valley">
            <summary>
The corner occurs where the profile data is concave upward:
the slope of the profile increases as you move in the positive
direction along the x-axis.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionCornerPolarityConstants.Peak">
            <summary>
The corner occurs where the profile data is concave downward:
the slope of the profile decreases as you move in the positive
direction along the x-axis.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointConstants">
            <summary>
An enumeration that specifies a point on a given line segment.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointConstants.End">
            <summary>
The end point of a line segment.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointConstants.Start">
            <summary>
The start point of a line segment. 
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionLineSegmentPointConstants.Middle">
            <summary>
The middle point of a line segment. 
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistanceTypeConstants">
            <summary>
An enumeration that specifies how to compute the distance between
two points.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistanceTypeConstants.Y">
            <summary>
Compute the y-axis distance between two points.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistanceTypeConstants.X">
            <summary>
Compute the x-axis distance between two points.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionDistanceTypeConstants.Euclidean">
            <summary>
Compute the Euclidean distance between two points.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestTypeConstants">
            <summary>
An enumeration that specifies whether or not to treat a line
segment as an infinite line when determining the point "on" the
segment that is nearest to a given point.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestTypeConstants.NearestToLineSegment">
            <summary>
The nearest point must fall on the line segment.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageCrossSectionNearestTypeConstants.NearestToLine">
            <summary>
The nearest point may fall anywhere along the infinite line
that passes through the line segment.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.
</summary>
            <value>
The default is 
(Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants::InputImageByReference |
Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants::Region | 
Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants::UsedPixels | 
Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants::Histogram)
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfLastRunRecordDiagEnable</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageHeightCalculatorLastRunRecordConstants.
</summary>
            <value>
The default is Cog3DRangeImageHeightCalculatorLastRunRecordConstants::None
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfLastRunRecordEnable</item>
                    <item>SfCreateLastRunRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageHeightCalculatorCurrentRecordConstants.
</summary>
            <value>
The default is (int)Cog3DRangeImageHeightCalculatorCurrentRecordConstants::InputImage | (int)Cog3DRangeImageHeightCalculatorCurrentRecordConstants::Region
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfCurrentRecordEnable</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Result">
            <summary>
The result of running the height calculator tool
</summary>
            <remarks>
                <para>
In the context of the height calculator, "used" pixels are the image 
pixels that contribute to the height calculation.
</para>
                <para>
A range image pixel is "used" to calculate the height if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" />
of the tool.
</item><item>
it is marked "care" in the optional
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams" />.
</item><item>
it is marked as "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height falls within the valid height range configured in the height tool's
run parameters. See <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterEnabled" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the height computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Only "used" pixels are included in the height tool's 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Histogram" /> data.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
By default the positive height direction is defined to be in the same direction as the
normal vector of the base plane. However, the positive height direction can be
reversed by setting the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.PlaneSide" /> property.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfResult</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams">
            <summary>
The height calculator tool's run parameters operator
</summary>
            <value>
The value can not be null.
The default is a default Cog3DRangeImageHeightCalculator.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfRunParams</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.BasePlane">
            <summary>
The calculated height is the distance of the range image pixels from this
plane (see also 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.PlaneSide" />).
</summary>
            <value>
The default is a horizontal plane at z = 0.
</value>
            <remarks>
If BasePlane is set to null a horizontal plane at z = 0 will be used.
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfBasePlane</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region">
            <summary>
The 2D region of the range image which contains the pixels
of interest. Only pixels contained within this region will
be used to calculate the height.
</summary>
            <remarks>
A pixel is considered inside the 2D region if the pixel's
2D center falls within the region.
</remarks>
            <value>
The region can be null to use the entire range image.
The default is a default CogRectangleAffine
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfRegion</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage">
            <summary>
The range image surface data used in the height calculation.
</summary>
            <value>
The default is null.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImage</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.BuildHistogramRecord(Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult)">
            <summary>
Constructs and returns a record containing a histogram graphic
for use in the tool's last run record.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.BuildHistogramChangeSpaceNameCmd(System.String,System.String)">
            <summary>
Creates a DisplayMethod to be used as the content of
a parent image record's subrecord. When the parent image
record is displayed by a CogRecordDisplay, the subrecord
will cause a transform to be renamed in the Display's
UserPixelTree.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.BuildHistogramAddSpaceCmd(Cognex.VisionPro.CogTransform2DLinear,System.String)">
            <summary>
Creates a DisplayMethod to be used as the content of
a parent image record's subrecord. When the parent image
record is displayed by a CogRecordDisplay, the subrecord
will cause a transform to be added to the Display's UserPixelTree.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.AddMarker(System.String,System.Double,System.Double,System.Int32,System.Drawing.Font,Cognex.VisionPro.CogGraphicCollection)">
            <summary>
Draws a vertical line to mark a notable height 
locations in the histogram graphics.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.GetMaxNumPixels(System.Int32[])">
            <summary>
The statistical mode is not included in 
the results returned from CVT.
This function finds the mode of the histogram.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Clone">
            <summary>
Returns a deep copy of this class instance.
</summary>
            <remarks>
This method's implementation calls 
<see cref="!:Cog3DRangeImageVolumeCalculatorTool(Cog3DRangeImageHeightCalculatorTool^)" />.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.#ctor(Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool)">
            <summary>
Constructs a deep copy of the supplied Cog3DRangeImageHeightCalculatorTool.
</summary>
            <param name="other">
The Cog3DRangeImageHeightCalculatorTool to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
Thrown if <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" /> does not support
<see cref="T:System.ICloneable" />.
</exception>
            <remarks>
The properties of <paramref name="other" /> are copied as follows:
<list type="bullet"><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage" />
is copied by calling <see cref="M:Cognex.VisionPro.ICogImage.CopyBase(Cognex.VisionPro.CogImageCopyModeConstants)" /> with the 
<see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">CogImageCopyModeConstants</see> flag set.
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" />
is copied by calling <see cref="M:System.ICloneable.Clone" /> (an exception
is thrown if the region cannot does not support <see cref="T:System.ICloneable" />).
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.BasePlane" />
is copied by calling <see cref="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(Cognex.VisionPro3D.Cog3DPlane)" />.
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams" />
is copied by calling <see cref="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.#ctor(Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator)" />.
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Result" />
is copied by calling <see cref="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult)" />.
</item><item>
The 
<see cref="P:Cognex.VisionPro.ICogTool.DataBindings" /> 
are copied by calling 
<see cref="M:Cognex.VisionPro.CogDataBindingsCollection.#ctor(System.Object,Cognex.VisionPro.CogDataBindingsCollection)" />. 
The data bindings of the original tool are duplicated in the new tool. 
The databindings are copied with their destinations pointing _into_ the 
new tool, while their sources are copied directly and still point _from_ 
the same upstream objects (tools) as the original tool's databindings.
</item><item>
The 
<see cref="P:Cognex.VisionPro.ICogTool.UserData" /> 
is copied by calling 
<see cref="M:Cognex.VisionPro.CogDictionary.#ctor(Cognex.VisionPro.CogDictionary)" />.
</item><item>
The <see cref="P:Cognex.VisionPro.ICogTool.RunStatus" /> 
is copied by calling 
<see cref="M:Cognex.VisionPro.Implementation.CogRunStatus.#ctor(Cognex.VisionPro.ICogRunStatus)" />.
</item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.#ctor">
            <summary>
Construct a new instance of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.CacheLastRunData">
            <summary>
Cache the last run record data so it 
can be accesed by CreateLastRunRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.ClearLastRunCache">
            <summary>
Clear any cached last run record data.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LastRunRecordDiagEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LastRunRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CurrentRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfResult">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfBasePlane">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfRegion">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.SfInputImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImage may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool">
            <summary>
                <para>
A range image has pixel values that represent the distance from a 
reference plane to an object. 
</para>
                <para>
The height calculator tool measures the height of the surface
defined by the range image pixels relative to a user supplied base plane.
</para>
                <para>
The computed height is returned in the 
<see cref="P:Cognex.VisionPro.CogImage16Range.SelectedSpaceName3D" />
units specified in the range image (e.g. mm^3).
</para>
            </summary>
            <remarks>
                <para>
In the context of the height calculator, "used" pixels are the image 
pixels that contribute to the height calculation.
</para>
                <para>
A range image pixel is "used" to calculate the height if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" />
of the tool.
</item><item>
it is marked "care" in the optional
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams" />.
</item><item>
it is marked as "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height falls within the valid height range configured in the height tool's
run parameters. See <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterEnabled" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the height computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Only "used" pixels are included in the height tool's 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Histogram" /> data.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
By default the positive height direction is defined to be in the same direction as the
normal vector of the base plane. However, the positive height direction can be
reversed by setting the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.PlaneSide" /> property.
</para>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants">
            <summary>
Enumeration of diagnostic data that can be provided in the Tool's
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.Histogram">
            <summary>
Include a histogram graphic
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.UsedPixels">
            <summary>
Include a mask graphic representing which range image
pixels were used in the height calculation
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.Region">
            <summary>
Include a copy of the region in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordConstants">
            <summary>
Enumeration of non-diagnostic data that can be provided in the Tool's
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorCurrentRecordConstants">
            <summary>
Enumeration of data that can be provided in the Tool's CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorCurrentRecordConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorCurrentRecordConstants.Region">
            <summary>
Include the (interactive) region to be processed at run time in the
CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.Execute(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.ICogRegion,System.Double)">
            <summary>
Computes the height of the range image surface relative to 
a horizontal base plane with a user specified Z height. 
<para>
The base plane has a 3D selected space coordinate normal vector (0, 0, 1),
i.e. oriented along the positive z axis.
</para></summary>
            <param name="rangeImage">
The range image surface data of which the height is calculated.
</param>
            <param name="region">
The 2D region of the range image which contains the pixels
of interest. Only pixels contained within this region will
be used to calculate the height.
The region can be null to use the entire range image.
</param>
            <param name="horizontalPlaneZ">
The z value (usually the height) of the horizontal 3D plane,
in the selected space 3D coordinates of the range image
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is is not allocated.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> has a transform that is 
singular (i.e., not invertible).
</item>
                </list>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.LowTailFrac" />
+ <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HighTailFrac" /> is greater
than 1.
</item>
                    <item>Thrown if <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterLow" />
is greater than <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterHigh" />.
</item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.Execute(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.ICogRegion,Cognex.VisionPro3D.Cog3DPlane)">
            <summary>
Computes the height between the surface defined by the range image 
pixels and the specified base plane.
</summary>
            <param name="rangeImage">
The range image surface data of which to calculate the height
</param>
            <param name="region">
The 2D region of the range image which contains the pixels
of interest. Only pixels contained within this region will
be used to calculate the height.
The region can be null to use the entire range image.
</param>
            <param name="basePlane">
The plane relative to which the height is calculated.
(see also <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.PlaneSide" />).
The basePlane can be null to use a horizontal plane at z = 0.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is is not allocated.</item>
                    <item>Thrown if <paramref name="rangeImage" /> has a transform that is 
singular (i.e., not invertible).</item>
                    <item>Thrown if <paramref name="basePlane" /> is degenerate.</item>
                </list>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.LowTailFrac" />
+ <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HighTailFrac" /> is greater
than 1.
</item>
                    <item>Thrown if <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterLow" />
is greater than <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterHigh" />.
</item>
                </list>
            </exception>
            <exception cref="!:CogSpaceTreeNotInTreeException">
if the SelectedSpaceName3D of the range image is not in the tree, or if the 
SelectedSpaceName3D of the plane is not in the tree.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMaskOffsetY">
            <summary>
Gets or sets the 2D InputImageMask Y offset value in pixels.
</summary>
            <value>
The InputImageMask Y offset value in pixels. The X and Y offset values
set the offset from the upper-left corner of the run-time input
image to th upper-left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
in pixels. The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffsetY</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMaskOffsetX">
            <summary>
Gets or sets the 2D InputImageMask X offset value in pixels.
</summary>
            <value>
The InputImageMask X offset value in pixels. The X and Y offset values
set the offset from the upper-left corner of the run-time input
image to th upper-left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
in pixels. The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffsetX</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask">
            <summary>
Gets or sets the input image mask.
The input image mask allows you to ignore regions
of the range image by masking them out.
</summary>
            <value>
InputImageMask is optional and may be null if no mask is 
required. The default is null.
<para>
255 = use this pixel
</para><para>
0 = ignore this pixel
</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffset</item>
                </list>
            </event>
            <remarks>
The input image mask is applied to the input image after taking the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMaskOffsetX" />
and
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMaskOffsetY" /> 
into account.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.PlaneSide">
            <summary>
Specifies which side of the plane to consider the positive height
direction when computing the height.
</summary>
            <value>
The default is Cog3DPlaneSideConstants::IncreasingPlaneNormal.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfPlaneSide</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HighTailFrac">
            <summary>
Gets or sets a value which controls how the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HighTail" />
property of the result is calculated.
</summary>
            <value>
The default is 0.01. The value must be between [0, 1].
</value>
            <remarks>
                <para>
The fraction which dictates how many of the highest pixels are discarded
before calculating the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HighTail" /> 
height.
</para>
                <para>
For example if the HighTailFrac is set to 0.01, then 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HighTail" /> 
is set such that 1 percent of "used" pixel heights are above it.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <list type="bullet">
                    <item>Thrown if value falls outside the range [0, 1].</item>
                </list>
            </exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfHighTailFrac</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.LowTailFrac">
            <summary>
Gets or sets a value which controls how the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.LowTail" />
property of the result is calculated.
</summary>
            <value>
The default is 0.01. The value must be between [0, 1].
</value>
            <remarks>
                <para>
The fraction which dictates how many of the lowest pixels are discarded
before calculating the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.LowTail" /> 
height.
</para>
                <para>
For example if the LowTailFrac is set to 0.01, then 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.LowTail" /> 
is set such that 1 percent of "used" pixel heights are below it.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <list type="bullet">
                    <item>Thrown if value falls outside the range [0, 1].</item>
                </list>
            </exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfLowTailFrac</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.StdDevMult">
            <summary>
Gets or sets a value that controls how the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.MeanPlusStdDevMult" />
property of the result is calculated.
</summary>
            <value>
The default is 0.0.
</value>
            <remarks>
                <para>
The standard deviation of "used" range image pixel heights is multiplied by StdDevMult.
The resulting value is then added to the mean of all the "used" pixel heights and returned
as the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.MeanPlusStdDevMult" />
property of the overall result.
</para>
                <para>
Note that it is valid to set StdDevMult to a value less than 0.0.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfStdDevMult</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.ComputePixelCountsDiagImage">
            <summary>
Specifies whether or not to include a pixel counts diagnostics
image in the result. The pixel counts diagnostics image indicates
which pixels in the range image were used by the height calculation.
</summary>
            <value>
The default is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfComputePixelCountsDiagImage</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.IncludeHistogramInResult">
            <summary>
Specifies whether or not to include the histogram data
in the result.
</summary>
            <value>
The default is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfIncludeHistogramInResult</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterEnabled">
            <summary>
Enables or disables the height range filter.
<para>
The height range filter allows the user to exclude pixels which do not fall
within a user selected range of height values.
</para></summary>
            <value>
The default is false
</value>
            <remarks>
                <para>
Enable the height range filter to help remove the effect of noisy or 
outlying height pixel data from the height calculation.
</para>
                <para>
The height range filter is configured by setting 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterLow" /> and 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterHigh" />.
</para>
                <para>
The configured height range can inverted by setting 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterMode" /></para>
                <para>
When a height range filter is enabled, the endpoints of the height range
filter (<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterLow" /> and
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterHigh" />) are always
included in the pixel values used to calculate the height.
</para>
                <para>
The "height" of a range image pixel relative to a base plane is defined as
the signed distance from the center of the range image pixel to the
nearest point on the base plane, measured in selected space 3D coordinates.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfHeightRangeFilterEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterMode">
            <summary>
Controls whether the height range filter includes or excludes the 
values between the HeightRangeFilterLow and the HeightRangeFilterHigh.
</summary>
            <value>
The default is IncludeValuesInRange
</value>
            <remarks>
                <para>
The "height" of a range image pixel relative to a base plane is defined as
the signed distance from the center of the range image pixel to the
nearest point on the base plane, measured in selected space 3D coordinates.
</para>
                <para>
When a height range filter is enabled, the endpoints of the height range
filter (HeightRangeFilterLow, HeightRangeFilterHigh) are always included
in the pixel values used to calculate the height.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfHeightRangeFilterMode</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterHigh">
            <summary>
The largest height value to be included or excluded by the height range filter.
</summary>
            <value>
The default is 100.
</value>
            <remarks>
                <para>
The "height" of a range image pixel relative to a base plane is defined as
the signed distance from the center of the range image pixel to the
nearest point on the base plane, measured in selected space 3D coordinates.
</para>
                <para>
When a height range filter is enabled, the endpoints of the height range
filter (HeightRangeFilterLow, HeightRangeFilterHigh) are always included
in the pixel values used to calculate the height.
</para>
                <para>
Setting this property to a value less than HeightRangeFilterLow will cause
HeightRangeFilterLow to be adjusted accordingly.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfHeightRangeFilterHigh</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterLow">
            <summary>
The smallest height value to be included or excluded by the height range filter.
</summary>
            <value>
The default is 10.
</value>
            <remarks>
                <para>
The "height" of a range image pixel relative to a base plane is defined as
the signed distance from the center of the range image pixel to the
nearest point on the base plane, measured in selected space 3D coordinates.
</para>
                <para>
When a height range filter is enabled, the endpoints of the height range
filter (HeightRangeFilterLow, HeightRangeFilterHigh) are always included
in the pixel values used to calculate the height.
</para>
                <para>
Setting this property to a value greater than HeightRangeFilterHigh will cause
HeightRangeFilterHigh to be adjusted accordingly.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfHeightRangeFilterLow</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.RegionMode">
            <summary>
Gets or sets the region mode. This controls how the optional run time
region is applied to the input image.
</summary>
            <value>
The region mode. May be either PixelAlignedBoundingBox or
PixelAlignedBoundingBoxAdjustMask. Default is PixelAlignedBoundingBoxAdjustMask.
CogRegionModeConstants::AffineTransform is not a supported region mode.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is not either PixelAlignedBoundingBox or
PixelAlignedBoundignBoxAdjustMask.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfRegionMode</item>
                </list>
            </event>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfHeightRangeFilterEnabled">
            <summary>
This bit will be set in the EventArgs of a Chagned event every time the
value returned by HeightRangeFilterEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfIncludeHistogramInResult">
            <summary>
This bit will be set in the EventArgs of a Chagned event every time the
value returned by IncludeHistogramInResult may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfStdDevMult">
            <summary>
This bit will be set in the EventArgs of a Chagned event every time the
value returned by StdDevMult may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfHighTailFrac">
            <summary>
This bit will be set in the EventArgs of a Chagned event every time the
value returned by HighTailFrac may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfLowTailFrac">
            <summary>
This bit will be set in the EventArgs of a Chagned event every time the
value returned by LowTailFrac may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfInputImageMaskOffsetY">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImageMaskOffsetX may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfInputImageMaskOffsetX">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImageMaskOffsetX may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfInputImageMask">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImageMask may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfComputePixelCountsDiagImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ComputePixelCountsDiagImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfPlaneSide">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by PlaneSide may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfHeightRangeFilterMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by HeightRangeFilterMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfHeightRangeFilterHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by HeightThresholdHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfHeightRangeFilterLow">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by HeightRangeFilterLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.SfRegionMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by RegionMode may have changed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.#ctor(Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="other">
The Cog3DRangeImageHeightCalculator object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.#ctor">
            <summary>
Constructs a new instance of this class
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator">
            <summary>
The height calculator tool operator.
<para>
Holds the run parameters used by the height tool.
</para></summary>
            <remarks>
Called by the height tool to 
<see cref="M:Cognex::VisionPro::Cog3DRangeImageHeightCalculator::Execute()" /> the actual height calculation.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.GetHistogramBinFromHeight(System.Double)">
            <summary>
Get the histogram bin index for a given height value.
See also: <see cref="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.GetHeightFromHistogramBin(System.Int32)" /></summary>
            <param name="height">
The height from which to find a cooresponding histogram bin index.
</param>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>If the result does not contain any histogram data.</item>
                    <item>If <param name="height" /> falls outside range of histogram data.</item>
                    <item>If the transform from histogram bins to height values is invalid.</item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.GetHeightFromHistogramBin(System.Int32)">
            <summary>
Get the height value for a given histogram bin index.
See also: <see cref="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.GetHistogramBinFromHeight(System.Double)" /></summary>
            <param name="bin">
The bin from which to find a cooresponding height value.
</param>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>If the result does not contain any histogram data.</item>
                    <item>If <param name="bin" /> is less than 0 or greater the total number of bins.</item>
                </list>
            </exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImageOffsetY">
            <summary>
The 2D distance in the Y direction from the upper left corner
of the original input image to the upper left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />
(in pixels).
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImageOffsetX">
            <summary>
The 2D distance in the X direction from the upper left corner
of the original input image to the upper left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />
(in pixels).
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage">
            <summary>
Identifies which pixels in the range image were "used" to calculate the height.
<para>
Each pixel in the pixel counts diag image is a bit-wise or of
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants" />.
</para></summary>
            <remarks>
                <para>
In the context of the height calculator, "used" pixels are the image 
pixels that contribute to the height calculation.
</para>
                <para>
A range image pixel is "used" to calculate the height if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" />
of the tool.
</item><item>
it is marked "care" in the optional
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams" />.
</item><item>
it is marked as "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height falls within the valid height range configured in the height tool's
run parameters. See <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterEnabled" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the height computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Only "used" pixels are included in the height tool's 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Histogram" /> data.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
By default the positive height direction is defined to be in the same direction as the
normal vector of the base plane. However, the positive height direction can be
reversed by setting the <see cref="P:Cognex::VisionPro3D::Cog3DRangeImageHeightCalculator::PlaneSide" /> property.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts">
            <summary>
Result information which identifies the number of pixels in the range image
that fall into each of 4 different categories.
<para>
See <see cref="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants" />
for the definition of the different categories.
</para></summary>
            <remarks>
                <para>
In the context of the height calculator, "used" pixels are the image 
pixels that contribute to the height calculation.
</para>
                <para>
A range image pixel is "used" to calculate the height if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" />
of the tool.
</item><item>
it is marked "care" in the optional
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams" />.
</item><item>
it is marked as "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height falls within the valid height range configured in the height tool's
run parameters. See <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterEnabled" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the height computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Only "used" pixels are included in the height tool's 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Histogram" /> data.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
By default the positive height direction is defined to be in the same direction as the
normal vector of the base plane. However, the positive height direction can be
reversed by setting the <see cref="P:Cognex::VisionPro3D::Cog3DRangeImageHeightCalculator::PlaneSide" /> property.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HistogramHeightFromBinOffset">
            <summary>
The offset value need to map a histogram bin number to an actual height value.
<c>
binHeight = binIndex * HistogramHeightFromBinScale + HistogramHeightFromBinOffset
</c></summary>
            <value>
This property returns 0.0 if <see cref="!:Cognex::VisionPro3D::Cog3DRangeImageHeightCalculator::IncludeHistogramInResult" />
was false or if the height calculation included 0 used pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HistogramHeightFromBinScale">
            <summary>
The scale value needed to map a histogram bin number to an actual height value.
<c>
binHeight = binIndex * HistogramHeightFromBinScale + HistogramHeightFromBinOffset
</c></summary>
            <value>
This property returns 0.0 if <see cref="!:Cognex::VisionPro3D::Cog3DRangeImageHeightCalculator::IncludeHistogramInResult" />
was false or if the height calculation included 0 used pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Histogram">
            <summary>
Returns a histogram of the height values of the individual 
range image pixels.
See also: 
<see cref="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.GetHeightFromHistogramBin(System.Int32)" />
and
<see cref="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.GetHistogramBinFromHeight(System.Double)" /></summary>
            <remarks>
Note that only pixels that were "used" as part of the 
actual height calculation are included in the histogram data.
For example, the histogram bins for any height values
that were filtered out by the height range filter will contain
0 pixels.
<para>
In the context of the height calculator, "used" pixels are the image 
pixels that contribute to the height calculation.
</para><para>
A range image pixel is "used" to calculate the height if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.Region" />
of the tool.
</item><item>
it is marked "care" in the optional
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.RunParams" />.
</item><item>
it is marked as "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorTool.InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height falls within the valid height range configured in the height tool's
run parameters. See <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HeightRangeFilterEnabled" />.
</item></list></para><para>
Pixels that meet these conditions contribute to the height computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCountsDiagImage" />.
</para><para>
Only "used" pixels are included in the height tool's 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Histogram" /> data.
</para><para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para><para>
By default the positive height direction is defined to be in the same direction as the
normal vector of the base plane. However, the positive height direction can be
reversed by setting the <see cref="P:Cognex::VisionPro3D::Cog3DRangeImageHeightCalculator::PlaneSide" /> property.
</para></remarks>
            <value>
Note that this property will return null if <see cref="!:Cognex::VisionPro3D::Cog3DRangeImageHeightCalculator::IncludeHistogramInResult" />
was false or if the height calculation included 0 used pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.StdDevMult">
            <summary>
Returns the value of 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.StdDevMult" />
which was used to compute 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.MeanPlusStdDevMult" />.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
            <remarks>
The mean plus std dev mult height is calcualted as:
<para><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.MeanPlusStdDevMult" /> = 
    <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Mean" /> + 
    std dev of all used pixel heights * <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.StdDevMult" /></para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.MeanPlusStdDevMult">
            <summary>
Returns the calculated mean plus standard deviation multiplier height.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
            <remarks>
The mean plus std dev mult height is calcualted as:
<para><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.MeanPlusStdDevMult" /> = 
    <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Mean" /> + 
    std dev of all used pixel heights * <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.StdDevMult" /></para><para>
In some applications this value may be used to provide a more
robust estimation of the real minimum or maximum height.
This value is less sensitive to outlying or noisy height data.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HighTail">
            <summary>
Returns the calculated high tail height.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
            <remarks>
The high tail height is the height at which:
<para>
  (number of used pixels greater than this height / 
   total number of pixels used in the height calculation) = 
     <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.HighTailFrac" /></para><para>
In some applications this value may be used to provide a more
robust estimation of the real maximum height.
This value is less sensitive to outlying or noisy height data.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.LowTail">
            <summary>
Returns the calculated low tail height.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
            <remarks>
The low tail height is the height at which:
<para>
  (number of used pixels less than this height / 
   total number of pixels used in the height calculation) = 
     <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculator.LowTailFrac" /></para><para>
In some applications this value may be used to provide a more
robust estimation of the real minimum height.
This value is less sensitive to outlying or noisy height data.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Maximum">
            <summary>
Returns the maximum height value of pixels used in
the height calculation.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
            <remarks>
                <para>
Because the maximum height returns the maximum height
of all used pixels, a single outlying or noisy pixel 
may distort this value from the _real_ maximum height
of an object. 
Consider using <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.HighTail" />
for a more robust estimate of the maximum height.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Minimum">
            <summary>
Returns the minimum height value of pixels used in
the height calculation.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
            <remarks>
                <para>
Because the minimum height returns the minimum height
of all used pixels, a single outlying or noisy pixel 
may distort this value from the _real_ minimum height
of an object.
Consider using <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.LowTail" />
for a more robust estimate of the minimum height.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Median">
            <summary>
Returns the median height of all pixles used in
the height calculation.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.Mean">
            <summary>
Returns the mean height of all pixels used in
the height calculation.
</summary>
            <value>
This property returns 0.0 if the 
height calculation "used" 0 pixels.
See: <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.PixelCounts" />.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.SetFromCVT(c3d_heightResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.CogImage16Range)">
            <summary>
Populate the members of the Cog3DRangeImageHeightCalculatorResult from
its CVT equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.#ctor(c3d_heightResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Double,Cognex.VisionPro.CogImage16Range)">
            <summary>
Construct a Cog3DRangeImageHeightCalculatorResult based on its CVT equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="other">
The Cog3DRangeImageHeightCalculatorResult object to be copied. 
May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageHeightCalculatorResult">
            <summary>
The result of running the Cog3DRangeImageHeightCalculator.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHeightRangeFilterModeConstants">
            <summary>
Enumeration of different modes for including
or excluding a range of pixel height values
from the overall height calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DHeightRangeFilterModeConstants.ExcludeValuesInRange">
            <summary>
Include only the values which fall outside the height 
range in the height calculation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DHeightRangeFilterModeConstants.IncludeValuesInRange">
            <summary>
Include only the values which fall within the height
range in the height calculation.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.
</summary>
            <value>
The default is (int)Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants::InputImageByReference | (int)Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants::Region | (int)Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants::UsedPixels
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfLastRunRecordDiagEnable</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageVolumeCalculatorLastRunRecordConstants.
</summary>
            <value>
The default is Cog3DRangeImageVolumeCalculatorLastRunRecordConstants::None
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfLastRunRecordEnable</item>
                    <item>SfCreateLastRunRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImageVolumeCalculatorCurrentRecordConstants.
</summary>
            <value>
The default is (int)Cog3DRangeImageVolumeCalculatorCurrentRecordConstants::InputImage | (int)Cog3DRangeImageVolumeCalculatorCurrentRecordConstants::Region
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfCurrentRecordEnable</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Result">
            <summary>
The result of running the volume calculator tool
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfResult</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.RunParams">
            <summary>
The volume calculator tool's run parameters operator
</summary>
            <value>
The value can not be null.
The default is a default Cog3DRangeImageVolumeCalculator.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfRunParams</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.BasePlane">
            <summary>
The calculated volume is the volume bounded by the range image surface
and this plane (on the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.PlaneSide" />).
</summary>
            <value>
The default is a horizontal plane at z = 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfBasePlane</item>
                </list>
            </event>
            <remarks>
If BasePlane is set to null a horizontal plane at z = 0 will be used.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Region">
            <summary>
The 2D region within which to calculate the volume.
</summary>
            <remarks>
A pixel is considered inside the 2D region if the pixel's
2D center falls within the region.
</remarks>
            <value>
The region can be null to use the entire range image.
The default is a default CogRectangleAffine
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfRegion</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.InputImage">
            <summary>
The range image surface data used in the volume calculation.
</summary>
            <value>
The default is null.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImage</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Clone">
            <summary>
Returns a deep copy of this class instance.
</summary>
            <remarks>
This method's implementation calls 
<see cref="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.#ctor(Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool)" />.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.#ctor(Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool)">
            <summary>
Constructs a deep copy of the supplied Cog3DRangeImageVolumeCalculatorTool.
</summary>
            <param name="other">
The Cog3DRangeImageVolumeCalculatorTool to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
Thrown if <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Region" /> does not support
<see cref="T:System.ICloneable" />.
</exception>
            <remarks>
The properties of <paramref name="other" /> are copied as follows:
<list type="bullet"><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.InputImage" />
is copied by calling <see cref="M:Cognex.VisionPro.ICogImage.CopyBase(Cognex.VisionPro.CogImageCopyModeConstants)" /> with the 
<see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">CogImageCopyModeConstants</see> flag set.
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Region" />
is copied by calling <see cref="M:System.ICloneable.Clone" /> (an exception
is thrown if the region cannot does not support <see cref="T:System.ICloneable" />).
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.BasePlane" />
is copied by calling <see cref="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(Cognex.VisionPro3D.Cog3DPlane)" />.
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.RunParams" />
is copied by calling <see cref="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.#ctor(Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator)" />.
</item><item><see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Result" />
is copied by calling <see cref="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult)" />.
</item><item>
The 
<see cref="P:Cognex.VisionPro.ICogTool.DataBindings" /> 
are copied by calling 
<see cref="M:Cognex.VisionPro.CogDataBindingsCollection.#ctor(System.Object,Cognex.VisionPro.CogDataBindingsCollection)" />. 
The data bindings of the original tool are duplicated in the new tool. 
The databindings are copied with their destinations pointing _into_ the 
new tool, while their sources are copied directly and still point _from_ 
the same upstream objects (tools) as the original tool's databindings.
</item><item>
The 
<see cref="P:Cognex.VisionPro.ICogTool.UserData" /> 
is copied by calling 
<see cref="M:Cognex.VisionPro.CogDictionary.#ctor(Cognex.VisionPro.CogDictionary)" />.
</item><item>
The <see cref="P:Cognex.VisionPro.ICogTool.RunStatus" /> 
is copied by calling 
<see cref="M:Cognex.VisionPro.Implementation.CogRunStatus.#ctor(Cognex.VisionPro.ICogRunStatus)" />.
</item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.#ctor">
            <summary>
Construct a new instance of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.CacheLastRunData">
            <summary>
Cache the last run record data so it 
can be accesed by CreateLastRunRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.ClearLastRunCache">
            <summary>
Clear any cached last run record data.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LastRunRecordDiagEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LastRunRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CurrentRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfResult">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfBasePlane">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfRegion">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.SfInputImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImage may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool">
            <summary>
                <para>
A range image has pixel values that represent the
distance from a reference plane to an object. 
</para>
                <para>
The volume calculator tool measures the volume enclosed between 
the surface of range image pixel data and one side of a user supplied 
base plane.
</para>
                <para>
The computed volume is returned in the 
<see cref="P:Cognex.VisionPro.CogImage16Range.SelectedSpaceName3D" />
units specified in the range image.
</para>
            </summary>
            <remarks>
                <para>
A range image pixel is "used" to calculate the volume if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Region" />
of the tool.
</item><item>
it is marked as "care" in the optional 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.RunParams" />.
</item><item>  
it is marked as a "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height (relative to the base plane) is greater than
or equal to the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.MinimumHeightThreshold" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the volume computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
Note, however, that the volume is calculated by summing the contribution of
the range image pixels within the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorTool.Region" />
projected along the pixel coordinate z axis until they intersect the base plane.
</para>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants">
            <summary>
Enumeration of diagnostic data that can be provided in the Tool's
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.UsedPixels">
            <summary>
Include a mask graphic representing which range image
pixels were used in the volume calculation
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.Region">
            <summary>
Include a copy of the region in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordConstants">
            <summary>
Enumeration of non-diagnostic data that can be provided in the Tool's
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorCurrentRecordConstants">
            <summary>
Enumeration of data that can be provided in the Tool's CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorCurrentRecordConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorCurrentRecordConstants.Region">
            <summary>
Include the (interactive) region to be processed at run time in the
CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.Execute(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.ICogRegion,System.Double)">
            <summary>
Computes the volume between the range image surface and a specified base
plane. The plane has a 3D selected space coordinate normal vector (0, 0, 1),
i.e. oriented along the positive z axis.
</summary>
            <param name="rangeImage">
The range image surface data relative which the volume is calculated.
</param>
            <param name="region">
The 2D region within which to calculate the volume.
The region can be null to use the entire range image.
</param>
            <param name="horizontalPlaneZ">
The z value of the horizontal 3D plane, in the selected space 3D coordinates
of the range image
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is is not allocated.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> has a transform that is 
singular (i.e., not invertible).</item>
                </list>
            </exception>
            <remarks>
                <para>
A range image pixel is "used" to calculate the volume if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
of the tool.
</item><item>
it is marked as "care" in the optional 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::RunParams" />.
</item><item>  
it is marked as a "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height (relative to the base plane) is greater than
or equal to the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.MinimumHeightThreshold" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the volume computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
Note, however, that the volume is calculated by summing the contribution of
the range image pixels within the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
projected along the pixel coordinate z axis until they intersect the base plane.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.Execute(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.ICogRegion,Cognex.VisionPro3D.Cog3DPlane)">
            <summary>
Computes the volume between the range image surface and a specified base
plane.
</summary>
            <param name="rangeImage">
The range image surface data reletive which the volume is calculated
</param>
            <param name="region">
The 2D region within which to calculate the volume.
The region can be null to use the entire range image.
</param>
            <param name="basePlane">
The calculated volume is the volume bounded by the range image
surface and the base plane (on the <see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.PlaneSide" />).
The basePlane can be null to use a hoizontal plane at z = 0.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>Thrown if <paramref name="rangeImage" /> is is not allocated.</item>
                    <item>Thrown if <paramref name="rangeImage" /> has a transform that is 
singular (i.e., not invertible).</item>
                    <item>Thrown if <paramref name="basePlane" /> is degenerate.</item>
                    <item>Thrown if <paramref name="basePlane" /> is vertical in pixel space.</item>
                </list>
            </exception>
            <remarks>
                <para>
A range image pixel is "used" to calculate the volume if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
of the tool.
</item><item>
it is marked as "care" in the optional 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMask" />
provided as part of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::RunParams" />.
</item><item>  
it is marked as a "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height (relative to the base plane) is greater than
or equal to the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.MinimumHeightThreshold" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the volume computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
Note, however, that the volume is calculated by summing the contribution of
the range image pixels within the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
projected along the pixel coordinate z axis until they intersect the base plane.
</para>
            </remarks>
            <exception cref="!:CogSpaceTreeNotInTreeException">
if the SelectedSpaceName3D of the range image is not in the tree, or if the 
SelectedSpaceName3D of the plane is not in the tree.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMaskOffsetY">
            <summary>
Gets or sets the 2D InputImageMask Y offset value in pixels.
</summary>
            <value>
The InputImageMask Y offset value in pixels. The X and Y offset values
set the offset from the upper-left corner of the run-time input
image to th upper-left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMask" />
in pixels. The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffsetY</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMaskOffsetX">
            <summary>
Gets or sets the 2D InputImageMask X offset value in pixels.
</summary>
            <value>
The InputImageMask X offset value in pixels. The X and Y offset values
set the offset from the upper-left corner of the run-time input
image to th upper-left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMask" />
in pixels. The default is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffsetX</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMask">
            <summary>
Gets or sets the input image mask.
The input image mask allows you to ignore regions
of the range image by masking them out.
</summary>
            <value>
InputImageMask is optional and may be null if no mask is 
required. The default is null.
<para>
255 = use this pixel
</para><para>
0 = ignore this pixel
</para></value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffset</item>
                </list>
            </event>
            <remarks>
The input image mask is applied to the input image after taking the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMaskOffsetX" />
and
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.InputImageMaskOffsetY" /> 
into account.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.ComputePixelCountsDiagImage">
            <summary>
Specifies whether or not to include a pixel counts diagnostics
image in the result. The pixel counts diagnostics image indicates
which pixels in the range image were used by the volume calculation.
</summary>
            <value>
The default is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfComputePixelCountsDiagImage</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.PlaneSide">
            <summary>
Specifies which side of the plane to consider when computing the volume.
Only range image pixels that are on the specified side of the plane will 
be used in computing the volume. 
</summary>
            <value>
The default is Cog3DPlaneSideConstants::IncreasingPlaneNormal.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfPlaneSide</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.MinimumHeightThreshold">
            <summary>
The minimum height value, in selected space 3D units, for each range
image pixel in order to include that pixel in the volume computation.
</summary>
            <value>
The minimum height threshold must be in the range [0, Double::MaxValue].
The default is 0.0.
</value>
            <remarks>
                <para>
The "height" of a range image pixel relative to a base plane is defined as
the signed distance from the center of the range image pixel to the
nearest point on the base plane, measured in selected space 3D coordinates.
</para>
                <para>
The user can specify a minimum height threshold so that
pixels with a small height (e.g. noise about the base plane) can be
excluded from the volume computation.
Only pixels with a positive height that is greater than or equal to the
user-specified minimum height threshold contribute to the computed volume.
</para>
                <para>
Note that height threshold does not affect the amount a pixel
used in the computation contributes to the volume.
The height threshold only determines whether or not a 
range image pixel is used.
</para>
            </remarks>
Throws <exception cref="T:System.ArgumentOutOfRangeException">
if set to a value less than 0.0.
</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed"><para>Fires when this property changes.</para><para>The following state flag will be set:</para><list type="bullet"><item>SfMinimumHeightThreshold</item></list></event></member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.RegionMode">
            <summary>
Gets or sets the region mode. This controls how the optional run time
region is applied to the input image.
</summary>
            <value>
The region mode. May be either PixelAlignedBoundingBox or
PixelAlignedBoundingBoxAdjustMask. Default is PixelAlignedBoundingBoxAdjustMask.
CogRegionModeConstants::AffineTransform is not a supported region mode.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is not either PixelAlignedBoundingBox or
PixelAlignedBoundignBoxAdjustMask.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag will be set:</para>
                <list type="bullet">
                    <item>SfRegionMode</item>
                </list>
            </event>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfInputImageMaskOffsetY">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImageMaskOffsetX may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfInputImageMaskOffsetX">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImageMaskOffsetX may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfInputImageMask">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImageMask may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfComputePixelCountsDiagImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ComputePixelCountsDiagImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfPlaneSide">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by PlaneSide may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfMinimumHeightThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by MinimumHeightThreshold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.SfRegionMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by RegionMode may have changed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.#ctor(Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="other">
The Cog3DRangeImageVolumeCalculator object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator.#ctor">
            <summary>
Constructs a new instance of this class
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculator">
            <summary>
The volume calculator tool operator
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImageOffsetY">
            <summary>
The 2D distance in the Y direction from the upper left corner
of the original input image to the upper left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />
(in pixels).
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImageOffsetX">
            <summary>
The 2D distance in the X direction from the upper left corner
of the original input image to the upper left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />
(in pixels).
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage">
            <summary>
Diagnostic which identifies which pixels in the range image fall
into each of 4 different categories.
<para>
See <see cref="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants" />
for the definition of the different categories.
</para><para>
Each pixel in the pixel counts diag image is a bit-wise or of
<see cref="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants" />.
</para></summary>
            <remarks>
                <para>
A range image pixel is "used" to calculate the volume if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
of the tool.
</item><item>
it is marked as "care" in the optional 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculator::InputImageMask" />
provided as part of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::RunParams" />.
</item><item>  
it is marked as a "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height (relative to the base plane) is greater than
or equal to the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculator::MinimumHeightThreshold" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the volume computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
Note, however, that the volume is calculated by summing the contribution of
the range image pixels within the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
projected along the pixel coordinate z axis until they intersect the base plane.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCounts">
            <summary>
Result information which identifies the number of pixels in the range image
that fall into each of 4 different categories.
See <see cref="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants" />
for the definition of the different categories.
</summary>
            <remarks>
                <para>
A range image pixel is "used" to calculate the volume if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
of the tool.
</item><item>
it is marked as "care" in the optional 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculator::InputImageMask" />
provided as part of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::RunParams" />.
</item><item>  
it is marked as a "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height (relative to the base plane) is greater than
or equal to the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculator::MinimumHeightThreshold" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the volume computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
Note, however, that the volume is calculated by summing the contribution of
the range image pixels within the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
projected along the pixel coordinate z axis until they intersect the base plane.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.Volume">
            <summary>
The calculated volume between the 3D surface defined by the 
range image pixels and the specified base plane, measured in the
<see cref="P:Cognex.VisionPro.CogImage16Range.SelectedSpaceName3D" />
coordinates (e.g. mm3) of the range image
</summary>
            <remarks>
                <para>
A range image pixel is "used" to calculate the volume if:
<list type="bullet"><item>
it is inside the 2D input 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
of the tool.
</item><item>
it is marked as "care" in the optional 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculator::InputImageMask" />
provided as part of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::RunParams" />.
</item><item>  
it is marked as a "visible pixel" in the visible pixel mask of the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::InputImage" />.
The visible pixel mask can be accessed by calling 
<see cref="M:Cognex.VisionPro.CogImage16Range.GetMaskData" /> on the range image.
</item><item>
its height (relative to the base plane) is greater than
or equal to the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculator::MinimumHeightThreshold" />.
</item></list></para>
                <para>
Pixels that meet these conditions contribute to the volume computation
and are marked as "used" in the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.PixelCountsDiagImage" />.
</para>
                <para>
Note that the height of an individual range image pixel is defined as
the signed distance from the center of the range image pixel to 
the nearest point on the base plane (measured in selected space 3D units).
</para>
                <para>
Note, however, that the volume is calculated by summing the contribution of
the range image pixels within the 
<see cref="P:Cognex::VisionPro3D::Cog3DRangeImageVolumeCalculatorTool::Region" />
projected along the pixel coordinate z axis until they intersect the base plane.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.SetFromCVT(c3d_volumeResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.CogImage16Range)">
            <summary>
Populate the members of the Cog3DRangeImageVolumeCalculatorResult from its CVT equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.#ctor(c3d_volumeResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,Cognex.VisionPro.CogImage16Range)">
            <summary>
Construct a Cog3DRangeImageVolumeCalculatorResult based on its CVT equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="other">
The Cog3DRangeImageVolumeCalculatorResult object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImageVolumeCalculatorResult">
            <summary>
The result of running the 3D Volume Calculator Tool
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPlaneSideConstants">
            <summary>
This enumeration is used to specify one side of a plane.  
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DPlaneSideConstants.DecreasingPlaneNormal">
            <summary>
The side of the plane containing points in the negative 
normal vector direction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DPlaneSideConstants.IncreasingPlaneNormal">
            <summary>
The side of the plane containing points in the positive 
normal vector direction.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.NumUsedPixels">
            <summary>
The number of pixels that were actually used by the tool or function to compute the 
result.  Such pixels must always be visible care pixels, but some 
functions may choose to impose other restrictions as well.  Each function should 
document how it computes NumUsedPels. Note that this value is always less than 
or equal to NumVisibleCarePels.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.NumVisibleCarePixels">
            <summary>
The number of pixels in the effective source region that are both care pixels and
visible pixels.  Note that this value is always less than or equal to NumCarePels.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.NumCarePixels">
            <summary>
The number of care pixels in the region of interest.  Note that this value
is always less than or equal to NumRegionBoundingBoxPixels.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.NumRegionBoundingBoxPixels">
            <summary>
The number of pixels in the pixel aligned bounding box of the region of interest.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.SetFromCVT(c3ip_pixelCount!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of the pixelCount_c from its CVT equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.#ctor(c3ip_pixelCount!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a Cog3DRangeImagePixelCounts based on its CVT equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.#ctor(Cognex.VisionPro3D.Cog3DRangeImagePixelCounts)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="other">
The Cog3DRangeImagePixelCounts object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCounts">
            <summary>
Result information about how a 3D tool used 
the pixels of a range image.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants">
            <summary>
This enumeration is used as a diagnostic,
it reports whether a range image pixel was
"Used" by a 3D tool to produce the result
or if the pixel was ignored by the tool.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants.Used">
            <summary>
A pixel is a Used pixel if:
<para>
  it is a VisibleCare pixel
</para><para>
AND
</para><para>
  it was used by the operation
  that is reporting the pixel count
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants.VisibleCare">
            <summary>
A pixel is a VisibleCare pixel if:
<para>
  it is a Care pixel
</para><para>
AND
</para><para>
  it is marked as visible in the 
  range image.
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants.Care">
            <summary>
A pixel is a Care pixel if:
<para>
  it lies within the region of interest,
</para><para>
AND
</para><para>
  its is not filtered out when 
  an input image mask is applied
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePixelCountsTypeConstants.RegionBoundingBox">
NOTE:
THE PIXELS IN THE PIXEL COUNT MASK RETURNED FROM
CVT ARE A BITWISE OR OF THESE CONSTANTS.
THIS MAKES IT IMPORTANT THAT THE VALUES
OF THESE ENUMS ARE KEPT IN SYNC WITH THEIR
CVT EQUIVILENTS (WE DON'T CONVERT THE VALUES
OF THE RETURNED CVT IMAGE TO MACTH THESE VALUES).
<summary>
A pixel is a RegionBoundingBox pixel if:
<para>
  it lies within the pixel aligned
  bounding box of the region of interest
</para></summary></member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImagePlaneEstimatorTool object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.Result">
            <summary>
Gets the results from the last call to the Run method.
A new instance of Cog3DRangeImagePlaneEstimatorResult is created for each
run of the tool.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfResult</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.RunParams">
            <summary>
Gets or sets the run parameters (operator) for this Cog3DRangeImagePlaneEstimatorTool.
</summary>
            <value>
The value can not be null.
The default is a default Cog3DRangeImagePlaneEstimator.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRunParams</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.Region">
            <summary>
Gets or sets the optional 2D region that specifies a portion of the
input image to be used for plane estimation. The
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.RegionMode" />
property specifies exactly how this region will be applied to the
InputImage.
</summary>
            <value>
The default is null.
</value>
            <para>Fires when this property changes.</para>
            <para>The following state flag may be affected:</para>
            <list type="bullet">
                <item>SfRegion</item>
            </list>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.InputImage">
            <summary>
Gets or sets the input range image for use in plane estimation.
</summary>
            <value>
The default is null.
</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If the supplied input image is not CogImage16Range.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputImage</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.
</summary>
            <value>
the default is (int)Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants::InputImageByReference | (int)Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants::Region | (int)Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants::InputImageMask
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLastRunRecordDiagEnable</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImagePlaneEstimatorLastRunRecordConstants.
</summary>
            <value>
The default is Cog3DRangeImagePlaneEstimatorLastRunRecordConstants::All
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLastRunRecordEnable</item>
                    <item>SfCreateLastRunRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.
</summary>
            <value>
The default is (int)Cog3DRangeImagePlaneEstimatorCurrentRecordConstants::InputImage | (int)Cog3DRangeImagePlaneEstimatorCurrentRecordConstants::Region | (int)Cog3DRangeImagePlaneEstimatorCurrentRecordConstants::InputImageMask
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCurrentRecordEnable</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.Finalize">
            <summary>
Finalize this Cog3DRangeImagePlaneEstimatorTool object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.Dispose">
            <summary>
Destruct this Cog3DRangeImagePlaneEstimatorTool object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.#ctor(Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool)">
            <summary>
Construct a deep copy of the supplied Cog3DRangeImagePlaneEstimatorTool object.
</summary>
            <param name="Other">
The Cog3DRangeImagePlaneEstimatorTool object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.#ctor">
            <summary>
Construct a default Cog3DRangeImagePlaneEstimatorTool object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfResult">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Results may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfRegion">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfInputImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by RunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by CurrentRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LastRunRecordDiagEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by LastRunRecordEnable may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorTool">
            <summary>
                <para>
The purpose of the plane estimator tool is to find the best fitting plane 
to a surface in a range image.
</para>
                <para>
This plane estimator tool allows the user to fit a plane using pixels specified in a region or specified 2D point locations.
This class encapsulates all of the classes needed to perform
plane estimation on a range image.
</para>
                <para>
The plane is returned in the 
<see cref="P:Cognex.VisionPro.CogImage16Range.SelectedSpaceName3D" />
units specified in the range image.
</para>
            </summary>
            <remarks>
                <para>
When <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Area: 
Range image pixels that meet the following criteria are
used to fit the plane:
<para>
1) must be contained within the 2D region of interest of the range image. No region means all of the input image.
</para><para>
2) must be marked as "Care" if an input image mask is provided.
</para><para>  
3) must be marked as "Visible" in the range image's visible pixel mask.
</para>
Pixels that meet these conditions are used to fit the plane
and are counted in 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation" /></para>
                <para>
When <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Points:
Range image pixels that meet the following criteria are
used to fit the plane:
<para>
1) must be contained within the range image boundaries. 
</para><para>  
2) must be marked as "Visible" in the range image's visible pixel mask.
</para>
Pixels that meet these conditions are used to fit the plane
and are counted in 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation" /></para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion)">
            <summary>
Perform 3D plane fit on the supplied range image.
</summary>
            <returns>
The 3D Plane (defined in SelectedSpaceName3D), RMS error and number of pixels used in estimation.
</returns>
            <remarks>
                <para>
When <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Area: 
Range image pixels that meet the following criteria are
used to fit the plane:
<para>
1) must be contained within the 2D region of interest of the range image. No region means all of the input image.
</para><para>
2) must be marked as "Care" if an input image mask is provided.
</para><para>  
3) must be marked as "Visible" in the range image's visible pixel mask.
</para>
Pixels that meet these conditions are used to fit the plane
and are counted in 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation" /></para>
                <para>
When <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Points:
Range image pixels that meet the following criteria are
used to fit the plane:
<para>
1) must be contained within the range image boundaries. 
</para><para>  
2) must be marked as "Visible" in the range image's visible pixel mask.
</para>
Pixels that meet these conditions are used to fit the plane
and are counted in 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation" /></para>
            </remarks>
            <param name="image">
The range image.
</param>
            <param name="region">
An optional region used only the FitMethod is set to Area. May be null. If supplied, this region is used to
define the pixels used in fitting the 3D plane in the range image. The region
mode is defaulted to PixelAlignedBoundingBoxAdjustMask. If no
inputRegion is supplied, the entire input image is processed.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
If the supplied input image argument is not a CogImage16Range.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
If the supplied input image argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied input image unbound.
</exception>
            <exception cref="T:System.ArgumentException">
If the transform is not linear
</exception>
            <exception cref="T:System.ArgumentException">
If region is outside of image
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
There are fewer than 3 points in the list of points that correspond to visible pixel locations in the image, or the combination of the input mask and visible pixel mask contains less than 3 care/visible pixels.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
The list of points doesn't include 3 non-collinear points.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
The list of input points is fewer than 3.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
The pixel location of one or more points in the list of input points falls outside the extent of the image.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
The RMS residual was above the threshold specified in the runtime params.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
The tool was unable to compute the plane.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
If licensing for this operator cannot be confirmed.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SelectedIndex">
            <summary>
For Cognex internal use only
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.DeletePoint(System.Int32)">
            <summary>
Delete a point from the input point list using the index specified
</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <remarks>
invalid range exception will be thrown
</remarks>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNumPoints</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.AddPoint(System.Double,System.Double)">
            <summary>
Add a point to the locations. The values are in selected space. 
</summary>
            <value>
The point will be added at the the end of the list.
</value>
            <exception cref="T:System.OutOfMemoryException">
Out of memory exception will be thrown if the point could not be added.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNumPoints</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.PlaneDirection">
            <summary>
Gets or sets the plane direction. 
</summary>
            <value>
The default plane direction positive image z direction. 
</value>
            <exception cref="T:System.ArgumentException">
If the argument supplied is not PositiveImageZ or NegativeImageZ. 
</exception>
            <remarks>
The plane direction specifies the direction in which the estimated plane's
normal should point. Note that, regardless of the direction selected, the 
plane is always returned in selected space. 
</remarks>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPlaneDirection</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SetPoint(System.Int32,System.Double,System.Double)">
            <summary>
Sets the (x,y) coordinates defined in selected space for a single point using the index. 
The points are used only when FitMethod is set to Points.
</summary>
            <value>
The default is (0,0)
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfGetPointX</item>
                    <item>SfGetPointY</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.GetPoint(System.Int32,System.Double@,System.Double@)">
            <summary>
Gets the (x,y) coordinates defined in selected space for a single point using the index.
The points are used only when FitMethod is set to Points.
</summary>
            <value>
The default is (0,0)
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfGetPointX</item>
                    <item>SfGetPointY</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SetPointY(System.Int32,System.Double)">
            <summary>
Sets the Y (defined in selected space) for a single point using the index.
The points are used only when FitMethod is set to Points.
</summary>
            <value>
The default is 0.
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfGetPointY</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.GetPointY(System.Int32)">
            <summary>
Gets the Y (defined in selected space) for a single point using the index.
The points are used only when FitMethod is set to Points.
</summary>
            <value>
The default is 0.
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfGetPointY</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SetPointX(System.Int32,System.Double)">
            <summary>
Sets the X (defined in selected space) for a single point using the index.
The points are used only when FitMethod is set to Points.
</summary>
            <value>
The default is 0
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfGetPointX</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.GetPointX(System.Int32)">
            <summary>
Gets the X (defined in selected space) for a single point using the index.
The points are used only when FitMethod is set to Points.
</summary>
            <value>
The default is 0
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index is outside the range of points available. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfGetPointX</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.NumPoints">
            <summary>
Gets or sets the number of 2D locations specified in selected space. 
The points are used only when FitMethod is set to Points.
</summary>
            <value>
A minimum of 3 points are required to fit a plane. The default is 0.
</value>
            <exception cref="T:System.ArgumentException">
If the index is less than 0. 
</exception>
            <exception cref="T:System.OutOfMemoryException">
When not enough memory available to allocate the number of points specified.  
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNumPoints</item>
                </list>
            </event>
            <remarks>
The locations are only used when the Fit Method is set to Points.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.NeighborhoodSizeYInPixels">
            <summary>
Gets or sets the NeighborhoodSizeYInPixels. 
Only used when <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Points and
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.ZLookupMethod" /> is set to NeighborhoodMedian or Neighborhood.
</summary>
            <value>
The neighborhood size in Y. The neighborhood to use when the
ZLookupMethod is NeighborhoodMedian or Neighborhood. The default is 5.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is less than 1. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNeighborhoodSizeYInPixels</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.NeighborhoodSizeXInPixels">
            <summary>
Gets or sets the NeighborhoodSizeXInPixels. 
Only used when <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Points and
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.ZLookupMethod" /> is set to NeighborhoodMedian or Neighborhood.
</summary>
            <value>
The neighborhood size in X. The neighborhood to use when the
ZLookupMethod is NeighborhoodMedian or Neighborhood. The default is 5.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is less than 1.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNeighborhoodSizeXInPixels</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.ResidualsRMSThreshold">
            <summary>
Gets or sets the Residuals RMS Threshold. 
</summary>
            <value>
If the Residuals RMS computed for the fitted plane
is above this threshold. The tool will throw.
The default is HUGE_VAL.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is less than 0. 
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfResidualsRMSThreshold</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMaskOffsetY">
            <summary>
Gets or sets the InputImageMask Y offset value in pixels.
</summary>
            <value>
The InputImageMask Y offset value in pixels. The X and Y offset values
set the offset from the upper-left corner of the run-time input
image to the upper-left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMask" />
in pixels. The default is 0.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffsetY</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMaskOffsetX">
            <summary>
Gets or sets the InputImageMask X offset value in pixels.
</summary>
            <value>
The InputImageMask X offset value in pixels. The X and Y offset values
set the offset from the upper-left corner of the run-time input
image to the upper-left corner of the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMask" />
in pixels. The default is 0.
</value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputImageMaskOffsetX</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMask">
            <summary>
Gets or sets the input image mask.
The input image mask allows you to ignore regions
of the range image by masking them out.
</summary>
            <value>
InputImageMask is optional and may be null if no mask is 
required. The default is null.
<para>
255 = use this pixel
</para><para>
0 = ignore this pixel
</para></value>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputImageMask</item>
                </list>
            </event>
            <remarks>
The input image mask is applied to the input image after taking the 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMaskOffsetX" />
and
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.InputImageMaskOffsetY" /> 
into account.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod">
            <summary>
Gets or sets the FitMethod. 
</summary>
            <value>
The fit Method specifies which mode is used to fit the plane. May be either Area or
Points. The default is Area.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is not Area or
Points.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFitMethod</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.ZLookupMethod">
            <summary>
Gets or sets the ZLookupMethod. 
</summary>
            <value>
The Z Lookup Method specifies how z values are looked up from pixels in the range image. 
May be either Neighborhood, SinglePixel or
NeighborhoodMedian. The default is Neighborhood.
</value>
            <remarks>
The Z Lookup Method is only used when the  <see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.FitMethod" /> is set to Points.
</remarks>
            <exception cref="T:System.ArgumentException">
If the supplied argument is not Neighborhood, SinglePixel or
NeighborhoodMedian.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfZLookupMethod</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.RegionMode">
            <summary>
Gets or sets the region mode. This controls how the optional run time
region is applied to the input image. 
</summary>
            <value>
The region mode. May be either PixelAlignedBoundingBox or
PixelAlignedBoundingBoxAdjustMask. The Default is 
PixelAlignedBoundingBoxAndAdjustMask.
</value>
            <exception cref="T:System.ArgumentException">
If the supplied argument is not either PixelAlignedBoundingBox or
PixelAlignedBoundignBoxAdjustMask.
</exception>
            <event cref="T:Cognex.VisionPro.ICogChangedEvent">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRegionMode</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for point vector object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImagePlaneEstimator object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.Finalize">
            <summary>
Finalize this Cog3DRangeImagePlaneEstimator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.Dispose">
            <summary>
Destruct this Cog3DRangeImagePlaneEstimator.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.#ctor(Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator)">
            <summary>
Construct a deep copy of the supplied Cog3DRangeImagePlaneEstimator object.
</summary>
            <param name="Other">
The Cog3DRangeImagePlaneEstimator object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied argument is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.#ctor">
            <summary>
Construct a default Cog3DRangeImagePlaneEstimator object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfPlaneDirection">
            <summary>
This bit will be set in the EventArgs of a changed event every time
the value returned by PlaneDirection may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfGetPointY">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by GetPointY may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfGetPointX">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by GetPointX may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfNumPoints">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NumPoints may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfFitMethod">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by FitMethod may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfNeighborhoodSizeYInPixels">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NeighborhoodSizeYInPixels may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfNeighborhoodSizeXInPixels">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by NeighborhoodSizeXInPixels may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfZLookupMethod">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ZLookupMethod may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfResidualsRMSThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by ResidualsRMSThreshold may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfInputImageMaskOffsetY">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputImageMaskOffsetY may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfInputImageMaskOffsetX">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputImageMaskOffsetX may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfInputImageMask">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by InputImageMask may have cahnged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator.SfRegionMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time
the value returned by RegionMode may have cahnged.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimator">
            <summary>
The plane estimator operator. 
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.Plane">
            <summary>
The best fit plane found. The plane is defined in the
<see cref="P:Cognex.VisionPro.CogImage16Range.SelectedSpaceName3D" />
coordinates of the range image
</summary>
            <remarks>
                <para>
When FitMethod is set to Area: 
Range image pixels that meet the following criteria are
used to fit the plane:
<para>
1) must be contained within the 2D region of interest of the range image. No region means all of the input image.
</para><para>
2) must be marked as "Care" if an input image mask is provided.
</para><para>  
3) must be marked as "Visible" in the range image's visible pixel mask.
</para>
Pixels that meet these conditions are used to fit the plane
and are counted in 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation" /></para>
                <para>
When FitMethod is set to Points:
Range image pixels that meet the following criteria are
used to fit the plane:
<para>
1) must be contained within the range image boundaries. 
</para><para>  
2) must be marked as "Visible" in the range image's visible pixel mask.
</para>
Pixels that meet these conditions are used to fit the plane
and are counted in 
<see cref="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation" /></para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.NumberOfPointsUsedInEstimation">
            <summary>
The number of points used to fit the plane
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.ResidualsRMS">
            <summary>
The Residuals RMS error.
The RMS error should be small (less than 0.1)
to indicate that the plane is properly fitted.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for Cog3DRangeImagePlaneEstimatorResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.Finalize">
            <summary>
Finalize this Cog3DRangeImagePlaneEstimatorResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.Dispose">
            <summary>
Destruct this Cog3DRangeImagePlaneEstimatorResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.#ctor(Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult)">
            <summary>
Constructs a new instance of this class as a deep copy
of the given instance.
</summary>
            <param name="other">
The Cog3DRangeImagePlaneEstimatorResult object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorResult">
            <summary>
The result of running the plane Estimator tool.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants">
            <summary>
Enumeration of diagnostic data that can be provided in the
Tool's LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.All">
            <summary>
Include all of the diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.Points">
            <summary>
Include a copy of the points in the LastRunRecord. When the ZLookupMethod is set to 
Neighborhood or NeighborhoodMedian then a child rectangle 
graphic representing the neighbors will be displayed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.InputImageMask">
            <summary>
Include a copy of the input image mask in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.Region">
            <summary>
Include a copy of the region in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordConstants">
            <summary>
Enumeration of non-diagnostic data that can be provided in
the Tool's LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordConstants.All">
            <summary>
Include all of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants">
            <summary>
Enumeration of data that can be provided in the Tool's
CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.Points">
            <summary>
Include a graphic representing the input points in
the CurrentRecord. When the ZLookupMethod is set to 
Neighborhood or NeighborhoodMedian then a child rectangle 
graphic representing the neighbors will be displayed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.InputImageMask">
            <summary>
Include a graphic representing the input image mask in
the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.Region">
            <summary>
Include the (interactive) region to be used as a mask
in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorFitMethodConstants">
            <summary>
Constants used to specify how the plane is computed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorFitMethodConstants.Area">
            <summary>
Use the points specified by the region and mask to fit the plane. 
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorFitMethodConstants.Points">
            <summary>
Use the points to fit the plane.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorZLookupMethodConstants">
            <summary>
Constants used to specify how z values are
looked up from a range image.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorZLookupMethodConstants.Neighborhood">
            <summary>
All visible pixels inside the neighborhood around each specified 
location are used to estimate the plane. The z value for each pixel is 
looked up using 'singlePixel' mode. 
Only valid when FitMethod is set to Points.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorZLookupMethodConstants.NeighborhoodMedian">
            <summary>
the z value is inferred from the median of an NxM neighborhood around each pixel in the range image. 
Only valid when FitMethod is set to Points.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorZLookupMethodConstants.SinglePixel">
            <summary>
the z value is inferred from a single pixel in the range image.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorPlaneDirectionConstants">
            <summary>
An enumeration that specifies the direction in which the estimated plane's
normal should point. Note that, regardless of the direction selected, the 
plane is always returned in selected space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorPlaneDirectionConstants.NegativePixelSpaceZ">
            <summary>
The estimated plane's normal (in selected space) is forced to point 
towards the direction that corresponds approximately to the negative z-axis in pixel space 
coordinates, when the plane is mapped to pixel space coordinates.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeImagePlaneEstimatorPlaneDirectionConstants.PositivePixelSpaceZ">
            <summary>
The estimated plane's normal (in selected space) is force to point 
towards the direction that corresponds approximately to the positive z-axis in pixel space 
coordinates, when the plane is mapped to pixel space coordinates.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3Ds.GenerateFeaturesModel3D(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D}})">
            <summary>
This static method generates 3D model features from the specified crsp2D3DsForAllPartPoses
and the specified raw2DFromPhys3Ds.
</summary>
            <param name="raw2DFromPhys3Ds">
A List of camera calibration objects. May not be null.
</param>
            <param name="crsp2D3DsForAllPartPoses">
                <para>  
The List of Lists of 2D feature to 3D model feature correspondences.
The specified crsp2D3DsForAllPartPoses are indexed as crsp2D3DsForAllPartPoses[partPoseIndex][crspIndex].
Each crsp2D3D in <paramref name="crsp2D3DsForAllPartPoses" /> should be fully initialized.
It is OK for the FeatureRaw2D member of some crsp2D3DsForAllPartPoses to be null, indicating that
no 2D feature was found.
</para>
                <para> 
If any crsp2D3D in <paramref name="crsp2D3DsForAllPartPoses" />[i][j] and <paramref name="crsp2D3DsForAllPartPoses" />[m][n] 
correspond to the 
same 3D model feature, then <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DIndex
 must be the same as <paramref name="crsp2D3DsForAllPartPoses" />[m][n].FeatureModel3DIndex,
and <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType
 must be the same as <paramref name="crsp2D3DsForAllPartPoses" />[m][n].FeatureModel3DType.
</para>
                <para>
                    <paramref name="crsp2D3DsForAllPartPoses" />[i][j].PartInstanceIndex must be 0.
</para>
            </param>
            <returns>
                <para> 
A <see cref="T:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults" /> results object 
containing a List of the 3D model features and a List of the pose of the part 
in each part pose.  
The List of part poses in the results object is indexed by part pose index.
The List of 3D model features is indexed by the FeatureModel3DIndex used in the specified crsp2D3DsForAllPartPoses.  
Thus, the crsp2D3Ds in <paramref name="crsp2D3DsForAllPartPoses" /> with a 
FeatureModel3DIndex of N, were used in the generation of
(<see cref="T:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults" />).GetFeatureModel3DResults()[N].
</para>
                <para> If 
(<see cref="T:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults" />).GetFeatureModel3DResults()[i].IsFound
is false, it means that there was not enough information in the <paramref name="crsp2D3DsForAllPartPoses" />
to generate 3D model feature[i].
</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
If any of the input arguments are null, or any input argument includes
a null item with the exception that the FeatureRaw2D member of a crsp2D3D can be null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count is less than 2; </item>
                    <item>                  
If <paramref name="crsp2D3DsForAllPartPoses" />[i] includes duplicate items 
with the same CameraIndex,
the same PartInstanceIndex, and corresponding to the same model point; 
</item>
                    <item> If  <paramref name="crsp2D3DsForAllPartPoses" />[i][j].
PartInstanceIndex is not 0; </item>
                    <item> If  <paramref name="crsp2D3DsForAllPartPoses" />[i][j].CameraIndex is
not inside range [0, <paramref name="raw2DFromPhys3Ds" />.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType
is not Cog3DVect3, Cog3DLine, Cog3DLineSeg,
Cog3DCylinder, or Cog3DCircle;
</item>
                    <item> If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType
 is Cog3DVect3, but 
<paramref name="crsp2D3DsForAllPartPoses" />[i][j].Subfeature is not
Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType
 is Cog3DLine or Cog3DLineSeg, but 
<paramref name="crsp2D3DsForAllPartPoses" />[i][j].Subfeature is not
Cog3DSubfeatureConstants.StraightEdge0; </item>
                    <item> If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType is
Cog3DCircle, but 
<paramref name="crsp2D3DsForAllPartPoses" />[i][j].Subfeature is not
Cog3DSubfeatureConstants.CircleEdge0 or Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType is
 Cog3DCylinder, but 
<paramref name="crsp2D3DsForAllPartPoses" />[i][j].Subfeature is not
Cog3DSubfeatureConstants.OccludingEdge0, .OccludingEdge1, .CircularEdge0, 
or .CircularEdge1; </item>
                    <item> If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureRaw2D
is not null, and its type is not Cog3DVect2, or Cog3DVect2Collection;
</item>
                    <item>  If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureModel3DType
is Cog3DVect3,  
<paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureRaw2D 
has type of Cog3DVect2Collection, and its size is greater than 1. 
</item>
                </list>
            </exception>
            <remarks>
                <para>  
The <paramref name="crsp2D3DsForAllPartPoses" /> should be created by 
placing a single part under your cameras and simultaneously acquiring images
of the one part from all the cameras.  This set of images constitutes a
"part pose".  You should create several part poses of your part, 
see the Best Practices listed below for details.  Providing multiple
part poses improves the accuracy of the generated 3D model features.
</para>
                <para>
After collecting the part poses (sets of images of the part), you need to extract
the crsp2D3Ds from each of them.  For each part pose, extract the crsp2D3Ds from
the images of the part pose and put them into a List.  
The List of crsp2D3Ds from each part pose is then placed in another List thereby creating
<paramref name="crsp2D3DsForAllPartPoses" /> which 
is indexed as <paramref name="crsp2D3DsForAllPartPoses" />[partPoseIndex][crspIndex].
</para>
                <para>
The 3D model features in the returned results object are in the Model3D coordinate space.
The Model3D coordinate space is defined in part pose 0 or <paramref name="crsp2D3DsForAllPartPoses" />[0]
i.e. the pose of the Phys3D origin in part pose 0 will be used to define the origin
of the part's 3D coordinate space - Model3D.  Thus, the pose of the part (the transform
from Model3D space to Phys3D space) in <paramref name="crsp2D3DsForAllPartPoses" />[0]
is the identity transform.
</para>
                <para>  
If <paramref name="crsp2D3DsForAllPartPoses" />[i][j].FeatureRaw2D is null or empty,
then <paramref name="crsp2D3DsForAllPartPoses" />[i][j] is ignored 
during model feature generation.
</para>
                <para>
All the specified camera calibrations must refer to the same Phys3D coordinate space.  
</para>
                <para>
Best Practices for Generating 3D Model Features:
</para>
                <list type="bullet">
                    <item> 
The FOV must contain a single part. 
</item>
                    <item> 
Use the 5 part poses described below when creating <paramref name="crsp2D3DsForAllPartPoses" />.
<list type="bullet"><item> 
Pose 0: Place the part as close as possible to the origin of Phys3D, use a z rotation of 0 degrees.  Note that
the origin of the Model3D coordinate space (the coordinate space all your 3D model features are defined in) is defined 
by the Phys3D origin in this pose.
</item><item> 
Pose 1: Place the part in the upper left corner of FOV visible by both cameras, use a z rotation of ~20 degrees.
</item><item> 
Pose 2: Place the part in the upper right corner of FOV visible by both cameras, use a z rotation of ~45 degrees.
</item><item> 
Pose 3: Place the part in the lower left corner of FOV visible by both cameras, use a z rotation of ~67 degrees.
</item><item> 
Pose 4: Place the part in the lower right corner of FOV visible by both cameras, use a z rotation of ~90 degrees.
</item></list></item>
                    <item>
Verify the IsFound and the residuals in GetFeatureModel3DResults() from the returned results object are acceptable for your 3D model.
</item>
                </list>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3Ds">
            <summary>
This class provides 3D model feature generation using crsp2D3Ds 
and camera calibrations.  Use this class to generate the 3D features
in your 3D model.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.GetPoseResults">
            <summary>
Gets a deep copy of the pose results for all the part poses used in 3D model feature generation, 
indexed by part pose.
</summary>
            <returns>
A deep copy of the pose results for all the part poses.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.GetFeatureModel3DResults">
            <summary>
Gets a deep copy of the generated 3D model feature results, indexed by FeatureModel3DIndex.
</summary>
            <returns>
A deep copy of the generated 3D model feature results.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults.#ctor(Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResults">
            <summary>
This class holds the results from a 3D model feature generation operation.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DModelFeatureGeneratorUsingCrsp2D3Ds class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.RealEqual(Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult,Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.GetResidualsPhys3D">
            <summary>
Gets the List of Phys3D residual statistics for this 3D model feature result 
indexed by part pose.
</summary>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
            <value>
The List of residual statistics of this result in Phys3D space for all the part poses.
</value>
            <inheritdoc cref="!:ICog3DBase::TriangulatorOrModelGenerator" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.GetResidualsRaw2D">
            <summary>
Gets the List of Raw2D residual statistics for this 3D model feature result 
indexed by part pose.
</summary>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
            <value>
The List of residual statistics of this 3D model feature result in Raw2D space for all the part poses.
</value>
            <inheritdoc cref="!:ICog3DBase::TriangulatorOrModelGenerator" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.GetResidualsValid">
            <summary>
Gets a deep copy of the flags indicating which residuals are valid.
Indexed by part pose.
</summary>
            <returns>
A deep copy of the flags indicating which residuals are valid.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
            <remarks>
                <para>
The returned List ResidualsValid indicates whether or not the 2D features
from a part pose contributed to the generation of this 3D model feature.
If ResidualsValid[i] is true, it means part pose[i] had 2D features 
used in generating this 3D feature, and ResidualsRaw2D[i] and 
ResidualsPhys3D[i] are valid.
If ResidualsValid[i] is false, it means 2D features from part pose[i] were not used
in generating this 3D model feature, and ResidualsRaw2D[i] and
ResidualsPhys3D[i] are not valid.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.GetFeatureModel3D">
            <summary>
Gets a deep copy of the generated 3D model feature.
</summary>
            <returns>
Deep copy of the generated 3D model feature.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
            <remarks>
The return object type will be one of
Cog3DVect3,
Cog3DCircle, Cog3DLine, Cog3DLineSeg, or Cog3DCylinder.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.FeatureModel3DIndex">
            <summary>
Gets the 3D model feature index of this 3D feature within the List of 3D model features.
</summary>
            <value>
The 3D model feature index, which is the same as FeatureModel3DIndex in the 
crsp2D3Ds used for this 3D model feature generation.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.IsFound">
            <summary>
Gets whether or not this 3D model feature was found.
</summary>
            <value>
True if this 3D model feature was found; false otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult.#ctor(Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DModelFeatureGeneratorUsingCrsp2D3DsResult">
            <summary>
This class holds one 3D model feature result from a 3D model feature generation operation.
This class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DModelFeatureGeneratorUsingCrsp2D3Ds class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.RefinePoseUsingAllCrsp2D3Ds(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Int32,Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
This method performs a 3D pose refinement based on an initial pose,
the specified crsp2D3DsUnified,
and the specified 
camera calibrations, from one or multiple cameras/views. Note that this method 
uses all the input features.
</summary>
            <param name="initialPhys3DFromModel3D">
An initial estimation for the pose. May not be NULL.
</param>
            <returns>
The refined 3D pose result. The pose maps 
point/shape features from Model3D space to Phys3D space.  
</returns>
            <param name="raw2DFromPhys3Ds">
A List of camera calibrations. One calibration per camera/view.
The size of this list specifies the number of cameras/views.
May not be null.
</param>
            <param name="crsp2D3DsUnified">
                <para>
A List of crsp2D3Ds. May not be null. Note that
each item has the camera index, the index of the part instance,
the 2D feature(s), the corresponding 3D feature index,
and sub-feature type. 
</para>
                <para>
Note that when there is multiple part instances, the PartInstanceIndex 
of <paramref name="crsp2D3DsUnified" />
must be unified for all cameras by calling part corresponder 
(<see cref="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.CorrespondPartsUsingPointsAndIntersectionPoints(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D}@)">
Cog3DPartCorresponderUsingCrsp2D3Ds.Execute </see>). 
Therefore, for the same 3D part instance, the same PartInstanceIndex
is used for the corresponding crsp2D3Ds items across all cameras.
</para>
                <para>
If there is only one part instance, and the PartInstanceIndex 
is 0 for all items of crsp2D3Ds, then no need to call part corresponder.
</para>
                <para>  Note that if <paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D
is null or empty,
then <paramref name="crsp2D3DsUnified" />[i] is ignored
during pose estimation.
</para>
            </param>
            <param name="partInstanceIndex">
This parameter specifies which part instance to run the pose estimation.
If <paramref name="crsp2D3DsUnified" />[i].PartInstanceIndex is not equal to 
<paramref name="partInstanceIndex" />, then that
<paramref name="crsp2D3DsUnified" /> element is not used in 
the pose estimation. 
</param>
            <exception cref="T:System.ArgumentNullException">
If any of the arguments (except <paramref name="partInstanceIndex" />) is null,
or any input argument includes null item, or 
FeaturesModel3D[<paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex]
is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count == 0; </item>
                    <item>
if <paramref name="raw2DFromPhys3Ds" />.Count is 1, and 
<paramref name="raw2DFromPhys3Ds" />[0].IsTelecentric is true .
</item>
                    <item> If  <paramref name="partInstanceIndex" /> is less than 0; </item>
                    <item> If  <paramref name="crsp2D3DsUnified" />[i].CameraIndex is
not inside range [0, <paramref name="raw2DFromPhys3Ds" />.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
is not Cog3DVect3, Cog3DLine, Cog3DLineSeg,
Cog3DCylinder, or Cog3DCircle;
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
 is Cog3DVect3, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
 is Cog3DLine or Cog3DLineSeg, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.StraightEdge0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is
Cog3DCircle, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.CircleEdge0 or Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is
 Cog3DCylinder, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.OccludingEdge0, .OccludingEdge1, .CircularEdge0, 
or .CircularEdge1; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D
is not null, and its type is not Cog3DVect2, or Cog3DVect2Collection;
</item>
                    <item>  If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
is Cog3DVect3,  
<paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D 
has type of Cog3DVect2Collection, and its size is greater than 1. 
</item>
                    <item> If  <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex is
not inside range [0, FeaturesModel3D.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is not
the same as the type of 
FeaturesModel3D[<paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex];
</item>
                </list>
            </exception>
            <remarks>
                <para>
Note that this method handles a single part instance.  
Therefore, all 2D features with the specified 
<paramref name="partInstanceIndex" />
in <paramref name="crsp2D3DsUnified" /> must correspond to the same
part instance.
</para>
                <para>
Note that if 3D line segment model features are used, and some 3D line 
segments are shorter than the actual lengths, then it may return result(s)
with larger residuals. Dilating the 3D line segments 
may avoid this problem.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.EstimatePoseUsingInlierCrsp2D3Ds(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Int32,Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple)">
            <summary>
This method performs a 3D robust pose estimation for one part instance based on 
the specified crsp2D3DsUnified, and the specified 
camera calibrations, from one or multiple cameras/views. Note that 
robust pose estimation parameters are used, and the returned result 
includes information about feature outliers.
</summary>
            <param name="robustPoseEstimationParamsSimple">
Simple parameters to specify the behavior of the robust pose estimation.
May not be null.
</param>
            <returns>
The pose estimation result (<see cref="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult" />). 
A pose estimation result is always returned 
except when a throw occurs. The pose estimation result contains a list of 
pose results (<see cref="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetPoseResults" />)
and the list of crsp2D3D indices of the outliers
(<see cref="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetIndicesOfOutlierCrsp2D3Ds" />)  .
The pose in each pose result maps features from Model3D space to Phys3D space.  
A list of pose results is returned in order to handle the situation where there
are multiple pose estimations for the available features.  
The list of pose results will contain: 
<list type="bullet"><item> 0 pose results, when no poses were found to meet the estimation parameters;
</item><item>   1 pose result, when there was a single pose that met the estimation parameters;
</item><item> &gt; 1 pose results, when there were multiple poses that satisfied the estimation
parameters
</item></list><para>
Note that the returned object of <see cref="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult" /> 
has properties 
<see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.PartInstanceIndex" /> and 
<see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message" />:
</para><para><see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.PartInstanceIndex" /> 
is the same as the input argument <paramref name="partInstanceIndex" />, and can 
be used to correspond pose estimation results and part instances.
</para><para><see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message" /> is NULL if pose results
<see cref="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetPoseResults" />
in the returned object is not empty; Otherwise, 
<see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message" /> contains
diagnosis information about why the pose results in the returned object is empty.
</para></returns>
            <param name="raw2DFromPhys3Ds">
A List of camera calibrations. One calibration per camera/view.
The size of this list specifies the number of cameras/views.
May not be null.
</param>
            <param name="crsp2D3DsUnified">
                <para>
A List of crsp2D3Ds. May not be null. Note that
each item has the camera index, the index of the part instance,
the 2D feature(s), the corresponding 3D feature index,
and sub-feature type. 
</para>
                <para>
Note that when there is multiple part instances, the PartInstanceIndex 
of <paramref name="crsp2D3DsUnified" />
must be unified for all cameras by calling part corresponder 
(<see cref="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.CorrespondPartsUsingPointsAndIntersectionPoints(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D}@)">
Cog3DPartCorresponderUsingCrsp2D3Ds.Execute </see>). 
Therefore, for the same 3D part instance, the same PartInstanceIndex
is used for the corresponding crsp2D3Ds items across all cameras.
</para>
                <para>
If there is only one part instance, and the PartInstanceIndex 
is 0 for all items of crsp2D3Ds, then no need to call part corresponder.
</para>
                <para>  Note that if <paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D
is null or empty,
then <paramref name="crsp2D3DsUnified" />[i] is ignored
during pose estimation.
</para>
            </param>
            <param name="partInstanceIndex">
This parameter specifies which part instance to run the pose estimation.
If <paramref name="crsp2D3DsUnified" />[i].PartInstanceIndex is not equal to 
<paramref name="partInstanceIndex" />, then that
<paramref name="crsp2D3DsUnified" /> element is not used in 
the pose estimation. 
</param>
            <exception cref="T:System.ArgumentNullException">
If any of the arguments (except <paramref name="partInstanceIndex" />) is null,
or any input argument includes null item, or 
FeaturesModel3D[<paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex]
is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count == 0; </item>
                    <item>
if <paramref name="raw2DFromPhys3Ds" />.Count is 1, and 
<paramref name="raw2DFromPhys3Ds" />[0].IsTelecentric is true .
</item>
                    <item> If  <paramref name="partInstanceIndex" /> is less than 0; </item>
                    <item> If  <paramref name="crsp2D3DsUnified" />[i].CameraIndex is
not inside range [0, <paramref name="raw2DFromPhys3Ds" />.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
is not Cog3DVect3, Cog3DLine, Cog3DLineSeg,
Cog3DCylinder, or Cog3DCircle;
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
 is Cog3DVect3, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
 is Cog3DLine or Cog3DLineSeg, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.StraightEdge0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is
Cog3DCircle, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.CircleEdge0 or Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is
 Cog3DCylinder, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.OccludingEdge0, .OccludingEdge1, .CircularEdge0, 
or .CircularEdge1; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D
is not null, and its type is not Cog3DVect2, or Cog3DVect2Collection;
</item>
                    <item>  If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
is Cog3DVect3,  
<paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D 
has type of Cog3DVect2Collection, and its size is greater than 1. 
</item>
                    <item> If  <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex is
not inside range [0, FeaturesModel3D.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is not
the same as the type of 
FeaturesModel3D[<paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex];
</item>
                </list>
            </exception>
            <remarks>
                <para>
Note that this method handles a single part instance.  
Therefore, all 2D features with the specified 
<paramref name="partInstanceIndex" />
in <paramref name="crsp2D3DsUnified" /> must correspond to the same
part instance.
</para>
                <para>
Note that if 3D line segment model features are used, and some 3D line 
segments are shorter than the actual lengths, then it may return result(s)
with larger residuals. Dilating the 3D line segments 
may avoid this problem.
</para>
                <para>
Note that this method might return multiple different poses with similar fitting residuals.
If the returned result has a list of multiple pose results, it means not enough 
information in <paramref name="crsp2D3DsUnified" /> to get a unique pose for the specified part instance.
Pose ambiguities can be avoided by adding more feature correspondences.
</para>
                <para>
The following is a list of situations that satisfy the requirements for
estimating a pose.  Note that under some of these situations there may 
be multiple poses with equivalent fitting residuals:
<list type="bullet"><item> There are 3 or more point correspondences; </item><item> There are 3 or more intersection points among 3D model lines or 
line segments;</item><item> There are 3 or more model circles; </item><item> There are 2 or more non-parallel model cylinders; 
</item><item> The combination of number of point correspondences, number of
intersection points among 3D model lines or line segments, 
and number of model circles, is 3 or more; </item><item> There are 2 or more nonparallel model lines or line segments
observed simultaneously by two or more cameras; </item><item> There are 2 or more model circles observed simultaneously
by two or more cameras;</item><item> There are one or more model points, and one or more model circles
observed simultaneously by two or more cameras;</item><item> There are one or more model points, and one or more model lines
or line segments observed simultaneously by two or more cameras; </item><item> There are one or more model points, and one or more model
cylinders observed simultaneously by two or more cameras; </item><item> There are one or more model lines or line segments, and one or 
more model circles observed simultaneously by two or more cameras; 
</item><item> There are one or more model cylinders, and one or more model 
circles observed simultaneously by two or more cameras; </item><item> There are one or more model cylinders, and one or more model 
lines or line segments (not parallel to the cylinder's axis) observed 
simultaneously by two or more cameras. </item></list></para>
                <para>
Note that the returned result might have an empty list of pose results, 
if it can not find any pose satisfying the requirements
specified by the robust pose estimation parameters.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.EstimatePoseUsingAllCrsp2D3Ds(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Int32)">
            <summary>
This method performs a 3D pose estimation for one part instance based on the specified
crsp2D3DsUnified and the specified camera calibrations, from one or multiple cameras/views.
</summary>
            <returns>
The pose estimation result (<see cref="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult" />). 
A pose estimation result is always returned 
except when a throw occurs. The pose estimation result contains a list of 
pose results (<see cref="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetPoseResults" />)
and the list of crsp2D3D indices of the outliers
(<see cref="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetIndicesOfOutlierCrsp2D3Ds" />).  
The list of outliers is empty because this method does not remove outliers.
The pose in each pose result maps features from Model3D space to Phys3D space.  
A list of pose results is returned in order to handle the situation where there
are multiple pose estimations for the available features.  
The list of pose results will contain: 
<list type="bullet"><item> 0 pose results, when no poses were found to meet the estimation parameters;
</item><item>   1 pose result, when there was a single pose that met the estimation parameters;
</item><item> &gt; 1 pose results, when there were multiple poses that satisfied the estimation
parameters
</item></list><para>
Note that the returned object of <see cref="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult" /> 
has properties 
<see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.PartInstanceIndex" /> and 
<see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message" />:
</para><para><see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.PartInstanceIndex" /> 
is the same as the input argument <paramref name="partInstanceIndex" />, and can 
be used to correspond pose estimation results and part instances.
</para><para><see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message" /> is NULL if pose results
(<see cref="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetPoseResults" />)
in the returned object is not empty; Otherwise, 
<see cref="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message" /> contains
diagnosis information about why the pose results in the returned object is empty.
</para></returns>
            <param name="raw2DFromPhys3Ds">
A List of camera calibrations. One calibration per camera/view.
The size of this list specifies the number of cameras/views.
May not be null.
</param>
            <param name="crsp2D3DsUnified">
                <para>
A List of crsp2D3Ds. May not be null. Note that
each item has the camera index, the index of the part instance,
the 2D feature(s), the corresponding 3D feature index,
and sub-feature type. 
</para>
                <para>
Note that when there is multiple part instances, the PartInstanceIndex 
of <paramref name="crsp2D3DsUnified" />
must be unified for all cameras by calling part corresponder 
(<see cref="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.CorrespondPartsUsingPointsAndIntersectionPoints(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D}@)">
Cog3DPartCorresponderUsingCrsp2D3Ds.Execute </see>). 
Therefore, for the same 3D part instance, the same PartInstanceIndex
is used for the corresponding crsp2D3Ds items across all cameras.
</para>
                <para>
If there is only one part instance, and the PartInstanceIndex 
is 0 for all items of crsp2D3Ds, then no need to call part corresponder.
</para>
                <para>  Note that if <paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D
is null or empty,
then <paramref name="crsp2D3DsUnified" />[i] is ignored
during pose estimation.
</para>
            </param>
            <param name="partInstanceIndex">
This parameter specifies which part instance to run the pose estimation.
If <paramref name="crsp2D3DsUnified" />[i].PartInstanceIndex is not equal to 
<paramref name="partInstanceIndex" />, then that
<paramref name="crsp2D3DsUnified" /> element is not used in 
the pose estimation. 
</param>
            <exception cref="T:System.ArgumentNullException">
If any of the arguments (except <paramref name="partInstanceIndex" />) is null,
or any input argument includes null item, or 
FeaturesModel3D[<paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex]
is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count == 0; </item>
                    <item>
if <paramref name="raw2DFromPhys3Ds" />.Count is 1, and 
<paramref name="raw2DFromPhys3Ds" />[0].IsTelecentric is true .
</item>
                    <item> If  <paramref name="partInstanceIndex" /> is less than 0; </item>
                    <item> If  <paramref name="crsp2D3DsUnified" />[i].CameraIndex is
not inside range [0, <paramref name="raw2DFromPhys3Ds" />.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
is not Cog3DVect3, Cog3DLine, Cog3DLineSeg,
Cog3DCylinder, or Cog3DCircle;
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
 is Cog3DVect3, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
 is Cog3DLine or Cog3DLineSeg, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.StraightEdge0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is
Cog3DCircle, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.CircleEdge0 or Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is
 Cog3DCylinder, but 
<paramref name="crsp2D3DsUnified" />[i].Subfeature is not
Cog3DSubfeatureConstants.OccludingEdge0, .OccludingEdge1, .CircularEdge0, 
or .CircularEdge1; </item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D
is not null, and its type is not Cog3DVect2, or Cog3DVect2Collection;
</item>
                    <item>  If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType
is Cog3DVect3,  
<paramref name="crsp2D3DsUnified" />[i].FeatureRaw2D 
has type of Cog3DVect2Collection, and its size is greater than 1. 
</item>
                    <item> If  <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex is
not inside range [0, FeaturesModel3D.Count-1];
</item>
                    <item> If <paramref name="crsp2D3DsUnified" />[i].FeatureModel3DType is not
the same as the type of 
FeaturesModel3D[<paramref name="crsp2D3DsUnified" />[i].FeatureModel3DIndex];
</item>
                </list>
            </exception>
            <remarks>
                <para>
Note that this method handles a single part instance.  
Therefore, all 2D features with the specified 
<paramref name="partInstanceIndex" />
in <paramref name="crsp2D3DsUnified" /> must correspond to the same
part instance.
</para>
                <para>
Note that if 3D line segment model features are used, and some 3D line 
segments are shorter than the actual lengths, then it may return result(s)
with larger residuals. Dilating the 3D line segments 
may avoid this problem.
</para>
                <para>
Note that this method might return multiple different poses with similar fitting residuals.
If the returned result has a list of multiple pose results, it means not enough 
information in <paramref name="crsp2D3DsUnified" /> to get a unique pose for the specified part instance.
Pose ambiguities can be avoided by adding more feature correspondences.
</para>
                <para>
The following is a list of situations that satisfy the requirements for
estimating a pose.  Note that under some of these situations there may 
be multiple poses with equivalent fitting residuals:
<list type="bullet"><item> There are 3 or more point correspondences; </item><item> There are 3 or more intersection points among 3D model lines or 
line segments;</item><item> There are 3 or more model circles; </item><item> There are 2 or more non-parallel model cylinders; 
</item><item> The combination of number of point correspondences, number of
intersection points among 3D model lines or line segments, 
and number of model circles, is 3 or more; </item><item> There are 2 or more nonparallel model lines or line segments
observed simultaneously by two or more cameras; </item><item> There are 2 or more model circles observed simultaneously
by two or more cameras;</item><item> There are one or more model points, and one or more model circles
observed simultaneously by two or more cameras;</item><item> There are one or more model points, and one or more model lines
or line segments observed simultaneously by two or more cameras; </item><item> There are one or more model points, and one or more model
cylinders observed simultaneously by two or more cameras; </item><item> There are one or more model lines or line segments, and one or 
more model circles observed simultaneously by two or more cameras; 
</item><item> There are one or more model cylinders, and one or more model 
circles observed simultaneously by two or more cameras; </item><item> There are one or more model cylinders, and one or more model 
lines or line segments (not parallel to the cylinder's axis) observed 
simultaneously by two or more cameras. </item></list></para>
                <para>
Note that calling GetIndicesOfOutlierCrsp2D3Ds() from the returned result
will obtain an empty list since all features are used in this pose estimation method.
</para>
                <para> Note that the returned result might have an empty list of pose results,
if it can not find any pose.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.FeaturesModel3D">
            <summary>
Gets/sets the 3D model features, in Model3D space, that define 
the object of interest.
</summary>
            <value>
A collection of 3D model features in Model3D space.
</value>
            <exception cref="T:System.ArgumentNullException">
If input argument in the setter is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds.#ctor">
            <summary>
Construct this default Cog3DPoseEstimatorUsingCrsp2D3Ds. Note that FeaturesModel3D is an empty collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3Ds">
            <summary>
This class provides 3D pose estimation methods from the specified crsp2D3DsUnified
for one part instance (specified by the input parameter "partInstanceIndex" in the 
methods).
The pose estimation is done by determining the best fit between 
a set of 3D features
and the set or sets of corresponded 2D image features.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Message">
            <summary>
Get the message string of this result.
</summary>
            <value>
The message string of this result.
</value>
            <remarks>
                <para>
The message might hold information about why no poses in this result.
</para>
                <para>
It is null if no information provided.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.PartInstanceIndex">
            <summary>
Get the index of the found part instance.
</summary>
            <value>
The index of the found part instance. 
</value>
            <remarks>
This index is the same as the input parameter "partInstanceIndex"
in related methods of Cog3DPoseEstimatorUsingCrsp2D3Ds. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetIndicesOfOutlierCrsp2D3Ds">
            <summary>
Gets the indices of the crsp2D3Ds classified as outliers
and excluded from the pose estimation.
</summary>
            <returns>
The list of the indices of the crsp2D3Ds classified as
outliers. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.GetPoseResults">
            <summary>
Gets the 3D pose results for one part instance.
Note that multiple pose results might be returned.
</summary>
            <returns>
The 3D pose results for one part instance.
</returns>
            <remarks>
If the returned list has multiple pose results, it means not enough 
information to get a unique pose during calling methods of 
Cog3DPoseEstimatorUsingCrsp2D3Ds.
Pose ambiguities can be avoided by adding more feature correspondences.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult.#ctor(Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsingCrsp2D3DsResult">
            <summary>
This class encapsulates the result of a 3D pose estimation using
the specified crsp2D3Ds for one part instance.
Note that this class is immutable - it may not be changed once
it has been constructed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.RealEqual(Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple,Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.MinNumOfFeaturesModel3DFromAtLeast2Cameras">
            <summary>
Gets/sets the minimum number of 3D model features from at least
2 cameras to be used for the pose estimation.
</summary>
            <value>
The minimum number of 3D model features from at least 2 cameras
to be used for the pose estimation.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than 0.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.MinNumOfFeaturesModel3D">
            <summary>
Gets/sets the minimum number of 3D model features to be used
for the pose estimation.
</summary>
            <value>
The minimum number of 3D model features to be used
for the pose estimation.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than 1.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.ResidualsPhys3DRmsThreshold">
            <summary>
Gets/sets a threshold used to specify the desired quality of the pose
estimation.  The threshold specifies the maximum allowed RMS value of
the distances between the rays of 2D features and their corresponding
mapped 3D model feature.  If the threshold is exceeded, then the crsp2D3Ds
having the largest impact on the RMS residuals are 
considered outliers.  Default value is HUGE_VAL.
</summary>
            <value>
The threshold of maximum residual in Phys3D.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than 0.0.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.ResidualsPhys3DMaxThreshold">
            <summary>
Gets/sets a threshold used to specify the desired quality of the pose 
estimation.  The threshold specifies the maximum allowed distance 
between the rays of any 2D feature and its corresponding mapped 3D 
model feature.  If the threshold is exceeded on one crsp2D3D, then that
crsp2D3D is considered an outlier.  Default value is HUGE_VAL.
</summary>
            <value>
The threshold of maximum residual in Phys3D.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than 0.0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.#ctor(Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple.#ctor">
            <summary>
Default constructor. Default values are:
<list type="bullet"><item> ResidualsPhys3DMaxThreshold is HUGE_VAL </item><item> ResidualsPhys3DRmsThreshold is HUGE_VAL </item><item> MinNumOfFeaturesModel3D is 3. </item><item> MinNumOfFeaturesModel3DFromAtLeast2Cameras is 0. </item></list></summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRobustPoseEstimationParametersSimple">
            <summary>
This class defines the simple robust pose estimation parameters that
controls the behavior of robust 3D pose estimation.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection})">
            <summary>
Fits a 3D cylinder from 2D point sets and a set of camera calibrations. 
It is not required that the 2D points of the different cameras/views 
correspond.
<para> 
Notes:
<list type="bullet"><item> The result's IsFound property will be set to false
if no cylinder can be fit to the given points. </item><item> This operation determines the 3D cylinder which minimizes
 the sum squared error in image pixels. </item><item> This operation can compute the cylinder's radius and height
if the input data includes image points from more than one camera.
</item></list></para></summary>
            <param name="raw2DFromPhys3Ds">
The List of camera calibrations of the cameras used to extract the 2D points.
The size of the list defines the number of cameras/views used.
</param>
            <param name="pointsRaw2DOnOccludingEdge0">
A List of 2D point collections for occluding edges, one collection per  
camera/view. The size of the list must be equal to the number of cameras.
May not be null.
<para> Notes:
<list type="bullet"><item> It only requires that all points in 
one collection correspond to the same occluding edge from that camera, i.e., all points
in <paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_i] must 
correspond to one occluding edge,
and points in <paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_j]
must correspond to  one occluding edge (but diffent from the one for 
<paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_i] if 
camIndex_j != camIndex_i). 
</item><item> This function can tolerate the situation where some or all items
of pointsRaw2DOnOccludingEdge0 are empty (i.e., 
<paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_i].Count==0); 
</item><item> It is NOT required that
<paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_i].Count == 
<paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_j].Count  
(camIndex_i != camIndex_j); </item><item> It is NOT required that 
<paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_i][k] corresponds
to <paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_j][k] 
(camIndex_i != camIndex_j). </item></list></para></param>
            <param name="pointsRaw2DOnOccludingEdge1">
A List of 2D point collections for occluding edges, one collection per 
camera/view. The size of the list must be equal to the number of cameras.
May not be null.
Note that <paramref name="pointsRaw2DOnOccludingEdge1" />[camIndex_i] and
<paramref name="pointsRaw2DOnOccludingEdge0" />[camIndex_i] must correspond
to two different occluding edges of the same cylinder observed from the 
same camera. For detailed  specification, see the notes of
<paramref name="pointsRaw2DOnOccludingEdge0" /> for more information.
</param>
            <param name="pointsRaw2DOnCircularEdge0">
A List of 2D point collections for circular edges, one collection per 
camera/view. The size of the List must be equal to the number of cameras.
May not be null.
<para> Notes:
<list type="bullet"><item> It only requires that all points in 
one collection correspond to the same circular edge (i.e., all points in 
<paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_i] must 
correspond to one circular edge on the cylinder,
and points in <paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_j] 
must correspond to one circular edge on the cylinder (which might be 
different from the one for 
<paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_i)). 
</item><item> This function can tolerate the situation where some or all items
of <paramref name="pointsRaw2DOnCircularEdge0" /> are empty 
(i.e., <paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_i].Count==0); 
</item><item> It is NOT required that 
<paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_i].Count == 
<paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_j].Count  
(camIndex_i != camIndex_j); </item><item> It is NOT required that 
<paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_i][k] corresponds
to <paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_j][k] 
(camIndex_i != camIndex_j). </item></list></para></param>
            <param name="pointsRaw2DOnCircularEdge1">
A List of 2D point collections for circular edges, one collection per 
camera/view. The size of the List must be equal to the number of cameras.
May not be null.
Note that <paramref name="pointsRaw2DOnCircularEdge1" />[camIndex_i]
<paramref name="pointsRaw2DOnCircularEdge0" />[camIndex_i] must correspond
to different circular edges of the same cylinder.
For detailed specification, see the notes of
<paramref name="pointsRaw2DOnCircularEdge0" /> for more information.
</param>
            <returns>
A Cog3DCylinderFitterUsing2DPointsResult containing the fitted cylinder 
and 2D and 3D residuals.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any of the input arguments is null or any argument includes null item.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If <paramref name="raw2DFromPhys3Ds" />.Count is less than 1. 
</item>
                    <item> If <paramref name="raw2DFromPhys3Ds" /> is not the same size as
<paramref name="pointsRaw2DOnOccludingEdge0" />,
<paramref name="pointsRaw2DOnOccludingEdge1" />,
<paramref name="pointsRaw2DOnCircularEdge0" />, or
<paramref name="pointsRaw2DOnCircularEdge1" /></item>
                    <item>
If Radius == 0 or Height == 0, and FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresUseSpecifiedRadiusAndHeight.
</item>
                    <item>
If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresComputeRadiusAndHeight and
<paramref name="raw2DFromPhys3Ds" />.Count is 1.
</item>
                    <item>
If none or only one of collections in  
<paramref name="pointsRaw2DOnOccludingEdge0" /> and  
<paramref name="pointsRaw2DOnOccludingEdge1" /> contains two or more points, AND
none of the collections in <paramref name="pointsRaw2DOnCircularEdge0" /> and
<paramref name="pointsRaw2DOnCircularEdge1" /> contains five or more points.
</item>
                    <item>
if <paramref name="raw2DFromPhys3Ds" />.Count is 1, and 
<paramref name="raw2DFromPhys3Ds" />[0].IsTelecentric is true .
</item>
                </list>
            </exception>
            <remarks>
                <para> The minimum 2D information required when fitting with 
 FitMode of
Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresUseSpecifiedRadiusAndHeight 
is: 
</para>
                <para>  At least two 2D points along each occluding edge for one camera;</para>
                <para>  or at least five 2D points along one of the circular edge for one camera. </para>
                <para> The minimum 2D information required when fitting with 
 FitMode of
Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresComputeRadiusAndHeight is: 
</para>
                <para>  At least two 2D points (from each camera) along each occluding edge for two cameras; 
</para>
                <para>  Or at least five 2D points (from each camera) along the same circular edge for two cameras. 
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.Height">
            <summary>
Gets/sets the expected height of the cylinder to find.
</summary>
            <value>
The expected height of the cylinder to find.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="value" /> is less than 0.
</exception>
            <remarks>
If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.eLeastSquaresUseSpecifiedRaiusAndHeight,
then Execute() will use this specified height. If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.eLeastSquaresComputeRadiusAndHeight,
then Execute() will ignore this specified height.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.Radius">
            <summary>
Gets/sets the expected radius of the cylinder to find.
</summary>
            <value>
The expected radius of the cylinder to find.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="value" /> is less than 0.
</exception>
            <remarks>
If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.eLeastSquaresUseSpecifiedRadiusAndHeight,
then Execute() will use this specified radius. If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.eLeastSquaresComputeRadiusAndHeight,
then  Execute() will ignore this specified radius.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.FitMode">
            <summary>
Gets/sets the fit mode for 3D cylinder fitting.
</summary>
            <value>
The fit mode for cylinder fitting.
</value>
            <exception cref="T:System.ArgumentException">
If an invalid fit mode is used in the setter.
</exception>
            <remarks>
If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.eLeastSquaresUseSpecifiedRadiusAndHeight, 
then Execute()
will use the values of Radius and Height . If FitMode is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.eLeastSquaresComputeRadiusAndHeight, 
then Execute() will ignore the values of Radius and Height.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.#ctor(Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints.#ctor">
            <summary>
Default constructor.  Initializes this object for use. 
Note that FitMode  is 
Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresUseSpecifiedRadiusAndHeight,
Radius is 0, and Height is 0.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPoints">
            <summary>
This class provides 3D cylinder fitting from 2D points. 
A 3D cylinder is fitted from multiple sets of 2D image points.
The sets of image points can come from different cameras or from
a single camera.
The 3D cylinder fitter computes the pose of the cylinder which
minimizes the sum squared image error with respect to the given 2D
image points from calibrated camera(s). 
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsFitModeConstants">
            <summary>
This enum class defines enumeration constants for the different 3D
cylinder fitting modes. 
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsFitModeConstants.DefaultFitMode">
            <summary>
DefaultFitMode is equal to LeastSquaresUseSpecifiedRadiusAndHeight.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresUseSpecifiedRadiusAndHeight">
            <summary>
Least squares fit using the specified radius and height.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsFitModeConstants.LeastSquaresComputeRadiusAndHeight">
            <summary>
Least squares fit using the measured radius and height.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.RealEqual(Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult,Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3D" />
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.ResidualsRaw2D">
            <inheritdoc cref="!:ICog3DBase::ResidualsRaw2D" />
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.GetCylinderPhys3D">
            <summary>
Get a deep copy of the fitted 3D cylinder.
</summary>
            <returns>
A deep copy of the fitted 3D cylinder.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.IsFound">
            <summary>
Gets whether or not a fitted cylinder was found.
</summary>
            <value>
True if a fitted cylinder was found; false otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCylinderFitterUsing2DPointsResult">
            <summary>
This class holds a result from a 3D cylinder fitting operation, where 2D 
points have been used as input.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DCylinderFitterUsing2DPoints class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.ConvertToResults(System.Collections.Generic.List`1{System.Collections.Generic.Dictionary`2{System.Int32,System.Int32}})">
            <summary>
Method to convert a Dictionary List (each Dictionary corresponds to one 3D part instance) to 
a list of Cog3DPartCorresponderUsingCrsp2D3DsResult.
</summary>
            <param name="partCorrespondences">
 The Dictionary List, each item represents one 3D part instance.
</param>
            <returns>
A list of Cog3DPartCorresponderUsingCrsp2D3DsResult.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.UnifyCrsp2D3D(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Collections.Generic.List`1{System.Collections.Generic.Dictionary`2{System.Int32,System.Int32}})">
            <summary>
Method to create unified crsp2D3Ds based on the original (non-unified) crsp2D3Ds and the part correspondences.
</summary>
            <param name="crsp2D3Ds">
The List of the original crsp2D3Ds with associated camera index and 
original part instance index. May not be null. 
<para>  Note that <paramref name="crsp2D3Ds" />[i].PartInstanceIndex should be the same index of the corresponding item in 
raw2DFromModel2Ds[<paramref name="crsp2D3Ds" />[i].CameraIndex] where raw2DFromModel2Ds is the input parameter used in Execute method.
In other words, crsps corresponding to raw2DFromModel2Ds[i][j] must have CameraIndex of i, and PartInstanceIndex of j.
</para></param>
            <param name="partCorrespondences">
The part correspondences computed using method Execute. May not be null.
</param>
            <returns>
A list of crsp2D3Ds where the PartInstanceIndex is modified so that each PartInstanceIndex refers to the same 3D part instance
for all cameras.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  any input argument is null, or any item inside each input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>
If <paramref name="partCorrespondences" />[i] has item whose Key is outside of the camera indices range specified
by the input parameter raw2DFromPhys3Ds in constructor.
</item>
                    <item> If  <paramref name="crsp2D3Ds" />[i].CameraIndex is
outside of the camera indices range specified
by the input parameter raw2DFromPhys3Ds in constructor.
</item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.Execute(System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro.CogTransform2DLinear}})">
            <summary>
Method to run the corresponder based on the 2D part poses for each part instance in each camera. 
</summary>
            <param name="raw2DFromModel2Ds">
A doubly indexed list of 2D part poses found in each camera, indexed first by camera, then by part instance.
May not be null.  
<para />
Note that the indices of <paramref name="raw2DFromModel2Ds" /> specify the camera indices, and original part
instance indices.
</param>
            <returns>
The part correspondences among different cameras. Each item is a Dictionary for one 3D part instance, 
and each KeyValuePair inside the Dictionary
corresponds to (cameraIndex, originalPartInstanceIndex).  Note that originalPartInstanceIndex is the index of 
the corresponding item in <paramref name="raw2DFromModel2Ds" />.
<para>
In other words, if <paramref name="raw2DFromModel2Ds" />[i][j] belongs to one 3D part instance, 
then the Dictionary for that 3D part instance has KeyValuePair of (i, j).
</para></returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="raw2DFromModel2Ds" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromModel2Ds" />.Count is not the same as the number of cameras specified by 
the input parameter raw2DFromPhys3Ds in the constructor.
</item>
                </list>
            </exception>
            <remarks>
Usage model is as follows:
<list type="bullet"><item> Run pattern finding tools ( such as trained PatMax) to find the 2D poses of part instances in each camera 
(This step generates <paramref name="raw2DFromModel2Ds" />).
</item><item> Run this method to compute part correspondences among different cameras.
</item><item> Run feature extraction for each corresponded part. 
</item><item> If there are enough features extracted for one part instance, run pose estimation for the corresponded part. 
</item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.#ctor(Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses.#ctor(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{System.Object},Cognex.VisionPro3D.Cog3DTransformRigid,System.Collections.Generic.List`1{Cognex.VisionPro.CogTransform2DLinear})">
            <summary>
Construct this Cog3DPartCorresponderUsing2DPoses. 
Upon construction, the corresponder will be trained using the provided data.
Therefore, a part must be located, e.g. in a training position. This training position 
can be e.g. the position where its model features have been created.
The data needed to configure the corresponder is:
<list type="bullet"><item> The camera calibrations used to locate the part. </item><item> The 3D model features. </item><item> The 2D poses of the located part in the camera images. </item><item> The 3D pose of the part. </item></list></summary>
            <param name="raw2DFromPhys3Ds">
The List of camera calibrations. One calibration per camera.
The size of this list specifies the number of cameras. 
May not be null.
</param>
            <param name="featuresModel3D">
The 3D model features, in Model3D space, that define 
the object of interest. May not be null. Note that model features can be obtained 
using Cog3DModelFeatureGeneratorUsingCrsp2D3Ds.
</param>
            <param name="raw2DFromModel2DsOfTrainImageSet">
The 2D poses of the part for the train image set, one 2D pose per camera. May not be null. 
</param>
            <param name="pose3DOfTrainImageSet">
The 3D pose for the part in train time. May not be null. See the Remark section for more details. 
</param>
            <exception cref="T:System.ArgumentNullException">
If  any input argument 
is null, or any item in <paramref name="raw2DFromPhys3Ds" /> is null, or any item in <paramref name="raw2DFromModel2DsOfTrainImageSet" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count is less than 2; 
</item>
                    <item> If <paramref name="raw2DFromPhys3Ds" />.Count != <paramref name="raw2DFromModel2DsOfTrainImageSet" />.Count; 
</item>
                    <item> If there are not enough features in <paramref name="featuresModel3D" />; 
</item>
                </list>
            </exception>
            <remarks>
The usage model is as follows: At Train/Construction time.
<list type="bullet"><item> Acquire the train image sets with only one part inside the scene.
</item><item> Configure pattern finding tools (such as PatMax tools) and feature extraction tools based on the first train image set.
</item><item> Run pattern finding tools (such as PatMax tools) on the first train image set to obtain <paramref name="raw2DFromModel2DsOfTrainImageSet" />.
</item><item> Run the model feature generator tool (cog3DModelFeatureGeneratorUsingCrsp2D3Ds) to compute <paramref name="featuresModel3D" /> (or create <paramref name="featuresModel3D" /> based on known model information)
</item><item> Run pose estimator to compute the 3D pose of the part for the first train image set (this pose is used as <paramref name="pose3DOfTrainImageSet" />).
</item><item> Call this constructor to create a corresponder.
</item></list></remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsing2DPoses">
            <summary>
This class solves the correspondence problem that occurs when multiple
cameras are viewing a scene containing multiple instances of a part, and returns the 
correct image pattern correspondences for each 3D part instance. 2D poses of
the 2D part models for the part are used in computing the part correspondences. 
</summary>
            <Remarks>
The usage model is:
<list type="bullet"><item> At train time, create a 2D part model (such as PatMax pattern) in each image from a training image set.
</item><item> At run time, run the pattern finder tool in each image and get the 2D poses for each found part instance.
</item><item> Call this part corresponder to get part correspondences.
</item></list>  
See the constructor and methods for more detail information.
</Remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.CorrespondPartsUsingPointsAndIntersectionPoints(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrsp2D3D}@)">
            <summary>
This method determines the part correspondences among the multiple part instances seen
by multiple cameras using the original 2D/3D part feature correspondences 
(<paramref name="crsp2D3Ds" />),
and the camera calibrations.  After determining 
the part correspondences across cameras, generate a result object for each 
corresponded part instance and a result object for each uncorresponded part
instance.  
Also generate a new set of 2D/3D part feature correspondences 
(<paramref name="crsp2D3DsUnified" />)
with updated PartInstanceIndex members that map to the returned result objects.
</summary>
            <param name="raw2DFromPhys3Ds">
The List of camera calibrations. One calibration per camera.
The size of this list specifies the number of cameras. 
May not be null.
</param>
            <param name="crsp2D3Ds">
The List of the original crsp2D3Ds with associated camera index and 
original part instance index. May not be null. 
<para>  Note that if <paramref name="crsp2D3Ds" />[i].FeatureRaw2D
is null or empty, then <paramref name="crsp2D3Ds" />[i] is ignored
when computing the part correspondences.
</para></param>
            <param name="crsp2D3DsUnified">
This is a copy of <paramref name="crsp2D3Ds" /> where the
PartInstanceIndex in <paramref name="crsp2D3DsUnified" /> have been updated to
reflect the correct part correspondences across cameras.
<paramref name="crsp2D3DsUnified" /> is created by first 
making a shallow copy of each element in <paramref name="crsp2D3Ds" /> whose 
(CameraIndex, PartInstance) exists in one item of 
the returned List of <see cref="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult" />, then updating
its PartInstanceIndex to be the index of the corresponding item in 
the returned List of <see cref="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult" />, i.e. if 
(<paramref name="crsp2D3Ds" />[i].CameraIndex, 
<paramref name="crsp2D3Ds" />[i].PartInstanceIndex) exists in 
the returned List(<see cref="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult" />)[j].GetIndicesOfCameraAndPartInstance(), 
then a shallow copy of <paramref name="crsp2D3Ds" />[i] will be inside
<paramref name="crsp2D3DsUnified" /> and its PartInstanceIndex is modified to be
j.
</param>
            <returns>
The List of result objects (<see cref="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult" />). Each item contains 
one 3D part instance's correspondences.
<para>
If there are 2 cameras, 10 parts in the scene observed by both cameras, 
and all the parts are corresponded, then this returned list will include 10 items,
one item for each part instance.  
</para><para>
If 6 of the parts are corresponded, then this returned list will include 14 items:
6 items for the corresponded parts, 4 items for the uncorresponded parts in camera 0
and 4 items for the uncorresponded parts in camera 1.  
</para><para>
Each item includes a dictionary of (key=camera index, value=original 2D part instance index).
</para></returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="crsp2D3Ds" />  or <paramref name="raw2DFromPhys3Ds" />
 is null, or any item in one of them is null, or 
FeaturesModel3D[<paramref name="crsp2D3Ds" />[i].FeatureModel3DIndex]
is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count is less than 2; 
</item>
                    <item>
If <paramref name="crsp2D3Ds" /> includes duplicate items 
with the same CameraIndex,
the same PartInstanceIndex, and corresponding to the same
model point (model feature with type Cog3DVect3); 
</item>
                    <item> If  <paramref name="crsp2D3Ds" />[i].CameraIndex is
not inside range [0, <paramref name="raw2DFromPhys3Ds" />.Count-1];
</item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType
is not Cog3DVect3, Cog3DLine, Cog3DLineSeg,
Cog3DCylinder, or Cog3DCircle;
</item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType
 is Cog3DVect3, but 
<paramref name="crsp2D3Ds" />[i].Subfeature is not
Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType
 is Cog3DLine or Cog3DLineSeg, but 
<paramref name="crsp2D3Ds" />[i].Subfeature is not
Cog3DSubfeatureConstants.StraightEdge0; </item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType is
Cog3DCircle, but 
<paramref name="crsp2D3Ds" />[i].Subfeature is not
Cog3DSubfeatureConstants.CircleEdge0 or Cog3DSubfeatureConstants.Point0; </item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType is
 Cog3DCylinder, but 
<paramref name="crsp2D3Ds" />[i].Subfeature is not
Cog3DSubfeatureConstants.OccludingEdge0, .OccludingEdge1, .CircularEdge0, 
or .CircularEdge1; </item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureRaw2D
is not null, and its type is not Cog3DVect2, or Cog3DVect2Collection;
</item>
                    <item>  If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType
is Cog3DVect3,  
<paramref name="crsp2D3Ds" />[i].FeatureRaw2D 
has type of Cog3DVect2Collection, and its size is greater than 1. 
</item>
                    <item> If  <paramref name="crsp2D3Ds" />[i].FeatureModel3DIndex is
not inside range [0, FeaturesModel3D.Count-1];
</item>
                    <item> If <paramref name="crsp2D3Ds" />[i].FeatureModel3DType is not
the same as the type of 
FeaturesModel3D[<paramref name="crsp2D3Ds" />[i].FeatureModel3DIndex];
</item>
                    <item>
If FeaturesModel3D contains less than 3 distinct
model points (including derived 3D model points from intersected
3D lines or 3D line segments).
</item>
                </list>
            </exception>
            <remarks>
                <para>
If there are 3D lines or 3D line segments in the model, this corresponder 
internally computes the derived 3D model points from 3D line intersections, 
and the corresponding derived 2D points from 2D line intersections.
</para>
                <para>
In order for an intersection point to be computed and used, the two 
line segments/lines in the image must have different directions 
(difference of the direction angles must be 10 degrees or more),
and the nearest distance between the corresponding two 3D 
line segments/lines must be small enough comparing to the size of the 3D model.
</para>
                <para>
In order for a part instance to be corresponded, at least there are
2 cameras seeing that part instance, and each camera sees at least
3 2D points (including the derived 2D points 
corresponding to the derived 3D model points).
</para>
                <para>
If this does not happen, 
then the part instance will not be corresponded.  
</para>
                <para>
Note that FeaturesModel3D and 
<paramref name="crsp2D3Ds" />[i].FeatureModel3DIndex for any i 
must be set 
correctly in order to use this part corresponder. 
Cog3DModelFeatureGeneratorUsing2D3Ds
might be used to generate 3D model features at train time.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.FeaturesModel3D">
            <summary>
Gets/sets the 3D model features, in Model3D space, that define 
the object of interest.
</summary>
            <value>
A collection of 3D model features in Model3D space.
</value>
            <exception cref="T:System.ArgumentNullException">
If input argument in the setter is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds.#ctor">
            <summary>
Construct this default Cog3DPartCorresponderUsingCrsp2D3Ds. Note that FeaturesModel3D is an empty collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3Ds">
            <summary>
This class solves the correspondence problem that occurs when multiple
cameras are viewing a scene containing multiple parts, and returns the 
correct image pattern correspondences for each 3D part instance.
</summary>
            <remarks>
                <para> The inputs to this corresponder are crsp2D3Ds.
Each Cog3DCrsp2D3D 
instance corresponds to a particular calibrated camera and a particular
part instance in the image acquired from that camera. Each part 
instance in a calibrated camera corresponds to one or more
Cog3DCrsp2D3D instances. 
All part instances are corresponded to the same 3D model.
</para>
                <para>  The corresponder can tolerate missing part instances.
In other words, it is acceptable for some of the
part instances to be absent from some of the cameras. </para>
                <para>
The class determines a set of 3D part instances of the known 3D model 
which best explain the input data.
</para>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DQuickCorresponder">
            <summary>
This class encapsulate the process running the part corresponder.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.RealEqual(Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult,Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.GetIndicesOfCameraAndPartInstance">
            <summary>
Gets the indices of the camera and the original part instance corresponding
to this result. Each KeyValuePair inside the returned Dictionary
corresponds to (cameraIndex, originalPartInstanceIndex).
</summary>
            <returns>
The indices of the camera and the original part instance corresponding 
to this result. Note that there is at most one Dictionary entry for
each camera.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.Coverage">
            <summary>
Gets the coverage of this result.
</summary>
            <value>
The coverage of this result.
</value>
            <remarks>    
The coverage is computed as follows:
<para>
  Coverage = (number of 2D points) / ((number of 3D model points) 
  * (number of cameras))
</para><para>
Where the number of 3D model points includes the number of distinct 
3D model points in the specified crsp2D3Ds 
(which is the input argument for Cog3DPartCorresponderUsingCrsp2D3Ds.CorrespondPartsUsingPointsAndIntersectionPoints)
and the number of the
derived 3D points from intersected 3D lines or 3D line segments in the model.
</para><para>
The number of 2D points is the 
       total number of 2D points corresponding to 3D model points for this part instance in 
       the specified crsp2D3Ds, plus 
       the total number of the derived 2D points corresponding to the derived 3D 
points for this part instance. 
</para><para>
Note that Coverage can be used to check whether multiple cameras can see the same 
part instance or not. Coverage of 1.0 means all cameras can see this part instance.
</para></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult.#ctor(Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPartCorresponderUsingCrsp2D3DsResult">
            <summary>
This class encapsulates the result information for one 3D part instance 
from part corresponder (Cog3DPartCorresponderUsingCrsp2D3Ds), 
including a coverage score, and a Dictionary explaining the correspondence result.
Note that this class is immutable - it may not be changed once
it has been constructed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrsp2D3D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrsp2D3D.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.Subfeature">
            <summary>
Gets/sets the subfeature type within the 3D model feature.
The found 2D feature(s) corresponds to this subfeature type.
</summary>
            <value>
The subfeature type within the 3D feature.
</value>
            <remarks>   The subfeature type allows
explicit correspondence of the 2D features to a particular subfeature
of the 3D feature.  For example, you can specify a set of 2D feature points
correspond to the circular end of a cylinder.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.ApplicationData">
            <summary>
Gets/Sets an object that can be used to store application-specific information. 
</summary>
            <value>
An Object representing application-specific data. 
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.FeatureRaw2D">
            <summary>
Gets/sets the 2D feature(s).
</summary>
            <value>
An Object representing the found 2D feature or a collection
of found 2D features in the acquired image. 
Set this property to null to indicate the 2D feature(s) was not found.
Note that most corresponders
and pose estimators support Objects of type Cog3DVect2 and Cog3DVect2Collection.
Check the corresponder/pose estimator you are using for supported 2D feature types.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.FeatureModel3DType">
            <summary>
Gets/sets the 3D model feature type.
</summary>
            <value>
The type of the corresponding 3D model feature.
Note that most corresponders
and pose estimators support type Cog3DVect3
as a minimum.
Check the corresponder/pose estimator you are using for supported 3D feature types.
</value>
            <exception cref="T:System.ArgumentNullException">
If the input argument of the setter is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.FeatureModel3DIndex">
            <summary>
Gets/sets the 3D model feature index (within the 3D model feature collection) 
corresponding to the found 2D feature(s).
</summary>
            <value>
The 3D feature index (within the 3D model feature collection) corresponding to 
the found 2D feature(s).
Note that most corresponders
and pose estimators support Objects of type Cog3DVect3
as a minimum.
Check the corresponder/pose estimator you are using for 
supported 3D feature types.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument of the setter is less than 0.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.PartInstanceIndex">
            <summary>
Gets/sets the index of the found part instance.
</summary>
            <value>
The index of the found part instance. 
</value>
            <exception cref="T:System.ArgumentException">
If the input argument of the setter is less than 0.
</exception>
            <remarks>
                <para>
Note that the index of the found part instance is particular
to the image acquired from the specified camera. The part instances 
with the same index number from different cameras may not correspond 
to the same part instance in the scene.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrsp2D3D.CameraIndex">
            <summary>
Gets/sets the index of the camera.
</summary>
            <value>
The index of the camera from which the image was acquired.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument of the setter is less than 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrsp2D3D.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrsp2D3D.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrsp2D3D.#ctor(System.Int32,System.Int32,System.Int32,System.Type,System.Object,Cognex.VisionPro3D.Cog3DSubfeatureConstants)">
            <summary>
Construct this Cog3DCrsp2D3D with the supplied components.
</summary>
            <param name="cameraIndex">
The index of the camera.
</param>
            <param name="partInstanceIndex">
The index of the found part instance (in the image acquired from
the specified camera). </param>
            <param name="featureModel3DIndex">
The index of the corresponding 3D feature within the 3D model feature
collection.
</param>
            <param name="featureModel3DType">
The type of the corresponding 3D feature. May not be null.
</param>
            <param name="featureRaw2D">
The 2D feature(s) corresponding to the subfeature type within the specified
3D model feature. The 2D feature(s) must be in Raw2D space.
Note that it can be null to indicate the 2D feature was not found.
</param>
            <param name="subfeature">
The subfeature type within the 3D feature corresponding to the 2D
feature(s).
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="featureModel3DType" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="cameraIndex" />, 
<paramref name="partInstanceIndex" />, or <paramref name="featureModel3DIndex" /> 
is less than 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrsp2D3D.#ctor">
            <summary>
Construct this default 
Cog3DCrsp2D3D:
<list type="bullet"><item> CameraIndex  is 0; </item><item> PartInstanceIndex  is 0; </item><item> FeatureModel3DIndex is 0; </item><item> FeatureModel3DType is type of Cog3DVect3; </item><item> FeatureRaw2D is null; </item><item> Subfeature is Cog3DSubfeatureConstants.Point0; </item></list></summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCrsp2D3D">
            <summary>
This class holds feature correspondence information for a particular feature
(point, line segment, circle, etc.).
A Cog3DCrsp2D3D is a data holder class that expresses how a 2D feature(s) 
(found in the acquired image from a particular
camera) corresponds to a 3D feature of the 3D model.
The feature correspondence information consists of:
<list type="bullet"><item> The index of the camera from which the image was acquired; </item><item> The index of the found part instance in the acquired image.
Each part found in an acquired image from camera C, must have a unique index.
Each part found in an acquired image from camera C+1, must also have a unique 
index, however there is no requirement for the part indices across the
acquired images to match.
</item><item> An Object representing the found 2D feature e.g. Cog3DVect2 or an Object 
representing a collection of found 2D features e.g. Cog3DVect2Collection 
from the acquired image.  The 2D feature's pose must be in Raw2D space of
the acquired image.
</item><item> The index of the 3D model feature within the 3D model feature collection
</item><item> The subfeature type (Cog3DSubfeatureConstants) within the 3D 
feature that corresponds to the found 2D feature(s). 
</item></list></summary>
            <remarks>
                <para> Note that the index of the found part instance is particular
to the image acquired from the specified camera. The part instances 
with the same index number from different cameras may not correspond to 
the same part in the scene.
</para>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DSubfeatureConstants">
            <summary>
This class defines enumeration constants of the subfeature types
available in decomposing 3D model features.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DSubfeatureConstants.OccludingEdge1">
            <summary>
It indicates that the subfeature type is a 3D occluding edge
within a 3D  feature
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DSubfeatureConstants.OccludingEdge0">
            <summary>
It indicates that the subfeature type is a 3D occluding edge
within a 3D  feature
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DSubfeatureConstants.CircularEdge1">
            <summary>
It indicates that the subfeature type is a 3D circle curve
within a 3D  feature
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DSubfeatureConstants.CircularEdge0">
            <summary>
It indicates that the subfeature type is a 3D circle curve
within a 3D  feature
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DSubfeatureConstants.StraightEdge0">
            <summary>
It indicates that the subfeature type is a 3D line or a 3D line segment
within a 3D feature.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DSubfeatureConstants.Point0">
            <summary>
It indicates that the subfeature type is a 3D point within a 3D feature.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTelecentricCamerasOperations.ComputeAffineTransformsAmongTelecentricCameras(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},Cognex.VisionPro3D.Cog3DPlane,System.Int32)">
            <summary>
                <para>  
Computes the affine transforms between images from telecentric cameras.
Telecentric cameras are cameras with telecentric lenses.
Specifically, this method computes the affine transforms from the image of 
the camera specified as the base camera via 
<paramref name="baseCameraIndex" /> 
to the images of all the other cameras specified in 
<paramref name="raw2DFromPhys3Ds" />.
<para />  
The affine transforms are computed using the cameras' 
calibration information (<paramref name="raw2DFromPhys3Ds" />), and 
a 3D plane in Phys3D (<paramref name="planarFeaturePhys3D" />).  
The specified 3D plane should be the 3D plane coincident with the planar part 
or a planar feature on the part.
This method assumes that all the telcentric cameras are viewing the same planar part
or the same planar feature on the part.
</para>
            </summary>
            <param name="raw2DFromPhys3Ds">
A list of Cog3DCameraCalibrations, indexed by camera. One calibration per
camera. May not be null. Note that all the camera calibrations must be
relative to the same Phys3D coordinate space.
</param>
            <param name="planarFeaturePhys3D">
The feature's 3D plane in Phys3D. May not be null.
</param>
            <param name="baseCameraIndex">
The index of the base camera. 
</param>
            <returns>
The List of CogTransform2DLinears representing the affine transforms between
the telecentric cameras' images. The List will have the same size as 
<paramref name="raw2DFromPhys3Ds" />.  The List element with index 
<paramref name="baseCameraIndex" /> will be the identity transform.
</returns>
            <remarks>
                <para>  
When pattern searching for a feature in each camera’s acquired
image, the 3D accuracy achieved by triangulating 3D points from the 2D 
image pattern origin positions in the different images, is highly dependent on 
the accuracy of the image pattern origins.  This method provides
an accurate way to take an image pattern in the base camera's image and then
use this method’s output 2D affine transforms to map the base 
camera's image pattern and/or the base camera's image pattern origin to the other cameras.
This technique assumes that all the cameras are viewing the same pattern
of interest. 
</para>
                <para>
Specifically, this method
<list type="bullet"><item> 
Facilitates taking an image pattern (set of pixels in Raw2D space) 
acquired by the base camera and mapping that image pattern to the Raw2D 
image spaces of all the other cameras.  The mapping can be achieved
using the VisionPro CogAffineTransformTool.</item><item> 
Facilitates taking a 2D point e.g. the image pattern origin, in Raw2D space
of the base camera and mapping the 2D point to the Raw2D 
image spaces of all the other cameras.</item><item>
Computes the affine transforms by projecting points from
the base camera's Raw2D space to the specified 3D plane (<paramref name="planarFeaturePhys3D" />),
and then projecting the points from the specified 3D plane to the other cameras' Raw2D space.</item></list></para>
                <para> The 3D plane of the part or a planar feature of the part
(<paramref name="planarFeaturePhys3D" />) is defined in the 3D physical
space (Phys3D). This must be the same Phys3D space of the camera calibrations.
</para>
                <para> If <paramref name="planarFeaturePhys3D" /> is parallel to the part
or a planar feature of the part but the actual feature is not lying
precisely in the specified 3D plane, then the translation part of the returned 
affine transforms will not be accurate.  However, all other 
components of the returned affine transforms, such as aspect ratio, 
rotation, skew, etc. will still be accurate. </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="raw2DFromPhys3Ds" /> or 
<paramref name="planarFeaturePhys3D" /> is null, or any item
in <paramref name="raw2DFromPhys3Ds" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If any of the following conditions are true:
<list type="bullet"><item><paramref name="raw2DFromPhys3Ds" />.Count is less than 2. </item><item><paramref name="raw2DFromPhys3Ds" />[i].IsTelecentric  is false 
(i is inside [0, <paramref name="raw2DFromPhys3Ds" />.Count - 1]). </item><item><paramref name="baseCameraIndex" /> is less than 0 or greater than 
       <paramref name="raw2DFromPhys3Ds" />.Count - 1 </item><item><paramref name="planarFeaturePhys3D" /> is degenerate </item></list></exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DTelecentricCamerasOperations">
            <summary>
This class contains static methods that perform various operations for  
telecentric cameras.  
Telecentric cameras are cameras with telecentric lenses.
Note that this class is comprised of static methods.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.Execute(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Fits a 3D plane from a 3D point set 
</summary>
            <param name="pointsPhys3D">
A 3D point collection.
</param>
            <returns>
A Cog3DPlaneFitterUsing3DPointsResult containing the fitted plane and 3D
residuals.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="pointsPhys3D" />.Count is less than 3.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If a 3D plane cannot be fitted.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.RobustFitParameters">
            <inheritdoc cref="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.RobustFitParameters" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.#ctor(Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints.#ctor">
            <summary>
Default constructor.  Initializes this object for use. 
Note that robust fit parameters are the same as the ones in 
a default constructed 
<see cref="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.#ctor" />.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPoints">
            <summary>
This class provides 3D plane fitting from 3D points. 
The 3D plane fitter computes the pose of a 3D plane
based on the specified 3D input points.
The fitting technique is controlled by the Cog3DRobustFitParameters.
See the Remarks section of the Cog3DRobustFitTechniqueConstants enum
and the Cog3DRobustFitParameters class for details.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.RealEqual(Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult,Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.GetInlierIndices">
            <summary>
Gets the indices of the data points classified as inliers
and included in the fit.
</summary>
            <returns>
The list of indices of the data points classified as inliers.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.GetOutlierIndices">
            <summary>
Gets the indices of the data points classified as outliers 
and excluded from the fit.
</summary>
            <returns>
The list of indices of the data points classified as outliers.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3DUsing3DPoints" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.GetPlanePhys3D">
            <summary>
Get a deep copy of the fitted 3D plane.
</summary>
            <returns>
A deep copy of the fitted 3D plane.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPlaneFitterUsing3DPointsResult">
            <summary>
This class holds a result from a 3D plane fitting operation, where 3D 
points have been used as input.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DPlaneFitterUsing3DPoints class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.Execute(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Fits a 3D line from a 3D point set. 
</summary>
            <param name="pointsPhys3D">
A 3D point collection.
</param>
            <returns>
A Cog3DLineFitterUsing3DPointsResult containing the fitted line and 3D 
residuals.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="pointsPhys3D" />.Count is less than 2.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If a 3D line cannot be fitted.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.RobustFitParameters">
            <inheritdoc cref="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.RobustFitParameters" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.#ctor(Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints.#ctor">
            <summary>
Default constructor.  Initializes this object for use.
Note that robust fit parameters are the same as the ones in 
a default constructed 
<see cref="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.#ctor" />.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPoints">
            <summary>
This class provides 3D line fitting from 3D points. 
The 3D line fitter computes the pose of a 3D line
based on the specified 3D input points.
The fitting technique is controlled by the Cog3DRobustFitParameters.
See the Remarks section of the Cog3DRobustFitTechniqueConstants enum
and the Cog3DRobustFitParameters class for details.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.RealEqual(Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult,Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.GetInlierIndices">
            <summary>
Gets the indices of the data points classified as inliers
and included in the fit.
</summary>
            <returns>
The list of indices of the data points classified as inliers.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.GetOutlierIndices">
            <summary>
Gets the indices of the data points classified as outliers 
and excluded from the fit.
</summary>
            <returns>
The list of indices of the data points classified as outliers.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3DUsing3DPoints" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.GetLinePhys3D">
            <summary>
Get a deep copy of the fitted 3D line.
</summary>
            <returns>
A deep copy of the fitted 3D line.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLineFitterUsing3DPointsResult">
            <summary>
This class holds a result from a 3D line fitting operation, where 3D points
have been used as input.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DLineFitterUsing3DPoints class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.Execute(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Fits a 3D circle from a 3D point set.
</summary>
            <param name="pointsPhys3D">
A 3D point collection.
</param>
            <returns>
A Cog3DCircleFitterUsing3DPointsResult containing the fitted circle 
and 3D residuals.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="pointsPhys3D" />.Count is less than 3.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If a 3D circle cannot be fitted.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.RobustFitParameters">
            <summary>
Gets/sets the robust fitting parameters.
</summary>
            <value>
A Cog3DRobustFitParameters containing the robust fitting parameters.
</value>
            <exception cref="T:System.ArgumentNullException">
If the input argument to the setter is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.#ctor(Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints.#ctor">
            <summary>
Default constructor.  Initializes this object for use. 
Note that robust fit parameters are the same as the ones in 
a default constructed 
<see cref="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.#ctor" />.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPoints">
            <summary>
This class provides 3D circle fitting from 3D points. 
The 3D circle fitter computes the pose of a 3D circle
based on the specified 3D input points.
The fitting technique is controlled by the Cog3DRobustFitParameters.
See the Remarks section of the Cog3DRobustFitTechniqueConstants enum
and the Cog3DRobustFitParameters class for details.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.RealEqual(Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult,Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.GetInlierIndices">
            <summary>
Gets the indices of the data points classified as inliers
and included in the fit.
</summary>
            <returns>
The list of indices of the data points classified as inliers.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.GetOutlierIndices">
            <summary>
Gets the indices of the data points classified as outliers 
and excluded from the fit.
</summary>
            <returns>
The list of indices of the data points classified as outliers.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3DUsing3DPoints" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.GetCirclePhys3D">
            <summary>
Get a deep copy of the fitted 3D circle.
</summary>
            <returns>
A deep copy of the fitted 3D circle.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCircleFitterUsing3DPointsResult">
            <summary>
This class holds a result from a 3D circle fitting operation, where 3D 
points have been used as input.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DCircleFitterUsing3DPoints class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.RealEqual(Cognex.VisionPro3D.Cog3DRobustFitParameters,Cognex.VisionPro3D.Cog3DRobustFitParameters,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustFitParameters.WorstCaseProportionOutliers">
            <summary>
Gets/sets the worst case proportion of outliers that is expected
         in the data points used for model fitting.
</summary>
            <value>
The worst case proportion of outliers.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than 0.0, or larger than or equal
to 1.0.
</exception>
            <remarks>
This property will be used if RobustFitTechnique
         is Cog3DRobustFitTechniqueConstants.AdaptiveRANSAC.
<para> If WorstCaseProportionOutliers is 0, all the input points are used
for fitting.
</para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustFitParameters.Assurance">
            <summary>
Gets/sets the proportion assurance. This parameter is the desired
likelihood that the computed fit contains only inliers.
</summary>
            <value>
The proportion assurance.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than or equal to 0.0, or larger than 1.0.
</exception>
            <remarks>
If Assurance is 1.0, and if 
 RobustFitTechnique is Cog3DRobustFitTechniqueConstants.AdaptiveRANSAC, the
         exhaustive technique is executed.
<para> This property will be used if RobustFitTechnique
         is Cog3DRobustFitTechniqueConstants.AdaptiveRANSAC. </para></remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustFitParameters.DistanceThreshold">
            <summary>
Gets/sets the distance threshold. If the absolute distance between a
         point and the model is greater than this parameter, then the point is 
         considered to be an outlier.
</summary>
            <value>
The distance threshold.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is less than 0.0.
</exception>
            <remarks>
This property will be used if RobustFitTechnique is
 Cog3DRobustFitTechniqueConstants.AdaptiveRANSAC.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRobustFitParameters.RobustFitTechnique">
            <summary>
Gets/sets the type of robust fit technique to be employed.
</summary>
            <value>
The type of robust fit technique to be employed.
</value>
            <exception cref="T:System.ArgumentException">
If the input argument to the setter is not a valid 
Cog3DRobustFitTechniqueConstants value.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.#ctor(Cognex.VisionPro3D.Cog3DRobustFitParameters)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRobustFitParameters.#ctor">
            <summary>
Default constructor. Default values are:
<list type="bullet"><item> RobustFitTechnique is Cog3DRobustFitTechniqueConstants.AllPoints 
</item><item> DistanceThreshold is 1.0 </item><item> Assurance is 1.0 </item><item> WorstCaseProportionOutliers is 0.0 </item></list></summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRobustFitParameters">
            <summary>
This class defines the robust fitting parameters that modify the behavior
of robust fitters.
</summary>
            <remarks>
                <para>
Classical techniques for parameter estimation, such as least squares,
optimize (according to a specified objective function) the fit of a
functional description (model) to all of the presented data. These techniques
have no internal mechanisms for detecting and rejecting gross errors in the data. They
are averaging techniques that rely on the assumption (the smoothing
assumption) that regardless of the size of the data set, there will always be
enough good values to smooth out any gross deviations.
</para>
                <para>
In many practical parameter estimation problems the smoothing assumption
does not hold; i.e., the data contain uncompensated gross errors. To deal
with this situation, several heuristics have been proposed. The technique
usually employed is some variation of first using all the data to derive the
model parameters, then locating the datum that is farthest from agreement
with the instantiated model, assuming that it is a gross error, deleting it,
and iterating this process until either the maximum deviation is less then
some preset threshold or until there is no longer sufficient data to
proceed. It can easily be shown that a single gross error ("poisoned
point"), mixed in with a set of good data, can cause the above heuristic to
fail. Robust fitters use techniques that get around this shortcoming.
</para>
                <para>
See the Remarks section of the Cog3DRobustFitTechniqueConstansts enum
for details on fitting techniques.
</para>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRobustFitTechniqueConstants">
            <summary>
This class defines the enumeration constants for robust fitting techniques.
</summary>
            <remarks>
RANSAC is a very popular technique and information about RANSAC can be
obtained from a number of sources.
One such source is "Random Sample Consensus: A paradigm for Model
fitting with Application to Image Analysis and Automated Cryptography",
Martin A. Fischler and Robert C. Bolles, Communications of ACM, June
1981, Volume 24, Number 6, 381-395.
<para>
In the Adaptive RANSAC approach the number of tries is computed
adaptively.  It is often the case that the proportion of outliers is not
known. In such cases the algorithm is initialized using the worst case
estimate of the proportion of outliers.  The distance threshold t is
assumed to be specified. </para><para>  The following is the outline of the approach. </para><list type="number"><item>  Inputs: 
<list type="bullet"><item> Data points. </item><item> Distance threshold, t.  </item><item> The worst case proportion of data points that are outliers, w.  
              An outlier is a data point that is further away than t.</item><item> Proportion assurance, z. This is the likelihood that the 
              computed fit contains only inliers.</item></list></item><item>  Compute the number of tries based upon w.</item><item>  Randomly select a sample of s data points from a data set S and
    instantiate the model from this subset, where s is the minimum number
    of data points that are required to instantiate the free parameters of
    the model.</item><item>  Identify all the points that are within the distance threshold t. The
    number of such points will be the number of inliers.</item><item>  Set w = (number of outliers)/(total number of points).</item><item>  Recompute the number of tries using w and z.  </item><item>  If the total number of tries thus far is greater than the number of
    tries computed above, terminate the algorithm. Otherwise, repeat
    steps 3-7.</item><item>  Re-estimate the model using all the inliers.</item><item>  Refine the above model by recategorizing the data points as inliers
    and outliers and fitting to the inliers.</item><item> Repeat step 9. for a maximum of three times or until the number of 
    inliers ceases to increase</item></list><para>
It should be noted that the above technique is executed only if the
proportion assurance is less than 1. If not, an exhaustive technique
described below is executed. </para><list type="number"><item>  The WorstCaseProportionOutliers is assumed to be the true proportion
    of outliers and the number of inliers are computed.</item><item>  If there are n input points and m outliers, a combinations generator
    that generates nC(n-m) combinations is initialized.</item><item>  A combination of points are considered as being inliers and the model
    is computed.</item><item>  The actual number of inliers for the above model is computed. If the
    number of inliers is less than the expected number of inliers, steps
    3-4 is repeated until all the combinations are tested. If after
    testing all combinations, a model could not be computed, the
    algorithm will
    terminate.</item><item>  Re-estimate the model using all the inliers.</item><item>  Refine the above model by recategorizing the data points as inliers
    and outliers and fitting to the inliers.</item><item> Repeat step 6. for a maximum of three times or until the number of 
    inliers ceases to increase.</item></list></remarks>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRobustFitTechniqueConstants.AdaptiveRANSAC">
            <summary>
Use Adaptive RANSAC robust fitting technique. See Remarks section.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRobustFitTechniqueConstants.AllPoints">
            <summary>
Do not use any robust fitting technique.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid},Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult)">
            <summary>
Validate the specified hand-eye calibration result using the specified 
calibration features and robot poses, 
and then return the hand-eye calibration validation result.
</summary>
            <param name="crspFeatures">
A list of feature correspondences from the camera viewing the calibration plate.
The list of feature correspondences are indexed
by the robot hand pose. <paramref name="crspFeatures" />[i] corresponds to the
ith robot pose. May not be null.
</param>
            <param name="robotBase3DFromHand3Ds">
A list of Cog3DTransformRigid's defining the robot hand poses.
The list is indexed by robot hand pose.
The size of this list must match the size of <paramref name="crspFeatures" />. May not be null.
</param>
            <param name="handEyeCalibrationResult">
The hand-eye calibration result to be validated.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes a null item 
(except <paramref name="crspFeatures" />[i].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If <paramref name="crspFeatures" />.Count != 
<paramref name="robotBase3DFromHand3Ds" />.Count; </item><item> If  <paramref name="robotBase3DFromHand3Ds" />.Count is less than 2. </item><item> If  <paramref name="crspFeatures" />[i].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1]);</item><item> If <paramref name="crspFeatures" />[i].Weights is not null, 
and  <paramref name="crspFeatures" />[i].Weights.Count != 
<paramref name="crspFeatures" />[i].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1]);</item></list></exception>
            <returns>
The hand-eye calibration validation result.
</returns>
            <remarks>
Notes:
<list type="bullet"><item> This tool requires at least 2 sets of features, and
         can provide more accurate results if more sets of features 
         (corresponding to distinct robot hand poses) are provided. </item><item> This tool requires all of the elements in <paramref name="crspFeatures" />
         to be from the same camera. </item><item> The returned hand-eye calibration validation result includes a camera calibration validation result
         characterizing the accuracy of the camera intrinsics, and 3D residuals characterizing
         the accuracy of the whole hand-eye system. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator.#ctor(Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator.#ctor">
            <summary>
Construct this default Cog3DHandEyeCalibrationValidator.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidator">
            <summary>
This class is for validating an existing 3D hand-eye calibration for 
one camera. The validation step accepts as inputs the 
original hand-eye calibration,  a set of robot poses, and a corresponding set of feature positions.
The output of the validation is a hand-eye validation result object.
the hand-eye validation result object contains a camera calibration validation result 
and residuals for the hand-eye calibration validation.  These 
characterize the accuracy of the hand-eye system. The accuracy can be compared
to "baseline"
accuracy estimates from calibration time in order to determine if
the hand-eye system is still in calibration.
</summary>
            <remarks>
A "baseline" validation should be performed immediately
after hand-eye calibration. That baseline validation step should involve
multiple view sets so that one can estimate the distribution of residuals. 
The "baseline" validation measurements are
stored for future comparison. 
<para> Then, at some arbitrary time (usually after the
system performed vision tasks for a period of time), the user
acquires images of the same calibration plate in some
set of (preferrably, the same) robot poses and executes hand-eye calibration validation to get the "current"
measurements. Finally, the user compares the "current" validation
measurements with the "baseline". </para><para> If the "current" measurements agree with the "baseline"
measurements to a satisfactory degree, then the system is in
calibration and the user does not need to perform any
recalibration. 
If the measurements inside the camera calibration validation results
satisfactorily agree, but the measurements of hand-eye validation residuals
do not satisfactorily agree, then the user can use the baseline camera intrinsics
to re-perform hand-eye calibration. 
If camera calibration validation results do not agree
and the hand-eye calibration validation results do not agree,
then camera calibration and hand-eye calibration both need to be performed again. </para></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.RealEqual(Cognex.VisionPro3D.Cog3DLensDistortionCorrector,Cognex.VisionPro3D.Cog3DLensDistortionCorrector,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Perform image correction (lens distortion removal) on the specified image.
Use Raw2DFromPhys3DUsingCorrectImage as the camera calibration for the returned, corrected image.
</summary>
            <param name="image">
The raw image to correct.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsTrained is false.
</exception>
            <returns>
The corrected image.  
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.Untrain">
            <summary>
Discard the trained data. Note that IsTrained will return false until Train() is called again.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.Train(Cognex.VisionPro3D.Cog3DCameraCalibration)">
            <summary>
Train the image corrector using the specified camera calibration.
</summary>
            <param name="raw2DFromPhys3D">
The camera calibration associated with the raw (acquired) images.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="raw2DFromPhys3D" /> is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
If <paramref name="raw2DFromPhys3D" />.IsTelecentric is true.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.Raw2DFromPhys3DUsingCorrectedImage">
            <summary>
Gets the camera calibration produced at training-time.
This is the camera calibration which should be used with the corrected images.      
</summary>
            <value>
The camera calibration to be used with the corrected images.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsTrained is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.IsTrained">
            <summary>
Gets whether this image corrector is trained.    
</summary>
            <value>
True if it is trained, and false otherwise.  
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.#ctor(Cognex.VisionPro3D.Cog3DLensDistortionCorrector)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLensDistortionCorrector.#ctor">
            <summary>
Construct this default Cog3DLensDistortionCorrector. Note that IsTrained is false.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLensDistortionCorrector">
            <summary>
This class provides lens distortion correction based on a camera calibration.
At training-time, this class trains an image corrector using the lens distortion data in a camera calibration, and  
produces a new camera calibration to be used with corrected images.
At run-time, via the Execute() method, this class converts an acquired (raw) image into 
a corrected image where the lens distortion has been removed.  
</summary>
            <remarks>
The new camera calibration produced at training-time (Raw2DFromPhys3DUsingCorrectedImage) has 
a distortion model of Cog3DCameraCalibrationDistortionModelConstants.eNoDistortion, and 
has extrinsic parameters (Raw2DFromPhys3DUsingCorrectedImage.Camera3DFromPhys3D) that
are the same as the original camera calibration (specified at training-time) extrinsic parameters.
<para>
2D features in the corrected image mapped to 3D rays in Phys3D space using 
Raw2DFromPhys3DUsingCorrectedImage, correspond to exactly
the same 3D rays as corresponding 2D features in the
uncorrected image mapped using the original camera calibration specified at training-time.
</para></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection})">
            <summary>
Fits a 3D circle from 2D point sets and a set of camera calibrations. 
Each 2D point set must have been extracted from different cameras or views. 
The 2D point sets from the different cameras or views do not need to correspond,
but they must lie on the same 3D circle.
</summary>
            <param name="raw2DFromPhys3Ds">
The camera calibrations used during the extraction of the 2D points.
The size of this list defines the number of cameras or views used.
</param>
            <param name="pointsRaw2D">
The List of 2D point collections, one collection per camera or view. 
The size of the list must be equal to the number of cameras/views.   
</param>
            <returns>
A List containing 1 or 2 Cog3DCircleFitterUsing2DPointsResult objects (see Remarks section). 
Each result object contains the fitted 3D circle and 2D/3D residuals.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If one of the following is true:
<list type="bullet"><item> The number of camera calibrations is less than 1. </item><item> The number of camera calibrations does not match the number of 2D point collections. </item><item> FitMode is Cog3DCircleFitterUsing2DPointsFitModeConstant.LeastSquaresUseSpecifiedRadius and Radius is 0.</item><item> FitMode is Cog3DCircleFitterUsing2DPointsFitModeConstant.LeastSquaresComputeRadius and only one camera calibration is provided.</item><item> None of the individual collections of 2D points contain five or more points. </item><item> If any of the camera calibrations have telecentric lens distortion. </item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If a 3D circle cannot be fitted.
</exception>
            <remarks>
This Execute method may return at
most two results. It returns a single result if
there is one unambiguous 3D circle which induces the minimum sum
squared image error.  It returns two different 3D circles
if there are two different 3D circles which induce similar sum squared image errors
(For an explanation of why there are at most 2
different circles that match the image data, refer to the Forsyth et al paper "Invariant Descriptors for 3D
Object Recognition" which appeared in IEEE PAMI, Vol. 13, No. 10,
October 1991, pages 971 - 991)).
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.FitMode">
            <summary>
Gets/sets the fit mode for circle fitting.
</summary>
            <value>
The fit mode for circle fitting.
</value>
            <exception cref="T:System.ArgumentException">
If invalid fit mode is used in the setter.
</exception>
            <remarks>
If FitMode is 
Cog3DCircleFitterUsing2DPointsFitModeConstants.eLeastSquaresUseSpecifiedRadius, then Execute
will use the value of Radius. If FitMode is 
Cog3DCircleFitterUsing2DPointsFitModeConstants.eLeastSquaresComputeRadius, then 
Execute will ignore the value of Radius.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.Radius">
            <summary>
Gets/sets the expected radius of the circle to find.
</summary>
            <value>
The expected radius of the circle to find.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="newRadius" /> is less than 0.
</exception>
            <remarks>
If FitMode is 
 Cog3DCircleFitterUsing2DPointsFitModeConstants.eLeastSquaresUseSpecifiedRadius, then Execute
 will use this specified radius. If FitMode is 
 Cog3DCircleFitterUsing2DPointsFitModeConstants.eLeastSquaresComputeRadius, then 
 Execute will ignore this specified radius.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.#ctor(Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints.#ctor">
            <summary>
Default constructor. Note that FitMode is 
Cog3DCircleFitterUsing2DPointsFitModeConstants.LeastSquaresUseSpecifiedRadius, and
Radius is 0.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPoints">
            <summary>
This class provides 3D circle fitting from 2D points. 
A 3D circle is fitted from one or multiple sets of 2D image points.
The sets of image points can come from different cameras or from
a single camera providing multiple views of the circle.
The 3D circle fitter computes the pose of the circle which
minimizes the sum squared image error with respect to the given 2D
image points from calibrated camera(s). 
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsFitModeConstants">
            <summary>
This enum class defines enumeration constants for the different 3D circle fitting modes. 
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsFitModeConstants.DefaultFitMode">
            <summary>
DefaultFitMode is equal to LeastSquaresUseSpecifiedRadius.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsFitModeConstants.LeastSquaresUseSpecifiedRadius">
            <summary>
Least squares fit using the specified radius.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsFitModeConstants.LeastSquaresComputeRadius">
            <summary>
Least squares fit using measured radius.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.RealEqual(Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult,Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3D" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.ResidualsRaw2D">
            <inheritdoc cref="!:ICog3DBase::ResidualsRaw2D" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.GetCirclePhys3D">
            <summary>
Gets a copy of the fitted 3D circle.
</summary>
            <returns>
A copy of the fitted 3D circle.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.Finalize">
            <summary>
Finalizer.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCircleFitterUsing2DPointsResult">
            <summary>
This class holds a result from a 3D circle fitting operation, where 2D points have been 
used as input. Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DCircleFitterUsing2DPoints class and always 
contains a 3D circle fitting result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection})">
            <summary>
Fits a 3D line from 2D point sets and a set of camera calibrations. 
The 2D points must be extracted from different cameras or views. 
It is not required that the 2D points of the different cameras/views correspond,
but all the 2D points must lie on the same 3D line.  
<para> The stability and precision of the fitted line segment can 
be determined by setting Perturbation to a value greater than 0.
This will estimate the precision of the found line segment by trying slight
perturbations of the fitted line segment and comparing the
residuals (induced by the perturbed line segment) with the
residuals corresponding to the fitted line segment.  
The difference between the residuals induced by the perturbed line segment
and the residuals of the fitted line segment are stored in the 
Cog3DLineFitterUsing2DPointsResult.MinDeltaResidualsPhys3D and
Cog3DLineFitterUsing2DPointsResult.MinDeltaResidualsRaw2D properties.
</para><para> 
Notes:
<list type="bullet"><item> The result's IsFound property will be set to false
if no line can be fit to the given points (such as when the
line formed by the image points is exactly parallel to the baseline
between two cameras). </item><item> This operation determines the 3D line segment which minimizes
 the sum squared error in image pixels. </item><item> The endpoints of the fitted line segment are determined by
inferring 3D rays from all the pointsRaw2D,
determining the nearest point on the fitted line segment to each 3D ray,
determining the 2 outermost points with respect to all the nearest points
on the fitted line segment. </item></list></para></summary>
            <param name="raw2DFromPhys3Ds">
The camera calibrations of the cameras used to extract the 2D points.
The size of the list defines the number of cameras/views used.
</param>
            <param name="pointsRaw2D">
A list of 2D point collections, one collection per camera/view. 
The size of the list must be equal to the number of cameras. 
<para> Notes:
<list type="bullet"><item> This function can tolerate the situation where some items
of pointsRaw2D are empty (i.e., <paramref name="pointsRaw2D" />[i].Count==0); </item><item> It is NOT
required that <paramref name="pointsRaw2D" />[camIndex_i].Count == <paramref name="pointsRaw2D" />[camIndex_j].Count  (camIndex_i != camIndex_j); </item><item> It is NOT required that 
     <paramref name="pointsRaw2D" />[camIndex_i][k] corresponds to <paramref name="pointsRaw2D" />[camIndex_j][k] 
      (camIndex_i != camIndex_j). </item></list></para></param>
            <returns>
A Cog3DLineFitterUsing2DPointsResult containing the fitted line segment and 2D and 3D residuals.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any of the input arguments is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If <paramref name="raw2DFromPhys3Ds" />.Count is less than 2. </item>
                    <item> If <paramref name="raw2DFromPhys3Ds" />.Count != <paramref name="pointsRaw2D" />.Count. </item>
                    <item>
If fewer than two of the individual items in <paramref name="pointsRaw2D" />
contain two or more points.  </item>
                </list>
            </exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.Perturbation">
            <summary>
Gets/sets the perturbation used for measuring the precision
 of the estimated line segment. 
<para> Note that perturbation is specified in physical units. </para></summary>
            <value>
The perturbation used for measuring the precision
of the estimated line segment.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="value" /> is less than 0.
</exception>
            <remarks>
        The measurement using this perturbation involves
        performing multiple experiments, measuring results, and
        then saving the most extreme result. Each experiment
        involves modifying the fitted line segment by moving
        one of the fitted line segment's endpoints along a ray
        (the ray starts from one of the cameras and is coincident with the endpoint)
        by the specified perturbation
        distance, and then computing the residuals (in both image
        and physical coordinates) between the rays corresponding
        to the raw2D image points and the perturbed line segment,
        and then subtracting the respective residuals of the best
        fit line.  
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.#ctor(Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints.#ctor">
            <summary>
Default constructor.  Initializes this object for use. Note that Perturbation is 0.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPoints">
            <summary>
This class provides 3D line fitting from 2D points. 
A 3D line is fitted from multiple sets of 2D image points.
The sets of image points can come from different cameras or from
a single camera providing multiple views of the line.
The 3D line fitter computes the pose of the line which
minimizes the sum squared image error with respect to the given 2D
image points from calibrated camera(s). 
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.RealEqual(Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult,Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult,System.Double)">
            <inheritdoc cref="!:ICog3DBase::RealEqual" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.MinDeltaResidualsPhys3D">
            <summary>
Gets a measure of the precision of the fitted line segment, and the measure is in Phys3D.
<para> Note that larger residuals indicate a more precise fitted line segment result
       (because the more the residuals increase per line segment
       perturbation, the more accurately the line segment is localized).
</para></summary>
            <value>
A measure of the precision of the fitted line segment (in Phys3D units).
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.MaxDeltaResidualsPhys3D">
            <summary>
Deprecated. Please use MinDeltaResidualsPhys3D instead.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.MaxDeltaResidualsRaw2D">
            <summary>
Deprecated. Please use MinDeltaResidualsRaw2D instead.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.MinDeltaResidualsRaw2D">
            <summary>
Gets a measure of the precision of the fitted line segment in Raw2D space.
<para> Note that larger residuals indicate a more precise fitted line segment result
       (because the more the residuals increase per line segment
       perturbation, the more accurately the line segment is localized).
</para></summary>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
            <value>
A measure of the precision of the fitted line segment (in Raw2D units).
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3D" />
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.ResidualsRaw2D">
            <inheritdoc cref="!:ICog3DBase::ResidualsRaw2D" />
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.GetLinePhys3D">
            <summary>
Get a deep copy of the fitted 3D line.
</summary>
            <returns>
A deep copy of the fitted 3D line.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.GetLineSegmentPhys3D">
            <summary>
Get a deep copy of the fitted 3D line segment.
Note that the line segment is the shortest line segment that incorporates 
all of the 3D rays corresponding to the 2D points from calibrated
cameras/views.
</summary>
            <returns>
The fitted 3D line segment.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If IsFound is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.IsFound">
            <summary>
Gets whether or not a fitted line segment was found.
</summary>
            <value>
True if a fitted line segment was found; false otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLineFitterUsing2DPointsResult">
            <summary>
This class holds a result from a 3D line fitting operation, where 2D points have been used as input.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DLineFitterUsing2DPoints class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.Execute(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Perform a 3D pose estimation using PointsModel3D (model points in Model3D space) and 
and the specified 3D points in Phys3D space.
</summary>
            <param name="pointsPhys3D">
The 3D point collection in Phys3D space. Each 3D point in this collection must 
correspond to the 3D model point with the same index in PointsModel3D.
</param>
            <returns>
The 3D estimated pose result object. 
The pose in the result object is the pose of the model in Phys3D space
i.e. the pose maps points from the Model3D space to the Phys3D space.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the size of pointsPhys3D does not match the size of PointsModel3D.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.PointsModel3D">
            <summary>
Gets/sets the 3D model points, in Model3D space, that define 
the object of interest.
</summary>
            <value>
A collection of 3D model points in Model3D space.
</value>
            <exception cref="T:System.ArgumentNullException">
If input argument in the setter is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.#ctor(Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints.#ctor">
            <summary>
Construct this default Cog3DPoseEstimatorUsing3DPoints. Note that PointsModel3D is an empty collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPoints">
            <summary>
This class provides 3D pose estimation from a set 3D "found" points
and their corresponding 3D model points.
The pose estimation is done by determining the best fit between 
the set of 3D model points and the set of corresponded 3D found points.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DScalarCollection})">
            <summary>
Perform a 3D pose estimation based on the 3D model points, the specified camera calibrations, 
the specified 2D image points, and the specified weights, from one or multiple cameras/views.
</summary>
            <param name="raw2DFromPhys3Ds">
A List of CameraCalibrations. One calibration per camera/view.
The size of this list specifies the number of cameras/views.
</param>
            <param name="pointsRaw2D">
A List of 2D point collections, indexed by camera/view. 
The size of the List must equal the number of cameras/views.
The size of each collection must equal the number of model points.
Each point in <paramref name="pointsRaw2D" /> represents its corresponding model point from a specific camera/view,  
i.e., <paramref name="pointsRaw2D" />[i][j] is from camera i, and corresponds to PointsModel3D[j]. 
The total number of valid 2D points must be &gt;= 3.
</param>
            <param name="weights">
A List of collections of weights, indexed by camera/view. 
The List may be null to indicate all points have a weight of 1.
If not null, then the size of the List must be equal to the number of cameras/views, and each collection in the List is 
either null to indicate that all points from the corresponding camera have a weight of 1, or the collection has the same
size as the number of 3D model points.
Each weight must be &gt;= 0.
</param>
            <returns>
The 3D estimated pose result object. The pose in the result object maps points from Model3D space to Phys3D space.  
</returns>
            <exception cref="T:System.ArgumentNullException">
If any of the arguments (except <paramref name="weights" />) is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If  <paramref name="raw2DFromPhys3Ds" />.Count == 0; </item>
                    <item> If <paramref name="raw2DFromPhys3Ds" />.Count != <paramref name="pointsRaw2D" />.Count; </item>
                    <item> If  <paramref name="weights" /> is not null, and 
<paramref name="weights" />.Count != <paramref name="pointsRaw2D" />.Count; </item>
                    <item> If <paramref name="pointsRaw2D" />[i].Count !=  PointsModel3D.Count 
(i is inside [0, <paramref name="pointsRaw2D" />.Count-1]); </item>
                    <item> If <paramref name="weights" />[i] is not null, and 
<paramref name="weights" />[i].Count != PointsModel3D.Count 
(i is inside [0, <paramref name="pointsRaw2D" />.Count-1]). </item>
                </list>
            </exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.PointsModel3D">
            <summary>
Gets/sets the 3D model points, in Model3D space, that define 
the object of interest.
</summary>
            <value>
A collection of 3D model points in Model3D space.
</value>
            <exception cref="T:System.ArgumentNullException">
If input argument in the setter is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.#ctor(Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints.#ctor">
            <summary>
Construct this default Cog3DPoseEstimatorUsing2DPoints. Note that PointsModel3D is an empty collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPoints">
            <summary>
This class provides 3D pose estimation from a set or sets of 2D image points.
The pose estimation is done by determining the best fit between a set of 3D model points
and the set or sets of corresponded 2D image points.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3DUsing3DPoints" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.Phys3DFromModel3D">
            <summary>
Gets the 3D pose of this result,
i.e. the 3D pose of the model in Phys3D space.
</summary>
            <value>
The 3D pose of the model in Phys3D space.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing3DPointsResult">
            <summary>
This class encapsulates the result of a 3D pose estimation using
3D found points.
Note that this class is immutable - it may not be changed once
it has been constructed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.ResidualsPhys3D">
            <inheritdoc cref="!:ICog3DBase::ResidualsPhys3D" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.ResidualsRaw2D">
            <inheritdoc cref="!:ICog3DBase::ResidualsRaw2D" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.Phys3DFromModel3D">
            <summary>
Gets the 3D pose of this result,
i.e. the 3D pose of the model in Phys3D space.
</summary>
            <value>
The 3D pose of the model in Phys3D space.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult.#ctor(Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoseEstimatorUsing2DPointsResult">
            <summary>
This class encapsulates the result of a 3D pose estimation using
2D image points.
Note that this class is immutable - it may not be changed once
it has been constructed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection},System.Collections.Generic.List`1{System.Collections.Generic.List`1{System.Boolean}},System.Collections.Generic.List`1{System.Boolean}@,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DResiduals}@,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DResiduals}@)">
            <summary>
Triangulate a collection of 3D features from their corresponding 2D image points from different cameras.
</summary>
            <param name="raw2DFromPhys3Ds">
A list of Cog3DCameraCalibration, indexed by camera. One calibration per camera.
The size of this list defines the number of cameras. Must be greater than or equal to two.
</param>
            <param name="pointsRaw2D">
A List of 2D point collections, indexed by camera. Each 2D point collection contains all 2D feature points from a specific camera.
The size of the List must be equal to the number of cameras.
The size of each 2D point collection must be the same and defines the number of 3D features to be triangulated.
</param>
            <param name="isPointValid">
A List of valid flags Lists, indexed by camera. The outer List may be null to indicate all points are valid.
If not null, the size of the outer List must be equal to the number of cameras, and each item in the outer List must
be either null (to indicate all points from the corresponding camera are valid), or have the same size 
as the number of 3D features to be triangulated.
</param>
            <param name="is3DPointValid">
This output parameter is a list of valid flags for the returned 3D features. If a 3D feature could not be triangulated,
its corresponding flag will be false; true otherwise.
The passed list will be re-initialized by this function.
</param>
            <param name="residualsRaw2D">
2D residual error information is returned via this Out argument.
One Cog3DResiduals per triangulated 3D feature.
The passed list will be re-initialized by this function.
</param>
            <param name="residualsPhys3D">
3D residual error information is returned via this Out argument.
One Cog3DResiduals per triangulated 3D feature.
The passed list will be re-initialized by this function.
</param>
            <returns>
A collection of the triangulated 3D feature coordinates and updates <paramref name="is3DPointValid" />.
</returns>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item> If any of the input arguments (except <paramref name="isPointValid" />) is null; </item>
                    <item> If any item of <paramref name="raw2DFromPhys3Ds" /> is null; </item>
                    <item> If any item of <paramref name="pointsRaw2D" /> is null. </item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If the sizes of <paramref name="raw2DFromPhys3Ds" /> and <paramref name="pointsRaw2D" />
       are different or are less than two; </item>
                    <item> If <paramref name="pointsRaw2D" />[i] does not have the same length as 
       <paramref name="pointsRaw2D" />[j] (i and j are inside [0, <paramref name="pointsRaw2D" />.Count-1]); </item>
                    <item> If  <paramref name="isPointValid" /> is not null, and 
       does not have the same length as <paramref name="pointsRaw2D" />; </item>
                    <item> if  <paramref name="isPointValid" />[i] is not null, and does not have the
       same length as <paramref name="pointsRaw2D" />[i] (i is inside [0, <paramref name="pointsRaw2D" />.Count-1]). </item>
                </list>
            </exception>
            <inheritdoc cref="!:ICog3DBase::TriangulatorOrModelGenerator" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DVect2Collection},System.Collections.Generic.List`1{System.Collections.Generic.List`1{System.Boolean}},System.Collections.Generic.List`1{System.Boolean}@)">
            <summary>
Triangulate a collection of 3D features from their corresponding 2D image points from different cameras.
</summary>
            <param name="raw2DFromPhys3Ds">
A list of Cog3DCameraCalibration, indexed by camera. One calibration per camera.
The size of this list defines the number of cameras. Must be greater than or equal to two.
</param>
            <param name="pointsRaw2D">
A List of 2D point collections, indexed by camera. Each 2D point collection contains all 2D feature points from a specific camera.
The size of the List must be equal to the number of cameras.
The size of each 2D point collection must be the same and defines the number of 3D features to be triangulated.
</param>
            <param name="isPointValid">
A List of valid flags Lists, indexed by camera. The outer List may be null to indicate all points are valid.
If not null, the size of the outer List must be equal to the number of cameras, and each item in the outer List must
be either null (to indicate all points from the corresponding camera are valid), or have the same size 
as the number of 3D features to be triangulated.
</param>
            <param name="is3DPointValid">
This output parameter is a list of valid flags for the returned 3D features. If a 3D feature could not be triangulated,
its corresponding flag will be false; true otherwise.
The passed list will be re-initialized by this function.
</param>
            <returns>
A collection of the triangulated 3D feature coordinates and updates <paramref name="is3DPointValid" />.
</returns>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item> If any of the input arguments (except <paramref name="isPointValid" />) is null; </item>
                    <item> If any item of <paramref name="raw2DFromPhys3Ds" /> is null; </item>
                    <item> If any item of <paramref name="pointsRaw2D" /> is null. </item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> If the sizes of <paramref name="raw2DFromPhys3Ds" /> and <paramref name="pointsRaw2D" />
       are different or are less than two </item>
                    <item> If <paramref name="pointsRaw2D" />[i] does not have the same length as 
       <paramref name="pointsRaw2D" />[j] (i and j are inside [0, <paramref name="pointsRaw2D" />.Count-1]); </item>
                    <item> If  <paramref name="isPointValid" /> is not null, and 
        does not have the same length as <paramref name="pointsRaw2D" />; </item>
                    <item> If <paramref name="isPointValid" />[i] is not null, and does not have the
        same length as <paramref name="pointsRaw2D" />[i] (i is inside [0, <paramref name="pointsRaw2D" />.Count-1]). </item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},Cognex.VisionPro3D.Cog3DVect2Collection,System.Collections.Generic.List`1{System.Boolean},Cognex.VisionPro3D.Cog3DResiduals@,Cognex.VisionPro3D.Cog3DResiduals@)">
            <summary>
Triangulate a 3D point from 2D image points from different cameras.
</summary>
            <param name="raw2DFromPhys3Ds">
A list of Cog3DCameraCalibrations, indexed by camera. One calibration per camera.
</param>
            <param name="pointsRaw2D">
A collection of 2D points, indexed by camera, representing the same object feature detected from different cameras.
</param>
            <param name="isPointValid">
A collection of valid flags for each 2D point. This argument may be null, indicating that all points are valid.
If it is not null, its size must be the same as the size of pointsRaw2D.
</param>
            <param name="residualsRaw2D">
2D residual error information will be returned via this Out argument.
</param>
            <param name="residualsPhys3D">
3D residual error information will be returned via this Out argument.
</param>
            <returns>
The triangulated 3D point coordinate.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any of the arguments (except <paramref name="isPointValid" />) is null, or any item of 
<paramref name="raw2DFromPhys3Ds" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the sizes of <paramref name="raw2DFromPhys3Ds" /> and <paramref name="pointsRaw2D" />
are different or are less than two; or  <paramref name="isPointValid" /> is not null and does not
have the same length as <paramref name="pointsRaw2D" />.
</exception>
            <inheritdoc cref="!:ICog3DBase::TriangulatorOrModelGenerator" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},Cognex.VisionPro3D.Cog3DVect2Collection,System.Collections.Generic.List`1{System.Boolean})">
            <summary>
Triangulate a 3D point from 2D image points from different cameras.
</summary>
            <param name="raw2DFromPhys3Ds">
A list of Cog3DCameraCalibrations, indexed by camera. One calibration per camera.
</param>
            <param name="pointsRaw2D">
A collection of 2D points, indexed by camera, representing the same object feature detected from different cameras.
</param>
            <param name="isPointValid">
A collection of valid flags for each 2D point. This argument may be null, indicating that all points are valid.
If it is not null, its size must be the same as the size of pointsRaw2D.
</param>
            <returns>
The triangulated 3D point coordinate.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any of the arguments (except <paramref name="isPointValid" />) is null, or any item of 
<paramref name="raw2DFromPhys3Ds" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the sizes of <paramref name="raw2DFromPhys3Ds" /> and <paramref name="pointsRaw2D" />
are different or are less than two; or  <paramref name="isPointValid" /> is not null and does not
have the same length as <paramref name="pointsRaw2D" />.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.#ctor(Cognex.VisionPro3D.Cog3DTriangulator)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTriangulator.#ctor">
            <summary>
Construct this Cog3DTriangulator.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DTriangulator">
            <summary>
This class encapsulates a 3D Triangulator.
It triangulates the 3D coordinate of an object's feature from 2D image coordinates
of that feature observed from different cameras.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.Execute(System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid})">
            <summary>
Compute the hand-eye calibration(s) based on extrinsic camera transforms and robot poses. 
</summary>
            <param name="camera3DFromCalPlate3Ds">
A doubly indexed list of Cog3DTransformRigid for extrinsic camera transforms under various robot hand poses.
The first index is the robot hand pose index, the second index is the camera index.
The size of the outer list must equal the number of robot hand poses.
The size of each inner list must equal the number of cameras.
</param>
            <param name="robotBase3DFromHand3Ds">
A list of Cog3DTransformRigid's defining the robot hand poses, indexed by robot hand pose.
The size of this list must equal the number of robot hand poses.
</param>
            <returns>
A list of Cog3DTransformRigid indexed by camera, representing Camera3DFromHand3D if 
IsCameraMoving is true, or representing CalPlate3DFromHand3D if IsCameraMoving is false.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes a null item.      
</exception>
            <exception cref="T:System.ArgumentException">
If  any of the following is true:
<list type="bullet"><item><paramref name="camera3DFromCalPlate3Ds" /> is empty; </item><item><paramref name="camera3DFromCalPlate3Ds" />.Count is not equal to <paramref name="robotBase3DFromHand3Ds" />.Count; </item><item><paramref name="camera3DFromCalPlate3Ds" />[i].Count is not equal to <paramref name="camera3DFromCalPlate3Ds" />[j].Count (i, j are inside [0, <paramref name="camera3DFromCalPlate3Ds" />.Count]). </item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid})">
            <summary>
Compute the hand-eye calibration(s) based on camera intrinsic parameters, extrinsic camera transforms,
and robot poses. 
</summary>
            <param name="pelRectRaw2Ds">
A list of rectangles indexed by camera, that specifies the region of interest
of the raw acquired calibration image (the camera's field of view).
The size of this list defines the number of cameras. 
Each item must be the size of the acquired images for that camera (with origin (0,0)).
</param>
            <param name="raw2DFromCamera2Ds">
A list of the cameras' intrinsic parameters indexed by camera.
The size of this list must equal the number of cameras.
</param>
            <param name="camera3DFromCalPlate3Ds">
A doubly indexed list of Cog3DTransformRigid for extrinsic camera transforms under various robot hand poses.
The first index is the robot hand pose index, the second index is the camera index.
The size of the outer list must equal the number of robot hand poses.
The size of each inner list must equal the number of cameras.
</param>
            <param name="robotBase3DFromHand3Ds">
A list of Cog3DTransformRigid's defining the robot hand poses, indexed by robot hand pose.
The size of this list must equal the number of robot hand poses.
</param>
            <returns>
A list of Cog3DHandEyeCalibrationResult's indexed by camera containing the hand-eye calibration 
result for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item.
</exception>
            <exception cref="T:System.ArgumentException">
If  any of the following is true:
<list type="bullet"><item><paramref name="camera3DFromCalPlate3Ds" /> is empty </item><item><paramref name="pelRectRaw2Ds" />, <paramref name="raw2DFromCamera2Ds" />, 
and <paramref name="camera3DFromCalPlate3Ds" />[i] 
(i is inside [0, <paramref name="camera3DFromCalPlate3Ds" />.Count -1]) are not the same size.</item><item><paramref name="camera3DFromCalPlate3Ds" />.Count is not equal to <paramref name="robotBase3DFromHand3Ds" />.Count </item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro.ICogImage}},Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid})">
            <summary>
Compute the hand-eye calibration(s) using the specified calibration plate images acquired from
different cameras and at different robot hand poses.
</summary>
            <param name="raw2DFromCamera2Ds">
A list of the cameras' intrinsic parameters indexed by camera.
</param>
            <param name="images">
A doubly indexed list of calibration plate images, acquired at various robot hand poses.
The first index is the robot hand pose index, the second index is the camera index.
</param>
            <param name="featureExtractor">
The feature extractor to be used for extracting calibration features from the images.
</param>
            <param name="robotBase3DFromHand3Ds">
A list of Cog3DTransformRigid's defining the robot hand poses, indexed by robot hand pose.
The size of this list must equal the number of robot hand poses.
</param>
            <returns>
A list of Cog3DHandEyeCalibrationResults indexed by camera, containing the hand-eye calibration
result for each of the cameras.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes a null item.       
</exception>
            <exception cref="T:System.ArgumentException">
If  any of the following is true:
<list type="bullet"><item><paramref name="images" />.Count is not equal to <paramref name="robotBase3DFromHand3Ds" />.Count </item><item><paramref name="images" />[i].Count (i is inside [0, <paramref name="images" />.Count -1]) is not equal to 
<paramref name="raw2DFromCamera2Ds" />.Count </item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid})">
            <summary>
Compute the hand-eye calibration(s) using previously extracted calibration
plate features and previously computed camera intrinsic parameters.
</summary>
            <param name="pelRectRaw2Ds">
A list of rectangles indexed by camera, that specifies the region of interest
of the raw acquired calibration image (the camera's field of view).
The size of this list defines the number of cameras. 
Each item must be the size of the acquired images for that camera (with origin (0,0)).
</param>
            <param name="raw2DFromCamera2Ds">
A list of the cameras' intrinsic parameters indexed by camera.
The size of this list must equal the number of cameras.
</param>
            <param name="crspFeatures">
A doubly indexed list of extracted calibration plate features from various robot hand poses.
The first index is the robot hand pose index, the second index is the camera index.
The size of the outer list must equal the number of robot hand poses.
The size of each inner list must equal the number of cameras.
</param>
            <param name="robotBase3DFromHand3Ds">
A list of Cog3DTransformRigid's defining the robot hand poses, indexed by robot hand pose.
The size of this list must equal the number of robot hand poses.
</param>
            <returns>
A list of Cog3DHandEyeCalibrationResults (index is camera) containing the hand-eye calibration 
result for each camera.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes a null item 
(except <paramref name="crspFeatures" />[i][j].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If  any of the following is true:
<list type="bullet"><item><paramref name="pelRectRaw2Ds" />, <paramref name="raw2DFromCamera2Ds" />, 
and <paramref name="crspFeatures" />[i] (i is inside [0, <paramref name="crspFeatures" />.Count -1])
are not the same size; </item><item><paramref name="crspFeatures" /> and <paramref name="robotBase3DFromHand3Ds" /> are not the same size. </item><item> If  <paramref name="crspFeatures" />[i][j].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i][j].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item><item> If <paramref name="crspFeatures" />[i][j].Weights is not null, 
and  <paramref name="crspFeatures" />[i][j].Weights.Count != 
<paramref name="crspFeatures" />[i][j].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.PlateRectangleForResidualComputing">
            <summary>
Gets/Sets the sampling rectangle for residual error computation. The rectangle is specified in
2D calibration plate space (the units are those in which the calibration plate grid pitch is specified, and
the origin is defined by the fiducial marks on the calibration plate).
If the width or height of the rectangle is 0, no residual statistics will be computed.
</summary>
            <value>
The plate rectangle used for residual computation.
Getter returns null if the rectangle has not been set (default constructed Cog3DHandEyeCalibrator).
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.NumPlateSamplesY">
            <summary>
Gets/sets the number of residual error sampling points in the Y-direction of PlateRectangleForResidualComputing.
If this value is less than 1, no residual error will be computed.
</summary>
            <value>
The number of residual error sampling points in the Y-direction of PlateRectangleForResidualComputing.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.NumPlateSamplesX">
            <summary>
Gets/sets the number of residual error sampling points in the X-direction of PlateRectangleForResidualComputing.
If this value is less than 1, no residual error will be computed.
</summary>
            <value>
The number of sample points (in X-direction) to be used for residual computation.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.IsCameraMoving">
            <summary>
Gets/sets whether the calibrator should perform calibration for moving or stationary camera(s) 
</summary>
            <value>
The value indicating whether a moving camera hand-eye calibration shall be performed.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.#ctor(Cognex.VisionPro3D.Cog3DHandEyeCalibrator)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.#ctor">
            <summary>
Construct this default Cog3DHandEyeCalibrator. 
Note that IsCameraMoving is true, PlateRectangleForResidualComputing
is null,
NumPlateSamplesX is 0,
and NumPlateSamplesY is 0.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.OnHandEyeCalibrationProgress(Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs)">
            <summary>
Method to support hand-eye calibration progress event.
</summary>
            <param name="evntArgs">
The object containing hand-eye calibration progress event arguments.
</param>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DHandEyeCalibrator.HandEyeCalibrationProgress">
            <summary>
Hand-eye calibration progress event.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHandEyeCalibrator">
            <summary>
This class encapsulates hand-eye calibration. Hand-eye calibration 
establishes the mapping between the camera(s) and the robot end effector.
The IsCameraMoving property when true, specifies the cameras are mounted
on the robot end effector; when false, specifies the cameras are stationary.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventHandler">
            <summary>
This is the delegate for the hand-eye calibration progress event handler.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.RequestCancel">
            <summary>
Request to cancel the current hand-eye calibration.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.CancelRequested">
            <summary>
Gets whether a request to cancel the hand-eye calibration has been made.
</summary>
            <value>
True if cancel is requested; False Otherwise
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.Message">
            <summary>
Gets the message string.
</summary>
            <value>
A string describing the progress.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.Progress">
            <summary>
Gets the progress (fraction of completion).
</summary>
            <value>
The progress which is a number between 0 (0%) and 1.0 (100%).
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs.#ctor(System.Double,System.String)">
            <summary>
Construct this Cog3DHandEyeCalibrationProgressEventArgs using the 
specified progress and message.
</summary>
            <param name="progress">
The progress (the fraction of completion).
</param>
            <param name="message">
A string describing the progress.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHandEyeCalibrationProgressEventArgs">
            <summary>
This class holds data generated by the hand-eye calibration progress 
event. The hand-eye calibration progress event fires periodically during hand-eye calibration.
A progress value of 0.0 means 0% complete and a value of 1.0 means 100% complete.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibration},Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult@,Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult@)">
            <summary>
Use the specified calibration features and the specified camera calibrations 
to compute 2 camera calibration validation results.
The first result (<paramref name="validationResultUsingOriginalCalibrations" />)  
contains the residuals when the specified camera calibrations are used.
The second result (<paramref name="validationResultUsingRecomputedExtrinsics" />) 
contains the residuals after a new set of extrinsic parameters are computed 
using the specified calibration features.
Note that for the case of a single camera, the two results 
should be exactly equal to each other. 
</summary>
            <param name="pelRectRaw2Ds">
The list of rectangles representing the size of the raw 
acquired images (the fields of view of the cameras). May not be null.
</param>
            <param name="crspFeatures">
The two-dimensional list of feature correspondences from the cameras viewing the calibration plate.
The feature correspondences are indexed first
by the calibration plate pose, then by camera. <paramref name="crspFeatures" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="raw2DFromPhys3Ds">
The list of camera calibrations, indexed by camera. <paramref name="raw2DFromPhys3Ds" />[i] 
corresponds to the ith camera. May not be null.
</param>
            <param name="validationResultUsingOriginalCalibrations">
The computed validation result corresponding to using the original camera calibrations.
</param>
            <param name="validationResultUsingRecomputedExtrinsics">
The computed validation result corresponding to using re-computed
extrinsics based on the specified calibration features. Note that the camera intrinsics are kept from the
input camera calibrations. Note that it will be set to null if any camera distortion model is
Cog3DCameraCalibrationDistortionModelConstants.eTelecentric.
</param>
            <exception cref="T:System.ArgumentNullException">      
If any input argument is null or any input argument includes null item 
(except <paramref name="crspFeatures" />[i][j].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If <paramref name="pelRectRaw2Ds" />.Count, <paramref name="raw2DFromPhys3Ds" />.Count, and  
<paramref name="crspFeatures" />[i].Count are not the same.
 (i is inside [0, <paramref name="crspFeatures" />.Count-1]); </item><item> If  <paramref name="crspFeatures" /> is empty;  </item><item> If <paramref name="pelRectRaw2Ds" /> is empty;  </item><item> If  <paramref name="crspFeatures" />[i][j].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i][j].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item><item> If <paramref name="crspFeatures" />[i][j].Weights is not null, 
and  <paramref name="crspFeatures" />[i][j].Weights.Count != 
<paramref name="crspFeatures" />[i][j].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item></list></exception>
            <remarks>
Notes:
<list type="bullet"><item> This tool only requires a single set of calibration features, but
         can provide more accurate results if multiple sets of calibration features
         are provided. </item><item> The tool can tolerate some of the correspondences being empty
         so long as there are other correspondences which allow the
         validation to be computed. </item><item> This tool handles calibration features with 3-dimensional
         physical positions. </item><item> This tool requires that all of the elements in the calibration features vector
         correspond to the same set of cameras. </item><item> This tool requires that all of the calibration features correspond to cameras, 
         and the optical paths associated with each camera are unchanged. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibrationValidator)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator.#ctor">
            <summary>
Construct this default Cog3DCameraCalibrationValidator.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationValidator">
            <summary>
This class provides the ability to verify a set of camera calibrations
accurately reflects the current intrinsic parameters  
for a set of cameras as well as the relative positions of the cameras.  
Note that the size of the set of camera calibrations
and the size of the set of cameras can be 1.
<para>
The verification requires as input
the original camera calibrations and a set of calibration features that
have been extracted from a newly acquired set of images.
The verification outputs
the 2D and 3D residuals characterizing the current accuracy of the image
acquisition system. These "current" accuracies can be compared to the "baseline"
accuracies computed at the time of the original camera calibration.
The results of the comparison determine whether or not 
the image acquisition system is still in calibration. 
</para><para>
Due to the nature
of the validation procedure (positioning a calibration plate in an arbitrary pose),
the validation cannot determine if the world coordinate system has changed. 
Validation can only determine if the camera intrinsics are out of calibration,
and if the camera positions RELATIVE TO EACH OTHER have changed.
</para></summary>
            <remarks>
A "baseline" validation should be performed immediately
after camera calibration. That baseline validation step should involve
multiple view sets so it is possible to estimate the distribution of 2D
residuals and 3D residuals. The "baseline" validation measurements should be
stored for future comparison. 
<para> Then, at some arbitrary time (usually after the
system performed vision tasks for a period of time), the user
acquires images of the same calibration plate in some
set of (preferrably, the same) poses and executes camera calibration validation to get the "current"
measurements. Finally, the user compares the "current" validation
measurements with the "baseline". </para><para> If the "current" measurements agree with the "baseline"
measurements to a satisfactory degree, then the system is in
calibration and the user does not need to perform any
recalibration. If the measurement computed using the "recomputed
extrinsics" satisfactorily agrees, but the measurement computed
using the existing "camera calibration" do not satisfactorily agrees, then the
user needs to perform extrinsic calibration. If neither validation
measurements agree, then the user needs to perform full recalibration. </para></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Execute(Cognex.VisionPro3D.Cog3DVect3Collection,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DCameraCalibration,Cognex.VisionPro.ICogGraphic,System.Boolean,Cognex.VisionPro.CogGraphicCollection)">
            <summary>
Overload to draw a collection of 3D points.
<paramref name="exemplarShape" />  can be a VisionPro shape that 
serves as a marker: CogCircle, CogPointMarker, or CogRectangle.
</summary>
            <param name="pointsAny3D">
A collection of 3D points in an arbitrary 3D space.
</param>
            <param name="phys3DFromAny3D">
The rigid transform used to map the points inside 
<paramref name="pointsAny3D" /> to the Phy3D space of 
<paramref name="raw2DFromPhys3D" />. This parameter can be null to signify
an identity transform should be used.
</param>
            <param name="raw2DFromPhys3D">
The camera calibration used for projecting the mapped 3D points onto an
acquired image. May not be null.
</param>
            <param name="exemplarShape">
An example shape graphic used to draw each projected 2D point.
</param>
            <param name="usingGraphicPropertiesOfShapeProjector">
If it is true, the graphic properties of this shape projector will be used
in rendering, otherwise the graphic properties of  
<paramref name="exemplarShape" /> will be used instead.
</param>
            <param name="graphicCollection">
The VisionPro graphics collection the rendered graphics is appended to.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="pointsAny3D" />,  <paramref name="raw2DFromPhys3D" />,
<paramref name="exemplarShape" />, 
or <paramref name="graphicCollection" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="exemplarShape" /> is not of Type CogCircle, 
CogRectangle, or CogPointMarker.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Execute(Cognex.VisionPro3D.Cog3DVect2Collection,Cognex.VisionPro.ICogGraphic,System.Boolean,Cognex.VisionPro.CogGraphicCollection)">
            <summary>
Overload to draw a collection of 2D points.
<paramref name="exemplarShape" />  can be a VisionPro shape that 
serves as a marker: CogCircle, CogPointMarker, or CogRectangle.
</summary>
            <param name="pointsRaw2D">
A collection of 2D points in the Raw2D space.
</param>
            <param name="exemplarShape">
An example shape graphic used to draw each 2D point.
</param>
            <param name="usingGraphicPropertiesOfShapeProjector">
If it is true, the graphic properties of this shape projector will be used
in rendering,  otherwise the graphic properties of  
<paramref name="exemplarShape" /> will be used instead.
</param>
            <param name="graphicCollection">
The VisionPro graphics collection the rendered graphics is appended to.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="pointsRaw2D" />,   
<paramref name="exemplarShape" />, 
or <paramref name="graphicCollection" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="exemplarShape" /> is not of Type CogCircle, 
CogRectangle, or CogPointMarker.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Execute(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DCameraCalibration,System.String,Cognex.VisionPro.CogGraphicCollection)">
            <summary>
Maps 3D coordinate axes using the phys3DFromAxes3D transform.
Then projects the mapped 3D coordinate axes using the raw2DFromPhys3D 
camera calibration onto the image plane.  The projected axes, along with
x, y, z text and specified label are then rendered as VisionPro graphics
and appended to the specified graphicsCollection.
</summary>
            <param name="lengthAxes3D">
The 3D vector representing the physical length of the X, Y, and Z 
coordinate axes to be projected and rendered.
</param>
            <param name="phys3DFromAxes3D">
The rigid transform used to specify the pose of the 3D coordinate axes 
in the Phys3D coordinate  space of the specified 
raw2DFromPhys3D camera calibration.  This parameter can be null to signify
an identity transform should be used.
</param>
            <param name="raw2DFromPhys3D">
The camera calibration used for projecting the 3D coordinate axes onto an 
acquired image. May not be null.
</param>
            <param name="label">
The specified label for the 3D coordinate axes. If it is null, then the 
label string is empty.
</param>
            <param name="graphicCollection">
The VisionPro graphics collection the projected and rendered axes are 
appended to.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="lengthAxes3D" /> is zero or negative in any dimension. 
</exception>
            <exception cref="T:System.ArgumentNullException">
if <paramref name="raw2DFromPhys3D" />, 
or <paramref name="graphicCollection" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Execute(System.Collections.Generic.List`1{Cognex.VisionPro3D.ICog3DShape},Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DCameraCalibration,Cognex.VisionPro.CogGraphicCollection)">
            <summary>
Maps a list of 3D shapes using the phys3DFromShape3D transform.
Then projects the mapped 3D shapes using the raw2DFromPhys3D camera calibration
onto the image plane.  The shapes are then rendered as VisionPro graphics and
appended to the specified graphicsCollection.
</summary>
            <param name="shapesShape3D">
The 3D shapes to be projected and rendered.
</param>
            <param name="phys3DFromShape3D">
The rigid transform used to map the shapes from the coordinate space it is
defined into the Phys3D coordinate space of the specified 
raw2DFromPhys3D camera calibration.  This parameter can be null to signify 
an identity transform should be used.
</param>
            <param name="raw2DFromPhys3D">
The camera calibration used for projecting the 3D shapes onto an acquired image.
</param>
            <param name="graphicCollection">
The VisionPro graphics collection the rendered shape is appended to.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapesShape3D" />, 
any item of <paramref name="shapesShape3D" />,
<paramref name="raw2DFromPhys3D" />, 
or <paramref name="graphicCollection" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Execute(Cognex.VisionPro3D.ICog3DShape,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DCameraCalibration,Cognex.VisionPro.CogGraphicCollection)">
            <summary>
Maps the specified 3D shape using the phys3DFromShape3D transform.
Then projects the mapped 3D shape using the raw2DFromPhys3D camera 
calibration onto the image plane.  The shape is then rendered as a 
VisionPro graphic and appended to the specified graphicsCollection.
</summary>
            <param name="shapeShape3D">
The 3D shape to be projected and rendered.
</param>
            <param name="phys3DFromShape3D">
The rigid transform used to map the shape from the coordinate space 
it is defined into the Phys3D coordinate space of the specified 
raw2DFromPhys3D camera calibration.  This parameter can be null to 
signify an identity transform should be used.
</param>
            <param name="raw2DFromPhys3D">
The camera calibration used for projecting the 3D shape onto an acquired
image.
</param>
            <param name="graphicCollection">
The VisionPro graphics collection the rendered shape is appended to.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeShape3D" />, <paramref name="raw2DFromPhys3D" />, 
or <paramref name="graphicCollection" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DShapeProjector.LineStyle">
            <summary>
Gets/sets the line style used for rendering the shapes.
</summary>
            <value>
The line style used for rendering shapes.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DShapeProjector.LineWidthInScreenPixels">
            <summary>
Gets/sets the line width used for rendering the shapes.
</summary>
            <value>
The line width in screen pixels used for rendering shapes.
</value>
            <exception cref="T:System.ArgumentException">
From setter if <paramref name="lineWidthInScreenPixels" /> is less than 1.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DShapeProjector.Color">
            <summary>
Gets/sets the color of the shapes being rendered.
</summary>
            <value>
The color used for rendering shapes.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DShapeProjector.ShapeRepresentation">
            <summary>
Gets/sets how shapes are to be rendered.
</summary>
            <value>
Bitfield specifying how shapes are rendered. 
Set the Cog3DShapeStateConstants::Vertex bit to have vertices representing
the shape rendered.
Set the Cog3DShapeStateConstants::Curve bit to have the curves representing
the shape rendered.
</value>
            <exception cref="T:System.ArgumentException">
The Cog3DShapeStateConstants::Vertex bit and/or the 
Cog3DShapeStateConstants::Curve bit must be set in 
<paramref name="shapeRepresentation" />.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.#ctor(Cognex.VisionPro3D.Cog3DShapeProjector)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeProjector.#ctor">
            <summary>
Initializes this object for use. It is initialized such that:
Color is CogColorConstants.Cyan, 
LineWidthInScreenPixels is 1, 
LineStyle is CogGraphicLineStyleConstants.Solid, and
ShapeRepresentation is 
Cog3DShapeStateConstants.Vertex | Cog3DShapeStateConstants::Curve.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DShapeProjector">
            <summary>
This class provides the functionality for projecting the
vertex and/or curve representations of 3D shapes onto the image plane
of a calibrated 2D camera i.e. acquired image, converting the 
projection results to 2D VisionPro graphics and then appending the graphics
to a VisionPro CogGraphicCollection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.ToString">
            <inheritdoc cref="!:ICog3DBase::ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants})">
            <summary>
Overload for computing the 3D camera calibration from the given feature correspondences, camera 
intrinsic parameters, and calibration plate poses. Note that 
DistortionModel inside this Cog3DCameraCalibrator will be ignored, and the ones inside 
<paramref name="raw2DFromCamera2Ds" /> will be used instead.
</summary>
            <param name="pelRectRaw2Ds">
The list of the regions of interest (the fields of view) of the raw 
acquired images (the fields of view of the cameras). May not be null.
Each item must be the size of acquired calibration images for that camera (with origin (0,0)).
</param>
            <param name="crspFeatures">
Two-dimensional list of feature correspondences from the cameras viewing the calibration plate.
The feature correspondences are indexed first
by the calibration plate pose, then by camera. <paramref name="crspFeatures" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="raw2DFromCamera2Ds">
A list of intrinsic camera calibration parameters, and indexed by camera. <paramref name="raw2DFromCamera2Ds" />[i] 
corresponds to the ith camera. May not be null.
</param>
            <param name="world3DFromCalPlate3Ds">
The list of poses of the calibration plate (with respect to the calibration plate pose
defining the world coordinate system). <paramref name="world3DFromCalPlate3Ds" />[i] corresponds to 
the ith calibration plate pose.
Calibration plate pose does not need to be specified exactly for pose types of PoseElevated or 
PoseTilted. The requirement is as follows:
<list type="bullet"><item> The poses for pose types of PoseSpecified must be valid/appropriate; </item><item> The poses for pose types of PoseTilted will be ignored; </item><item> The poses for pose types of PoseElevated will be used 
to set the z height information of the calibration plate (only pose.Translation.Z will be used); </item><item> The pose for pose type of PoseDefineWorldCoord must be identity.  </item></list></param>
            <param name="poseTypes">
The list of calibration plate pose types. It should have the same length as <paramref name="world3DFromCalPlate3Ds" />. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item
(except <paramref name="crspFeatures" />[i][j].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If <paramref name="crspFeatures" />,
<paramref name="world3DFromCalPlate3Ds" />, and <paramref name="poseTypes" /> are not the same length; </item><item> If <paramref name="pelRectRaw2Ds" />, <paramref name="raw2DFromCamera2Ds" />, and   
<paramref name="crspFeatures" />[i]
 (i is inside [0, <paramref name="crspFeatures" />.Count-1])  are not the same length; </item><item> If <paramref name="crspFeatures" /> is empty; </item><item> If <paramref name="pelRectRaw2Ds" /> is empty. </item><item> If  <paramref name="crspFeatures" />[i][j].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i][j].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item><item> If <paramref name="crspFeatures" />[i][j].Weights is not null, 
and  <paramref name="crspFeatures" />[i][j].Weights.Count != 
<paramref name="crspFeatures" />[i][j].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <returns>
The 3D camera calibration result.
</returns>
            <remarks>
This overload ignores DistortionModel value of this Cog3DCameraCalibrator object. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics},Cognex.VisionPro3D.Cog3DScalarCollection,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants})">
            <summary>
Overload for  computing the 3D camera calibration from the given feature correspondences and camera 
intrinsic parameters, and z height information of the calibration plate poses. Note that 
DistortionModel inside this Cog3DCameraCalibrator will be ignored, and the ones inside 
<paramref name="raw2DFromCamera2Ds" /> will be used instead.
</summary>
            <param name="pelRectRaw2Ds">
The list of the regions of interest (the fields of view) of the raw 
acquired images (the fields of view of the cameras). May not be null. 
Each item must be the size of acquired calibration images for that camera (with origin (0,0)).
</param>
            <param name="crspFeatures">
Two-dimensional list of feature correspondences from the cameras viewing the calibration plate.
The feature correspondences are indexed first
by the calibration plate pose, then by camera. <paramref name="crspFeatures" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="raw2DFromCamera2Ds">
A list of intrinsic camera calibration parameters, and indexed by camera. <paramref name="raw2DFromCamera2Ds" />[i] 
corresponds to the ith camera. May not be null.
</param>
            <param name="zHeightsPhys3D">
The z positions of the calibration plate for different calibration plate poses. 
<paramref name="zHeightsPhys3D" />[i] corresponds to the ith calibration plate pose.  The requirement is as follows:
<list type="bullet"><item> The z positions corresponding to pose types of PoseElevated must be valid/appropriate; </item><item> The z position corresponding to pose type of PoseDefineWorldCoord must be 0; </item><item> The z positions corresponding to pose types of PoseTilted will be ignored; </item><item> The z positions corresponding to pose types of PoseSpecified require that the calibration
plate is a pure translation in Z from the PoseDefineWorldCoord poseType.  
Thus, a Z value is all that is required. </item></list>
May not be null.
</param>
            <param name="poseTypes">
The list of calibration plate pose types. <paramref name="poseTypes" />[i] corresponds to the ith calibration 
plate pose type. It should have the same length as <paramref name="zHeightsPhys3D" />. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item
(except <paramref name="crspFeatures" />[i][j].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If <paramref name="crspFeatures" />, <paramref name="zHeightsPhys3D" />, and  <paramref name="poseTypes" />
are not the same length; </item><item> If <paramref name="pelRectRaw2Ds" />, <paramref name="raw2DFromCamera2Ds" />, and <paramref name="crspFeatures" />[i]
 (i is inside [0, <paramref name="crspFeatures" />.Count-1]) are not the same length; </item><item> If <paramref name="crspFeatures" /> is empty; </item><item> If <paramref name="pelRectRaw2Ds" /> is empty. </item><item> If  <paramref name="crspFeatures" />[i][j].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i][j].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item><item> If <paramref name="crspFeatures" />[i][j].Weights is not null, 
and  <paramref name="crspFeatures" />[i][j].Weights.Count != 
<paramref name="crspFeatures" />[i][j].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <returns>
The 3D camera calibration result.
</returns>
            <remarks>
This overload ignores DistortionModel value of this Cog3DCameraCalibrator object. 
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection}},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants})">
            <summary>
Overload for computing the 3D camera calibration from the given feature correspondences, and 
calibration plate poses.
</summary>
            <param name="pelRectRaw2Ds">
The list of the regions of interest (the fields of view) of the raw 
acquired images (the fields of view of the cameras). May not be null. 
Each item must be the size of acquired calibration images for that camera (with origin (0,0)).
</param>
            <param name="crspFeatures">
Two-dimensional list of feature correspondences from the cameras viewing the calibration plate.
The feature correspondences are indexed first
by the calibration plate pose, then by camera. <paramref name="crspFeatures" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="world3DFromCalPlate3Ds">
The list of poses of the calibration plate (with respect to the calibration plate pose
defining the world coordinate system). <paramref name="world3DFromCalPlate3Ds" />[i] corresponds to 
the ith calibration plate pose.
Calibration plate pose does not need to be specified exactly for pose types of PoseElevated or 
PoseTilted. The requirement is as follows:
<list type="bullet"><item> The poses for pose types of PoseSpecified must be valid/appropriate; </item><item> The poses for pose types of PoseTilted will be ignored; </item><item> The poses for pose types of PoseElevated will be used 
to set the z height information of the calibration plate (only pose.Translation.Z will be used); </item><item> The pose for pose type of PoseDefineWorldCoord must be identity.  </item></list></param>
            <param name="poseTypes">
The list of calibration plate pose types. It should have the same length as <paramref name="world3DFromCalPlate3Ds" />. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item
(except <paramref name="crspFeatures" />[i][j].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If <paramref name="crspFeatures" />, <paramref name="world3DFromCalPlate3Ds" />, and
<paramref name="poseTypes" /> are not the same length; </item><item> If <paramref name="pelRectRaw2Ds" /> does not have the same length as 
<paramref name="crspFeatures" />[i]
 (i is inside [0, <paramref name="crspFeatures" />.Count-1]); </item><item> If  <paramref name="crspFeatures" /> is empty; </item><item> If <paramref name="pelRectRaw2Ds" /> is empty. </item><item> If  <paramref name="crspFeatures" />[i][j].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i][j].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item><item> If <paramref name="crspFeatures" />[i][j].Weights is not null, 
and  <paramref name="crspFeatures" />[i][j].Weights.Count != 
<paramref name="crspFeatures" />[i][j].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <returns>
The 3D camera calibration result.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Execute(System.Collections.Generic.List`1{System.Drawing.Rectangle},System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCrspFeaturesCollection}},Cognex.VisionPro3D.Cog3DScalarCollection,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants})">
            <summary>
Overload for computing the 3D camera calibration from the given feature correspondences, and z
height information of the calibration plate poses.
</summary>
            <param name="pelRectRaw2Ds">
The list of the regions of interest (the fields of view) of the raw 
acquired images (the fields of view of the cameras). May not be null. 
Each item must be the size of acquired calibration images for that camera (with origin (0,0)).
</param>
            <param name="crspFeatures">
Two-dimensional list of feature correspondences from the cameras viewing the calibration plate.
The feature correspondences are indexed first
by the calibration plate pose, then by camera. <paramref name="crspFeatures" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="zHeightsPhys3D">
The z positions of the calibration plate for different calibration plate poses. 
<paramref name="zHeightsPhys3D" />[i] corresponds to the ith calibration plate pose.  The requirement is as follows:
<list type="bullet"><item> The z positions corresponding to pose types of PoseElevated must be valid/appropriate; </item><item> The z position corresponding to pose type of PoseDefineWorldCoord must be 0; </item><item> The z positions corresponding to pose types of PoseTilted will be ignored; </item><item> The z positions corresponding to pose types of PoseSpecified require that the calibration
plate is a pure translation in Z from the PoseDefineWorldCoord poseType.  
Thus, a Z value is all that is required. </item></list>
May not be null.
</param>
            <param name="poseTypes">
The list of calibration plate pose types. <paramref name="poseTypes" />[i] corresponds to the ith calibration 
plate pose type. It should have the same length as <paramref name="zHeightsPhys3D" />. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item 
(except <paramref name="crspFeatures" />[i][j].Weights).
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If <paramref name="crspFeatures" />,
<paramref name="zHeightsPhys3D" />, and <paramref name="poseTypes" /> are not the same length; </item><item> If <paramref name="pelRectRaw2Ds" /> does not have the same length as 
<paramref name="crspFeatures" />[i]
 (i is inside [0, <paramref name="crspFeatures" />.Count-1]); </item><item> If  <paramref name="crspFeatures" /> is empty; </item><item> If  <paramref name="pelRectRaw2Ds" /> is empty;</item><item> If  <paramref name="crspFeatures" />[i][j].PointsModel3D.Count != 
<paramref name="crspFeatures" />[i][j].PointsRaw2D.Count 
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item><item> If <paramref name="crspFeatures" />[i][j].Weights is not null, 
and  <paramref name="crspFeatures" />[i][j].Weights.Count != 
<paramref name="crspFeatures" />[i][j].PointsModel3D.Count
(i is inside [0, <paramref name="crspFeatures" />.Count-1], 
 and j is inside [0,<paramref name="crspFeatures" />[i].Count-1]);</item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <returns>
The 3D camera calibration result.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Execute(System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro.ICogImage}},Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DTransformRigid},System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants})">
            <summary>
Overload method of Computing the 3D camera calibration from the given images and calibration plate poses.
</summary>
            <param name="images">
Two-dimensional list of images from the cameras viewing the calibration plate. The images are indexed first
by the calibration plate pose, then by camera. <paramref name="images" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="featureExtractor">
The feature extractor operator to be used. A Cog3DCheckerboardFeatureExtractor should be used if using
Cognex checkerboard calibration plate. May not be null.
</param>
            <param name="world3DFromCalPlate3Ds">
The list of poses of the calibration plate (with respect to the calibration plate pose
defining the world coordinate system). <paramref name="world3DFromCalPlate3Ds" />[i] corresponds to 
the ith calibration plate pose.
Calibration plate pose does not need to be specified exactly for pose types of PoseElevated or 
PoseTilted. The requirement is as follows:
<list type="bullet"><item> The poses for pose types of PoseSpecified must be valid/appropriate; </item><item> The poses for pose types of PoseTilted will be ignored; </item><item> The poses for pose types of PoseElevated will be used 
to set the z height information of the calibration plate (only pose.Translation.Z will be used); </item><item> The pose for pose type of PoseDefineWorldCoord must be identity.  </item></list></param>
            <param name="poseTypes">
The list of calibration plate pose types. It should have the same length as <paramref name="world3DFromCalPlate3Ds" />. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item.
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g. 
<list type="bullet"><item> If  <paramref name="images" />, <paramref name="world3DFromCalPlate3Ds" />, and 
<paramref name="poseTypes" /> are not the same length; </item><item> If <paramref name="images" />[i] does not have the same length as
<paramref name="images" />[j] (i and j are inside [0, <paramref name="images" />.Count-1]); </item><item> If <paramref name="images" /> is empty or <paramref name="images" />[0] is empty. </item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <returns>
The 3D camera calibration result.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Execute(System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro.ICogImage}},Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor,Cognex.VisionPro3D.Cog3DScalarCollection,System.Collections.Generic.List`1{Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants})">
            <summary>
Compute the 3D camera calibration from the given images and z height information of the calibration plate poses.
</summary>
            <param name="images">
Two-dimensional list of images from the cameras viewing the calibration plate. The images are indexed first
by the calibration plate pose, then by camera. <paramref name="images" />[i][j] corresponds to the
ith calibration plate pose and the jth camera. May not be null.
</param>
            <param name="featureExtractor">
The feature extractor operator to be used. A Cog3DCheckerboardFeatureExtractor should be used if using
Cognex checkerboard calibration plate. May not be null.
</param>
            <param name="zHeightsPhys3D">
The z positions of the calibration plate for different calibration plate poses. 
<paramref name="zHeightsPhys3D" />[i] corresponds to the ith calibration plate pose.  The requirement is as follows:
<list type="bullet"><item> The z positions corresponding to pose types of PoseElevated must be valid/appropriate; </item><item> The z position corresponding to pose type of PoseDefineWorldCoord must be 0; </item><item> The z positions corresponding to pose types of PoseTilted will be ignored; </item><item> The z positions corresponding to pose types of PoseSpecified require that the calibration
plate is a pure translation in Z from the PoseDefineWorldCoord poseType.  
Thus, a Z value is all that is required. </item></list>
May not be null.
</param>
            <param name="poseTypes">
The list of calibration plate pose types. <paramref name="poseTypes" />[i] corresponds to the ith calibration 
plate pose type. It should have the same length as <paramref name="zHeightsPhys3D" />. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null or any input argument includes null item.
</exception>
            <exception cref="T:System.ArgumentException">
If input arguments do not match, e.g.
<list type="bullet"><item> If  <paramref name="images" />, <paramref name="zHeightsPhys3D" />, and 
<paramref name="poseTypes" /> are not the same length;</item><item> If <paramref name="images" />[i] does not have the same length as
<paramref name="images" />[j]  (i and j are inside [0, <paramref name="images" />.Count-1]); </item><item>  If <paramref name="images" /> is empty or <paramref name="images" />[0] is empty. </item></list></exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <returns>
The 3D camera calibration result.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrator.TelecentricPhys3DFromCamera3DZs">
            <summary>
Gets/sets the approximate cameras' positions
with respect to the calibration plate (for telecentric cameras).
</summary>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="telecentricPhys3DFromCamera3DZs" /> of setter is null.
</exception>
            <value>
The approximate estimates of the cameras' positions (Z heights in
Phys3D). May not be null.
</value>
            <remarks>
Since the direction of Z axis of Phys3D is out the back of the calibration plate, 
the Z values of cameras that can see the calibration plate when defining the world coordinate
should be negative.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrator.DistortionModel">
            <summary>
Gets/sets the distortion model parameter. 
</summary>
            <value>
The distortion model used for camera calibration.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibrator)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.#ctor">
            <summary>
Construct this default Cog3DCameraCalibrator. Note that the default distortion model is  
Cog3DCameraCalibrationDistortionModelConstants.e3ParamRadial.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrator.OnCameraCalibrationProgress(Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs)">
            <summary>
Method to support calibration progress event.
</summary>
            <param name="evntArgs">
The object containing camera calibration progress event arguments.
</param>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCameraCalibrator.CameraCalibrationProgress">
            <summary>
Camera calibration progress event.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrator">
            <summary>
This class is for executing 3D camera calibration for one or multiple cameras. 
</summary>
            <remarks>
Cognex 3D camera calibration tool requires:
<list type="bullet"><item> All of the images/features correspond to the same set of stationary cameras, and the optical paths associated with 
        each camera are unchanged. </item><item> All of the images/features correspond to the same calibration plate. </item></list>
Notes:
<list type="bullet"><item> The tool can tolerate it if the plate pose defining 
         world coordinates does not include features for some of the 
         cameras - as long as the camera poses can be induced from other
         images. </item><item> The tool may take a relatively long time to run, and supports
         progress event. </item><item> The tool can handle cameras of different camera intrinsics,
         such as different resolutions and cameras with different focal 
         length lenses. </item><item> The calibration computation minimizes the sum squared error in image 
         coordinates. Therefore, if different cameras have different pixel 
        resolutions, then the calibration may be dominated by the
         higher resolution cameras. Consequently, this tool is most
        useful when all cameras have similar pixel resolutions. </item><item> Cognex strongly recommends performing a camera calibration validation after
         you perform camera calibration.  This camera calibration validation 
         establishes a baseline that can be used in the future to determine
         if your cameras are still calibrated.  See the Cog3DCameraCalibrationValidator
         class for details. </item></list></remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants">
            <summary>
This class defines enumeration constants used for calibration plate pose types.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants.DefaultPoseType">
            <summary>
DefaultPoseType is equal to PoseDefineWorldCoord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants.PoseSpecified">
            <summary>
The calibration plate is accurately positioned at a known pose in 
the world coordinate system.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants.PoseTilted">
            <summary>
The calibration plate is arbitrarily positioned.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants.PoseElevated">
            <summary>
The calibration plate pose is precisely parallel to the pose that
defined the world coordinate system (and the offset between the
two calibration plate poses will be specified). Note that the
(x,y) translation and rotation in-the-plane are unconstrained.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCalibrationPlatePoseTypeConstants.PoseDefineWorldCoord">
            <summary>
The calibration plate pose defines the world coordinate system.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventHandler">
            <summary>
This is the delegate of camera calibration progress event handler.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.RequestCancel">
            <summary>
Request to cancel the operation.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.CancelRequested">
            <summary>
Gets whether it is requested to cancel the operation.
</summary>
            <value>
True if cancel is requested; False Otherwise
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.Message">
            <summary>
Gets the message string.
</summary>
            <value>
A string describing the progress.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.Progress">
            <summary>
Gets the progress (the fraction of completion).
</summary>
            <value>
The progress.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs.#ctor(System.Double,System.String)">
            <summary>
Construct this Cog3DCameraCalibrationProgressEventArgs using the 
specified progress and message.
</summary>
            <param name="progress">
The progress (the fraction of completion).
</param>
            <param name="message">
A string describing the progress.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationProgressEventArgs">
            <summary>
This class holds data provided by the camera calibration progress 
event. The camera calibration progress event fires periodically during camera calibration. 
A progress value of 1.0 means 100% complete.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Extracts features from a Cognex checkerboard calibration plate image.
The fiducial defining the calibration plate's
origin, must be within the field of view or an exception is thrown.
</summary>
            <param name="image">
The calibration image of the Cognex checkerboard calibration plate.
</param>
            <returns>
The extracted feature correspondences and their weights.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.Exception">
If the expected origin fiducial feature could not be found.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.IsThreadSafe">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeoutEnabled">
            <summary>
If True, use the
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeout" />
value when
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.LabelMode" />
is either
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants">DataMatrix</see>
or
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants">DataMatrixWithGridPitch</see>.
</summary>
            <value>
The default value is False.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeout">
            <summary>
The maximum time in milliseconds to search for a single
DataMatrix fiducial.
</summary>
            <remarks>
                <para>
This property is only used when
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeoutEnabled" />
is true and
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.LabelMode" />
is either
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants">UseDataMatrix</see>
or
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants">UseDataMatrixWithGridPitch</see>:
</para>
                <para>
                    <list type="bullet">
                        <item>
If
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.Algorithm" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants">Exhaustive</see>,
an exception will occur if it takes longer than
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeout" />
to find an acceptable DataMatrix fiducial.
</item>
                        <item>
If
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.Algorithm" />
is
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants">ExhaustiveMultiRegion</see>,
an exception will occur if it takes longer than
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeout" />
to find the first acceptable DataMatrix fiducial. Once the operator
finds the first acceptable DataMatrix fiducial without timeout, the
operator processes each isolated region of checkerboard features. For
each isolated region of checkerboard features, if it takes longer than
<see cref="!:P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.DataMatrixTimeout" />
to find a DataMatrix fiducial, the operator will not include any
features from that region but no exception will be thrown.
</item>
                    </list>
                </para>
            </remarks>
            <value>
The default value is 30000 (i.e. 30 seconds).
</value>
            <exception cref="T:System.ArgumentException">
If the supplied value is less than or equal to zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.Algorithm">
            <summary>
Gets/sets the algorithm to be used for feature finding.
</summary>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants">
Exhaustive</see>.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.LabelMode">
            <summary>
Gets/sets the style of fiducial mark to be found on the
Cognex calibration plate.
</summary>
            <value>
The default is
<see cref="!:T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants">
UseFiducial</see>.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.PhysGridPitch">
            <summary>
Gets/sets the physical grid pitch of the Cognex checkerboard
calibration plate. 
</summary>
            <value>
The physical grid pitch of the Cognex checkerboard calibration plate.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.#ctor(Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor.#ctor(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Construct this Cog3DCheckerboardFeatureExtractor using the specified
grid pitch.
</summary>
            <param name="initialGridPitch">
The initial grid pitch for the calibration plate.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractor">
            <summary>
This class defines a Cognex checkerboard calibration feature extractor.
This extractor extracts the calibration features from an image of a Cognex
checkerboard calibration plate.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants">
            <summary>
Enumeration that specifies the algorithm used in feature extraction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants.ExhaustiveMultiRegion">
            <summary>
Similar to Exhaustive, but it returns feature correspondences from
all contiguous regions of checkerboard features in which a
DataMatrix was successfully decoded.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants.Exhaustive">
            <summary>
An exhaustive algorithm used for registering and labeling the
features.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorAlgorithmConstants.Standard">
            <summary>
The standard algorithm used for registering and labeling the
features. This algorithm is fast and works well on clean
images but may fail on images better handled by Exhaustive mode.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants">
            <summary>
Enumeration that specifies what style of fiducial mark
is present on the calibration plate.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants.UseDataMatrixWithGridPitch">
            <summary>
The calibration plate has DataMatrix fiducial marks
that incorporate specification of the grid pitch.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants.UseDataMatrix">
            <summary>
The calibration plate has DataMatrix fiducial marks.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants.UseFiducial">
            <summary>
The calibration plate has a Cognex standard fiducial mark: two
rectangles of different lengths arranged in an 'L' shape.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCheckerboardFeatureExtractorLabelModeConstants.None">
            <summary>
The origin of the coordinate system is set at the vertex closest to
the center of the image. The X axis is set to be the direction
of a row or column of vertices along which X components of image
coordinates of vertices increase faster.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.OnFeaturesExtracted(System.Int32,System.Int32,Cognex.VisionPro3D.Cog3DCrspFeaturesCollection)">
            <summary>
Method to support feature extraction progress event. 
</summary>
            <returns>
False if user requires to cancel the operation, and true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.Execute(System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro.ICogImage}})">
            <summary>
Extract features from a set of calibration images, acquired
from one or multiple cameras over different calibration plate poses.
The images are organized in a List, indexed by calibration plate pose.
Each item in the list is a List of images, indexed by camera.
It is expected that the fiducial defining the calibration plate's
origin is within the field of view.
The feature extraction is done by calling the Execute( ICogImage ) 
method for each calibration image.
The Execute( ICogImage ) method will be invoked on multiple threads
if the IsThreadSafe property is true.
The FeaturesExtracted event is fired after the featues are extracted from each image.
</summary>
            <param name="images">
A doubly indexed list of the calibration images, indexed first by calibration plate pose,
then by camera.
</param>
            <returns>
The extracted feature correspondences and their weights.
The feature correspondences are arranged the same way as the calibration images.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
If the operation is cancelled by user via the event handler.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If feature extraction for one image failed.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.IsThreadSafe">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.Execute(Cognex.VisionPro.ICogImage)">
            <inheritdoc />
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.FeaturesExtracted">
            <summary>
Feature extraction progress event.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCalibrationFeatureExtractorBase">
            <summary>
This class is the abstract base class for 3D calibration feature extractors. 
<para>
Clients that are using a Cognex checkerboard calibration plate can use the Cog3DCheckerboardFeatureExtractor class
to perform calibration feature extraction.  These clients do not need to be concerned with this base class.
</para><para>
Clients that are not using a Cognex checkerboard calibration plate must implement their own calibration feature 
extractor class capable of extracting calibration features from images of the special calibration object.
One way to implement such a custom calibration feature extractor class, is to derive the custom calibration 
feature extraction class from this base class.  
The derived calibration feature extraction class can then be passed into the Cog3DCameraCalibrator.Execute() overloads that
require an ICog3DCalibrationFeatureExtractor.
</para><para>
This abstract base class provides an implementation of 
the ICog3DCalibrationFeatureExtractor.Execute(List&lt; List&lt; ICogImage &gt; &gt;) method.
This implementation calls derived class' ICog3DCalibrationFeatureExtractor.Execute( ICogImage ) and 
will make the calls on multiple threads if the derived class' ICog3DCalibrationFeatureExtractor.IsThreadSave property is true.
The provided implementation supports feature extraction progress events as well - the FeaturesExtracted event is fired 
as soon as feature extraction is completed on each calibration image. 
</para><para>
Derived classes must: implement an override of the
ICog3DCalibrationFeatureExtractor.Execute( ICogImage ) method as well as implement
the IsThreadSafe property which specifies whether the override of Execute() is thread-safe or not.
</para></summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventHandler">
            <summary>
This is the delegate of features Extracted progress event handler.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.RequestCancel">
            <summary>
Request to cancel the operation.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.CancelRequested">
            <summary>
Gets whether it is requested to cancel the operation.
</summary>
            <value>
True if cancel is requested; False Otherwise
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.Features">
            <summary>
Gets the features that have been extracted.
</summary>
            <value>
The features that have been extracted.
</value>
            <remarks>
The features are NOT deep copy from the feature extraction, and modifying
them may result in unexpected behavior.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.CameraIndex">
            <summary>
Gets the camera index of the image whose calibration features have been extracted.
</summary>
            <value>
The camera index of the image whose calibration features have been extracted.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.PoseIndex">
            <summary>
Gets the calibration plate pose index of the image whose calibration features have been extracted.
</summary>
            <value>
The calibration plate pose index of the image whose calibration features have been extracted.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs.#ctor(System.Int32,System.Int32,Cognex.VisionPro3D.Cog3DCrspFeaturesCollection)">
            <summary>
Construct this Cog3DFeaturesExtractedEventArgs using the providing
information for an image whose calibration features have been extracted.
</summary>
            <param name="platePoseIndex">
The calibration plate pose index for the processed image.
</param>
            <param name="camIndex">
The camera index for the processed image.
</param>
            <param name="features">
The collection of feature correspondences for the processed image. 
Property Features will return <paramref name="features" /></param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DFeaturesExtractedEventArgs">
            <summary>
This class holds data provided by Cog3DCalibrationFeatureExtractorBase.FeaturesExtracted event.
FeaturesExtracted event fires each time processing of an image has finished.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor.IsThreadSafe">
            <summary>
Gets whether the implementation of the Execute(ICogImage) method is thread-safe.
thread-safety is required to allow multithreading within implementations 
of the 
Execute(List&lt; List&lt; ICogImage &gt; &gt;) method.
</summary>
            <value>
Whether the implementation of the Execute(ICogImage) method is thread-safe.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor.Execute(System.Collections.Generic.List`1{System.Collections.Generic.List`1{Cognex.VisionPro.ICogImage}})">
            <summary>
Extract features from a set of calibration images, acquired
from one or multiple cameras over different calibration plate poses.
The images are organized in a List, indexed by calibration plate pose.
Each item in the list is a List of images, indexed by camera.
It is expected that the fiducial defining the calibration plate's
origin is within the field of view.
The feature extraction is done by calling the Execute( ICogImage ) 
method for each calibration image.
The Execute( ICogImage ) method will be invoked on multiple threads
if the IsThreadSafe property is true.
</summary>
            <param name="images">
A doubly indexed list of the calibration images, indexed first by calibration plate pose,
then by camera.
</param>
            <returns>
The extracted feature correspondences and their weights.
The feature correspondences are arranged the same way as the calibration images.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor.Execute(Cognex.VisionPro.ICogImage)">
            <summary>
Extract features from a calibration image.
</summary>
            <param name="image">
The calibration image to extract features from.
</param>
            <returns>
The extracted feature correspondences and their weights.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DCalibrationFeatureExtractor">
            <summary>
This is the interface class for 3D calibration feature extractors.
This interface class is used in several Cog3DCameraCalibrator.Execute() overloads.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::GetObjectData" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="!:ICog3DBase::SerializationConstructor" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.Weights">
            <summary>
Gets/sets the collection of weights.
</summary>
            <value>
A collection of weights.
</value>
            <remarks>
Null value means that all the points have equal weight of 1.0.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.PointsRaw2D">
            <summary>
Gets/sets the collection of 2D feature points.
</summary>
            <value>
A collection of 2D feature points.
</value>
            <exception cref="T:System.ArgumentNullException">
If the input argument of the setter is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.PointsModel3D">
            <summary>
Gets/sets the collection of 3D model points.
</summary>
            <value>
A collection of 3D model points.
</value>
            <exception cref="T:System.ArgumentNullException">
If the input argument of the setter is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.Finalize">
            <inheritdoc cref="!:ICog3DBase::FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.Dispose">
            <inheritdoc cref="!:ICog3DBase::DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.#ctor(Cognex.VisionPro3D.Cog3DCrspFeaturesCollection)">
            <inheritdoc cref="!:ICog3DBase::DeepCopyConstructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.#ctor(Cognex.VisionPro3D.Cog3DVect3Collection,Cognex.VisionPro3D.Cog3DVect2Collection,Cognex.VisionPro3D.Cog3DScalarCollection)">
            <summary>
Construct this Cog3DCrspFeaturesCollection with the supplied components.
</summary>
            <param name="pointsModel3D">
The collection of 3D model points. May not be null.
</param>
            <param name="pointsRaw2D">
The collection of 2D feature points. May not be null.
</param>
            <param name="weights">
The collection of weights. Note that if <paramref name="weights" /> is null, 
it means that all the points have equal weight of 1.0.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="pointsModel3D" /> or <paramref name="pointsRaw2D" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection.#ctor">
            <summary>
Construct this default (empty) Cog3DCrspFeaturesCollection.
The PointsModel3D collection is empty.
The PointsRaw2D collection is empty.
The Weights collection is null.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCrspFeaturesCollection">
            <summary>
This class holds 3 collections: a collection of 3D model points, 
a collection of 2D image feature points, and a collection of weights.
The elements of the 3 collections are corresponded.  This means the
jth element of the 3D model point collection, corresponds to the 
jth element of the 2D image feature point collection, which in turn corresponds to the 
jth element of the weights collection.  
<para>
Note that many functions that accept a Cog3DCrspFeaturesCollection as an argument,
allow the weights collection to be null.
</para></summary>
        </member>
    </members>
</doc>