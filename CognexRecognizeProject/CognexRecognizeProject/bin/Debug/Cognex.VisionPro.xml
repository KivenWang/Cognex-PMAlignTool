<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cognex.VisionPro</name>
    </assembly>
    <members>
        <member name="T:Cognex.VisionPro.CogRecordUsageConstants">
            <summary>
            Constants that can be assigned to the RecordUsage property of a CogRecord
            to specify how it is used.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Tool">
            <summary>
            Top-level record of a vision tool.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Configuration">
            <summary>
            Configuration data, such as a region of interest.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Pattern">
            <summary>
            A stored pattern, mask, template, etc.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Input">
            <summary>
            An input, such as an input image.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Diagnostic">
            <summary>
            Information generated for diagnostic purposes.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Result">
            <summary>
            A result or output, such as an output image or result graphic.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.Temporary">
            <summary>
            A temporary record, typically added by an edit control.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.QuickBuild">
            <summary>
            A QuickBuild record, all records created by QuickBuild have 
            this value.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.ToolDefined">
            <summary>
            Tool-defined record usage constants begin here, and end at 0x4FFFFFFF.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRecordUsageConstants.UserDefined">
            <summary>
            User-defined record usage constants begin here, and end at 0x7FFFFFFF.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ICogRecords">
            <summary>
            Interface that describes a list of ICogRecord references.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.Add(Cognex.VisionPro.ICogRecord)">
            <summary>
            Adds a record to the end of the list.
            </summary>
            <param name="value">The record to be added.</param>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.Contains(Cognex.VisionPro.ICogRecord)">
            <summary>
            Searches the list for a given record.
            </summary>
            <param name="value">The record for which to search.</param>
            <returns>True if the list contains the given record, false otherwise.</returns>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.ContainsKey(System.String)">
            <summary>
            Searches the list for a given key.
            </summary>
            <param name="key">The key for which to search.</param>
            <returns>True if the list contains the given record, false otherwise.</returns>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.IndexOf(Cognex.VisionPro.ICogRecord)">
            <summary>
            Searches the list for a given record.
            </summary>
            <param name="value">The record for which to search.</param>
            <returns>The index of the record, or -1 if it is not in the list.</returns>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.IndexOfKey(System.String)">
            <summary>
            Searches the list for a given key.
            </summary>
            <param name="key">The key for which to search.</param>
            <returns>The index of the record, or -1 if it is not in the list.</returns>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.Insert(System.Int32,Cognex.VisionPro.ICogRecord)">
            <summary>
            Inserts a record at a specified index.
            </summary>
            <param name="index">The index at which to insert the record.</param>
            <param name="value">The record to insert.</param>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecords.Remove(System.String)">
            <summary>
            Removes a record with a specified key.
            </summary>
            <param name="key">The key of the record to remove.</param>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecords.Item(System.Int32)">
            <summary>
            Gets or sets the record at a specified index.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecords.Item(System.String)">
            <summary>
            Gets or sets the record with a specified RecordKey.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ICogRecord">
            <summary>
            Interface that describes a record provided by a tool.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.RecordKey">
            <summary>
            Gets or sets the key of the record, which is used to identify it within a collection.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.ContentType">
            <summary>
            Gets or sets the type of the Content property.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.RecordUsage">
            <summary>
            Gets or sets a constant indicating the usage of the record.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.ContentMutable">
            <summary>
            Gets or sets a value that indicates whether the contents of the record should
            be considered mutable.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.Content">
            <summary>
            Gets or sets the content of the record.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.Annotation">
            <summary>
            Gets or sets a string that is a displayable annotation for the record.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRecord.SubRecords">
            <summary>
            Gets a list of records contained within this record.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ICogRecordConstructor">
            <summary>
            Interface implemented by an object that constructs the Content, Annotation
            and SubRecords of a record when they are requested.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecordConstructor.ConstructContent(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
            Constructs the record's Content.
            </summary>
            <param name="record">The record being constructed.</param>
            <param name="flags">An integer that was stored when the record was created.</param>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecordConstructor.ConstructAnnotation(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
            Constructs the record's Annotation.
            </summary>
            <param name="record">The record being constructed.</param>
            <param name="flags">An integer that was stored when the record was created.</param>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecordConstructor.ConstructSubRecords(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
            Constructs the record's SubRecords.
            </summary>
            <param name="record">The record being constructed.</param>
            <param name="flags">An integer that was stored when the record was created.</param>
        </member>
        <member name="M:Cognex.VisionPro.ICogRecordConstructor.Copy">
            <summary>
            Returns a copy of the constructor object.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogRegionModeConstants">
            <summary>
            Enumeration of Region modes. Region mode specifies how a region is applied to an image.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogRegionModeConstants.PixelAlignedBoundingBoxAdjustMask">
            <summary>
            Only the pixels within the supplied region are used. This is implemented by computing a mask which extends the region to its pixel aligned bounding box.
            </summary>
            <remarks>
    	<PARA>If you specify an input region other than a simple, pixel-aligned rectangle, this region mode specifies that all the pixels within a pixel-aligned bounding box that encloses the region will be supplied to the vision tool. Those pixels that lie inside the bounding box but outside the region that you supply are set as "don't care" pixels in the mask image used by the vision tool (if it supports one). The following figure shows the effect of using this mode if you specify an ellipse as an input region.</PARA>
	<PARA>
		<PICTURE SRC="adjustmask.gif" apiSRC="cogRegionModePixelAlignedBoundingBoxAdjustMask_adjustmask.gif"/>
	</PARA>

    </remarks><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.CogRegionModeConstants.PixelAlignedBoundingBox">
            <summary>
            The region used will be the pixel aligned bounding box enclosing the supplied region. This mode often provides faster performance than the PixelAlignedBoundingBoxAdjustMask mode.
            </summary>
            <remarks>
    	<PARA>If you specify an input region other than a simple, pixel-aligned rectangle, this region mode specifies that all the pixels within a pixel-aligned bounding box that encloses the region will be supplied to the vision tool. The following figure shows the effect of using this mode if you specify an ellipse as an input region.</PARA>
	<PARA>
		<PICTURE SRC="boundingbox.gif" apiSRC="cogRegionModePixelAlignedBoundingBox_boundingbox.gif"/>
	</PARA>

    </remarks><example/><seealso/>
        </member>
        <member name="F:Cognex.VisionPro.CogRegionModeConstants.AffineTransform">
            <summary>
            A new image will be created by performing an affine transformation on the region.  The region must be either a simple rectangle or an affine rectangle.
            </summary>
            <remarks>
    <PARA>
If you specify an <see cref="T:Cognex.VisionPro.CogRectangleAffine"/> as your input region, 
you can specify this region mode to have VisionPro affine-transform the pixels in 
the region into a new, pixel-aligned rectangular image.</PARA>
<PARA>
This mode is appropriate when your vision tool requires a pixel-aligned rectangular input region, but the data you wish to supply lies at an angle in the input image.
</PARA>
	<PARA>
		<PICTURE SRC="affinetransform.jpg" apiSRC="cogRegionModeAffineTransform_affinetransform.jpg"/>
	</PARA>

    </remarks><example/><seealso/>
        </member>
        <member name="T:Cognex.VisionPro.CogToolResultConstants">
            <summary>
            Enumeration of constants that indicate the overall result of running a tool.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogToolResultConstants.Accept">
            <summary>
            Indicates that the tool ran successfully and did not generate a warning or reject condition.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogToolResultConstants.Warning">
            <summary>
            Indicates that the tool ran successfully but generated a warning condition.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogToolResultConstants.Reject">
            <summary>
            Indicates that the tool ran successfully but generated a reject condition.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogToolResultConstants.Error">
            <summary>
            Indicates that the tool did not run successfully.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ICogRunStatus">
            <summary>
            This interface is returned by the RunStatus property of the
            ICogTool interface and provides general information about the
            last call to the tool's Run method. Note that serious errors
            that occur within the tool's Run method may only be detected by
            examining the RunStatus after calling Run. It is the user's
            responsibility to examine the tool's RunStatus after calling Run.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRunStatus.Result">
            <summary>
            Gets a result code that indicates the overall result of running the tool.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRunStatus.Message">
            <summary>
            Returns null if the result was Accept, and otherwise returns a string that
            provides additional information about the Warning, Reject or Error condition.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRunStatus.ProcessingTime">
            <summary>
            Returns the time in miliseconds taken to perform the tool's processing
            when its Run function was called. This excludes the time taken by event
            handlers connected to the tool.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRunStatus.TotalTime">
            <summary>
            Returns the total time in milliseconds taken by the tool's Run function.
            This includes the time taken by event handlers connected to the tool.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogRunStatus.Exception">
            <summary>
            Returns the exception that happened when the tool's Run method was
            called, or null if no exception happened.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ICogTool">
            <summary>
            This interface is implemented by all VisionPro tools.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ICogChangedEvent">
            <summary>
            This interface contains the Changed event and methods for suspending and resuming it.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogChangedEvent.SuspendChangedEvent">
            <summary>
            Temporarily suspends the raising of the Changed event. May be called
            more than once, and a corresponding call to ResumeAndRaiseChangedEvent
            must be made for each call to SuspendChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogChangedEvent.ResumeAndRaiseChangedEvent">
            <summary>
            Re-enables raising of the Changed event after SuspendChangedEvent
            has been called, and raises the Changed event if the
            ChangedEventSuspended count is reduced to zero and any changes were
            made while events were suspended. Must be called once for each call to
            SuspendChangedEvent.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the ChangedEventSuspended count is currently zero.
            </exception>
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires if the ChangedEventSuspended count is decremented to zero and a
            Changed event had been suppressed one or more times while changed
            events were suspended.
            </event>
        </member>
        <member name="E:Cognex.VisionPro.ICogChangedEvent.Changed">
            <summary>
            This event is raised when one or more parts of the object's state may
            have changed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogChangedEvent.ChangedEventSuspended">
            <summary>
            Indicates if the raising of the Changed event has been suspended.
            </summary>
            <value>
            If nonzero, indicates that the raising of the Changed event has been
            suspended. This value is incremented when SuspendChangedEvent is called
            and decremented when ResumeAndRaiseChangedEvent is called.
            </value>
        </member>
        <member name="P:Cognex.VisionPro.ICogChangedEvent.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as shown in the following C# code snippet: 
            if (changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">
            <summary>
            Creates a new set of records that represents the tool's current state.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord">
            <summary>
            Creates a new set of records that represents the tool's last-run state.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ICogTool.Run">
            <summary>
            Runs the tool. This method is guaranteed to not throw an
            exception. Any exception generated in the course of running
            the tool will be caught and packaged in the tool's
            RunStatus.Exception. Should this occur, the tool's RunStatus.Result
            will be set to Error and its RunStatus.Message will reference the
            message that accompanied the exception. It is the user's
            responsibility to examine the tool's RunStatus after calling Run.
            </summary>
            <example>
<code lang="Visual Basic">
Imports Cognex.VisionPro

Private Function RunTool() As Boolean
  mTool.Run() ' a previously created and configured tool ...

  Dim aRunStatus As Cognex.VisionPro.ICogRunStatus = mTool.RunStatus

  If (aRunStatus.Result = CogToolResultConstants.Error) Then
    If (Not aRunStatus.Exception Is Nothing) Then
      MessageBox.Show("Exception: " + _
        aRunStatus.Exception.ToString())
    End If

    If (Not aRunStatus.Message Is Nothing) Then
      MessageBox.Show("Message: " + _
        aRunStatus.Message)
    End If

    RunTool = False
  Else
    RunTool = True
  End If

End Function
</code>
<code lang="C#">
using Cognex.VisionPro;

private Boolean RunTool()
  {
  mTool.Run(); // a previously created and configured tool

  ICogRunStatus aRunStatus = mTool.RunStatus;

  if (aRunStatus.Result == CogToolResultConstants.Error)
    {
    if (aRunStatus.Exception != null)
      MessageBox.Show("Exception: " +
        aRunStatus.Exception.ToString());

    if (aRunStatus.Message != null)
      MessageBox.Show("Message: " +
        aRunStatus.Message);

    return false;
    }
  else
    return true;
  }
</code>
</example>
        </member>
        <member name="E:Cognex.VisionPro.ICogTool.Running">
            <summary>
            Event that is raised at the start of the tool's Run method.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogTool.Ran">
            <summary>
            Event that is raised at the end of the tool's Run method.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogTool.UserData">
            <summary>
            Gets a CogDictionary object that can be used to store application-specific information.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogTool.Name">
            <summary>
            Gets or sets the name of the tool.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogTool.RunStatus">
            <summary>
            Gets general information about the last call to the tool's
            Run function. Note that serious errors that occur within
            the tool's Run method may only be detected by examining the
            RunStatus after calling Run. It is the user's responsibility
            to examine the tool's RunStatus after calling Run.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.ICogTool.DataBindings">
            <summary>
            Gets the data bindings for the tool. 
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogRecord">
            <summary>
            Class that holds information about the state of a tool.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase">
            <summary>
            Base class for a Component that implements the 
            <see cref="T:Cognex.VisionPro.ICogChangedEvent"/>
            interface. Objects that derive from this class will raise the Changed
            event whenever part of the object's state has changed.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableObjectBase">
            <summary>
            Base class for all CogObjectBase subclasses that support 
            serialization.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogObjectBase">
            <summary>
            This is the base class for most non-Component VisionPro objects.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetConverter">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetEvents(System.Attribute[])">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetEvents">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetComponentName">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetAttributes">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetProperties(System.Attribute[])">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetProperties">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetEditor(System.Type)">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetDefaultProperty">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetDefaultEvent">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogObjectBase.GetClassName">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableObjectBase.#ctor">
            <summary>
            Creates a new instance of the CogSerializableObjectBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableObjectBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the CogSerializableObjectBase class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableObjectBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the GetObjectData method of the ISerializable interface.
            </summary>
            <param name="info">SerializationInfo to which serialization data must be added.</param>
            <param name="context">StreamingContext that indicates the intent of the current serialization operation.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableObjectBase.GetArchivedAssemblyVersion(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Gets the version of the assembly containing this object's type 
            that created the given archive.  It may be useful for objects to 
            detect old archived versions of themselves, and manually 
            depersist the old archives in a specialized way.  Note that 
            the returned Version object can be compared to fixed versions 
            with its operator overloads for less than, equal to, etc.
            </summary>
            <param name="info">The SerializationInfo containing the archived data.</param>
            <returns>Version of the current type's assembly that created the given archive.</returns>
            <remarks>
            Caution: Do not use this property during deserialization because the value of this property is undefined.
            </remarks>       
        </member>
        <member name="T:Cognex.VisionPro.Implementation.ICogHasChanged">
            <summary>
            Interface for the HasChanged property of a mutable, serializable object
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.ICogHasChanged.HasChanged">
            <summary>
            Indicates if the object has changed since this property was last set
            to false.  This property is set to true when a changed event fires,
            and set to false on construction and when the object is persisted.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.SfNextSf">
            <summary>
            The next state flag value to be used by a derived class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.SuspendChangedEvent">
            <summary>
            Temporarily suspends the raising of the Changed event. May be called
            more than once, and a corresponding call to ResumeAndRaiseChangedEvent
            must be made for each call to SuspendChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.ResumeAndRaiseChangedEvent">
            <summary>
            Re-enables raising of the Changed event after SuspendChangedEvent
            has been called, and raises the Changed event if the
            ChangedEventSuspended count is reduced to zero and any changes were
            made while events were suspended. Must be called once for each call to
            SuspendChangedEvent.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the
            ChangedEventSuspended count is currently zero.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.OnChanged(System.Int64)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.
            </summary>
            <param name="stateFlags">The set of state flags that correspond to the
            parts of the object that may have changed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.OnChanged(Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
            This method may be called internally whenever a derived object's state 
            may have changed and the derived object expresses this change via a 
            derived CogChangedEventArgs class. 
            </summary>
            <param name="eventArgs">EventArgs to be fired with the change event.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CogSerializableChangedEventBase class with serialized 
            data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.#ctor">
            <summary>
            Initializes a new instance of the CogSerializableChangedEventBase class.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.Changed">
            <summary>
            This event is raised when one or more parts of the object's state may
            have changed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.ChangedEventSuspended">
            <summary>
            If nonzero, indicates that the raising of the Changed event has been
            suspended. This value is incremented when SuspendChangedEvent is called
            and decremented when ResumeAndRaiseChangedEvent is called.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableChangedEventBase.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as shown in the following C# code snippet: 
            if (changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfRecordKey">
            <summary>
            State flag for the RecordKey property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfContentType">
            <summary>
            State flag for the ContentType property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfRecordUsage">
            <summary>
            State flag for the RecordUsage property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfContentMutable">
            <summary>
            State flag for the ContentMutable property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfContent">
            <summary>
            State flag for the Content property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfAnnotation">
            <summary>
            State flag for the Annotation property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRecord.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.#ctor">
            <summary>
            Constructs a new instance of the CogRecord class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.#ctor(Cognex.VisionPro.Implementation.CogRecord)">
            <summary>
            Constructs a new instance of the CogRecord class.
            </summary>
            <param name="other">A CogRecord to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.#ctor(System.String,System.Type,Cognex.VisionPro.CogRecordUsageConstants,System.Boolean,System.Object,System.String)">
            <summary>
            Constructs a new instance of the CogRecord class.
            </summary>
            <param name="recordKey">Key used to identify the CogRecord.</param>
            <param name="contentType">Format of record content.</param>
            <param name="recordUsage">How the record is used.</param>
            <param name="contentMutable">If true, record content can be modified.</param>
            <param name="content">Record data.</param>
            <param name="annotation">Description of the record.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.#ctor(System.String,System.Type,Cognex.VisionPro.CogRecordUsageConstants,System.Boolean,System.Object,System.String,Cognex.VisionPro.ICogRecordConstructor,System.Int32)">
            <summary>
            Constructs a new instance of the CogRecord class.
            </summary>
            <param name="recordKey">Key used to identify the CogRecord.</param>
            <param name="contentType">Format of record content.</param>
            <param name="recordUsage">How the record is used.</param>
            <param name="contentMutable">If true, record content can be modified.</param>
            <param name="content">Record data.</param>
            <param name="annotation">Description of the record.</param>
            <param name="constructor">Interface to method for constructing content (including subrecords' content) and annotation.</param>
            <param name="flags">Passed to supplied ICogRecordConstructor methods when called.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.Clone">
            <summary>
            Creates a deep copy of the record.
            </summary>
            <returns>A deep copy of the cloned record.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the CogRecord class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.RecordKey">
            <summary>
            Gets or sets the key used to identify the record.
            </summary>
            <value>The string key used to identify the record.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.ContentType">
            <summary>
            Gets or sets the format of record content.
            </summary>
            <value>The type of record content.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.RecordUsage">
            <summary>
            Gets or sets an indicator of the record's usage.
            </summary>
            <value>An enumeration describing the context in which the record is used.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.ContentMutable">
            <summary>
            Gets or sets the flag indicating whether or not the record's content can be modified.
            </summary>
            <value>A boolean which indicates whether or not the record's content can be modified.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.Content">
            <summary>
            Gets or sets the record's content.
            </summary>
            <value>The record's content.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.Annotation">
            <summary>
            Description of the record.
            </summary>
            <value>A string describing or annotating the record.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.SubRecords">
            <summary>
            Gets the sub-records of this record.
            </summary>
            <value>The collection of sub-records contained within this record.</value>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogRecord.DisplayMethod">
            <summary>
            When used as the Content of a record, this class specifies that when the
            record is displayed it should call a method or set a property of the CogDisplay control.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecord.DisplayMethod.#ctor(System.String,System.Object[],System.Reflection.BindingFlags)">
            <summary>
            Constructs a new instance of the DisplayMethod class.
            </summary>
            <param name="name">The name of the method or property of the CogDisplay control.</param>
            <param name="arguments">The arguments to the method or the property value.</param>
            <param name="bindingType">The invocation type, either BindingFlags.SetProperty or BindingFlags.InvokeMethod.</param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.DisplayMethod.Name">
            <summary>
            Gets the name of the method or property to be called.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.DisplayMethod.Arguments">
            <summary>
            Gets the arguments to the method, or null if no arguments are needed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRecord.DisplayMethod.BindingType">
            <summary>
            Gets the type of binding, either BindingFlags.SetProperty or BindingFlags.InvokeMethod.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogRecords">
            <summary>
            Class that holds a collection of CogRecord objects.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableCollectionBase">
            <summary>
            Base class for a generic, serializable ordered collection of values
            that raises Cognex style change events.
            </summary>  
        </member>
        <member name="T:Cognex.VisionPro.ICogCollectionEvents">
            <summary>
            An interface that comprises the events that are common to most
            editable VisionPro collections.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.Clearing">
            <summary>
            Raised before the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.Cleared">
            <summary>
            Raised after the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.ReplacingItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.ReplacedItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.MovingItem">
            <summary>
            Raised before an item is moved to a new index.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogCollectionEvents.MovedItem">
            <summary>
            Raised after an item is moved to a new index.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.SfItem">
            <summary>
            State flag for the Item (indexer) property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.SfCount">
            <summary>
            State flag for the Count property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.#ctor">
            <summary>
            Constructs a new instance of the CogCollectionBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.#ctor(Cognex.VisionPro.Implementation.CogSerializableCollectionBase)">
            <summary>
            Constructs a new instance of the CogCollectionBase class initially
            containing items cloned from the supplied instance.
            </summary>
            <param name="other">
            Collection whose items are cloned and added to the new collection.
            If an item does not support the ICloned interface, the item itself 
            will be added.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special serialization constructor.
            </summary>
            <param name="info">
            Data used to deserialize the collection.
            </param>
            Context to deserialize the serialization info.
            <param name="context"></param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.Clone">
            <summary>
            Creates a deep copy of the object. Must be overridden in derived classes.
            </summary>
            <returns>A deep copy of the cloned instance.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnClearing">
            <summary>
            Raises the Clearing event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnCleared">
            <summary>
            Raises the Cleared event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnInsertingItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertingItem event.
            </summary>
            <param name="index">Index at which the item will be inserted.</param>
            <param name="value">Value of item being inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnInsertedItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertedItem event.
            </summary>
            <param name="index">Index at which the item has been inserted.</param>
            <param name="value">Value of the item inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnRemovingItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovingItem event.
            </summary>
            <param name="index">Index of item being removed.</param>
            <param name="value">Value of item being removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnRemovedItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovedItem event.
            </summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacingItem event.
            </summary>
            <param name="index">Index of item being replaced.</param>
            <param name="oldValue">Value of item being replaced.</param>
            <param name="newValue">Value of item replacing oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnReplacedItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacedItem event.
            </summary>
            <param name="index">Index of item replaced.</param>
            <param name="oldValue">Value of item replaced.</param>
            <param name="newValue">Value of item that replaced oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnMovingItem(System.Int32,System.Int32)">
            <summary>
            Raises the MovingItem event.
            </summary>
            <param name="fromIndex">Index of item being moved.</param>
            <param name="toIndex">Destination index of item being moved.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.OnMovedItem(System.Int32,System.Int32)">
            <summary>
            Raises the MovedItem event.
            </summary>
            <param name="fromIndex">Source index of item moved.</param>
            <param name="toIndex">New index of item moved.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from one position to another.
            </summary>
            <param name="fromIndex">The item's original index.</param>
            <param name="toIndex">The item's new index.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">The array into which to copy.</param>
            <param name="index">The starting index at which to copy.</param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.InnerList">
            <summary>
            Gets the internal ArrayList containing the list of elements.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.List">
            <summary>
            Gets an the IList interface of this collection.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.Clearing">
            <summary>
            Raised before the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.Cleared">
            <summary>
            Raised after the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.ReplacingItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.ReplacedItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.MovingItem">
            <summary>
            Raised before an item is moved to a new index.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.MovedItem">
            <summary>
            Raised after an item is moved to a new index.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecords.#ctor">
            <summary>
            Constructs a new instance of the CogRecords class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecords.#ctor(Cognex.VisionPro.Implementation.CogRecords)">
            <summary>
            Constructs a new instance of the CogRecords class.
            </summary>
            <param name="other">A CogRecords to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecords.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CogRecords class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRecords.Clone">
            <summary>
            Creates a deep copy of the records collection.
            </summary>
            <returns>A deep copy of the cloned records collection.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogRunStatus">
            <summary>
            This class provides an implementation of the ICogRunStatus interface.
            A tool's RunStatus property is of type CogRunStatus. This property
            provides general information about the last call to the tool's Run
            method. Note that serious errors that occur within the tool's Run
            method may only be detected by examining the RunStatus after
            calling Run. It is the user's responsibility to examine the
            tool's RunStatus after calling Run.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRunStatus.SfTotalTime">
            <summary>
            State flag for the TotalTime property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogRunStatus.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRunStatus.#ctor">
            <summary>
            Creates a new instance of the CogRunStatus class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRunStatus.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the CogRunStatus class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRunStatus.#ctor(Cognex.VisionPro.CogToolResultConstants,System.String,System.Double,System.Double,System.Exception)">
            <summary>
            Creates a new instance of the CogRunStatus class.
            </summary>
            <param name="result">Run status tool result.</param>
            <param name="message">Message describing or explaining run status.</param>
            <param name="processingTime">Time to execute VisionPro tools.  Excludes time used by clients to process Changed events.</param>
            <param name="totalTime">Time to execute VisionPro tools and execute Changed events.  This time includes such overhead as updating tool edit controls.</param>
            <param name="exception">Exception, if any, thrown while running tool.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRunStatus.#ctor(Cognex.VisionPro.ICogRunStatus)">
            <summary>
            Creates a new instance of the CogRunStatus class.
            </summary>
            <remarks>
            Note that <see cref="P:Cognex.VisionPro.Implementation.CogRunStatus.Exception"/>
            is shallow copied. Both the original RunStatus, and the copy
            share the same reference to the original Exception.
            </remarks>
            <param name="other">An ICogRunStatus to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRunStatus.Equals(System.Object)">
            <summary>
            Determines whether the specified CogRunStatus is equal to the current
            CogRunStatus.
            </summary>
            <param name="obj">The CogRunStatus to compare with the current CogRunStatus.</param>
            <returns>True if the specified CogRunStatus is equal to the current CogRunStatus; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogRunStatus.GetHashCode">
            <summary>
            Serves as a hash function for this type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current CogRunStatus.</returns>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRunStatus.Result">
            <summary>
            Gets a result code that indicates the overall result of running the tool.
            </summary>
            <value>An enumeration reporting the overall result of running the tool.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRunStatus.Message">
            <summary>
            Gets a message describing the result of running the tool.
            </summary>
            <value>Returns null if the result was Accept, and otherwise returns a string that provides additional information about the Warning, Reject or Error condition.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRunStatus.ProcessingTime">
            <summary>
            Gets the time taken to perform the tool processing portion of the Run function.
            </summary>
            <value>Returns the time in milliseconds taken to perform the tool's processing when its Run function was called. This excludes the time taken by event handlers connected to the tool.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRunStatus.TotalTime">
            <summary>
            Gets the time taken to execute the entire Run function.
            </summary>
            <value>Returns the total time in milliseconds taken by the tool's Run function.  This includes the time taken by event handlers connected to the tool.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogRunStatus.Exception">
            <summary>
            Gets the exception thrown (and caught) while executing the tool's Run method.
            </summary>
            <value>Returns the exception that happened when the tool's Run method was called, or null if no exception happened.</value>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogToolBase">
            <summary>
            A base class that implements the <see cref="T:Cognex.VisionPro.ICogTool"/>
            interface. Tools may implement the ICogTool interface in other ways and
            are not required to derive from this class.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase">
            <summary>
            Base class for a Component that implements the 
            <see cref="T:Cognex.VisionPro.ICogChangedEvent"/>
            interface. Objects that derive from this class will raise the Changed
            event whenever part of the object's state has changed.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableComponentBase">
            <summary>
            Base class for all CogComponentBase subclasses that support
            serialization.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogComponentBase">
            <summary>
            This is the base class for most Component VisionPro objects.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetConverter">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetEvents(System.Attribute[])">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetEvents">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetComponentName">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetAttributes">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetProperties(System.Attribute[])">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetProperties">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetEditor(System.Type)">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetDefaultProperty">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetDefaultEvent">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentBase.GetClassName">
            <summary>
            Implements the corresponding member of the ICustomTypeDescriptor interface.
            May be overridden in derived classes to provide custom type information.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableComponentBase.#ctor">
            <summary>
            Creates a new instance of the CogSerializableComponentBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableComponentBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the CogSerializableComponentBase class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableComponentBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the GetObjectData method of the ISerializable interface.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the SerializationInfo.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableComponentBase.GetArchivedAssemblyVersion(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Get the assembly version for this.GetType() as recorded in the archive.  It may be 
            useful for objects to detect old archived versions of themselves, and manually 
            depersist the old archives in a specialized way.  Note that the returned Version
            object can be compared to fixed versions with its operator overloads for &lt;, &gt;, etc.
            </summary>
            <param name="info">The SerializationInfo containing the archived data.</param>
            <returns>Version of the current type's assembly that created the given archive.</returns>
            <remarks>
            Caution: Do not use this property during deserialization because the value of this property is undefined.
            </remarks>  
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.SfNextSf">
            <summary>
            The next state flag value to be used by a derived class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.SuspendChangedEvent">
            <summary>
            Temporarily suspends the raising of the Changed event. May be called
            more than once, and a corresponding call to ResumeAndRaiseChangedEvent
            must be made for each call to SuspendChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.ResumeAndRaiseChangedEvent">
            <summary>
            Re-enables raising of the Changed event after SuspendChangedEvent
            has been called, and raises the Changed event if the
            ChangedEventSuspended count is reduced to zero and any changes were
            made while events were suspended. Must be called once for each call to
            SuspendChangedEvent.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the
            ChangedEventSuspended count is currently zero.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.OnChanged(System.Int64)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.
            </summary>
            <param name="stateFlags">The set of state flags that correspond to the
            parts of the object that may have changed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.OnChanged(Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
            This method may be called internally whenever a derived object's state 
            may have changed and the derived object expresses this change via a 
            derived CogChangedEventArgs class. 
            </summary>
            <param name="eventArgs">EventArgs to be fired with the change event.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the 
            CogSerializableChangedEventComponentBase class with serialized 
            data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.#ctor">
            <summary>
            Initializes a new instance of the 
            CogSerializableChangedEventComponentBase class.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.Changed">
            <summary>
            This event is raised when one or more parts of the object's state may
            have changed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.ChangedEventSuspended">
            <summary>
            If nonzero, indicates that the raising of the Changed event has been
            suspended. This value is incremented when SuspendChangedEvent is called
            and decremented when ResumeAndRaiseChangedEvent is called.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableChangedEventComponentBase.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as shown in the following C# code snippet: 
            if (changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.SfCreateCurrentRecord">
            <summary>
            State flag for the CurrentRecordEnable property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.SfCreateLastRunRecord">
            <summary>
            State flag for the LastRunRecordEnable property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.SfRunStatus">
            <summary>
            State flag for the RunStatus property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.SfName">
            <summary>
            State flag for the Name property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.SfFailOnInvalidDataBinding">
            <summary>
            State flag for the FailOnInvalidDataBinding property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.ProcessingTimeAdjustment_">
            <summary>
            Gets or sets the amount to offset reported tool processing time.
            </summary>
            <value>The amount added to the tool processing time when it is stored in the tool's RunStatus.  Negative values will reduce the reported time.  This is often necessary if your tool runs other VisionPro tools and you need to exclude the non-processing time used by the encapsulated tool.</value>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.CurrentRecordEnable_">
            <summary>
            Gets or sets the flags specifying the records to include based on the
            tool's current state.  The derived class exposes this as a strongly-
            typed enum property.
            </summary>
            <value>Flags indicating which records to include based on the tool's current state.</value>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.LastRunRecordEnable_">
            <summary>
            Gets or sets the flags specifying the records to include based on the
            tool's last-run state.  The derived class exposes this as a strongly-
            typed enum property.
            </summary>
            <value>Flags indicating which records to include based on the tool's last-run state.</value>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.LastRunRecordDiagEnable_">
            <summary>
            Gets or sets the flags specifying the diagnostics records to include 
            based on the tool's last-run state.  The derived class exposes this as
            a strongly-typed enum property.
            </summary>
            <value>Flags indicating which diagnostics records to include based on the tool's last-run state.  Only the diagnostic records created during the previous invocation of the Run method are available for inclusion in the tool record.</value>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogToolBase.LastRunLastRunRecordDiagEnable_">
            <summary>
            Gets or sets the flags specifying the records to create during the next
            invocation of the Run method.
            </summary>
            <value>Flags indicating which diagnostics records to create during the next invocation of the Run method.</value>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.OnRunning">
            <summary>
            Raises the Running event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.OnRan">
            <summary>
            Raises the Ran event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.InternalRun(System.String@)">
            <summary>
            Called by the Run method to perform the main processing of the tool.
            </summary>
            <param name="message">Can be set in the InternalRun function in order to
            save a message in the RunStatus object.</param>
            <returns>CogToolResultConstant indicating overall tool run result.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.InternalCreateCurrentRecord(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
            Called by the CreateCurrentRecord method to create a record containing the
            current state of the tool.
            </summary>
            <param name="newRecord">A newly-created Current record, to which the derived tool may
            add new sub-records.</param>
            <param name="currentRecordEnable">The value of the CurrentRecordEnable property.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.InternalCreateLastRunRecord(Cognex.VisionPro.ICogRecord,System.Int32,System.Int32)">
            <summary>
            Called by the CreateLastRunRecord method to create a record containing the
            state of the tool after the last call to its Run method.
            </summary>
            <param name="newRecord">A newly-created LastRun record, to which the derived tool may
            add new sub-records.</param>
            <param name="lastRunRecordEnable">The value of the LastRunRecordEnable property during the last call to its Run method.</param>
            <param name="lastRunRecordDiagEnable">The value of the LastRunRecordDiagEnable property during the last call to its Run method.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.Clone">
            <summary>
            Creates a deep copy of the tool.
            </summary>
            <returns>A deep copy of the cloned tool.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.#ctor">
            <summary>
            Constructs a new instance of the CogToolBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.#ctor(Cognex.VisionPro.Implementation.CogToolBase)">
            <summary>
            Constructs a new instance of the CogToolBase class.
            </summary>
            <param name="other">A CogToolBase to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CogToolBase class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.HasMember(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Returns true if the serilaized object data has a memberName. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="memberName">The name of the member being checked.</param>
            <returns></returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.CreateCurrentRecord">
            <summary>
            Creates a new set of records that represents the tool's current state.
            </summary>
            <returns>ICogRecord instance containing a set of records that represent the tool's current state.  The records created are specified by the CreateCurrentRecord property.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.CreateLastRunRecord">
            <summary>
            Creates a new set of records that represents the tool's last-run state.
            </summary>
            <returns>ICogRecord instance containing a set of records that represent the tool's last-run state.  The records created are specified by the LastRunRecordEnable and LastRunRecordDiagEnable properties.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.Run">
            <summary>
            Runs the tool. This method is guaranteed to not throw an
            exception. Any exception generated in the course of running
            the tool will be caught and packaged in the tool's
            RunStatus.Exception. Should this occur, the tool's RunStatus.Result
            will be set to Error and its RunStatus.Message will reference the
            message that accompanied the exception. It is the user's
            responsibility to examine the tool's RunStatus after calling Run.
            </summary>
            <example>
<code lang="Visual Basic">
Imports Cognex.VisionPro

Private Function RunTool() As Boolean
  mTool.Run() ' a previously created and configured tool ...

  Dim aRunStatus As Cognex.VisionPro.ICogRunStatus = mTool.RunStatus

  If (aRunStatus.Result = CogToolResultConstants.Error) Then
    If (Not aRunStatus.Exception Is Nothing) Then
      MessageBox.Show("Exception: " + _
        aRunStatus.Exception.ToString())
    End If

    If (Not aRunStatus.Message Is Nothing) Then
      MessageBox.Show("Message: " + _
        aRunStatus.Message)
    End If

    RunTool = False
  Else
    RunTool = True
  End If

End Function
</code>
<code lang="C#">
using Cognex.VisionPro;

private Boolean RunTool()
  {
  mTool.Run(); // a previously created and configured tool

  ICogRunStatus aRunStatus = mTool.RunStatus;

  if (aRunStatus.Result == CogToolResultConstants.Error)
    {
    if (aRunStatus.Exception != null)
      MessageBox.Show("Exception: " +
        aRunStatus.Exception.ToString());

    if (aRunStatus.Message != null)
      MessageBox.Show("Message: " +
        aRunStatus.Message);

    return false;
    }
  else
    return true;
  }
</code>
</example>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.CheckRunConditionsNoThrow">
            <summary>
            Check for run conditions including data binding,
            returning an exception for the first problem
            encountered.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.CheckRunConditions">
            <summary>
            Check for run conditions including data binding.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBase.SetRunStatus(Cognex.VisionPro.Implementation.CogRunStatus)">
            <summary>
            Cognex Internal use only.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogToolBase.Running">
            <summary>
            Event that is raised at the start of the tool's Run method.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogToolBase.Ran">
            <summary>
            Event that is raised at the end of the tool's Run method.
            </summary>    
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogToolBase.UserData">
            <summary>
            Gets a CogDictionary object that can be used to store application-specific information.
            </summary>
            <value>CogDictionary containing application-specific information.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogToolBase.Name">
            <summary>
            Gets or sets a user-supplied name for the tool.
            </summary>
            <value>User-supplied string used to identify the tool.  The name cannot be empty if this tool is to be contained by a CogToolGroup.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogToolBase.RunStatus">
            <summary>
            Gets general information about the last call to the tool's
            Run function. Note that serious errors that occur within
            the tool's Run method may only be detected by examining the
            RunStatus after calling Run. It is the user's responsibility
            to examine the tool's RunStatus after calling Run.
            </summary>
            <value>ICogRunStatus object describing the status as of the last invocation of the Run method.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogToolBase.DataBindings">
            <summary>
            Gets the data bindings for the tool. 
            </summary>
            <value>Data bindings for the tool.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogToolBase.FailOnInvalidDataBinding">
            <summary>
            Specifies that the Run method is to fail if executed while one or more
            data bindings are invalid.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogDefaultToolTerminalAttributeBase">
            <summary>
            Base class for CogDefaultToolTerminal subclasses.  Application of a
            CogDefaultToolTerminalAttributeBase attribute identifies default
            terminals that will be created if a class type, rather than class
            instance, is passed to a CogToolGroup edit control for construction.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDefaultToolTerminalAttributeBase.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the CogDefaultToolTerminalAttributeBase class.
            </summary>
            <param name="index">This terminal's index relative to other tool terminals.</param>
            <param name="name">The name of the terminal.  This is the value that is displayed to the user.</param>
            <param name="path">The path to the method or property that this terminal represents.</param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogDefaultToolTerminalAttributeBase.Index">
            <summary>
            Gets terminal's index relative to other tool terminals.
            </summary>
            <value>Position index of default terminal relative to like default terminals.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogDefaultToolTerminalAttributeBase.Name">
            <summary>
            Name of the terminal.
            </summary>
            <value>Name of the terminal.  This is the value that is displayed to the user when identifying a terminal.</value>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogDefaultToolTerminalAttributeBase.Path">
            <summary>
            Path to the method or property that this terminal represents.
            </summary>
            <value>Dot delimited path to the method or property that this terminal represents.  The path is relative to the class upon which this attribute is applied.</value>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogDefaultToolInputTerminalAttribute">
            <summary>
            Attribute applied to tools for identifying a method or property as one of
            its default input terminals.  Note: this attribute is only effective when
            constructing a tool via a type-based vision tool template.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDefaultToolInputTerminalAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the CogDefaultToolInputTerminalAttribute class.
            </summary>
            <param name="index">This terminal's index relative to other tool input terminals.</param>
            <param name="name">The name of the terminal.  This is the value that is displayed to the user.</param>
            <param name="path">The path to the method or property that this terminal represents.</param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogDefaultToolOutputTerminalAttribute">
            <summary>
            Attribute applied to tools for identifying a method or property as one of
            its default output terminals.  Note: this attribute is only effective
            when constructing a tool via a type-based vision tool template.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDefaultToolOutputTerminalAttribute.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the CogDefaultToolOutputTerminalAttribute class.
            </summary>
            <param name="index">This terminal's index relative to other tool output terminals.</param>
            <param name="name">The name of the terminal.  This is the value that is displayed to the user.</param>
            <param name="path">The path to the method or property that this terminal represents.</param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogToolNodeAttribute">
            <summary>
            Attribute used to specify the strongly-named type of a node class to
            associate with a tool class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolNodeAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the CogToolNodeAttribute class.
            </summary>
            <param name="type">The strongname of the type used to represent the tool.</param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogToolNodeAttribute.NodeType">
            <summary>
            Gets the strongname of the type used to represent the tool.
            </summary>
            <value>The strongname of the type used to represent the tool.  The strongname must be the CogTreeNode type or a subclass of it.</value>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogStaticUtilities">
            <summary>
            A class containing miscellaneous VisionPro utility methods.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogStaticUtilities.GetVisionProRootPath">
            <summary>
            A static method used to obtain the VisionPro base directory.
            </summary>
            <returns>A string identifying the base directory path where VisionPro is installed.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogStaticUtilities.GetVisionProBinPath">
            <summary>
            A static method used to obtain the VisionPro bin directory.
            </summary>
            <returns>A string identifying the VisionPro bin directory path.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSyncObject">
            <summary>
            Class used to synchronize access to VisionPro members.  Multithreaded
            applications must provide an instance of this class to any edit controls
            sharing tools the application will be accessing from a non-GUI thread.
            It is the responsibility of the application to lock and unlock the
            CogSyncObject whenever it is accessing the tool.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSyncObject.Lock">
            <summary>
            Locks this object, blocking if necessary.  Fires the
            <see cref="E:Cognex.VisionPro.Implementation.CogSyncObject.Locked"/>
            event if this object was previously unlocked.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSyncObject.TryLock">
            <summary>
            Try to lock this object immediately.  If successful, and the object
            was previously unlocked, fire the
            <see cref="E:Cognex.VisionPro.Implementation.CogSyncObject.Locked"/>
            event.
            </summary>
            <returns>
            True if the object is locked successfully. Otherwise, false.
            </returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSyncObject.Unlock">
            <summary>
            Unlocks this object and fires the 
            <see cref="E:Cognex.VisionPro.Implementation.CogSyncObject.Unlocked"/>
            event if the calling thread has called this method as many times as
            it has called 
            <see cref="M:Cognex.VisionPro.Implementation.CogSyncObject.Lock"/> or 
            <see cref="M:Cognex.VisionPro.Implementation.CogSyncObject.TryLock"/>.
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">
            The current thread does not own the lock for this object. 
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSyncObject.OnLock">
            <summary> 
            Method responsible for notifiying registered objects of the event 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSyncObject.OnUnlock">
            <summary> 
            Method responsible for notifiying registered objects of the event 
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSyncObject.Locked">
            <summary>
            This event is raised when this object is locked
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSyncObject.Unlocked">
            <summary>
            This event is raised when this object is unlocked
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSyncObject.ThreadID">
            <summary> 
            Gets or sets a user-specified thread ID.
            </summary>
            <value>
            The user-specified thread ID.  The default value is zero.
            </value>
            <remarks>
            This property is a convenience for users who wish to store the ID
            of the thread that has locked this CogSyncObject. 
            Use of this property is optional.
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSyncObject.CogLockedEventHandler">
            <summary>
            A delegate for the CogVisionToolSyncRoot Lock event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSyncObject.CogUnlockedEventHandler">
            <summary>
            A delegate for the CogVisionToolSyncRoot Unlock event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.ICogSyncBoolean">
            <summary>
            Interface that defines a single, read-only boolean, and an event
            that fires whenever the boolean value is toggled from true to false, 
            or from false to true.
            </summary>
            <remarks>
            Clients can use the Toggled event to immediately synchronize their
            state with changes to the boolean.
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.ICogSyncBoolean.Value">
            <summary>
            Gets the value of the boolean.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.ICogSyncBoolean.Toggled">
            <summary>
            Event that is raised after the boolean value is toggled.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSyncBoolean">
            <summary>
            Class that defines a single, read-only boolean, and an event
            that fires whenever the boolean value is toggled.
            </summary>
            <remarks>
            This class implements the ICogSyncBoolean interface, and also 
            provides a way to directly set the boolean value.
            Clients can use the Toggled event to immediately synchronize their
            state with changes to the boolean.
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSyncBoolean.Value">
            <summary>
            Gets the value of the boolean.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSyncBoolean.Toggled">
            <summary>
            Event that is raised after the boolean value is toggled.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.ICogSyncPulse">
            <summary>
            Interface that defines a single synchronization pulse event.
            Iterative operations can fire this event each time they reach
            a defined "synchronization point" in their processing loop.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.ICogSyncPulse.SyncPulse">
            <summary>
            Event that represents a synchronization pulse.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSyncPulse">
            <summary>
            Class that defines a single synchronization pulse event.
            Iterative operations can fire this event each time they reach
            a defined "synchronization point" in their processing loop.
            </summary>
            <remarks>
            This class implements the ICogSyncPulse interface, and also 
            provides a way to directly fire the SyncPulse event.
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSyncPulse.FireSyncPulse">
            <summary>
            Fires the synchronization pulse event.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSyncPulse.SyncPulse">
            <summary>
            Event that represents a synchronization pulse.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogToolBaseImpl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor - necessary for save/restore.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogLocalizer">
            <summary>
            This class manipulates strings in resource files.
            It provides methods for changing the current cultureinfo, retrieving
            a particular string from a given resource file, and formatting a string in
            a specific way.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.SetVisionProCulture">
            <summary>
            Sets the UI culture to use everywhere in VisionPro.
            Must be called first at the start of an application
            when overriding system installed culture setting.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.GetString(System.Type,System.String)">
            <summary>
            Gets the best-match localization of the string referenced by strKey.
            </summary>
            <param name="source">Type associated with strKey resource. Type must reside in 
            the same assembly as the string resource where strKey is located.</param>
            <param name="strKey">Key to look up the string to localize.</param>
            <returns>Resource string localized for current culture.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.FormatString(System.Type,System.String,System.Object)">
            <summary>
            Replaces the format item in the best-match localization of the string
            referenced by strKey with the text equivalent of the value of a 
            specified Object instance.
            </summary>
            <param name="source">Type associated with strKey resource. Type must reside in 
            the same assembly as the string resource where strKey is located.</param>
            <param name="strKey">Key to look up the string to localize containing zero or more format items.</param>
            <param name="arg0">An Object to format.</param>
            <returns>A copy of the localized string in which the first format item has been replaced by the String equivalent of arg0.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.FormatString(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in the best-match localization of the string
            referenced by strKey with the text equivalent of the value of two 
            specified Object instances.
            </summary>
            <param name="source">Type associated with strKey resource. Type must reside in 
            the same assembly as the string resource where strKey is located.</param>
            <param name="strKey">Key to look up the string to localize containing zero or more format items.</param>
            <param name="arg0">The first Object to format.</param>
            <param name="arg1">The second Object to format.</param>
            <returns>A copy of the localized string in which the first and second format items have been replaced by the String equivalents of arg0 and arg1.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.FormatString(System.Type,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in the best-match localization of the string
            referenced by strKey with the text equivalent of the value of three 
            specified Object instances.
            </summary>
            <param name="source">Type associated with strKey resource. Type must reside in 
            the same assembly as the string resource where strKey is located.</param>
            <param name="strKey">Key to look up the string to localize containing zero or more format items.</param>
            <param name="arg0">The first Object to format.</param>
            <param name="arg1">The second Object to format.</param>
            <param name="arg2">The third Object to format.</param>
            <returns>A copy of the localized string in which the first, second, and third format items have been replaced by the String equivalents of arg0, arg1, and arg2.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.GetHelpFile(System.Type)">
            <summary>
            Gets the help filename embedded in the specified type.
            </summary>
            <param name="source">Type associated with the helpfile resource</param>
            <returns>A copy of the help filename for the type.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.getStringRM(System.Reflection.Assembly)">
            <summary>
            Get the string ResourceManager from the assembly.
            </summary>
            <param name="assem">Assembly containing the string ResourceManager.</param>
            <returns>The string ResourceManager.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.#ctor(System.Type)">
            <summary>
            Construct a localizer that can localize resources associated with the 
            given type.  The localizer determines what resource pool to load 
            based on information in the given type.
            </summary>
            <param name="resSource">The type associated with the resources to load.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.GetString(System.String)">
            <summary>
            Gets the best-match localization of the string specified by strKey.
            </summary>
            <param name="strkey">Key to look up the string to localize.</param>
            <returns>Resource string localized for current culture.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.FormatString(System.String,System.Object)">
            <summary>
            Replaces the format item in the best-match localization of the string
            referenced by strKey with the text equivalent of the value of a 
            specified Object instance.
            </summary>
            <param name="strKey">Key to look up the string to localize containing zero or more format items.</param>
            <param name="arg0">An Object to format.</param>
            <returns>A copy of the localized string in which the first format item has been replaced by the String equivalent of arg0.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.FormatString(System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in the best-match localization of the string
            referenced by strKey with the text equivalent of the value of two 
            specified Object instances.
            </summary>
            <param name="strKey">Key to look up the string to localize containing zero or more format items.</param>
            <param name="arg0">The first Object to format.</param>
            <param name="arg1">The second Object to format.</param>
            <returns>A copy of the localized string in which the first and second format items have been replaced by the String equivalents of arg0 and arg1.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.FormatString(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in the best-match localization of the string
            referenced by strKey with the text equivalent of the value of three 
            specified Object instances.
            </summary>
            <param name="strKey">Key to look up the string to localize containing zero or more format items.</param>
            <param name="arg0">The first Object to format.</param>
            <param name="arg1">The second Object to format.</param>
            <param name="arg2">The third Object to format.</param>
            <returns>A copy of the localized string in which the first, second, and third format items have been replaced by the String equivalents of arg0, arg1, and arg2.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogLocalizer.GetObject(System.String)">
            <summary>
            Returns the value of the specified Object resource.
            </summary>
            <param name="objkey">The name of the resource to get.</param>
            <returns>The value of the localized resource. If a match is not possible, a null reference (Nothing in Visual Basic) is returned. The resource value can be a null reference (Nothing).</returns>
        </member>
        <member name="T:Cognex.VisionPro.ICogVisionData">
            <summary>
            Interface that describes some vision data.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils">
            <summary>
            Custom VisionPro class for resolving string based .NET type information.
            Tries to mimic .NET's behavior (i.e. Type.GetType()) except to:
            1. Override strong name version binding for VisionPro assemblies 
               (use the newest version available).
            2. Override strong name version binding for customer assemblies with the 
               CogSerializationBinderAttribute.UseLatestVersionBinder set to true.
               (use the newest version available).
            3. Override strong name version binding for assemblies that use the  
               CogSerializationBinderAttribute.CustomBinder
               (by calling the custom binder).
            4. Enable Resolving of VisionPro types using type string information 
               that was specified without (or with partial) assembly information, 
               especially if this type is not already loaded in the app domain
               (by searching the VisionPro assembly metadata).
            
            CogTypeResolveUtils exists because VisionPro updates
            the strong name version numbers of its assemblies for every release yet
            still wants VisionPro types from assemblies with earlier version #'s 
            (usually in vpp files) to be bound or resolved to their equivilent
            types in newer versions of the VisionPro assemblies.
            
            This requires overiding the normal .NET strong name binding conventions
            with a custom scheme (described above).
            
            Most (all?) of this code would not be necessary if VisionPro only
            updated its assembly version numbers for truly incomaptible (breaking)
            changes to an assembly.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.ResolveType(System.String)">
            <summary>
            Resolve the type name infomration contained in typeName using 
            VisionPro's custom type resolving scheme.
            </summary>
            <param name="typeName">The assembly-qualified name of the type to get.
            If the type is a VisionPro type it is sufficient to supply the
            type name qualified by its namespace.</param>
            <returns>The resolved type.</returns>
            <remarks>
            For Cognex Internal Use Only!
            
            For VisionPro types (and third party types whose assemblies have the 
            CogSerializationBinderAttribute.UseLatestVersionBinder set to true)
            this function will ignore any strong name version infomation and 
            return Types bound to the latest (highest assembly version number) 
            Assembly found in the GAC.
            </remarks>
            <exception>
            Throws TypeLoadException().
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.RemoveVersion(System.String)">
            <summary>
            Strips the version information from an AQN or a type FullName.
            For example, "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Version=43.0.0.0, Culture=neutral, PublicKeyToken=ef0f902af9dee505"
            becomes "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Culture=neutral, PublicKeyToken=ef0f902af9dee505"
            </summary>
            <param name="typeName">The type spec from which to remove the version info.</param>
            <returns>The type spec with the version info removed.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.RemoveCulture(System.String)">
            <summary>
            Strips the culture information from an AQN or a type FullName.
            For example, "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Version=43.0.0.0, Culture=neutral, PublicKeyToken=ef0f902af9dee505"
            becomes "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Version=43.0.0.0, PublicKeyToken=ef0f902af9dee505"
            </summary>
            <param name="typeName">The type spec from which to remove the culture info.</param>
            <returns>The type spec with the culture info removed.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.RemovePublicKey(System.String)">
            <summary>
            Strips the public key information from an AQN or a type FullName.
            For example, "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Version=43.0.0.0, Culture=neutral, PublicKeyToken=ef0f902af9dee505"
            becomes "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Version=43.0.0.0, Culture=neutral"
            </summary>
            <param name="typeName">The type spec from which to remove the public key info.</param>
            <returns>The type spec with the public key info removed.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.RemoveStrongNameDetails(System.String)">
            <summary>
            Strips all strong name details from an AQN or a type FullName.
            For example, "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob, Version=43.0.0.0, Culture=neutral, PublicKeyToken=ef0f902af9dee505"
            becomes "Cognex.VisionPro.Blob.CogBlob, Cognex.VisionPro.Blob"
            </summary>
            <param name="typeName">The type spec from which to remove the strong name details.</param>
            <returns>The type spec with the strong name details removed.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.IsMicrosoftAssembly(System.String)">
            <summary>
            Performs a simple check on the fully qualified assemblyName string to see 
            if it contains public key information which is a known Microsoft public key.
            </summary>
            <param name="assemblyName">The fully qualified assemblyName</param>
            <returns>true if assemblyName contains a Microsoft PublicKeyToken</returns>
            <exception>System.ArgumentNullException</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.IsVisionProAssembly(System.String)">
            <summary>
            Performs a simple check on the fully qualified assemblyName string to see 
            if it is a known VisionPro assembly.
            </summary>
            <param name="assemblyName">The fully qualified assemblyName</param>
            <returns>True if the assemblyName starts with "Cognex.VisionPro" and contains 
            the VisionPro PublicKeyToken</returns>
            <exception>System.ArgumentNullException</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.IsSystemType(System.String)">
            <summary>
            Performs a simple check on the Full Name (including namespace) 
            of typeName to see if it is a "System" assembly.
            </summary>
            <param name="typeName">The type neme to check</param>
            <returns>True if typeName starts with "System."</returns>
            <exception>System.ArgumentNullException</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.ContainsGenericTypeInformation(System.String)">
            <summary>
            Check to see if <paramref name="typeName"/>
            is a generic type by scanning for an unescaped backtick; '`'.
            </summary>
            <param name="typeName">The typeName string to check for generic type information</param>
            <returns>True if type name is generic, otherwise false</returns>
            <remarks>Note that this routine does not ensure that <paramref name="typeName"/> 
            typeName is a valid type name specification</remarks>
            <exception>System.ArgumentNullException</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetVisionProAssemblyVersion">
            <summary>
            Returns the assembly version information this assembly(Cognex.VisionPro.dll).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetVisionProCulture">
            <summary>
            Returns the CultureInfo of this assembly(Cognex.VisionPro.dll).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetVisionProPublicKeyToken">
            <summary>
            Returns the PublicKeyToken of this assembly (Cognex.VisionPro.dll) 
            and all other VisionPro assemblies.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetAssemblyName(System.String)">
            <summary>
            Returns the Assembly FullName from an assembly qualified type name
            </summary>
            <param name="typeName">The assembly qualified type name from which to retreive the full name of the assembly</param>
            <returns>the full name of the Assembly Name</returns>
            <exception>System.ArgumentNullException</exception>
            <exception>System.ArgumentException</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetTypeDisplayName(System.String)">
            <summary>
            Returns a more display friendly version of an assembly qualified type name.
            It does this by stripping out all the assembly information from any generic
            arguments.
            </summary>
            <param name="typeName">The assembly qualified type name from which to retireve the display name</param>
            <returns>the Display friendly string</returns>
            <exception>System.ArgumentNullException</exception>
            <exception>System.ArgumentException</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetElementTypeNameFromAQNorFullName(System.String)">
            <summary>
            Returns the root type or element type name from an AQN.
            The Root type is the top level element type of the type.
            For example, The root type of "Cognex.VisionPro.Blob.CogBlob[][]"
            is "Cognex.VisionPro.Blob.CogBlob".
            </summary>
            <param name="aQNorFullName">the AQN from which to get the type name</param>
            <returns>the Type Name</returns>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.latestAssemblyInfoCache_">
            <summary>
            Caches the latest assembly info structures that have allready been looked up.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.GetLatestAssemblyInfo(System.String)">
            <summary>
            Gets the latest assembly info based on the assemblyRef string.
            </summary>
            <param name="assemblyRef">The fully qualified assembly name of an assembly
            which potentially contains an older assembly version number.</param>
            <returns>The latest assembly info structure for the latest assembly (highest version #)
            found on the machine.</returns>
            <remarks>GetLatestAssemblyInfo() removes the version info from the assemblyRef
            string and uses LoadWithPartialName() to locate the latest version of the 
            assembly available.</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.vproTypeLookupCache">
            <summary>
            Holds a cached map of all VisionPro types back to the assembly
            which contains them.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.SearchVisionProAssembliesForType(System.String)">
            <summary>
            Searches through the metadata of all the VisionPro assemblies 
            present on this machine searching for the type 
            which matches typeName.
            </summary>
            <param name="typeName">The FullName of the type (including namespace) to search for.</param>
            <returns>The FullName of the assembly where the type is found, or the empty string, "", if
            no assembly is found.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.ResolveAssembly(System.String)">
            <summary>
            Returns the correct assembly based info provided using the 
            VisionPro "use latest" mechanism.
            
            Passed as a delegate to CogTypeSpec.Resolve().
            </summary>
            <param name="assemblyNameString">The assembly name to resolve</param>
            <returns>The resolved (and loaded) assembly</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.ResolveType(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the correct type based info provided using the 
            VisionPro "use latest" mechanism.
            
            Passed as a delegate to CogTypeSpec.Resolve().
            </summary>
            <param name="asm">The assembly which containst the type (or null if unknown)</param>
            <param name="typeName">The name of the type</param>
            <returns></returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.CogLatestAssemblyInfoGetter">
            <summary>
            Used to retrieve the Latest Version Info of an assembly in 
            a second app domain to avoid loading unwanted assemblys into
            the primary appdomain.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogTypeResolveUtils.CogTypeMapCreator">
            <summary>
            Used to lookup table of all VisionPro types back to the assembly
            which contains them.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogSerializationOptionsConstants">
            <summary>
            This enumeration contains constants that are used by the 
            CogSerializationOptionsAttribute to associate a serialization option
            with specific fields
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.Minimum">
            <summary>
            Serialize a minimum set of properties.  Excludes input/output images and results.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.Results">
            <summary>
            Serialize result objects.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.InputImages">
            <summary>
            Serialize input images.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.OutputImages">
            <summary>
            Serialize output images.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.ToolBlockTerminalImages">
            <summary>
            Serialize images contained in ToolBlock terminals.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.ExcludeDataBindings">
            <summary>
            Do not serialize databindings.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsConstants.All">
            <summary>
            Serialize all types of properties.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogSerializationDataBindingAttribute">
            <summary>
            This attribute is applied to databindings fields in order to
            indicate that the databinding fields should not be serialized if the
            ExcludeDataBindings serialization option is set.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogSerializationOptionsAttribute">
            <summary>
            This attribute is applied to selected fields of VisionPro types in order to
            indicate that their serialization is optional, based on the bit flags in the
            CogSerializationOptionsConstants enumeration.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationOptionsAttribute.OptionBit">
            <summary>
            The serialization option bit for this field.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogSerializationOptionsAttribute.#ctor(Cognex.VisionPro.CogSerializationOptionsConstants)">
            <summary>
            Creates a new instance of the CogSerializationOptions class.
            </summary>
            <param name="optionBit">One and only one member of the CogSerializationOptionsConstants
            enumeration (excluding All and Minimum), indicating the option bit for this field.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogSerializationBinderAttribute">
            <summary>
            This attribute is applied to assembiles to select non-default binding schemes,
            such as the standard VisionPro scheme of upgrading loaded objects to the latest
            available assembly version.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSerializationBinderAttribute.UseLatestVersionBinder">
            <summary>
            The selected custom binder or null.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogSerializationBinderAttribute.#ctor">
            <summary>
            Creates a new instance of the CogSerializationBinderAttribute class.
            Indicates that a binder which upgrades types to the latest assembly verion
            will be used.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogSerializationBinderAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the CogSerializationBinderAttribute class.
            </summary>
            <param name="binder">A fully qualified type name for the custom binder
            for this attribute.  If null, then the default .NET binding rules apply
            (generally indicating that side-by-side versioning is desired).</param>      
        </member>
        <member name="M:Cognex.VisionPro.CogSerializationBinderAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the CogSerializationBinderAttribute class.
            </summary>
            <param name="binder">A fully qualified type name for the custom binder
            for this attribute.  If null, then the default .NET binding rules apply
            (generally indicating that side-by-side versioning is desired).</param> 
            <param name="useLatest">
            Dictates whether to upgrade to the latest assembly verion.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializationSurrogate">
            <summary>
            This class serializes and deserializes objects in such a way that if fields are
            added or removed in future versions of an object, it does not cause an error when
            the object is loaded.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Type)">
            <summary>
            Populates the provided SerializationInfo with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <param name="nonVisionProBase">
            A base class of "obj" which has it's own, non-visionpro serialization implementation.
            GetObjectData() will not serialize the private members of this base class.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the object using the information in the SerializationInfo.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Type)">
            <summary>
            Populates the object using the information in the SerializationInfo.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <returns>The populated deserialized object.</returns>
            <param name="nonVisionProBase">
            A base class of "obj" which has it's own, non-visionpro serialization implementation.
            SetObjectData() will not deserialize the private members of this base class.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogate.HasMember(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Returns true if the serilaized object data has a memberName. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="memberName">The name of the member being checked.</param>
            <returns></returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogate.HasMember(System.Runtime.Serialization.SerializationInfo,System.String,System.Type@)">
            <summary>
            Returns true if the serilaized object data has a memberName. 
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="memberName">The name of the member being checked.</param>
            <param name="type">Returns the instance type of the member in the serialized object data</param>
            <returns></returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializationBinder">
            <summary>
            This class provides for the VisionPro binding behavior.
            
            If the latest version of the given assembly has the attribute
            "CogSerializationBinderAttribute", then this attribute is used to select
            a binder for that assembly.
            
            Otherwise, assembly version independence is provided to Cognex.*
            types automatically (Cognex types referred to in archives will be
            automatically upgraded to the latest installed assembly version).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationBinder.#ctor(System.Runtime.Serialization.SerializationBinder)">
            <summary>
            Creates a new instance of the CogSerializationBinder class.
            </summary>
            <param name="chainedBinder">Supplemental serialization binder.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationBinder.StripVersionFromAssemblyName(System.String)">
            <summary>
            Remove the version info from the given assembly name.
            </summary>
            <returns>The assembly name with version info removed.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the Assembly name of the serialized object.</param>
            <param name="typeName">Specifies the Type name of the serialized object.</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializationOptionsContext">
            <summary>
            When serializing or deserializing, an instance of this class can be passed in
            as the "additional" parameter to the constructor of a SerializationContext
            structure in order to selectively serialize fields according to their
            option bits.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.OptionBits">
            <summary>
            The option bits for the fields to be serialized.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.FromOptionBits(Cognex.VisionPro.CogSerializationOptionsConstants)">
            <summary>
            Given a set of option bits, returns a value to be passed into the "additional"
            parameter of a StreamingContext structure.
            </summary>
            <param name="optionBits">The serialization option bits.</param>
            <returns>Returns a new instance of the CogSerializationOptionsContext class unless 
            optionBits=CogSerializationOptionsConstants.All, in which case it returns null.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.ShouldSerialize(System.Reflection.FieldInfo)">
            <summary>
            Returns true if a given field should be serialized.
            </summary>
            <param name="member">The field to determine whether or not to serialize.</param>
            <returns>True if member should be serialized; false otherwise.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.ShouldSerialize(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Returns true if a given field should be serialized.
            </summary>
            <param name="fieldToSerialize">
            The field which may or may not be serialized.
            </param>      
            <param name="parentOfObjectToSerialize">
            The parent object containing the field which is going to be 
            serialized (or not).
            </param>
            <returns>
            True if fieldToSerialize should be serialized; false otherwise.
            </returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.ShouldDeserialize(System.Reflection.FieldInfo,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Returns true if a given field should be deserialized.
            </summary>
            <param name="fieldToDeserialize">
            The field which may or may not be deserialized.
            </param>      
            <param name="serializationInfo">
            The serialization info object containing data being deserialized. 
            </param>
            <returns>
            True if fieldToDeserialize should be deserialized; false otherwise.
            </returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.GetOptionalFieldCategory(System.Reflection.FieldInfo)">
            <summary>
            Return the enum which identifies which "category" of optional serialization
            attributes fieldInfo was marked with (if any). If fieldInfo is _not_ optional
            this function returns CogSerializationOptionsConstants.Minimum. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.IsImage(System.Object)">
            <summary>
            Returns true if obj implements ICogImage
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationOptionsContext.IsImage(System.Type)">
            <summary>
            Returns true if type implements ICogImage
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogDelegateSerializationSurrogate">
            <summary>
            Serialization surrogate used when serializing delegates.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDelegateSerializationSurrogate.#ctor">
            <summary>
            Creates a new instance of the CogDelegateSerializationSurrogate class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDelegateSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes an object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the SerializationInfo.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDelegateSerializationSurrogate.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the real object that should be deserialized, rather than 
            the object that the serialized stream specifies.
            </summary>
            <param name="context">The StreamingContext from which the current object is deserialized.</param>
            <returns>Returns the actual object that is put into the graph.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogDelegateSerializationSurrogate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the CogDelegateSerializationSurrogate class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogTypeSerializationSurrogate">
            <summary>
            Serialization surrogate used when serializing type objects.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTypeSerializationSurrogate.#ctor">
            <summary>
            Creates a new instance of the CogTypeSerializationSurrogate class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTypeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes an object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the SerializationInfo.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTypeSerializationSurrogate.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Returns the real object that should be deserialized, rather than 
            the object that the serialized stream specifies.
            </summary>
            <param name="context">The StreamingContext from which the current object is deserialized.</param>
            <returns>Returns the actual object that is put into the graph.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTypeSerializationSurrogate.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of the CogTypeSerializationSurrogate class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogExceptionSerializationSurrogate">
            <summary>
            Serialization surrogate used when serializing exception objects.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogExceptionSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes an object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogExceptionSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo.
            </summary>
            <param name="obj">
            The object to populate.
            </param>
            <param name="info">
            The information to populate the object.
            </param>
            <param name="context">
            The source from which the object is deserialized.
            </param>
            <param name="selector">
            The surrogate selector where the search for a 
            compatible surrogate begins.
            </param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogMemberInfoSerializationSurrogate">
            <summary>
            Serialization surrogate used when serializing MemberInfo objects.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogMemberInfoSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes an object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the SerializationInfo.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogMemberInfoSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogFontSerializationSurrogate">
            <summary>
            This class is needed to properly deserialize the System.Drawing.Font class with
            the SoapFormatter.  Font deserialization with the SoapFormatter is broken in the
            .NET framework as of version 1.1.  
            </summary>        
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogFontSerializationSurrogate.#ctor">
            <summary>
            Creates a new instance of the CogFontSerializationSurrogate class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogFontSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes an object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the SerializationInfo.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogFontSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the SerializationInfo.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializationSurrogateSelector">
            <summary>
            Serialization surrogate selector for VisionPro objects.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogateSelector.#ctor(System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Creates a new instance of the CogSerializationSurrogateSelector 
            class.
            </summary>
            <param name="next">Supplemental surrogate selector.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogateSelector.GetNextSelector">
            <summary>
            Returns the next surrogate selector in the chain.
            </summary>
            <returns>The next surrogate selector in the chain, or a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <summary>
            Finds the surrogate that represents the specified object's type, 
            starting with the specified surrogate selector for the specified
            serialization context.
            </summary>
            <param name="type">The Type of object (class) that needs a surrogate.</param>
            <param name="context">The source or destination context for the current serialization.</param>
            <param name="selector">When this method returns, contains an ISurrogateSelector that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.</param>
            <returns>The appropriate surrogate for the given type in the given context.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializationSurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Specifies the next ISurrogateSelector for surrogates to examine if the current instance does not have a surrogate for the specified type and assembly in the specified context.
            </summary>
            <param name="selector">The next surrogate selector to examine.</param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogGetEventDelegates">
            <summary>
            Internal use only. 
            Get event delegates from the input object.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogGetEventDelegates.GetEventDelegates(System.Object,Cognex.VisionPro.Implementation.Internal.CogGetEventDelegates.EventsModeConstants)">
            <summary>
            Internal use only. Public static method.
            </summary>
            <param name="mObject"></param>
            <param name="eventsMode"></param>
            <returns></returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogGetEventDelegates.LogDelegateList(System.String,System.Collections.Hashtable)">
            <summary>
            Internal use only. Public static method.
            </summary>
            <param name="toolName"></param>
            <param name="delegateList"></param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogGetEventDelegates.EventsModeConstants">
            <summary>
            Different kinds of event delegates can be get.
            If you choose EditControlEvents, then it gets all delegates
            derived from the edit control, including 
            CogWeakChangedEventDelegate pointed alive delegates.
            Note: If you choose Non-WeakChangedEvents, you won't be able
            to get alive CogWeakChangedEventDelegate pointed delegates,
            which are derived from the edit control.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogCollectionWatcher.Subject_ReplacingItem(System.Object,Cognex.VisionPro.CogCollectionReplaceEventArgs)">
            <summary>
            This section handles events from the subject collection
            and updates the grids rows to match
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogPropertyWatcher">
            <summary>
            This class watches a property or sub-property of an object, and raises a Changed
            event when the value of the property has changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfSubject">
            <summary>
            State flag for the Subject property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfPath">
            <summary>
            State flag for the Path property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfPropertyDescriptor">
            <summary>
            State flag for the PropertyDescriptor property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfValue">
            <summary>
            State flag for the Value property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfOptimizeIneffectiveChanges">
            <summary>
            State flag for the OptimizeIneffectiveChanges property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfIsConnected">
            <summary>
            State flag for the IsConnected property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogPropertyWatcher.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.#ctor">
            <summary>
            Constructs a new instance of the CogPropertyWatcher class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.#ctor(System.Object,System.String)">
            <summary>
            Constructs a new instance of the CogPropertyWatcher class with the given subject and path.
            </summary>
            <param name="subject">Object instance to monitor.</param>
            <param name="path">Path to property to monitor.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the CogPropertyWatcher class with the given subject and path.
            </summary>
            <param name="subject">Object instance to monitor.</param>
            <param name="path">Path to property to monitor.</param>
            <param name="deserializing">Extra flag used while constucting property
            watchers as part of the deserializing process.  This helps ensure that
            the subject targets are fully deserialzed before we hook up to them.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.#ctor(Cognex.VisionPro.CogPropertyWatcher)">
            <summary>
            Constructs a new instance of the CogPropertyWatcher class with the same
            subject and path as the other instance.
            </summary>
            <param name="other">Template instance used to initialize this instance.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CogPropertyWatcher class with
            serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.OnDisposed">
            <summary>
            Raises the Disposed event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.Attach(System.Object,System.String)">
            <summary>
            Attaches to a new subject and path.
            </summary>
            <param name="subject">Object instance to monitor.</param>
            <param name="path">Path to property to monitor.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.ParsePath">
            <summary>
            This must be called when the Path has changed. It Parses the Path string
            into _PropertyName and (optionally) _SourcePath.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.DisconnectSourceWatcher">
            <summary>
            Disconnects and disposes of any existing source watcher.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.DisconnectValueChanged">
            <summary>
            Disconnects ValueChanged notifications from the property descriptor
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.Connect">
            <summary>
            This is called when the Subject and/or Path has changed. If the Path is complex, 
            it adds a new watcher for the source. Then it attaches to the new source object
            via SetSource.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.Connect(System.Boolean)">
            <summary>
            This is called when the Subject and/or Path has changed. If the Path is complex, 
            it adds a new watcher for the source. Then it attaches to the new source object
            via SetSource.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.CheckValid">
            <summary>
            Checks for a valid state for getting and setting the property value, and throws an
            exception if not valid.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher.SetSource(System.Object)">
            <summary>
            This is called when the source object has changed. It disconnects any old property
            descriptor ValueChanged notification on the old source, and if the new source is
            non-null then it establishes a new property descriptor ValueChanged notification.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher._PropertyDescriptor_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            This function gets called when the property descriptor detects a change in the
            property.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogPropertyWatcher._SourceWatcher_Changed(System.Object,Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
            This function gets called when the _SourceWatcher detects a change in the
            parent property from which the _Source is obtained.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Cognex.VisionPro.CogPropertyWatcher.Disposed">
            <summary>
            This event is raised when the Dispose method is called. It gets called
            before any disposing is done so the properties of this object are
            still valid at this point.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.Subject">
            <summary>
            Gets or sets the object whose property or sub-property is being watched.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.Path">
            <summary>
            Gets or sets the path to the property or sub-property being watched.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.IsConnected">
            <summary>
            Indicates if this property watcher is currently connected to a valid
            property.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.PropertyDescriptor">
            <summary>
            Gets the property descriptor of this property.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.IsDisposed">
            <summary>
            Indicates if Dispose has been called on this instance.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogPropertyWatcher.OptimizeIneffectiveChanges">
            <summary>
            Determines if this property watcher will optimize out any attempts to
            set Value to its current value.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogDataBinding">
            <summary>
            This class represents a binding for an input property of an object
            or one of its sub-objects.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfSource">
            <summary>
            State flag for the Source property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfSourcePath">
            <summary>
            State flag for the SourcePath property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfSourceProperty">
            <summary>
            State flag for the SourceProperty property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfUpdateException">
            <summary>
            State flag for the UpdateException property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfContainer">
            <summary>
            State flag for the Container property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfOptimizeIneffectiveChanges">
            <summary>
            State flag for the OptimizeIneffectiveChanges property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.Source_">
            <summary>
            Source of the data.
            </summary>
            <remarks>
            Note that this field is accessed via reflection by cells
            of the Cognex.VisionPro.Implmentation.CogGridView.
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.UpdateException_">
            <summary>
            Exception thrown when the binding tried to update its value.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBinding.Container_">
            <summary>
            Collection containing this instance.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary>
            Constructs a new instance of the CogDataBinding class.
            </summary>
            <param name="destination">The destination object.</param>
            <param name="destinationPath">The property name or dotted path to the destination property.</param>
            <param name="source">The source object.</param>
            <param name="sourcePath">The property name or dotted path to the source property.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.#ctor(System.Object,System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of the CogDataBinding class.
            </summary>
            <param name="destination">The destination object.</param>
            <param name="destinationPath">The property name or dotted path to the destination property.</param>
            <param name="source">The source object.</param>
            <param name="sourcePath">The property name or dotted path to the source property.</param>
            <param name="syncOnInitialize">
            Determines if the source and destintation
            are immeadiatley syncronized when a new 
            databinding is created.
            If true creating a new databinding
            will cause the destination value to be immeadiatley
            updated/syncronized with the source value.
            If false, the destination value will not be updated
            unitl the source value has changed.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CogDataBinding class with serialized 
            data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.Dispose">
            <summary>
            Frees all resources used by the CogDataBinding and removes it from its container.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.BindTo(System.Object,System.String)">
            <summary>
            Redirects the binding to a new source and path.
            </summary>
            <param name="source">The source object.</param>
            <param name="sourcePath">The property name or dotted path to the source property.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.GetSourceValue">
            <summary>
            Reads the current value of the source property. May throw an exception if the
            source property is not currently valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.RefreshBinding">
            <summary>
            Refreshes the destination property from the source
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.UpdateValue">
            <summary>
            Passes the value from the DataSource binding to the destination property. If an
            exception occurs, it is stored in the _Exception field and not re-thrown by
            this function.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.GetCompatibleOutputs(System.Type,System.Object)">
            <summary>
            Gets a list of all output properties that can be assigned to the given type.
            </summary>
            <param name="destinationType">The type of the property to which the output's
            value will be assigned.</param>
            <param name="source">The object that is the source of the data.</param>
            <returns>An ArrayList of strings, each of which is a path to a compatible property.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.GetCompatibleOutputs(System.Type,System.Type)">
            <summary>
            Gets a list of all output properties that can be assigned to the given type. This
            override should only be called if an instance of the source object is not available.
            </summary>
            <param name="destinationType">The type of the property to which the output's
            value will be assigned.</param>
            <param name="sourceType">The type of the object that is the source of the data.</param>
            <returns>An ArrayList of strings, each of which is a path to a compatible property.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBinding.FindDataBindings(System.Object)">
            <summary>
            Gets an array of all data bindings bound to a property of the supplied
            object.  Data bindings having complex paths in which any portion
            reference the source object, are also included in the array.
            </summary>
            <param name="sourceObject">Find all databindings for whom this object
            is the source object.  Note: only supported for arguments implementing
            ICogChangedEvent.</param>
            <returns>Array of data bindings, each of which uses (possibly
            implicitly) <paramref name="sourceObject"/> as its source object.
            </returns>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.Destination">
            <summary>
            Gets the destination object.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.DestinationPath">
            <summary>
            Gets the destination property name or dotted property path.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.DestinationProperty">
            <summary>
            Gets a PropertyDescriptor for the destination property.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.Source">
            <summary>
            Gets the source object.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.SourcePath">
            <summary>
            Gets the source property name or dotted property path.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.SourceProperty">
            <summary>
            Gets a PropertyDescriptor for the source property.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.UpdateException">
            <summary>
            Gets the exception, if any, that was thrown when the binding attempted to
            update its property value from its DataSource.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.Container">
            <summary>
            Returns the collection that contains the binding.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBinding.OptimizeIneffectiveChanges">
            <summary>
            Determines if this data binding will optimize out any attempts to
            set the destination property to its current value.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogDataBindingsCollection">
            <summary>
            An ordered collection of CogDataBinding objects that
            raises events whenever any change is made.
            </summary>  
        </member>
        <member name="F:Cognex.VisionPro.CogDataBindingsCollection.SfOptimizeIneffectiveChanges">
            <summary>
            State flag for the OptimizeIneffectiveChanges property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBindingsCollection.SfSyncOnInitialize">
            <summary>
            State flag for the SyncOnInitialize property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBindingsCollection.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDataBindingsCollection._SyncOnInitialize">
            Determines if the source and destintation
            are immeadiatley syncronized when a new 
            databinding is added to the collection.
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.#ctor(System.Object)">
            <summary>
            Constructs a new instance of the CogDataBindingsCollection class.
            </summary>
            <param name="parent">The parent object that owns the collection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.#ctor(System.Object,Cognex.VisionPro.CogDataBindingsCollection)">
            <summary>
            Constructs a new copy of the CogDataBindingsCollection class.
            </summary>
            <param name="parent">The parent object that owns the new collection.</param>
            <param name="other">The existing CogDataBindingsCollection to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.#ctor(System.Object,Cognex.VisionPro.CogDataBindingsCollection,System.Boolean)">
            <summary>
            Constructs a new copy of the CogDataBindingsCollection class.
            </summary>
            <param name="parent">The parent object that owns the new collection.</param>
            <param name="other">The existing CogDataBindingsCollection to copy.</param>
            <param name="historicalMode">Option to use the old broken mode for possible 
            backward compatibility issues.  In historical mode the databindings do not 
            set their destination to the supplied parent argument.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CogDataBindingsCollection class with 
            serialized data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Clone">
            <summary>
            Creates a deep copy of the collection.
            </summary>
            <returns>A deep copy of the cloned collection.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Add(System.String,System.Object,System.String)">
            <summary>
            Binds the specified input from the specified property of the source
            object.
            </summary>
            <param name="destinationPath">The property name or dotted path to the input property to bind.</param>
            <param name="source">The object that provides the source property.</param>
            <param name="sourcePath">The property name or dotted path to the source property.</param>
            <returns>The newly-created CogDataBinding.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Replace(System.String,System.Object,System.String)">
            <summary>
            Replaces the current binding to the specified input with a binding from
            the specified property of the specified source object.
            </summary>
            <param name="destinationPath">The property name or dotted path to the input property to re-bind.</param>
            <param name="source">The new object that provides the source property.</param>
            <param name="sourcePath">The property name or dotted path to the new source property.</param>
            <returns>The newly-created CogDataBinding.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.IndexOf(Cognex.VisionPro.CogDataBinding)">
            <summary>
            Searches for the specified CogDataBinding and returns its zero-based index.
            </summary>
            <param name="value">The binding to locate in the collection.</param>
            <returns>The zero-based index of the item if found; otherwise, -1.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.IndexOf(System.String)">
            <summary>
            Searches for a CogDataBinding with the given DestinationPath and returns its zero-based index.
            </summary>
            <param name="destinationPath">The value of the DestinationPath property of the item to locate.</param>
            <returns>The index of the item or -1 if it is not in the collection.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Contains(Cognex.VisionPro.CogDataBinding)">
            <summary>
            Determines whether a CogDataBinding is in the CogDataBindingsCollection. 
            </summary>
            <param name="item">The CogDataBinding to locate in the CogDataBindingsCollection.</param>
            <returns>True if item is found in the CogDataBindingsCollection; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Contains(System.String)">
            <summary>
            Determines whether a CogDataBinding with the given DestinationPath is in the CogDataBindingsCollection. 
            </summary>
            <param name="destinationPath">The value of the DestinationPath property of the item to locate.</param>
            <returns>True if item corresponding to destinationPath is found in the CogDataBindingsCollection; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Remove(Cognex.VisionPro.CogDataBinding)">
            <summary>
            If the collection contains the given binding, removes it and
            calls its Dispose method.
            </summary>
            <param name="value">Item to remove from the collection.  Item is disposed after it is removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.Remove(System.String)">
            <summary>
            If the collection contains a binding with the given path, removes it and
            calls its Dispose method.
            </summary>
            <param name="path">Destination path of item to remove.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDataBindingsCollection.ValidateNewItem(Cognex.VisionPro.CogDataBinding,System.Int32)">
            <summary>
            Validates that an item being added or replaced is valid.
            </summary>
            <param name="binding">The new binding item.</param>
            <param name="replacedIndex">The index of the item being replaced, or -1 if it's being added.</param>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBindingsCollection.Parent">
            <summary>
            Gets the object to which the collection belongs.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBindingsCollection.SyncOnInitialize">
            <summary>
            Determines if the source and destintation
            are immeadiatley syncronized when a new 
            databinding is added to the collection.
            If true, adding or replacing a databinding
            will cause the destination to be immeadiatley
            updated/syncronized with the source value.
            If false, the destination will not be updated
            unitl the source property changes.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBindingsCollection.Item(System.Int32)">
            <summary>
            Get or set the binding object at the given index.
            </summary>
            <param name="index">Index of binding object.</param>
        </member>
        <member name="P:Cognex.VisionPro.CogDataBindingsCollection.Item(System.String)">
            <summary>
            Get or set the binding object with the given DestinationPath.
            </summary>
            <param name="destinationPath">Destination path of binding object to access.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.ICogControlValueConverter.Convert(System.Object)">
            <summary>
            Converts the unadapted PROPERTY value to the
            adapted CONTROL value
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.ICogControlValueConverter.ConvertBack(System.Object)">
            <summary>
            Converts the adapted CONTROL value "back" to 
            the unadapted PROPERTY value.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.ICogControlValueAdapter.UnadaptedType">
            <summary>
            The unadapted PROPERTY value type
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.ICogControlValueAdapter.AdaptedType">
            <summary>
            The adapted CONTROL value type
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.EnumExtensions">
            <summary>
            Contains common extension methods of enumeration types.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.EnumExtensions.ToList``1">
            <summary>
            Creates a List with all keys and values of a given Enum class
            </summary>
            <typeparam name="T">Must be derived from class Enum!</typeparam>
            <returns>A list of KeyValuePair&lt;Enum, string&gt; with all available
            names and values of the given Enum.</returns>
        </member>
        <member name="T:Cognex.VisionPro.CogPropertyTypeAdapterAttribute">
            <summary>
            Summary description for CogPropertyTypeAdapterAttribute.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogTypeAdapterAttribute">
            <summary>
            Summary description for CogTypeAdapterAttribute.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogReturnTypeAdapterAttribute">
            <summary>
            Summary description for CogReturnTypeAdapterAttribute.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogParameterTypeAdapterAttribute">
            <summary>
            Summary description for CogParameterTypeAdapterAttribute.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogToolCollection">
            <summary>
            An ordered collection of VisionPro tools that raises events whenever
            a change is made.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogToolCollection.SfParent">
            <summary>
            State flag for the Parent property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogToolCollection.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor(System.Object)">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
            <param name="parent">The object containing this CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor(Cognex.VisionPro.ICogTool[])">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
            <param name="tools">The items initially contained by this CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor(Cognex.VisionPro.ICogTool[],System.Object)">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
            <param name="tools">The items initially contained by this CogToolCollection.</param>
            <param name="parent">The object containing this CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor(Cognex.VisionPro.CogToolCollection)">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
            <param name="other">A CogToolCollection to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor(Cognex.VisionPro.CogToolCollection,System.Object)">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
            <param name="other">A CogToolCollection to copy.</param>
            <param name="parent">The object containing this CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CogToolCollection class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Clone">
            <summary>
            Creates a deep copy of the tool collection.
            </summary>
            <returns>A deep copy of the cloned tool collection.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the CogToolCollection's
            elements.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the CogToolCollection's ICogTools.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific ICogTool from the 
            CogToolCollection.
            </summary>
            <param name="key">The key identifying the ICogTool to remove from the CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Contains(System.String)">
            <summary>
            Determines whether the CogToolCollection contains an ICogTool with the 
            specified key.
            </summary>
            <param name="key">The key to locate in the CogToolCollection.</param>
            <returns>True if the CogToolCollection contains an ICogTool with the key; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Add(Cognex.VisionPro.ICogTool)">
            <summary>
            Adds an item to the CogToolCollection.
            </summary>
            <param name="value">The ICogTool to add to the CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Insert(System.Int32,Cognex.VisionPro.ICogTool)">
            <summary>
            Inserts an ICogTool into the CogToolCollection at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The ICogTool to insert into the CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Remove(Cognex.VisionPro.ICogTool)">
            <summary>
            Removes the first occurrence of a specific ICogTool from the 
            CogToolCollection.
            </summary>
            <param name="value">The ICogTool to remove from the CogToolCollection.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.Contains(Cognex.VisionPro.ICogTool)">
            <summary>
            Determines whether the CogToolCollection contains a specific ICogTool.
            </summary>
            <param name="value">The ICogTool to locate in the CogToolCollection.</param>
            <returns>True if the CogToolCollection contains value; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.IndexOf(System.String)">
            <summary>
            Determines the index of the ICogTool with the specified key.
            </summary>
            <param name="key">The key to locate in the CogToolCollection.</param>
            <returns>The index of value if found in the CogToolCollection; otherwise, -1.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.IndexOf(Cognex.VisionPro.ICogTool)">
            <summary>
            Determines the index of a specific ICogTool in the CogToolCollection.
            </summary>
            <param name="value">The ICogTool to locate in the CogToolCollection.</param>
            <returns>The index of value if found in the CogToolCollection; otherwise, -1.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.InsertFromToolboxItem(System.Drawing.Design.ToolboxItem,System.Int32)">
            <summary>
            Insert one or more tools from a toolbox item.
            </summary>
            <param name="toolboxItem"></param>
            <param name="index">The index at which to insert.</param>
            <returns>An ArrayList containing the tools inserted.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.GetProperties(System.Attribute[])">
            <summary>
            Returns a collection containing all PropertyDescriptors found in the
            standard fasion, augmented with property descriptors for each ICogTool 
            that can be obtained using the string overload of the item indexer.
            </summary>
            <param name="attributes">An array of type Attribute that is used as a filter.</param>
            <returns>An array of type Attribute that represents the properties for this CogToolCollection instance that match the given set of attributes.</returns>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.OnInsertingItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertingItem event.
            </summary>
            <param name="index">Index at which the item will be inserted.</param>
            <param name="value">Value of item being inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.OnRemovedItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovedItem event.
            </summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacingItem event.
            </summary>
            <param name="index">Index of item being replaced.</param>
            <param name="oldValue">Value of item being replaced.</param>
            <param name="newValue">Value of item replacing oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.OnClearing">
            <summary>
            Raises the Clearing event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogToolCollection.Parent">
            <summary>
            Gets or sets the parent object of this CogToolCollection.
            </summary>
            <value>Parent object of this CogToolCollection.  Useful when determining an ICogTool's ancestry.</value>
        </member>
        <member name="P:Cognex.VisionPro.CogToolCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ICogTool at the specified index.  In C#, this property
            is the indexer for the CogToolCollection class.
            </summary>
            <param name="index">The zero-based index of the ICogTool to get or set.</param>
            <value>The ICogTool at the specified index.</value>
        </member>
        <member name="P:Cognex.VisionPro.CogToolCollection.Item(System.String)">
            <summary>
            Gets or sets the ICogTool with the specified key.  In C#, this property 
            is the indexer for the CogToolCollection class.
            </summary>
            <param name="key">The key of the ICogTool to get or set.</param>
            <value>The ICogTool with the specified key.</value>
            
        </member>
        <member name="M:Cognex.VisionPro.CogToolCollection.CogDictionaryEnumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Creates a new instance of the CogDictionaryEnumerator class.
            </summary>
            <param name="toolCollectionEnumerator">An IEnumerator to wrap.</param>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogException">
            <summary>
            This is the base class for all VisionPro exceptions.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogException.#ctor">
            <summary>
            Constructs a new instance of the CogException class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CogException class with a specified
            error message.
            </summary>
            <param name="message">
            A message that describes the error.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CogException class with a specified 
            error message and a reference to the inner exception that is the cause 
            of this exception.
            </summary>
            <param name="message">
            A message that describes the error.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the 
            innerException parameter is not a null reference, the current exception
            is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CogException class with serialized 
            data.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Exceptions.CogException.SetHelpLink(System.String)">
            <summary>
            Sets a link to the help file associated with this exception.
            </summary>
            <param name="helpFileName">
            Filename of help file to associate with this exception.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqBadVideoFormatException">
            <summary>
            The exception that is thrown when the video format is not
            recognized, or no connected camera supports the video format.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException">
            <summary>
            The exception that is thrown when the
            <see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout"/> period expires.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException">
            <summary>
            The exception that is thrown when the
            <see cref="T:Cognex.VisionPro.CogAcqROI"/> is not valid.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException">
            <summary>
            The exception that is thrown when a trigger could not be
            serviced.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqBadTicketException">
            <summary>
            The exception that is thrown when there is no outstanding
            <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire"/> for
            the supplied ticket.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqOldTicketException">
            <summary>
            The exception that is thrown when the ticked supplied
            corresponds to an image that has already been collected.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqNoFrameGrabberException">
            <summary>
            The exception that is thrown when a FIFO was not
            associated with a frame grabber.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException">
            <summary>
            The exception that is thrown when the acquisition trigger
            model selected is not compatible with the type of acquisition
            performed by an acquisition FIFO.  For example, it is an error to
            call the Acquire method when the trigger model is 'Auto'.
            See <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerModel"/>
            for more information.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqMissedException">
            <summary>
            The exception that is thrown when the FIFO fills up. The
            size of the FIFO queue is 32 requests.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException">
            <summary>
            The exception that is thrown when the acquisition fails
            because of a fault in the acquisition hardware, or because of
            some other unusual problem.  This failure should never happen
            in a properly functioning system. Some examples of abnormal
            failures are a blown camera fuse or a temperature alert that
            indicates that the frame grabber is overheating.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqNotAllowedForSlaveException">
            <summary>
            The exception that is thrown when you attempt an illegal
            operation on a slave FIFO.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqCannotSlaveException">
            <summary>
            The exception that is thrown when a FIFO cannot have a
            slave FIFO because of incompatible video formats or because
            there are no available ports for slave FIFOs.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqTimingException">
            <summary>
            The exception that is thrown when a timing error
            occurs.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqHardwareInUseException">
            <summary>
            The exception that is thrown when another process is
            using the hardware resource.  Only a single process per computer
            can make use of Cognex hardware.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqNoCamerasException">
            <summary>
            The exception that is thrown when no cameras are
            available with which to acquire an image.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException">
            <summary>
            The exception that is thrown when there was an error in
            another FIFO in the same master/slave group.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqNoOutstandingStartsException">
            <summary>
            The exception that is thrown when an acquisition ticket
            is -1, but there are no outstanding StartAcquire requests.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException">
            <summary>
            The exception that is thrown when an encoder overrun
            occurs.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqTooManyStartsException">
            <summary>
            The exception that is thrown when no more acquisition
            requests can be made. The limit is 32 acquisition requests. You
            must call either CompleteAcquire or Flush to remove completed
            acquisition requests from the acquisition FIFO.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqCannotCreateFifoException">
            <summary>
            The exception that is thrown when a FIFO cannot be
            created (digital or linescan cameras onl
            </summary>.")
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogAcqRegisterAccessException">
            <summary>
            The exception that is thrown when a
            register read or write access has failed (digital cameras only.)
            </summary>.")
        </member>
        <member name="T:Cognex.VisionPro.ICogKeyedCollectionEvents">
            <summary>
            An interface that comprises the events that are common to most
            editable keyed VisionPro collections.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogKeyedCollectionEvents.KeyChanging">
            <summary>
            Raised before an item's key is changed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogKeyedCollectionEvents.KeyChanged">
            <summary>
            Raised after an item's key is changed.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionInsertEventArgs">
            <summary>
            Arguments for InsertingItem and InsertedItem events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionInsertEventArgs.Index">
            <summary>
            Gets the index at which the item is inserted.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionInsertEventArgs.Value">
            <summary>
            Gets the value that is inserted.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogCollectionInsertEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Constructs a new instance of the CogCollectionInsertEventArgs class.
            </summary>
            <param name="index">Index of item inserted.</param>
            <param name="value">Value of item inserted.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionInsertEventHandler">
            <summary>
            The delegate for the InsertingItem and InsertedItem events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionRemoveEventArgs">
            <summary>
            Arguments for the RemovingItem and RemovedItem events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionRemoveEventArgs.Index">
            <summary>
            Gets the index at which the item is removed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionRemoveEventArgs.Value">
            <summary>
            Gets the value that is removed.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogCollectionRemoveEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Constructs a new instance of the CogCollectionRemoveEventArgs class.
            </summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionRemoveEventHandler">
            <summary>
            The delegate for the RemovingItem and RemovedItem events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionReplaceEventArgs">
            <summary>
            Arguments for the ReplacingItem and ReplacedItem events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionReplaceEventArgs.Index">
            <summary>
            The index at which the item is replaced.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionReplaceEventArgs.OldValue">
            <summary>
            The old value at the given index.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionReplaceEventArgs.NewValue">
            <summary>
            The new value at the given index.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogCollectionReplaceEventArgs.#ctor(System.Int32,System.Object,System.Object)">
            <summary>
            Constructs a new instance of the CogCollectionReplaceEventArgs class.
            </summary>
            <param name="index">The index at which the item is replaced.</param>
            <param name="oldValue">The old value at the given index.</param>
            <param name="newValue">The new value at the given index.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionReplaceEventHandler">
            <summary>
            Delegate for the ReplacingItem and ReplacedItem events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionMoveEventArgs">
            <summary>
            Arguments for the MovingItem and MovedItem events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionMoveEventArgs.FromIndex">
            <summary>
            The index from which the item is moved.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionMoveEventArgs.ToIndex">
            <summary>
            The index to which the item is moved.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogCollectionMoveEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of the CogCollectionMoveEventArgs class.
            </summary>
            <param name="fromIndex">The index from which the item is moved.</param>
            <param name="toIndex">The index to which the item is moved.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionMoveEventHandler">
            <summary>
            Delegate for the MovingItem and MovedItem events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionKeyChangeEventArgs">
            <summary>
            Arguments for the KeyChanging and KeyChanged events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionKeyChangeEventArgs.Index">
            <summary>
            The index at which the item's key is changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionKeyChangeEventArgs.OldKey">
            <summary>
            The old key.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogCollectionKeyChangeEventArgs.NewKey">
            <summary>
            The new key.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogCollectionKeyChangeEventArgs.#ctor(System.Int32,System.Object,System.Object)">
            <summary>
            Constructs a new instance of the CogCollectionKeyChangeEventArgs class.
            </summary>
            <param name="index">The index at which the item's key is changed.</param>
            <param name="oldKey">The old key.</param>
            <param name="newKey">The new key.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogCollectionKeyChangeEventHandler">
            <summary>
            Delegate for the KeyChanging and KeyChanged events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCancelChangingEventArgs`1">
            <summary>
            arguments for events that can be cancelled 
            with an exception.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogCancelChangingEventArgs`1.Exception">
            <summary>
            An exception to be raised by the setter that 
            caused the changing event that was canceled.
            If the exception is null no exception is thrown.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogCancelChangingEventHandler`1">
            <summary>
            Delegate for changing events that can be cancelled 
            with an exception.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogCollectionBase">
            <summary>
            Base class for a generic ordered collection of values that
            raises events whenever any change is made.
            </summary>  
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogChangedEventBase">
            <summary>
            A base class that implements the 
            <see cref="T:Cognex.VisionPro.ICogChangedEvent"/>
            interface. Objects that derive from this class will raise the Changed
            event whenever part of the object's state has changed.
            </summary>
            <remarks>Classes can most easily implement the ICogChangedEvent
            interface by deriving from this class. However in some cases
            a class may need to derive from some other base class, so the
            actual implementation of the ICogChangedEvent behavior is
            provided by the <seealso cref="T:Cognex.VisionPro.Implementation.CogChangedEventImpl"/> class that
            can be used by delegation rather than by inheritance.</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogChangedEventBase.SfNextSf">
            <summary>
            The next state flag value to be used by a derived class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventBase.SuspendChangedEvent">
            <summary>
            Temporarily suspends the raising of the Changed event. May be called
            more than once, and a corresponding call to ResumeAndRaiseChangedEvent
            must be made for each call to SuspendChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventBase.ResumeAndRaiseChangedEvent">
            <summary>
            Re-enables raising of the Changed event after SuspendChangedEvent
            has been called, and raises the Changed event if the
            ChangedEventSuspended count is reduced to zero and any changes were
            made while events were suspended. Must be called once for each call to
            SuspendChangedEvent.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the
            ChangedEventSuspended count is currently zero.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventBase.OnChanged(System.Int64)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.
            </summary>
            <param name="stateFlags">The set of state flags that correspond to the
            parts of the object that may have changed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventBase.OnChanged(Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
            This method may be called internally whenever a derived object's state 
            may have changed and the derived object expresses this change via a 
            derived CogChangedEventArgs class. 
            </summary>
            <param name="eventArgs">EventArgs to be fired with the change event.</param>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogChangedEventBase.Changed">
            <summary>
            This event is raised when one or more parts of the object's state may
            have changed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogChangedEventBase.ChangedEventSuspended">
            <summary>
            If nonzero, indicates that the raising of the Changed event has been
            suspended. This value is incremented when SuspendChangedEvent is called
            and decremented when ResumeAndRaiseChangedEvent is called.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogChangedEventBase.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as shown in the following C# code snippet: 
            if (changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogCollectionBase.SfItem">
            <summary>
            State flag for the Item (indexer) property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogCollectionBase.SfCount">
            <summary>
            State flag for the Count property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogCollectionBase.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.#ctor">
            <summary>
            Constructs a new instance of the CogCollectionBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.#ctor(Cognex.VisionPro.Implementation.CogCollectionBase)">
            <summary>
            Constructs a new instance of the CogCollectionBase class initially
            containing items cloned from the supplied instance.
            </summary>
            <param name="other">
            Collection whose items are cloned and added to the new collection.
            If the item does not support the ICloned interface, the item will be
            added.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.Clone">
            <summary>
            Creates a deep copy of the object. Must be overridden in derived classes.
            </summary>
            <returns>A deep copy of the cloned instance.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnClearing">
            <summary>
            Raises the Clearing event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnCleared">
            <summary>
            Raises the Cleared event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnInsertingItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertingItem event.
            </summary>
            <param name="index">Index to insert item being inserted.</param>
            <param name="value">Value of item being inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnInsertedItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertedItem event.
            </summary>
            <param name="index">Index at which item was inserted.</param>
            <param name="value">Value of item inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnRemovingItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovingItem event.
            </summary>
            <param name="index">Index of item being removed.</param>
            <param name="value">Value of item being removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnRemovedItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovedItem event.
            </summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacingItem event.
            </summary>
            <param name="index">Index of item being replaced.</param>
            <param name="oldValue">Value of item being replaced.</param>
            <param name="newValue">Value of item replacing oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnReplacedItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacedItem event.
            </summary>
            <param name="index">Index of item replaced.</param>
            <param name="oldValue">Value of item replaced.</param>
            <param name="newValue">Value of item that replaced oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnMovingItem(System.Int32,System.Int32)">
            <summary>
            Raises the MovingItem event.
            </summary>
            <param name="fromIndex">Index of item being moved.</param>
            <param name="toIndex">Destination index of item being moved.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.OnMovedItem(System.Int32,System.Int32)">
            <summary>
            Raises the MovedItem event.
            </summary>
            <param name="fromIndex">Source index of item moved.</param>
            <param name="toIndex">New index of item moved.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from one position to another.
            </summary>
            <param name="fromIndex">The item's original index.</param>
            <param name="toIndex">The item's new index.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">The array into which to copy.</param>
            <param name="index">The starting index at which to copy.</param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogCollectionBase.InnerList">
            <summary>
            Gets the internal ArrayList containing the list of elements.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogCollectionBase.List">
            <summary>
            Gets an the IList interface of this collection.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.Clearing">
            <summary>
            Raised before the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.Cleared">
            <summary>
            Raised after the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.ReplacingItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.ReplacedItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.MovingItem">
            <summary>
            Raised before an item is moved to a new index.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogCollectionBase.MovedItem">
            <summary>
            Raised after an item is moved to a new index.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogCollectionBase.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.ListViewer">
            <summary>
            An IList wrapper that prevents modifying the underlying collection;
            therefore, if changes are made to the underlying collection, this class
            reflects those changes.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.DictionaryViewer">
            <summary>
            An IDictionary wrapper that prevents modifying the underlying
            collection; therefore, if changes are made to the underlying 
            collection, this class reflects those changes.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1">
            <summary>
            Base class to be used for a generic, serializable ordered collection of values
            that cannot be changed after it is contsructed.  Intended to be used for 
            Tool results collections.
            </summary>  
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.#ctor">
            <summary>
            Constructs an empty CogReadOnlyCollection;
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.#ctor(`0[])">
            <summary>
            Constructs a new instance of the CogReadOnlyCollection class.
            Note that the properties of the collection elements themselves can still
            be changed via this interface.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Wraps the items list int a CogReadOnlyCollection.
            Note that changes to the original list will be reflected
            in the Read only collection.
            Note that the properties of the collection elements themselves can still
            be changed via this interface.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special serialization constructor.
            </summary>
            <param name="info">
            Data used to deserialize the collection.
            </param>
            Context to deserialize the serialization info.
            <param name="context"></param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Searches the collection for the specified object and returns the zero-based index of the first occurrence.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>The zero based index of the first occurrence of item withing the collection, if found; otherwise, -1</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="value">The object to locate in the Collection</param>
            <returns>true if value is found in the Collection, otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire Collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Collection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the Collection is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.ToArray">
            <summary>
            Calls CopyTo() and returns a new array which contains the members of this collection.
            </summary>
            <returns>A new array which contains the members of this collection.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.GetProperties(System.Attribute[])">
            <summary>
            Causes the list of items to show up in the property grid.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. OR index is greater than or equal to Count.</exception>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogReadOnlyCollection`1.Count">
            <summary>
            The number of elements contained in the Collection.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1">
            <summary>
            Base class to be used for a generic, NON-Serializable ordered collection of values
            that cannot be changed after it is contsructed.
            </summary>  
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.#ctor">
            <summary>
            Constructs an empty CogReadOnlyCollectionNonSerializable;
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.#ctor(`0[])">
            <summary>
            Constructs a new instance of the CogReadOnlyCollectionNonSerializable class.
            Note that the properties of the collection elements themselves can still
            be changed via this interface.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Wraps the items list int a CogReadOnlyCollectionNonSerializable.
            Note that changes to the original list will be reflected
            in the Read only collection.
            Note that the properties of the collection elements themselves can still
            be changed via this interface.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.IndexOf(`0)">
            <summary>
            Searches the collection for the specified object and returns the zero-based index of the first occurrence.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>The zero based index of the first occurrence of item withing the collection, if found; otherwise, -1</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="value">The object to locate in the Collection</param>
            <returns>true if value is found in the Collection, otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire Collection to a compatible one-dimensional Array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Collection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the Collection is greater than the available space from arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.ToArray">
            <summary>
            Calls CopyTo() and returns a new array which contains the members of this collection.
            </summary>
            <returns>A new array which contains the members of this collection.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.GetProperties(System.Attribute[])">
            <summary>
            Causes the list of items to show up in the property grid.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. OR index is greater than or equal to Count.</exception>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogReadOnlyCollectionNonSerializable`1.Count">
            <summary>
            The number of elements contained in the Collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyIntCollection.#ctor">
            <summary>
            Constructs an empty CogReadOnlyIntCollection;
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogReadOnlyIntCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special serialization constructor.
            </summary>
            <param name="info">
            Data used to deserialize the collection.
            </param>
            Context to deserialize the serialization info.
            <param name="context"></param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1">
            <summary>
            Base class for a generic, serializable ordered collection of values
            that raises events whenever any change is made.
            </summary>  
            <remarks>This is really just a generic version CogSerializableCollectionBase
            which allows the user to specify the type of object that is contained in the
            collection</remarks>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.SfItem">
            <summary>
            State flag for the Item (indexer) property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.SfCount">
            <summary>
            State flag for the Count property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.#ctor">
            <summary>
            Constructs a new instance of the CogSerializableCollectionBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special serialization constructor.
            </summary>
            <param name="info">
            Data used to deserialize the collection.
            </param>
            Context to deserialize the serialization info.
            <param name="context"></param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnClearing">
            <summary>
            Raises the Clearing event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnCleared">
            <summary>
            Raises the Cleared event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnInsertingItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertingItem event.
            </summary>
            <param name="index">Index at which the item will be inserted.</param>
            <param name="value">Value of item being inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnInsertedItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertedItem event.
            </summary>
            <param name="index">Index at which the item has been inserted.</param>
            <param name="value">Value of the item inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnRemovingItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovingItem event.
            </summary>
            <param name="index">Index of item being removed.</param>
            <param name="value">Value of item being removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnRemovedItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovedItem event.
            </summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacingItem event.
            </summary>
            <param name="index">Index of item being replaced.</param>
            <param name="oldValue">Value of item being replaced.</param>
            <param name="newValue">Value of item replacing oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnReplacedItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacedItem event.
            </summary>
            <param name="index">Index of item replaced.</param>
            <param name="oldValue">Value of item replaced.</param>
            <param name="newValue">Value of item that replaced oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnMovingItem(System.Int32,System.Int32)">
            <summary>
            Raises the MovingItem event.
            </summary>
            <param name="fromIndex">Index of item being moved.</param>
            <param name="toIndex">Destination index of item being moved.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.OnMovedItem(System.Int32,System.Int32)">
            <summary>
            Raises the MovedItem event.
            </summary>
            <param name="fromIndex">Source index of item moved.</param>
            <param name="toIndex">New index of item moved.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Clear">
            <summary>
            Removes all objects from the collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item from one position to another.
            </summary>
            <param name="fromIndex">The item's original index.</param>
            <param name="toIndex">The item's new index.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the value at the specified index of the collection
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Contains(`0)">
            <summary>
            Returns true if value is in the collection
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.IndexOf(`0)">
            <summary>
            Returns the index of value in the collection, or -1 if value
            is not in the collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Remove(`0)">
            <summary>
            Removes value from the collection
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Add(`0)">
            <summary>
            Adds value to the end of the collection.
            </summary>
            <param name="value">The </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to an array
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator for the collection.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Get an enumerator for the collection.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.InnerList">
            <summary>
            Gets the internal List containing the list of elements.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.List">
            <summary>
            Gets an the IList interface of this collection.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Clearing">
            <summary>
            Raised before the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Cleared">
            <summary>
            Raised after the collection is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.ReplacingItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.ReplacedItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.MovingItem">
            <summary>
            Raised before an item is moved to a new index.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.MovedItem">
            <summary>
            Raised after an item is moved to a new index.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.IsReadOnly">
            <summary>
            Returns true if this collection is ReadOnly
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.Item(System.Int32)">
            <summary>
            Returns the <typeparamref name="T"/> at <paramref name="index"/>
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1.IsFixedSize">
            <summary>
            returns false
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogTrackedItemBase">
            <summary>
            Base class for any class that will eventually implement ICogTrackedItem
            </summary>
            <remarks>
            Provides common state flags for all ICogTrackedItem implementers
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.ICogTrackingCollectionTrackedItem">
            <summary>
            Items in a CogTrackingCollection must implement this interface
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBase.SfName">
            <summary>
            Name state flag
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBase.SfID">
            <summary>
            ID state flag
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBase.SfValue">
            <summary>
            Value state flag
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBase.SfValueType">
            <summary>
            ValueType state flag
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBase.SfForceChangedEvent">
            <summary>
            ForceChangedEvent state flag
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackedItemBase.BeginForceChangedEvent(System.Int64)">
            <summary>
            Called at the begining of a section of code that must raise a changed
            event containing the given state flags.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackedItemBase.EndForceChangedEvent(System.Int64)">
            <summary>
            Called at the end of a section of code that must raise a changed
            event with the given state flags... If a changed event with these
            state flags has not been raised "naturally" since the coresponding
            call to BeginForceChangedEvents was called, this call will raise 
            the event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackedItemBase.Value">
            <summary>
            Gets or Sets the value of the terminal.  
            </summary>
            <remarks>The terminal value property provides storage for 
            arbitrary link data.</remarks>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackedItemBase.Name">
            <summary>
            Gets or Sets the name of the terminal. 
            </summary>
            <remarks>The terminal name is used to index 
            a CogToolTerminalsCollection and also provide the name for the graphical
            representation of this terminal.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if the "Name" is not a valid .NET variable name or if
            "Name" is not unique in within a ToolBlock terminal collection
            of which this terminal is a member. 
            </exception>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackedItemBase.ID">
            <summary>
            Gets the ID property of the terminal
            </summary>
            <remarks>The terminal ID holds a GUID string which 
            identifies a particular terminal object instance.
            A new GUID is created and assinged to the ID property
            when a terminal is created using the (name, value) or
            (name, valueType) constructor.
            The ID property is serialized.  
            The ID property is cloned.
            The ID property is used to index CogToolTerminalsCollection. 
            <para> Indexing by ID provides a path for terminal links (or 
            CogDataBindings) to CogToolBlock Inputs and Outputs.</para>
            <para>Serializing or cloning a terminal will result in a terminal
            with the same ID as the oringinal terminal.  This is desireable
            so that links (a.k.a. DataBindings) that use the ID property in their
            paths maitiain their links when copied or serialized.
            </para>
            <para>This means that it is possilble to create multiple terminals
            with the same ID property.  However, the ID field will always be unique
            amongst terminals within a CogToolBlockTerminalCollection.</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackedItemBase.ValueType">
            <summary>
            Gets the expected value type of the terminal
            </summary>
            <remarks>The terminal value type controls the linking behavior.
            Terminals can only be linked if their value types are compatible.
            See line 1631 of CogToolNode.cs for a better understanding of 
            what it means for types to be compatible...
            Roughly, if the destination type is "assignable" from the source type
            or the destination can be "converted" (using .NET) to the source type 
            the types are compatible.
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackedItemBase.ForceChangedEvent">
            <summary>
            Gets/Sets whether a CogToolBlock containing this terminal in its 
            Outputs collection will force a changed event with the SfValue state
            flag set every time the CogToolBlock is run (even if the value did 
            not change). Use this property when linking to a CogDataAnyalysisTool
            to prevent the CogDataAnyalysisTool from giving a reject result due 
            to the Data Analysis Channels not being updated.
            </summary>
            <remarks>
            Setting the ForceChangedEvent on terminals that are part of the 
            Inputs terminal collection has no effect.
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackedItemBase.Parent">
            <summary>
            Returns the Parent or CogTrackingCollection that is currently
            tracking this Item.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogTrackedItemBase.NameChanging">
            <summary>
            Event raised when the name of a terminal is about to change.  Gives
            a listener an oportuity to cancel the name change.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogTrackedItemBaseEx">
            CogTrackedItemBase (above) should never have had Value and ValueType as part of its interface.
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBaseEx.SfName">
            <summary>
            Name state flag
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackedItemBaseEx.SfID">
            <summary>
            ID state flag
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogTrackingCollection`1">
            <summary>
            A collection which can be indexed by name, index, or a string ID.
            The indexing by ID is designed to be semi-permenent (where name and
            index may change)to facilitate DataBinding where a constant path that 
            identifies an entry in the collection is valuable.
            </summary>
            <typeparam name="T">The type of objects that will be tracked in 
            this collection</typeparam>
            <remarks>
            Each item in the collection must have a unique name and ID.
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackingCollection`1.SfNameKeys">
            <summary>
            StateFlag indicating that the name of an Item in the collection 
            may have changed
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogTrackingCollection`1.SfIDKeys">
            <summary>
            StateFlag indicating that the ID of an Item in the collection 
            may have changed
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection's
            items.
            </summary>
            <returns>An IEnumerator that can be used to iterate 
            through the items.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.Remove(System.String)">
            <summary>
            Removes the item with the specified Name or ID from the collection.
            </summary>
            <param name="key">The Name or ID of the item to remove.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.Contains(System.String)">
            <summary>
            Returns true if the collection contains an item
            with the specified Name or ID.
            </summary>
            <param name="key">The Name or ID to locate in the collection.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.OnStartTracking(`0)">
            <summary>
            Called when a new item in the collection needs to be tracked
            </summary>
            <param name="trackedItem"></param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.OnStopTracking(`0)">
            <summary>
            Called when an item in the collection no longer needs to be tracked
            </summary>
            <param name="trackedItem"></param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.trackedItem_NameChanging(System.Object,Cognex.VisionPro.CogCancelChangingEventArgs{System.String})">
            <summary>
            Event handler called when any tracked item is about to change
            its name.  Funnels all the individual events into an event for the
            entire collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.GetProperties(System.Attribute[])">
            <summary>
            Returns a collection containing all PropertyDescriptors found in the
            standard fasion, augmented with property descriptors name and ID of 
            the tracked item that can be obtained using the string overload of the 
            item indexer.
            </summary>
            <param name="attributes">An array of type Attribute that is used as a filter.</param>
            <returns>An array of type Attribute that represents the properties for this CogTrackingCollection
            instance that match the given set of attributes.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.OnInsertingItem(System.Int32,System.Object)">
            <summary>
            Raises the InsertingItem event.
            </summary>
            <param name="index">Index at which the item will be inserted.</param>
            <param name="value">Value of item being inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.OnRemovedItem(System.Int32,System.Object)">
            <summary>
            Raises the RemovedItem event.
            </summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
            Raises the ReplacingItem event.
            </summary>
            <param name="index">Index of item being replaced.</param>
            <param name="oldValue">Value of item being replaced.</param>
            <param name="newValue">Value of item replacing oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTrackingCollection`1.OnClearing">
            <summary>
            Raises the Clearing event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogTrackingCollection`1.Item(System.String)">
            <summary>
            Gets the <typeparamref name="T"/> with the specified Name or ID.
            </summary>
            <remarks>
            Read only because a setting a value at an index would cause the
            item to imeadiatly re-index itself.
            </remarks>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogTrackingCollection`1.TrackedItemNameChanging">
            <summary>
            Event raised when a tracked item is about to change its name.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogHashtable.SuspendChangedEvent">
            <summary>
            Temporarily suspends the raising of the Changed event. May be called
            more than once, and a corresponding call to ResumeAndRaiseChangedEvent
            must be made for each call to SuspendChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogHashtable.ResumeAndRaiseChangedEvent">
            <summary>
            Re-enables raising of the Changed event after SuspendChangedEvent
            has been called, and raises the Changed event if the
            ChangedEventSuspended count is reduced to zero and any changes were
            made while events were suspended. Must be called once for each call to
            SuspendChangedEvent.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the
            ChangedEventSuspended count is currently zero.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogHashtable.OnChanged(System.Int64)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.
            </summary>
            <param name="stateFlags">The set of state flags that correspond to the
            parts of the object that may have changed.</param>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.Internal.CogHashtable.Changed">
            <summary>
            This event is raised when one or more parts of the object's state may
            have changed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogHashtable.ChangedEventSuspended">
            <summary>
            If nonzero, indicates that the raising of the Changed event has been
            suspended. This value is incremented when SuspendChangedEvent is called
            and decremented when ResumeAndRaiseChangedEvent is called.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogHashtable.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as in: 
            if(changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>      
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.IsValidVariableName(System.String,System.Boolean)">
            <summary>
            Validates a .NET variable name
            </summary>
            <param name="variableName">A variable name to validate</param>
            <param name="allowEscapedKeywords">Alllow escaped C# or VB.NET keywords</param>
            <returns>true if <paramref name="variableName"/> is a valid 
            .NET varaible name, otherwise false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.IsValidVariableName(System.String)">
            <summary>
            Validates a .NET variable name
            </summary>
            <param name="variableName">A variable name to validate</param>
            <returns>true if <paramref name="variableName"/> is a valid 
            .NET varaible name, otherwise false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.IsReservedKeyWord(System.String)">
            <summary>
            Returns true if <param name="possibleKeyword"/> is a 
            C# or VB.Net reserved keyword
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.IsCSharpKeyWord(System.String)">
            <summary>
            Returns true if the value is C# reserved keyword
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.IsVBKeyWord(System.String)">
            <summary>
            Returns true if the value is VB.Net reserved keyword
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.MakeVariableName(System.String)">
            <summary>
            Takes a string that represents a CogTerminal name and does the
            best it can to create a valid .NET variable name.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.AutoGenerated">
            <summary>
            Indicates if this script contians auto-generated adapter or helper classes
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.UserSource">
            <summary>
            Returns the user editable part of the script
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.AutoGeneratedSource">
            <summary>
             Returns the protected auto-generated part of the source.
             </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogScriptSupport.AutoRegionFlag">
            <summary>
            Returns the language appropriatte auto-generated region header tag
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.ScriptTempFileManager">
            <summary>
            The ScriptTempFileManager is used as a singleton instance
            to keep track of the temporarily created files during the execution of QuickBuild or custom application that involves scripting and debug mode
            On app exit this class takes care of deleting the temporarily files created during the execution.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogReferencedAssemblyPathConstants">
            <summary>
            Constants that specify the location of a referenced assembly.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.Internal.CogReferencedAssemblyPathConstants.System">
            <summary>
            The referenced assembly is supplied by the .NET Framework.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.Internal.CogReferencedAssemblyPathConstants.VisionPro">
            <summary>
            The referenced assembly is supplied by VisionPro.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.Internal.CogReferencedAssemblyPathConstants.Custom">
            <summary>
            The referenced assembly is located using a custom directory path
            that may contain environment variables.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly">
            <summary>
            This class holds a single immutable assembly reference (to be used
            when compiling a script).
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.EqualsSystemPath(System.String)">
            <summary>
            Returns true if the given path specifies the directory containing
            the .NET Framework assemblies.  The framework version is the 
            same as the executing version of the CLR.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.EqualsVisionProPath(System.String)">
            <summary>
            Returns true if the given path specifies the directory 
            containing the Cognex VisionPro assemblies.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.RegularizePath(System.String)">
            <summary>
            Returns a copy of the given path that contains no forward slashes,
            no leading or trailing spaces, and no trailing backslashes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.IsValidAssembly(System.String)">
            <summary>
            Returns true if the given (expanded) full path name represents a
            valid, existing, .NET assembly.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.LocationToDir(System.String)">
            <summary>
            Get the VisionPro "assembly path" from the 
            actual assembly location. 
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.LocationToName(System.String)">
            <summary>
            Get the VisionPro "assembly name" from the 
            actual assembly location. 
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.SystemPath">
            <summary>
            Gets the directory containing the .NET Framework assemblies.
            The framework version is the same as the executing version of the CLR.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogReferencedAssembly.VisionProPath">
            <summary>
            Gets the directory containing the Cognex VisionPro assemblies.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogStatisticsSimple">
            <summary>
            The CogStatisticsSimple is intended to represent an immutable set of simple 
            statistics that might typically be part of some result object. 
            At construction time the user provides a count plus a minimum, maximum, 
            sum, and sum-of-squares value. 
            The object may then be queried for these values plus a handful of 
            derived values like mean, variance, and standard deviation. 
            This class derives from CogSerializableObjectBase, 
            so it implements VisionPro style serialization.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogStatisticsSimple.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a CogStatisticsSimple object with the supplied values.
            </summary>
            <param name="valueCount">
            Int32. The number of samples. Must be greater than or equal to one.
            </param>
            <param name="valueMin">
            double. The minimum sample value. Must be less than or equal to valueMax.
            </param>
            <param name="valueMax">
            double. The maximum sample value. Must be greater than or equal to valueMin.
            </param>
            <param name="valueSum">
            double. The sum of the sample values.
            </param>
            <param name="valueSumSq">
            double. The sum of the squares of the sample values. 
            Must be greater than or equal to zero.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If valueCount is less than one.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If valueSumSq is less than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If valueMin is greater than valueMax.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogStatisticsSimple.#ctor(Cognex.VisionPro.CogStatisticsSimple)">
            <summary>
            Copy constructs a CogStatisticsSimple object. This is a deep copy.
            </summary>
            <param name="other">
            CogStatisticsSimple. The object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the input argument is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogStatisticsSimple.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogStatisticsSimple object
            </summary>
            <param name="info">
            SerializationInfo. The standard serialization info argument.
            </param>
            <param name="context">
            StreamingContext. The standard streaming context argument.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.Count">
            <summary>
            The number of samples that were processed to produce this result.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.Min">
            <summary>
            The minimum sample value.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.Max">
            <summary>
            The maximum sample value.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.Sum">
            <summary>
            The sum of all sample values.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.SumSq">
            <summary>
            The sum of the squares of all sample values.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.Mean">
            <summary>
             The mean or average of all sample values.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.RMS">
            <summary>
            The root mean square of all sample values.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.Variance">
            <summary>
            The variance of all sample values.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogStatisticsSimple.StdDev">
            <summary>
            The standard deviation of all sample values.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogFeaturePosition">
            <summary>
            This class holds one feature position and a bool value indicates
            whether this point is valid.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeaturePosition.SfX">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by X
            may have been changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeaturePosition.SfY">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by Y
            may have been changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeaturePosition.SfValid">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by Valid
            may have been changed.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePosition.#ctor">
            <summary>
            Construct a default CogFeaturePosition: X = 0.0, Y = 0.0, Valid = false.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePosition.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Construct this CogFeaturePosition with the supplied components.
            </summary>
            <param name="X">
            The x value of the image position for this feature.
            </param>
            <param name="Y">
            The y value of the image position for this feature.
            </param>
            <param name="valid">
            The valid flag for this feature.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePosition.#ctor(Cognex.VisionPro.CogFeaturePosition)">
            <summary>
            Construct this object by making a deep copy of the supplied object.
            </summary>
            <param name="other">
            The CogFeaturePosition object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePosition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeaturePosition object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.CogFeaturePosition.X">
            <summary>
            Gets/sets the x value of feature position.
            </summary>
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CogFeaturePosition.Y">
            <summary>
            Gets/sets the y value of feature position.
            </summary>
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CogFeaturePosition.Valid">
            <summary>
            Gets/sets the validation value.
            </summary>    
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="T:Cognex.VisionPro.CogFeaturePositions">
            <summary>
            This class holds the feature positions found from one image.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositions.#ctor">
            <summary>
            Constructs a default (empty) CogFeaturePositions.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositions.#ctor(Cognex.VisionPro.CogFeaturePositions)">
            <summary>
            Copy constructs a CogFeaturePositions object. This is a deep
            copy.
            </summary>
            <param name="other">
            The CogFeaturePositions object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositions.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeaturePositions object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.CogFeaturePositionsMCameras">
            <summary>
            This class holds the feature positions found from multiple cameras at one pose.
            <para>
            CogFeaturePositionsMCameras[cameraIndex] is a <see cref="T:Cognex.VisionPro.CogFeaturePositions"/> holding the feature positions
            for camera "cameraIndex" at one pose.
            </para>
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositionsMCameras.#ctor">
            <summary>
            Constructs a default (empty) CogFeaturePositionsMCameras.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositionsMCameras.#ctor(Cognex.VisionPro.CogFeaturePositionsMCameras)">
            <summary>
            Copy constructs a CogFeaturePositionsMCameras object. This is a deep
            copy.
            </summary>
            <param name="other">
            The CogFeaturePositionsMCameras object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositionsMCameras.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeaturePositionsMCameras object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses">
            <summary>
            This class holds the feature positions found from multiple cameras at multiple poses.
            <para>
            CogFeaturePositionsMCamerasNPoses[poseIndex][cameraIndex] is a <see cref="T:Cognex.VisionPro.CogFeaturePositions"/> holding the feature correspondence
            for camera "cameraIndex" at  pose "poseIndex".
            </para>
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses.#ctor">
            <summary>
            Constructs a default (empty) CogFeaturePositionsMCamerasNPoses.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses.#ctor(Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses)">
            <summary>
            Copy constructs a CogFeaturePositionsMCamerasNPoses object. This is a deep
            copy.
            </summary>
            <param name="other">
            The CogFeaturePositionsMCamerasNPoses object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeaturePositionsMCamerasNPoses.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeaturePositionsMCamerasNPoses object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogParseGenericAQN">
            <summary>
            This class parses a .NET Assembly Qualified Name (AQN).
            Though it should handle any properly formatted AQN,
            it is designed specifically to handle the parseing of 
            AQN which contains generic type information.  
            
            This class was created for use by the VisionPro 
            serialization mechanism to enable deserialization of
            generic types that is consistent with normal 
            VisionPro deserialization (Serialized VisionPro
            objects often wish to bind to the latest version
            of an assembly available on deserialization).  
            </summary>
            <remarks>
            Most of the information need to construct this parser was taken from 
            here:
              http://msdn.microsoft.com/en-us/library/w3f99sx1.aspx
            and here:
              http://msdn.microsoft.com/en-us/library/yfsftwz6(VS.80).aspx
            
            here are some AQN examples:
            
            A generic type with one type argument
              "MyGenericType`1[MyType]"
            A generic type with two type arguments
              "MyGenericType`2[MyType,AnotherType]"
            A generic type with two assembly-qualified type arguments
              "MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]"
            An assembly-qualified generic type with an assembly-qualified type argument
              "MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly"
            A generic type whose type argument is a generic type with two type arguments
              "MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]"
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogParseGenericAQN.#ctor(System.String)">
            <summary>
            Creates a new CogParseGenericAQN
            </summary>
            <param name="assemblyQualifiedTypeName">The AQN to parse</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogParseGenericAQN.ParseAQN(System.String)">
            <summary>
            Parses the given AQN into its pieces
            </summary>
            <param name="aQN">the AQN to parse</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogParseGenericAQN.GetAssemblyName(System.String)">
            <summary>
            Returns the Assembly name from an AQN
            </summary>
            <param name="aQN">the AQN from which to retreive the Assembly Name</param>
            <returns>the Assembly Name</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogParseGenericAQN.GetTypeName(System.String)">
            <summary>
            Returns the Type Name part of an AQN
            </summary>
            <param name="aQN">the AQN from which to retireve the type name</param>
            <returns>the Type Name</returns>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogParseGenericAQN.TypeName">
            <summary>
            The gereric type name without any generic type parameters that
            may have been present in the original AQN
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogParseGenericAQN.NumParams">
            <summary>
            The number of generic parameters in the parsed AQN
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogParseGenericAQN.GenericParams">
            <summary>
            The individual AQNs of the contained generic type parameters
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogChangedEventArgs">
            <summary>
            Arguments of the Changed event.
            For more information see the topic <a href="49612dc7-bb16-412e-a110-52a2a3d49d0d.htm">About Events in VisionPro</a>.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogChangedEventArgs.StateFlags">
            <summary>
            Gets the state flags associated with the Changed event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogChangedEventArgs.#ctor(System.Int64)">
            <summary>
            Constructs a new instance of the CogChangedEventArgs class.
            </summary>
            <param name="stateFlags">
            The state flags associated with the Changed event.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogChangedEventArgs.GetStateFlagNames(System.Object)">
            <summary>
            Creates a string containing the state flags that
            correspond to the members that may have changed.
            </summary>
            <param name="sender">
            The object that raised this Changed event.
            </param>
            <returns>
            A string containing the state flag names separated by the | symbol.
            </returns>
        </member>
        <member name="M:Cognex.VisionPro.CogChangedEventArgs.GetStateFlagNames(System.Type,System.Int64)">
            <summary>
            Given an object type and a set of state flags corresponding to
            the StateFlags argument of a Changed event, creates a string
            containing the state flags that correspond to the properties
            that may have changed.
            </summary>
            <param name="senderType">
            The type of object that raised a Changed event.
            </param>
            <param name="stateFlags">
            The StateFlags argument of a Changed event.
            </param>
            <returns>
            A string containing the state flag names separated by the | symbol.
            </returns>
        </member>
        <member name="M:Cognex.VisionPro.StateFlagsCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the StateFlagsCollection class with state
            flags of a given type.
            </summary>
            <param name="objType">
            The type whose state flags are extracted.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.StateFlagsCollection.Item(System.String)">
            <summary>
            Gets the flag value of the given state name.
            </summary>
            <param name="statename">
            The statename whose flag value is queried.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.StateFlagsCollection.Names">
            <summary>
            Gets the list of state names.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.StateFlagsCollection.Flags">
            <summary>
            Gets the list of flag values.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogChangedEventHandler">
            <summary>
            A delegate for the Changed event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogChangedEventImpl">
            <summary>
            Implements the behavior of the ICogChangedEvent interface for classes
            that cannot derive directly from CogChangedEventBase.
            </summary>
            <remarks>
            A class can implement ICogChangedEvent by creating a private instance of
            CogChangedEventImpl and delegating each function of ICogChangedEvent to
            the corresponding function of CogChangedEventImpl.
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventImpl.SuspendChangedEvent">
            <summary>
            Implements the SuspendChangedEvent member of the ICogChangedEvent
            interface.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventImpl.ResumeAndRaiseChangedEvent(System.Object)">
            <summary>
            Implements the ResumeAndRaiseChangedEvent member of the
            ICogChangedEvent interface.
            </summary>
            <param name="sender">The object that implements the ICogChangedEvent
            interface.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventImpl.OnChanged(System.Object,System.Int64)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.
            </summary>
            <param name="sender">The object that implements the
            ICogChangedEvent interface.</param>
            <param name="stateFlags">The set of state flags that correspond to the
            parts of the object that may have changed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventImpl.OnChanged(System.Object,Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.  This overload is useful when firing an EventArgs class
            that is derived from CogChangedEventArgs.
            </summary>
            <param name="sender">The object that implements the
            ICogChangedEvent interface.</param>
            <param name="eventArgs">The CogChangedEventArgs-derived instance that should be 
            fired with the Changed event.</param>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogChangedEventImpl.Changed">
            <summary>
            Implements the Changed member of the ICogChangedEvent interface.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogChangedEventImpl.ChangedEventSuspended">
            <summary>
            Implements the ChangedEventSuspended member of the ICogChangedEvent
            interface.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogChangedEventImpl.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as shown in the following C# code snippet: 
            if (changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogChangedEventComponentBase">
            <summary>
            Base class for a Component that implements the 
            <see cref="T:Cognex.VisionPro.ICogChangedEvent"/>
            interface. Objects that derive from this class will raise the Changed
            event whenever part of the object's state has changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.SfNextSf">
            <summary>
            The next state flag value to be used by a derived class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.SuspendChangedEvent">
            <summary>
            Temporarily suspends the raising of the Changed event. May be called
            more than once, and a corresponding call to ResumeAndRaiseChangedEvent
            must be made for each call to SuspendChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.ResumeAndRaiseChangedEvent">
            <summary>
            Re-enables raising of the Changed event after SuspendChangedEvent
            has been called, and raises the Changed event if the
            ChangedEventSuspended count is reduced to zero and any changes were
            made while events were suspended. Must be called once for each call to
            SuspendChangedEvent.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the
            ChangedEventSuspended count is currently zero.</exception>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.OnChanged(System.Int64)">
            <summary>
            This method should be called internally whenever the object's state may
            have changed.
            </summary>
            <param name="stateFlags">The set of state flags that correspond to the
            parts of the object that may have changed.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.OnChanged(Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
            This method may be called internally whenever a derived object's state 
            may have changed and the derived object expresses this change via a 
            derived CogChangedEventArgs class. 
            </summary>
            <param name="eventArgs">EventArgs to be fired with the change event.</param>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.Changed">
            <summary>
            This event is raised when one or more parts of the object's state may
            have changed.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.ChangedEventSuspended">
            <summary>
            If nonzero, indicates that the raising of the Changed event has been
            suspended. This value is incremented when SuspendChangedEvent is called
            and decremented when ResumeAndRaiseChangedEvent is called.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogChangedEventComponentBase.StateFlags">
            <summary>
            Returns the complete set of state flags supported on this object.  The 
            flags may be indexed by name as shown in the following C# code snippet: 
            if (changedObject.StateFlags["Color"] &amp; eventArgs.StateFlags) { ... }
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogChangedEventSuspender">
            <summary>
            This class is intended to be used in cases where paired calls to
            ChangedEventSuspended and ResumeAndRaiseChangedEvent are needed.  Class
            users will instantiate the class in a C# using statement.  The
            constructor will automatically call ChangedEventSuspended; Dispose will
            call ResumeAndRaiseChangedEvent.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.#ctor">
            <summary>
            Constructs a new instance of the CogChangedEventFunnel class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.#ctor(Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel)">
            <summary>
            Constructs a new instance of the CogChangedEventFunnel class.
            </summary>
            <param name="other">A CogChangedEventFunnel to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CogChangedEventFunnel class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.Clone">
            <summary>
            Creates a deep copy of the tool collection.
            </summary>
            <returns>A deep copy of the cloned tool collection.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the CogChangedEventFunnel's
            elements.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the CogChangedEventFunnel's ICogChangedEvent objects.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.Add(Cognex.VisionPro.ICogChangedEvent)">
            <summary>
            Adds an item to the CogChangedEventFunnel.
            </summary>
            <param name="value">The ICogChangedEvent to add to the CogChangedEventFunnel.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.Insert(System.Int32,Cognex.VisionPro.ICogChangedEvent)">
            <summary>
            Inserts an ICogChangedEvent into the CogChangedEventFunnel at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The ICogChangedEvent to insert into the CogChangedEventFunnel.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.Remove(Cognex.VisionPro.ICogChangedEvent)">
            <summary>
            Removes the first occurrence of a specific ICogChangedEvent from the 
            CogChangedEventFunnel.
            </summary>
            <param name="value">The ICogChangedEvent to remove from the CogChangedEventFunnel.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.Contains(Cognex.VisionPro.ICogChangedEvent)">
            <summary>
            Determines whether the CogChangedEventFunnel contains a specific ICogChangedEvent.
            </summary>
            <param name="value">The ICogChangedEvent to locate in the CogChangedEventFunnel.</param>
            <returns>True if the CogChangedEventFunnel contains value; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.IndexOf(Cognex.VisionPro.ICogChangedEvent)">
            <summary>
            Determines the index of a specific ICogChangedEvent in the CogChangedEventFunnel.
            </summary>
            <param name="value">The ICogChangedEvent to locate in the CogChangedEventFunnel.</param>
            <returns>The index of value if found in the CogChangedEventFunnel; otherwise, -1.</returns>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.Internal.CogChangedEventFunnel.Item(System.Int32)">
            <summary>
            Gets or sets the ICogChangedEvent at the specified index.  In C#, this property
            is the indexer for the CogChangedEventFunnel class.
            </summary>
            <param name="index">The zero-based index of the ICogChangedEvent to get or set.</param>
            <value>The ICogChangedEvent at the specified index.</value>
        </member>
        <member name="T:Cognex.VisionPro.CogAngleTypeBase">
            <exclude />
        </member>
        <member name="T:Cognex.VisionPro.CogAngleTypeBaseTypeConverter">
            <exclude />
        </member>
        <member name="T:Cognex.VisionPro.CogRadian">
            <exclude />
        </member>
        <member name="T:Cognex.VisionPro.CogRadianTypeConverter">
            <exclude />
        </member>
        <member name="T:Cognex.VisionPro.CogDegree">
            <exclude />
        </member>
        <member name="T:Cognex.VisionPro.CogDegreeTypeConverter">
            <exclude />
        </member>
        <member name="T:Cognex.VisionPro.ICogDictionaryEvents">
            <summary>
            An interface that comprises the events that are common to most
            VisionPro dictionary classes.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.Clearing">
            <summary>
            Raised before the dictionary is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.Cleared">
            <summary>
            Raised after the dictionary is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.ReplacingItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.ICogDictionaryEvents.ReplacedItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionaryInsertEventArgs">
            <summary>
            This class is passed to ICogDictionaryEvents InsertingItem and 
            InsertedItem event handlers.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDictionaryInsertEventArgs.Key">
            <summary>
            Key of item inserted.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDictionaryInsertEventArgs.Value">
            <summary>
            Value of item inserted.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDictionaryInsertEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Constructs a new instance of the CogDictionaryInsertEventArgs class.
            </summary>
            <param name="key">Key of insert item.</param>
            <param name="value">Value of insert item.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionaryInsertEventHandler">
            <summary>
            Delegate for registering ICogDictionaryEvents InsertingItem and 
            InsertedItem event handlers.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionaryRemoveEventArgs">
            <summary>
            This class is passed to ICogDictionaryEvents RemovingItem and RemoveItem
            event handlers.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDictionaryRemoveEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Constructs a new instance of the CogDictionaryRemoveEventArgs class.
            </summary>
            <param name="key">Key of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionaryRemoveEventHandler">
            <summary>
            Delegate for registering ICogDictionaryEvents RemovingItem and 
            InsertedItem event handlers.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionaryReplaceEventArgs">
            <summary>
            This class is passed to ICogDictionaryEvents ReplacingItem and 
            ReplacedItem event handlers.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDictionaryReplaceEventArgs.Key">
            <summary>
            Key of item replaced.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDictionaryReplaceEventArgs.OldValue">
            <summary>
            Value of replaced item.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogDictionaryReplaceEventArgs.NewValue">
            <summary>
            Value of replacing item.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDictionaryReplaceEventArgs.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Constructs a new instance of the CogDictionaryReplaceEventArgs class.
            </summary>
            <param name="key">Key of item replaced.</param>
            <param name="oldValue">Value of replaced item.</param>
            <param name="newValue">Value of replacing item.</param>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionaryReplaceEventHandler">
            <summary>
            Delegate for regisering ICogDictionaryEvents ReplacingItem and 
            ReplacedItem event handlers.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase">
            <summary>
            Base class for a generic non-ordered collection of key-and-value pairs that
            raises events whenever any change is made.
            </summary>  
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.SfItem">
            <summary>
            State flag for the Item (indexer) property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.SfCount">
            <summary>
            State flag for the Count property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.#ctor">
            <summary>
            Constructs a new instance of the CogSerializableDictionaryBase class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.#ctor(Cognex.VisionPro.Implementation.CogSerializableDictionaryBase)">
            <summary>
            Constructs a new instance of the CogSerializableDictionaryBase class.
            </summary>
            <param name="other">A CogSerializableDictionaryBase to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CogSerializableDictionaryBase class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Clone">
            <summary>
            Creates a deep copy of the object. Must be overridden in derived classes.
            </summary>
            <returns>A deep copy of the cloned instance.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the dictionary to an array.
            </summary>
            <param name="array">The array into which to copy.</param>
            <param name="index">The starting index at which to copy.</param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.InnerHashtable">
            <summary>
            Gets a Hashtable containg the elements.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Dictionary">
            <summary>
            Gets the IDictionary interface of this instance.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Clearing">
            <summary>
            Raised before the dictionary is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Cleared">
            <summary>
            Raised after the dictionary is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.ReplacedItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.ReplacingItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Count">
            <summary>
            Returns the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Values">
            <summary>
            Gets a collection of all values in the dictionary.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase.Keys">
            <summary>
            Gets a collection of all keys in the dictionary.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2">
            <summary>
            Base class for a generic non-ordered collection of
            key-and-value pairs that raises events whenever
            any change is made.
            </summary>  
            <remarks>
            This is largely a generic version of CogSerializableDictionaryBase
            which allows the user to specify the type of the key and the
            type of the associated value contained in the dictionary.
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.SfItem">
            <summary>
            State flag for the Item (indexer) property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.SfCount">
            <summary>
            State flag for the Count property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.SfNextSf">
            <summary>
            Next state flag to be used in derived classes.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.#ctor">
            <summary>
            Constructs a new instance of the CogSerializableDictionaryBase
            class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.#ctor(Cognex.VisionPro.Implementation.CogSerializableDictionaryBase{`0,`1})">
            <summary>
            Constructs a copy of the supplied CogSerializableDictionaryBase.
            If the values are ref types that implement ICloneable,
            this will be a deep copy.
            </summary>
            <param name="other">CogSerializableDictionaryBase
            to be copied.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CogSerializableDictionaryBase serialization constructor.
            </summary>
            <param name="info">Standard SerializationInfo parameter.</param>
            <param name="ctxt">Standard StreamingContext parameter.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="obj">The object that initiated the callback.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnClearing">
            <summary>
            Raises the Clearing event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnCleared">
            <summary>
            Raises the Cleared event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnInsertingItem(System.Object,System.Object)">
            <summary>
            Raises the Inserting event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnInsertedItem(System.Object,System.Object)">
            <summary>
            Raises the Inserted event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnRemovingItem(System.Object,System.Object)">
            <summary>
            Raises the Removing event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnRemovedItem(System.Object,System.Object)">
            <summary>
            Raises the Removed event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnReplacingItem(System.Object,System.Object,System.Object)">
            <summary>
            Raises the Replacing event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.OnReplacedItem(System.Object,System.Object,System.Object)">
            <summary>
            Raises the Replaced event.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Add(`0,`1)">
            <summary>
            Add an entry to this dictionary with the supplied
            key and value.
            </summary>
            <param name="key">The key for this new entry.</param>
            <param name="value">The value for this new entry.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add the supplied entry to this dictionary.
            </summary>
            <param name="item">The entry to add to this dictionary.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Remove(`0)">
            <summary>
            Remove the specified entry from this dictionary.
            Returns true if the specified entry is successfully removed.
            </summary>
            <param name="key">
            The key specifying the entry to be removed.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove the specified entry from this dictionary.
            Returns true if the specified entry is successfully removed.
            </summary>
            <param name="item">
            The item to be removed.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.ContainsKey(`0)">
            <summary>
            Returns true if the specified key is found in this dictionary,
            otherwise returns false.
            </summary>
            <param name="key">
            The key of interest.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.ContainsValue(`1)">
            <summary>
            Returns true if the specified value is found in this dictionary,
            otherwise returns false.
            </summary>
            <param name="value">
            The value of interest.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns true if the key of the supplied item is found
            in this dictionary, otherwise returns false.
            </summary>
            <param name="item">
            Search for a key matching the key in this key value pair.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Clear">
            <summary>
            Remove all entries from this dictionary.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            If this dictionary contains the specified key,
            output the associated value. Return true if
            the key was found, otherwise return false.
            </summary>
            <param name="key">
            Search for this key.
            </param>
            <param name="value">
            The found value.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.GetEnumerator">
            <summary>
            Get the specialized enumerator for this dictionary.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an IEnumerator for this dictionary.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy the key value pairs in this dictionary
            to the supplied array of key value pairs,
            starting to write at the supplied array index.
            </summary>
            <param name="array">
            The destination array.
            </param>
            <param name="index">
            The destination array index at which writing
            should begin.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the key value pairs in this dictionary
            to the supplied array, starting to write
            at the supplied array index.
            </summary>
            <param name="array">
            The destination array.
            </param>
            <param name="index">
            The destination array index at which writing
            should begin.
            </param>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Clearing">
            <summary>
            Raised before the dictionary is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Cleared">
            <summary>
            Raised after the dictionary is cleared.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.InsertingItem">
            <summary>
            Raised before an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.InsertedItem">
            <summary>
            Raised after an item is inserted.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.RemovingItem">
            <summary>
            Raised before an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.RemovedItem">
            <summary>
            Raised after an item is removed.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.ReplacedItem">
            <summary>
            Raised before an item is replaced.
            </summary>
        </member>
        <member name="E:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.ReplacingItem">
            <summary>
            Raised after an item is replaced.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.InnerDictionary">
            <summary>
            Gets the internal Dictionary containing the set of
            key value pairs.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Dictionary">
            <summary>
            Gets the generic IDictionary interface
            of this object.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Count">
            <summary>
            Gets the number of key value pairs in this dictionary.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Values">
            <summary>
            Gets a collection of the values in this dictionary.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Keys">
            <summary>
            Gets a collection of the keys in this dictionary.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.Item(`0)">
            <summary>
            The indexer for this dictionary.
            </summary>
            <param name="key">
            The key of the desired dictionary entry.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogSerializableDictionaryBase`2.IsReadOnly">
            <summary>
            Get whether or not this dictionary is read only.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogDictionary">
            <summary>
            A container that stores a non-ordered collection of key-and-value pairs, and
            raises events whenever any change is made.
            </summary>  
        </member>
        <member name="M:Cognex.VisionPro.CogDictionary.#ctor">
            <summary>
            Constructs a new instance of the CogDictionary class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogDictionary.#ctor(Cognex.VisionPro.CogDictionary)">
            <summary>
            Constructs a new instance of the CogDictionary class.
            </summary>
            <param name="other">A CogDictionary to copy.</param>
        </member>
        <member name="M:Cognex.VisionPro.CogDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CogDictionary class.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            The contextual information about the SerializationInfo.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogDictionary.Clone">
            <summary>
            Creates a deep copy of the dictionary.
            </summary>
            <returns>A deep copy of the cloned dictionary.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogToolOwnsTerminalsAttribute">
            <summary>
            CogToolOwnsTerminalsAttribute is applied to Classes
            which implement ICogTool.
            This Attribute indicates that the Tool itself dictactes which 
            input and output terminals are exposed.
            Used by CogToolNode to prevent automatic
            addition of inapporpriate terminals and databindings
            to CogResultsAnalysisTools, CogToolGroups, CogToolBlocks
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            <summary>
            Thrown by Comm Card Precision I/O interfaces to indicate attempted use of 
            and invalid I/O bank.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogPrioInvalidLineException">
            <summary>
            Thrown by Comm Card Precision I/O interfaces to indicate attempted use of 
            and invalid I/O line.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogHardwareInUseException">
            <summary>
            Thrown by Comm Card interfaces to indicate attempted use of hardware that is 
            already in use by another process.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogIncompatibleFirmwareException">
            <summary>
            Thrown by Comm Card interfaces when the host system detects an incompatible
            version of firmware running on the card.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogScheduledEventOverflowException">
            <summary>
            Thrown by Comm Card Precision I/O to indicate the maximum 
            number of scheduled events has been reached.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogScheduledEventTooLateException">
            <summary>
            Thrown by Comm Card Precision I/O to indicate an event could
            not be scheduled because it would have occurred in the past.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCommCardDeviceConnectionException">
            <summary>
            Thrown by Comm Card interfaces to indicate the connection to the
             Comm Card from the host PC has been lost or corrupted.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioBankConstants">
            <summary>
            Known I/O banks
            </summary>
            <remarks>
            <!-- No matching elements were found for the following include tag --><include file="doc_comments.xml" path="root/IOLineRemarks/*"/>
            </remarks>    
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioBankConstants.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioBankConstants.InputBank0">
            <summary>
            General Purpose Input Bank 0
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioBankConstants.OutputBank0">
            <summary>
            General Purpose Output Bank 0
            </summary>   
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioBankConstants.DS1000OutputBank0">
            <summary>
            Special DS1000 Output Bank (only supported on Communication Card 24A, Cognex Vision Controller).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioBankTypeConstants">
            <summary>
            The types of precision I/O banks
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioLineTransitionConstants">
            <summary>
            Types of I/O line edge transitions.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioLineTransitionConstants.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioLineTransitionConstants.LowToHigh">
            <summary>
            The rising edge
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioLineTransitionConstants.HighToLow">
            <summary>
            The falling edge.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioLineTransitionConstants.Any">
            <summary>
            Either a rising edge or a falling edge.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioOutputLineValueConstants">
            <summary>
            Actions that may be applied to an output line.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioOutputLineValueConstants.SetLow">
            <summary>
            Set the output line low
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioOutputLineValueConstants.SetHigh">
            <summary>
            Set the output line high
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioOutputLineValueConstants.Toggle">
            <summary>
            Set the output line high if it is currently low.
            Set the output line low if it is currently high.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioDelayTypeConstants">
            <summary>
            Delay types that may be applied to an output line action.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioDelayTypeConstants.None">
            <summary>
            The output action is not delayed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioDelayTypeConstants.Encoder">
            <summary>
            Delay the output action by a user specified amount of encoder ticks.
            <para>
            Current firmware does not support encoder based delays.
            </para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioDelayTypeConstants.Time">
            <summary>
            Delay the output action by a user specified amount of time.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioDelayTypeConstants.EventCount">
            <summary>
            Not Supported
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants">
            <summary>
            Scheduling options for registered I/O events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.Immediate">
            <summary>
            The I/O event is scheduled to occur 
            as soon as possible.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.EncoderAbsolute">
            <summary>
            The I/O event is scheduled to occur 
            at user specified absolute encoder position.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.EncoderRelative">
            <summary>
            The I/O event is scheduled to occur 
            at user specified encoder position relative
            to the current encoder position.
            Note this method may be less accurate than specifying
            an absolute encoder position because host OS
            latencies are involved when calculating the current
            encoder position.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.TimeAbsolute">
            <summary>
            The I/O event is scheduled to occur 
            at a user specified absolute time stamp.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.TimeRelative">
            <summary>
            The I/O event is scheduled to occur 
            at a user specified time stamp relative
            to the current time stamp counter position.
            Note this method may be less accurate than specifying
            an absolute time stamp position because host OS
            latencies are involved when calculating the current
            time stamp.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.EventCounterAbsolute">
            <summary>
            Not Supported
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventScheduleTypeConstants.EventCounterRelative">
            <summary>
            Not Supported
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventBase">
            <summary>
            Base class for the CogPrioEvent class.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.Init(System.Double,System.Collections.Generic.Dictionary{Cognex.VisionPro.Comm.CogPrioBankConstants,System.Int32})">
            <summary>
            Initialize the board info class with values read from the comm card.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.GetBankType(Cognex.VisionPro.Comm.CogPrioBankConstants)">
            <summary>
            Returns the type (input, output, etc...) of a given I/O bank
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.GetNumLines(Cognex.VisionPro.Comm.CogPrioBankConstants)">
            <summary>
            Returns the number of I/O lines the hardware supports in the given bank.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.IsBankSupported(Cognex.VisionPro.Comm.CogPrioBankConstants,System.Boolean)">
            <summary>
            Returns true if the hardware supports the given line, otherwise returns false.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.IsLineSupported(Cognex.VisionPro.Comm.CogPrioBankConstants,System.Int32,System.Boolean)">
            <summary>
            Returns true if the hardware supports the given line, otherwise returns false.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.GetBanks(Cognex.VisionPro.Comm.CogPrioBankTypeConstants)">
            <summary>
            Returns an array of the supported I/O banks of the current hardware.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioBoardInfo.ClockFrequency">
            <summary>
            Get the frequency of the clock.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventScheduleTypeConstants">
            <summary>
            Scheduling options for I/O events.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioEventScheduleTypeConstants.Encoder">
            <summary>
            Schedules an I/O event based on the encoder position.
            <para>
            Current firmware does not support encoder based scheduling.
            </para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioEventScheduleTypeConstants.Time">
            <summary>
            Schedules an I/O event based on a time stamp.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioNdmSignalConstants">
            <summary>
            Network Data Model (NDM) signals that can be used 
            to cause precision i/o events directly without host 
            operating system intervention.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioNdmSignalConstants.None">
            <summary>
            Repesents the absence of a named signal
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioNdmSignalConstants.TriggerAcquisition">
            <summary>
            Use the TriggerAcquisition signal to cause a precision I/O event
            to occur when the Comm Card receives a "Trigger Camera"
            signal from the remote device.
            <para>    
            Note that a precision I/O event with a TriggerAcquisition as a cause
            will still occur even if the NDM's "Trigger Camera" signal results 
            in a TriggerAcquisitionNotReadyError event or TriggerAcquisitionDisabledError
            event from the NDM. This means it is important to ensure that the remote device
            waits for the "Trigger Ready Camera" signal before asserting the
            "Trigger Camera" signal.
            </para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Comm.CogPrioNdmSignalConstants.TriggerSoftEvent">
            <summary>
            Use the TriggerSoftEvent signal to cause a precision I/O event
            to occur when the Comm Card recieves a soft event trigger request
            from the PLC.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioState">
            <summary>
            Represents the state of a precision I/O interface at a
            particular moment in time.
            <para>
            Note: Once a state object is read/created its contained values
            do not change. To get the current values you must call ReadState()
            again.
            </para>
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioState.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construt a CogPrioState
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioState.Bank(Cognex.VisionPro.Comm.CogPrioBankConstants)">
            <summary>
            Returns the values all lines in an i/o bank as an integer value.
            <para>
            Note: Once a state object is read/created its contained values
            do not change. To get the current values you must call ReadState()
            again.
            </para>
            </summary>   
            <remarks>
            The value of each individual output line is calculated as:
            <para>
            bool output0High = precisionIOState.Outputs &amp; 0x01;
            </para>
            <para>
            bool output1High = precisionIOState.Outputs &amp; 0x02;
            </para>
            <para>
            bool output3High = precisionIOState.Outputs &amp; 0x04;
            </para>
            <para>
            and so on...
            </para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            Thrown if the hardware does not support the given i/o bank.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioState.Line(Cognex.VisionPro.Comm.CogPrioBankConstants,System.Int32)">
            <summary>
            Returns the line value of the user supplied line at the 
            moment the state was read.
            <para>
            Note: Once a state object is read/created its contained values
            do not change. To get the current values you must call ReadState()
            again.
            </para>
            </summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            Thrown if the hardware does not support the given i/o bank.
            </exception> 
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidLineException">
            Thrown if the hardware does not support the given i/o line.
            </exception> 
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioState.TimeDifference(Cognex.VisionPro.Comm.CogPrioState)">
            <summary>
            Returns the time difference between this state and some 
            other state states in milliseconds (otherState - thisState).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioState.TimeStamp">
            <summary>
            The time stamp counter when the state was read.
            <para>
            Note: Once a state object is read/created its contained values
            do not change. To get the current values you must call ReadState()
            again.
            </para>
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioState.EncoderCount">
            <summary>
            The encoder count when the state was read.
            <para>
            Note: Once a state object is read/created its contained values
            do not change. To get the current values you must call ReadState()
            again.
            </para>
            <para>
            Note that current hardware platforms use only 32-bits of encoder data.
            This means that depending on the hardware, the encoder may rollover
            (go back to 0) when the encoder count reaches 0xFFFFFFFF (or 4294967295).
            </para>
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioState.Item(Cognex.VisionPro.Comm.CogPrioBankConstants,System.Int32)">
            <summary>
            Get's value of a line that was caputured with this state object.
            <para>
            Note: Once a state object is read/created its contained values
            do not change. To get the current values you must call ReadState()
            again.
            </para>
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventHandler">
            <summary>
            Event handler for precision I/O events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventArgs">
            <summary>
            Event args for precision I/O events.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventArgs.EventName">
            <summary>
            The name of the i/o event that caused this host notification event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventArgs.State">
            <summary>
            The I/O state at the moment the event occured.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventHandler">
            <summary>
            Event handler for precision I/O events.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventArgs">
            <summary>
            Event args for precision I/O events.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventArgs.EventNumber">
            <summary>
            The event number of the registered precision I/O event that occurred.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventArgs.ScheduledEventInstanceUserDataTag">
            <summary>
            If this was a user scheduled event, the tag will be filled in with
            the number provided at the time the event was scheduled.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioImplEventArgs.State">
            <summary>
            The I/O state at the moment the event occured.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventConfigObjectBase.SetValid(System.Boolean,System.String[])">
            <summary>
            Cognex Internal Use Only
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventConfigObjectBase.SetValid">
            <summary>
            Cognex Internal Use Only
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventConfigObjectBase.Valid">
            <summary>
            Indicates whether the configuration of this object is 
            valid/invalid for the current hardware.
            <para>
            The valid/invalid state is automatically updated when this 
            object is part of a CogPrio.Events collection.      
            </para>
            <para>
            Objects marked Invalid should be reconfigured to be valid. 
            Otherwise the CogPrio event system will not function. 
            </para>
            <para>
            Use the validationErrorMsg to understand how to reconfigure the 
            object to be valid. 
            </para>
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventConfigObjectBase.ValidationErrorMsg">
            <summary>
            Returns a collection of validation error messages that describe
            issues with the CogPrio.Events configuration.
            <para>
            The valid/invalid state is automatically updated when this 
            object is part of a CogPrio.Events collection.      
            </para>
            <para>
            Objects marked Invalid should be reconfigured to be valid. 
            Otherwise the CogPrio event system will not function. 
            </para>
            <para>
            Use the validation error msg to understand how to reconfigure the 
            object to be valid. 
            </para>
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventCauseBase">
            <summary>
            Marker base class for precision I/O event causes.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.Implementation.Internal.CogPrioEventResponseBase">
            <summary>
            Marker base class for precision I/O event responses.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventCauseNdmCollection">
            <summary>
            A collection of 
            <see cref="T:Cognex.VisionPro.Comm.CogPrioEventCauseNdm"/>
            precision I/O event causes.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventCauseLineCollection">
            <summary>
            A collection of 
            <see cref="T:Cognex.VisionPro.Comm.CogPrioEventCauseLine"/>
            precision I/O event causes.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventResponseLineCollection">
            <summary>
            A collection of 
            <see cref="T:Cognex.VisionPro.Comm.CogPrioEventResponseLine"/>
            precision I/O event responses.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventCauseNdm">
            <summary>
            Represents a network data model (NDM) signal transition which causes a precision I/O event.
            <para>
            Construct and add instances of this class to a precision I/O event's cause
            collection to cause the precision I/O event to occur when a particular signal
            in the factory floor protocol assembly layout transitions.
            </para>
            <para>
            These events will occur directly on the Comm Card without host operating
            system intervention.
            </para>
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.#ctor">
            <summary>
            Construct a new Ffp i/o event cause.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.#ctor(Cognex.VisionPro.Comm.CogPrioNdmSignalConstants,System.Int32)">
            <summary>
            Construct a new Network Data Model (NDM) i/o event cause.
            </summary>
            <remarks>
            Configure a CogPrioEventCauseNdm to to cause precision 
            i/o events to occur directly without host operating system intervention.
            </remarks>
            <param name="signal">Ndm signal that will cause the precision i/o event.</param>
            <param name="signalIndex">Index of the signal that causes the precision i/o event 
            (eg. specifies which camera trigger (0-3) causes the event).</param>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.#ctor(Cognex.VisionPro.Comm.CogPrioNdmSignalConstants,System.Int32,System.Boolean)">
            <summary>
            Construct a new Network Data Model (NDM) i/o event cause.
            </summary>
            <remarks>
            Configure a CogPrioEventCauseNdm to to cause precision 
            i/o events to occur directly without host operating system intervention.
            </remarks>
            <param name="signal">Ndm signal that will cause the precision i/o event.</param>
            <param name="signalIndex">Index of the signal that causes the precision i/o event 
            (eg. specifies which camera trigger (0-3) causes the event).</param>
            <param name="risingEdge">
            Whether the event occurs at the rising or falling transition of the NDM value.  
            </param>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.Signal">
            <summary>
            Gets/sets the signal which causes the precision IO event
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.SignalIndex">
            <summary>
            Gets/sets the index of the signal that causes the precision i/o event 
            (eg. specifies which camera trigger (0-3) causes the event).
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventCauseNdm.RisingEdge">
            <summary>
            Gets/sets whether the event occurs at the rising or falling 
            transition of the NDM value.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventCauseLine">
            <summary>
            Class which represents a line transition which causes a
            precision I/O event.
            <para>
            Construct and add instances of this class to a precision I/O event's 
            causes collection to cause the precision I/O event to occur when a
            particular I/O line transitions.
            </para>  
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseLine.#ctor">
            <summary>
            Construct a new i/o event line cause
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseLine.#ctor(Cognex.VisionPro.Comm.CogPrioBankConstants,System.Int32,Cognex.VisionPro.Comm.CogPrioLineTransitionConstants)">
            <summary>
            Construct a new i/o event line cause
            </summary>
            <param name="lineBank">The bank of the line which causes the event</param>
            <param name="lineNumber">The index of the line number which causes the event</param>
            <param name="lineTransition">The line transition which cause the event</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            Thrown lineBank is set to an output bank... output lines cannot cause i/o events in this release.
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidLineException">
            Thrown lineNumber is set to an invalid line number.
            </exception> 
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventCauseLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventCauseLine.LineBank">
            <summary>
            The bank of the I/O line which causes the event.
            </summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            Thrown if lineBank is set to an output bank... output lines cannot cause i/o events in this release.
            </exception>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventCauseLine.LineNumber">
            <summary>
            The line number of the I/O line which causes the event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventCauseLine.LineTransition">
            <summary>
            The line transition which causes the the event.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Comm.CogPrioEventResponseLine">
            <summary>
            Class which represents an automatic I/O line transition in response to a
            precision I/O event.
            <para>
            Construct and add instances of this class to a precision I/O event's response 
            collection to cause an automatic I/O line transition in response to a precision I/O event.
            </para>  
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventResponseLine.#ctor">
            <summary>
            Construct a new automatic output line response to an i/o event
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventResponseLine.#ctor(Cognex.VisionPro.Comm.CogPrioBankConstants,System.Int32,Cognex.VisionPro.Comm.CogPrioOutputLineValueConstants,System.Double,Cognex.VisionPro.Comm.CogPrioDelayTypeConstants,System.Double)">
            <summary>
            Construct a new automatic output line response to an i/o event
            </summary>
            <param name="outputLineBank">
            The bank of the output line which responds to the event
            </param>
            <param name="outputLineNumber">
            The index of the output line which responds to the event
            </param>
            <param name="outputLineValue">
            The value that is set to the output line when the event occurs
            </param>
            <param name="pulseDuration">
            How long to pulse the output line when the event occurs
            </param>
            <param name="delayType">
            Controls if the response occurs immeadiatly after the event or
            after some amount of delay
            </param>
            <param name="delayValue">
            Controls how long after the event the response occurs
            </param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            Thrown if outputLineBank is set to an invalid bank.
            </exception> 
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidLineException">
            Thrown if outputLineNumber is set to an invalid line number.
            </exception>  
            <exception cref="T:System.NotImplementedException">
            Thrown if delay type is set to Encoder or EventCount.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if pulse duration is less than 0.0 or greater than the maximum valid pulse width.
            </exception> 
        </member>
        <member name="M:Cognex.VisionPro.Comm.CogPrioEventResponseLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization ctor
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.OutputLineBank">
            <summary>
            Gets or sets the bank of the output line on which the event response occurs.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown OutputLineBank is set to an input bank
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidBankException">
            Thrown if outputLineNumber is set to an invalid line number.
            </exception>  
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.OutputLineNumber">
            <summary>
            Gets or sets the number of the output line on which the event response occurs.
            </summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogPrioInvalidLineException">
            Thrown if outputLineNumber is set to an invalid line number.
            </exception>  
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.OutputLineValue">
            <summary>
            Gets or sets the value to set the output line to in response to the event.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.PulseDuration">
            <summary>
            Gets or sets the length of a the pulse in milliseconds.    
            </summary>
            <value>
            Set to 0.0 to indicate that the line is not pulsed.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if pulse duration is less than 0.0 or greater than the maximum valid pulse width.
            </exception>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.DelayType">
            <summary>
            Gets or sets the type of delay that occurs after the event and before the event response.
            </summary>
            <exception cref="T:System.NotImplementedException">
            Thrown if delay type is set to Encoder or EventCount.
            </exception>
        </member>
        <member name="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.DelayValue">
            <summary>
            Gets or sets the amount of delay that occurs after the event and before the event response.
            </summary>
            <value>
            The units are in milliseconds or encoder ticks depending on the <see cref="P:Cognex.VisionPro.Comm.CogPrioEventResponseLine.DelayType"/>.
            </value>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogAppRuntimeSettings">
            <summary>
            Used to persist an application's runtime settings.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogToolTerminals">
            <summary>
            Summary description for CogToolTerminals.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.MatchToolSignatures(Cognex.VisionPro.ICogTool,Cognex.VisionPro.ICogTool)">
            <summary>
            Returns True if both <paramref name="toolA"/> and <paramref name="toolB"/> have
            the exact same Input and Output terminals.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.MatchInputSignatures(Cognex.VisionPro.ICogTool,Cognex.VisionPro.ICogTool)">
            <summary>
            Returns True if both <paramref name="toolA"/> and <paramref name="toolB"/> have
            the exact same Input terminals.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.MatchOutputSignatures(Cognex.VisionPro.ICogTool,Cognex.VisionPro.ICogTool)">
            <summary>
            Returns True if both <paramref name="toolA"/> and <paramref name="toolB"/> have
            the exact same Output terminals.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogIndexedPropertyInfo.#ctor(System.Reflection.PropertyInfo,System.Object[])">
            <summary>
            Creates a new instance of the CogIndexedPropertyInfo class.
            </summary>
            <param name="propertyInfo">A PropertyInfo to wrap.</param>
            <param name="indexes">Index arguments to use if the supplied ProertyInfo is an indexed property.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogIndexedPropertyInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified CogIndexedPropertyInfo is equal to 
            the current CogIndexedPropertyInfo.
            </summary>
            <param name="obj">The CogIndexedPropertyInfo to compare with the current CogIndexedPropertyInfo.</param>
            <returns>True if the specified CogIndexedPropertyInfo is equal to the current CogIndexedPropertyInfo; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogIndexedPropertyInfo.GetHashCode">
            <summary>
            Serves as a hash function for this type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current CogIndexedPropertyInfo.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Creates a new instance of the CogMethodInfo class.
            </summary>
            <param name="methodInfo">A MethodInfo to wrap.</param>
            <param name="arguments">The arguments to use, if any, when calling the wrapped MethodInfo.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object[],System.Type)">
            <summary>
            Creates a new instance of the CogMethodInfo class.
            </summary>
            <param name="methodInfo">A MethodInfo to wrap.</param>
            <param name="arguments">The arguments to use, if any, when calling the wrapped MethodInfo.</param>
            <param name="setterMethodType">If CogMethodInfo wraps a setter method, the type of the last method argument; otherwise null.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogMethodInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified CogMethodInfo is equal to the
            current CogMethodInfo.
            </summary>
            <param name="obj">The CogMethodInfo to compare with the current CogMethodInfo.</param>
            <returns>True if the specified CogMethodInfo is equal to the current CogMethodInfo; otherwise, false.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogMethodInfo.GetHashCode">
            <summary>
            Serves as a hash function for this type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current CogMethodInfo.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogTypeInfo.#ctor(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Creates a new instance of the CogTypeInfo class.
            </summary>
            <param name="type">A Type to wrap.</param>
            <param name="setterImpl">Implements call to SetValue.</param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.Internal.CogToolTerminals.CogInvalidCastContants">
            <summary>
            This enum is used by members of CogToolTerminals to 
            switch between different behaviors regarding how
            paths which contain invalid casts are handled.
            
            Most times (like when we are parsing paths
            or evaluating links) we wish to follow the path as though the 
            cast had succedded, even if it didn't.  Other times.
            like when we are trying to get the value of the terminal
            we want to ignore the actual cast and pretend as though the 
            cast was to the type of which the object actually is.
            
            I think this goes back to the original databinding philosophy
            that started with Jay.  In a nutshell I think this philosophy says
            "we will try anything we can to make a binding to an existing path
            succeed."
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminalUtil.GetToolBlockTerminalIDFromDataBinding(System.String,Cognex.VisionPro.CogDataBinding)">
            <summary>
            Utility function to extract a ToolBlockTerminal's ID property from a databinding
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminalUtil.GetToolBlockTerminalIDFromTerminalPath(System.String,System.String)">
            <summary>
            Utility function to extract a ToolBlockTerminal's ID property from a Terminal path
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal">
            <summary>
            Class cooresponding to an individual ToolBlock terminal, usually a member 
            of a ToolBlock Inputs or Outputs collection.
            </summary>
            <remarks>
            ToolBlock terminals are different from "regular" tool terminals.  
            ToolBlock terminals are storage objects unto themselves.
            Regular tool terminals represent a path to an existing tool's 
            member or property.
            </remarks>
        </member>
        <member name="F:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.SfDescription">
            <summary>
            Description state flag
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.#ctor(System.String,System.Object)">
            <summary>
            Creates a new CogToolBlockTerminal with the supplied name and value.
            </summary>
            <param name="name">The Name of the terminal</param>
            <param name="value">The Value</param>
            <remarks>The ValueType of the new Terminal is set to the type returned
            by value.GetType()</remarks>
            <exception cref="T:System.ArgumentException">Thrown when name or 
            value is null, or if name is not a valid .Net variable name</exception>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.#ctor(System.String,System.Type)">
            <summary>
            Creates a new CogToolBlockTerminal with the supplied name and valueType.
            </summary>
            <param name="name">Sets the Name of the new terminal</param>
            <param name="valueType">Sets the ValueType of the new terminal</param>
            <remarks>Creates a terminal whose Value property is a null reference.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when name or 
            valueType is null, or if name is not a valid .Net variable name</exception>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Creates a new CogToolBlockTerminal with the supplied name, value, and valueType.
            </summary>
            <param name="name">Sets the Name of the new terminal</param>
            <param name="value">Sets the Value of the new terminal</param>
            <param name="valueType">Sets the ValueType of the new terminal</param>
            <remarks>Only usefull if ValueType is more general than Value.GetType()</remarks>
            <exception cref="T:System.ArgumentException">Thrown when name or 
            valueType is null, if name is not a valid .Net variable name, or if
            valueType is not assignable from value.</exception>    
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates a new CogToolBlockTerminal with the supplied name and valueType. 
            </summary>
            <param name="name">Sets the Name of the new terminal</param>
            <param name="valueType">Sets the ValueType of the new terminal</param>
            <param name="initialize">Dictates if value should be initailized with a default constructed instance of valueType</param>
            <remarks>If <paramref name="initialize"/> is true and <paramref name="valueType"/>
            has a default constructor the terminal will be initialzed to the default value.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when name or 
            valueType is null, or if name is not a valid .Net variable name</exception>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Standard Serialization Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.ThrowIfInvalidName(System.String)">
            <summary>
            Throws an exception if <paramref name="name"/> is
            not a valid C# or VB.Net varialble name
            </summary>
            <param name="name">the variable name to check</param>
        </member>
        <member name="P:Cognex.VisionPro.ToolBlock.CogToolBlockTerminal.Description">
            <summary>
            A short description of this terminal
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogPropertyConverter">
            <summary>
            Wraps property converters for properties in order to display bound properties
            using a special notation.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogPropertyConverter.#ctor(System.ComponentModel.TypeConverter)">
            <summary>
            Constructs a new instance of the CogPropertyConverter class which wraps
            the supplied TypeConverter.
            </summary>
            <param name="baseConverter">A standard TypeConverter to wrap.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogPropertyConverter.GetPropertyPath(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the full path to the selected property in a property grid
            </summary>
            <param name="context">The context in which the property is selected.</param>
            <returns>The dot-separated path to the property from the top-level selected item
            (normally a tool).</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogComponentConverter">
            <summary>
            This class provides type conversion facilities for using VisionPro
            components at design time.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentConverter.#ctor(System.Type)">
            <summary>
            Constructs a new instance of the CogComponentConverter class.
            </summary>
            <param name="type">The type of object to convert.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogComponentConverter.haveGetInstanceDescriptor">
            <summary>
            Checks whether the component type has a GetInstanceDescriptor member.
            </summary>
            <returns>True if it has one, false otherwise.</returns>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogPropertyDescriptor">
            <summary>
            This class takes the place of a standard PropertyDescriptor when obtained
            via the GetProperties method of a ICustomTypeDescriptor implementation.
            It behaves like a standard PropertyDescriptor except that its ValueChanged
            implementation works with our Changed event in order to support data binding,
            and it provides additional improvements to design-mode behavior over the standard
            PropertyDescriptor.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogPropertyDescriptor.property_">
            <summary>
            A standard PropertyDescriptor on which this one is based
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogPropertyDescriptor.componentSinks">
            <summary>
            A hash table keyed by component that contains the number of sinks for each component
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogPropertyDescriptor.stateFlag">
            <summary>
            The state flag associated with this property descriptor.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogPropertyDescriptor.description">
            <summary>
            The description string for the property.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogPropertyDescriptor.gotDescription">
            <summary>
            True when the description has been gotten.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.Implementation.CogPropertyDescriptor.xmlDocuments">
            <summary>
            Table of XML documentation files keyed by assembly
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructs a new CogPropertyDescriptor given a standard PropertyDescriptor.
            </summary>
            <param name="property">A standard property descriptor to wrap.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogPropertyDescriptor.#ctor(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Constructs a new CogPropertyDescriptor given a PropertyInfo describing
            the property and a Type describing the type of the component containing
            the property.
            </summary>
            <param name="propertyInfo">PropertyInfo wrapped by this property descriptor.</param>
            <param name="componentType">Type of component containing this descriptor's property.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogPropertyDescriptor.GetProperties(System.Object,System.Attribute[])">
            <summary>
            Gets a PropertyDescriptorCollection containing property descriptors that
            will respond to Changed events.
            </summary>
            <param name="component">The component for which to get property descriptors.</param>
            <param name="attributes">An array of type System.Attribute to use as a filter.</param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogMethodDescriptor">
            <summary>
            This class takes the place of a CogPropertyDescriptor when a descriptor 
            returned from the GetProperties method is itself a method.  It behaves
            like a CogPropertyDescriptor except that it operates on methods rather
            than properties.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogMethodDescriptor.#ctor(System.String,System.Reflection.MethodInfo,System.Object[],System.Reflection.MethodInfo,System.Object[],System.Type)">
            <summary>
            Constructs a new instance of the CogMethodDescriptor class.
            </summary>
            <param name="descriptorName">Name of this instance.</param>
            <param name="getterMethodInfo">Method used to get the descriptor's value.</param>
            <param name="getterArgs">Arguments passed to getterMethodInfo when getting the descriptor's value.</param>
            <param name="setterMethodInfo">Method used to set the descriptor's value.</param>
            <param name="setterArgs">Arguments passed to setterMethodInfo when setting the descriptor's value.</param>
            <param name="componentType">Type of component containing the method(s) to which this descriptor applies.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogMethodDescriptor.GetGetterArguments">
            <summary>
            Get arguments passed to GetterMethodInfo when getting the descriptor's value.
            </summary>
            <returns>Arguments passed to getterMethodInfo.</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogMethodDescriptor.GetSetterArguments">
            <summary>
            Get arguments passed to SetterMethodInfo when setting the descriptor's value.
            </summary>
            <returns>Arguments passed to SetterMethodInfo.</returns>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogMethodDescriptor.GetterMethodInfo">
            <summary>
            Get method used to get the descriptor's value.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogMethodDescriptor.SetterMethodInfo">
            <summary>
            Get method used to set the descriptor's value.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogIndexedPropertyDescriptor">
            <summary>
            This class takes the place of a CogPropertyDescriptor when a descriptor 
            returned from the GetProperties method is an indexed property.  It
            behaves like a CogPropertyDescriptor except that it includes the
            property's index arguments.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogIndexedPropertyDescriptor.#ctor(System.Reflection.PropertyInfo,System.Type,System.Object[])">
            <summary>
            Constructs a new instance of the CogIndexedPropertyDescriptor class.
            </summary>
            <param name="propertyInfo">PropertyInfo wrapped by this property descriptor.</param>
            <param name="componentType">Type of component containing this descriptor's property.</param>
            <param name="keys">Index arguments used when accessing property.</param>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogIndexedPropertyDescriptor.GetPropertyInfo(System.Type,System.String,System.Object[])">
            <summary>
            Gets the PropertyInfo having the appropriate name and arguments.
            </summary>
            <param name="componentType">Type from which to obtain the PropertyInfo.</param>
            <param name="propertyName">Name of the property whose PropertyInfo is being retrieved.</param>
            <param name="keys">Arguments of the property whose PropertyInfo is being retrieved.</param>
            <returns></returns>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogIndexedPropertyDescriptor.PropertyInfo">
            <summary>
            Gets PropertyInfo wrapped by this property descriptor.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.Implementation.CogIndexedPropertyDescriptor.IndexParameters">
            <summary>
            Gets index arguments used when accessing property.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogTypeDescriptor">
            <summary>
            This class takes the place of a CogPropertyDescriptor when a descriptor 
            encapsulating a type cast is needed.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.CogTypeDescriptor.#ctor(System.Type,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructs a new instance of the CogTypeDescriptor class.
            </summary>
            <param name="typeInfo">Type wrapped by this CogTypeDescriptor.</param>
            <param name="pd">SetValue implementation delegated to this PropertyDescriptor.</param>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogUIInputPropertyEditor">
            <summary>
            This class provides an editor for input properties on the property page
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Implementation.CogUIInputImageEditor">
            <summary>
            This class provides an editor for input image properties on the property page
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogInUseFlag">
            <summary>
            This class implements a boolean "in use" flag that can be
            easily set to true for the duration of a C# "using" statement.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogInUseFlag.StartUsing">
            <summary>
            Start using this flag object.  This method can be 
            placed inside a C# "using" statement.
            </summary>
            <returns>
            An IDisposable that can be used inside a C# "using" statement.
            Calling Dispose() on this returned value is equivalent to
            calling StopUsing() on the flag object.
            </returns>
        </member>
        <member name="M:Cognex.VisionPro.CogInUseFlag.StopUsing">
            <summary>
            Stop using this flag object.
            </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogInUseFlag.InUse">
            <summary>
            Gets a value indicating whether this flag is currently in use.
            </summary>
            <value>
            True if this flag is in use.  Otherwise, false.
            </value>
            <remarks>
            This flag is "in use" if 
            <see cref="M:Cognex.VisionPro.CogInUseFlag.StartUsing"/> 
            has been called more times than
            <see cref="M:Cognex.VisionPro.CogInUseFlag.StopUsing"/>.
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro.CogInUseFlag.CogInUseFlagDisposer">
            <summary>
            This nested class provides an IDisposable that can be used inside a
            using statement.  When disposed, it calls the StopUsing() method of
            the CogInUseFlag that created it.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException">
            <summary>
            The exception that is thrown when security is not enabled
            for the vision tool being used. See the topic titled
            'Resolving Security-Related Error Messages' in the online help
            for more information.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">
            <summary>
            The exception that is thrown when the image has no pixels.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
            <summary>
            The exception that is thrown when the memory for an image
            cannot be allocated.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageAllocateSizeException">
            <summary>
            The exception that is thrown when an image of the
            specified size cannot be allocated.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageClippedException">
            <summary>
            The exception that is thrown when the image is clipped.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException">
            <summary>
            The exception that is thrown when the specified pixel
            coordinate does not exist in this image.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
            <summary>
            The exception that is thrown when an operation does not
            support the specified image's format.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException">
            <summary>
            The exception that is thrown when no coordinate space
            tree was specified.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException">
            <summary>
            The exception that is thrown when one of the following is
            true: (1) The selected space of the input image is not a valid
            space of the input image's coordinate space tree, (2) The input
            image's selected space is nonqualified and more than one instance
            of it exists in the input image's space tree, or (3) The input
            image's selected space is not a legal space name.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
            <summary>
            The exception that is thrown when a nonlinear transform
            is used in an operation that requires only linear transforms.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogTransformSingularPointException">
            <summary>
            The exception that is thrown when the transform is
            singular at the given point.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogTransformSingularException">
            <summary>
            The exception that is thrown when a transform is singular.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogTransformCantPopEmptyComposedException">
            <summary>
            The exception that is thrown when the Count of a
            Cognex.VisionPro.CogTransform2DComposed is
            zero and you attempt to call either the PopFromRight or
            PopFromLeft methods of that object.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogTransformTooFewPointsLinFitException">
            <summary>
            The exception that is thrown when too few points were
            provided to compute a best fit linear transform.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
            <summary>
            The exception that is thrown when the specified timeout
            period has elapsed.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCanceledException">
            <summary>
            The exception that is thrown when an operation has been canceled.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogInternalErrorException">
            <summary>
            The exception that is thrown when an internal error occurs.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogUnsupportedHardwareException">
            <summary>
            The exception that is thrown when VisionPro does not
            support this hardware.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogFileOpenException">
            <summary>
            The exception that is thrown when there is an error
            opening a file.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogFileReadException">
            <summary>
            The exception that is thrown when there is an error
            reading a file.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogFileWriteException">
            <summary>
            The exception that is thrown when there is an error
            writing a file.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException">
            <summary>
            The exception that is thrown when you try to read from or
            write to a file, but no file is open.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBadFileFormatException">
            <summary>
            The exception that is thrown when the file format is not
            appropriate for the current use.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogBadFileModeException">
            <summary>
            The exception that is thrown when the current file mode
            does not permit the specified operation. For example, you may
            have opened a file in read mode, but tried to write to it.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeNotRectangleException">
            <summary>
            The exception that is thrown when the specified points do
            not describe a rectangle.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeNotAffineRectException">
            <summary>
            The exception that is thrown when the specified region
            must be an affine rectangle, but is not.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeNoCompositeChildrenException">
            <summary>
            The exception that is thrown when the composite shape has
            no children.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException">
            <summary>
            The exception that is thrown when the start point and
            endpoint coordinates must differ.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeDegeneratePolygonException">
            <summary>
            The exception that is thrown when the polygon does not
            have enough vertices for the operation you requested.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException">
            <summary>
            The exception that is thrown when the shape cannot be
            enclosed by a rectangle.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateShapeException">
            <summary>
            The exception that is thrown when the shape is degenerate.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeComplexPolygonException">
            <summary>
            The exception that is thrown when the polygon is complex.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeCantParentShapeException">
            <summary>
            The exception that is thrown when the shape cannot be
            added as a child because it already has a parent.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeCannotConvertException">
            <summary>
            The exception that is thrown when the specified shape
            type cannot be used because its internal representation cannot
            be converted.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException">
            <summary>
            The exception that is thrown when the type of the contour
            segment is not appropriate for the operation you requested.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegConnException">
            <summary>
            The exception that is thrown when the contour vertex
            connection flags are incompatible. (See 
            <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants"/>).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeAddWontBreakContourException">
            <summary>
            The exception that is thrown when the contour vertex
            connection flags are incompatible.  (See
            <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants"/>).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapePenKeyInUseException">
            <summary>
            The exception that is thrown when the pen with the
            specified key is in use.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegmentSetException">
            <summary>
            The exception that is thrown when the starting segment is
            positioned after the ending segment.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeBadContourChainClosureException">
            <summary>
            The exception that is thrown when the contour vertex
            connection flags are incompatible.  (See
            <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants"/>).
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateContourException">
            <summary>
            The exception that is thrown when the contour contains no
            segments.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeAlreadyAShapeModelException">
            <summary>
            The exception that is thrown when this shape is a
            <see cref="T:Cognex.VisionPro.CogGeneralContour"/> and is already
            referenced by an existing shape model.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateEllipticalArcSegException">
            <summary>
            The exception that is thrown when points on the
            elliptical arc segment are colinear.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">
            <summary>
            The exception that is thrown when the operator does not
            have an input image.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException">
            <summary>
            The exception that is thrown when the operator is not
            trained.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException">
            <summary>
            The exception that is thrown when the operator cannot use
            the supplied region because it is invalid.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatorNoTrainImageException">
            <summary>
            The exception that is thrown when the operator does not
            have a train image.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatorNoRunParamsException">
            <summary>
            The exception that is thrown when no run parameters are
            specified for the operator.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidShapeException">
            <summary>
            The exception that is thrown when one of the following is
            true: (1) The selected space of the shape is not a valid space
            in the input image's coordinate space tree, (2) The selected
            space of the shape is nonqualified and more than one instance
            of the name is present in the input image's coordinate space tree,
            or (3) The selected space of the shape is not a legal space name.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException">
            <summary>
            The exception that is thrown when an operator object was
            not found for this tool.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogToolNoResultException">
            <summary>
            The exception that is thrown when the result is not
            available.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogToolSpaceNameMismatchException">
            <summary>
            The exception that is thrown when the selected space name
            of the image and all shapes must be equivalent, but are not.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException">
            <summary>
            The exception that is thrown when the RLE buffer is not
            initialized.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogRLEBufferCombineFailedException">
            <summary>
            The exception that is thrown when a
            <see cref="T:Cognex.VisionPro.CogRLEBuffer"/> cannot combine two
            images. Typically, this error means that the subimage exceeds
            the primary image's bounds.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogRLEBufferCombineSubImageSizeException">
            <summary>
            The exception that is thrown when the subimage size is
            greater than the RLE buffer.  The subimage must fit entirely
            in the RLE buffer.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogRLEBufferCombineSubImageOffsetException">
            <summary>
            The exception that is thrown when the subimage's x- or
            y-position is less than the RLE buffer's (x, y)
            position. The subimage must fit entirely in the RLE buffer.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogRLEBufferCombineSubImageExtentException">
            <summary>
            The exception that is thrown when the subimage extends
            beyond the size of the RLE buffer.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogIOLineNotEnabledException">
            <summary>
            The exception that is thrown when the I/O line in use is
            not enabled. It must first be enabled before you can change
            its value.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogIOLineCannotEnableException">
            <summary>
            The exception that is thrown when this I/O line cannot be
            enabled. It may be possible to enable it if other lines are
            first disabled.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogMathUnsupportedGeometryException">
            <summary>
            The exception that is thrown when the mathematical
            operation is not supported with the specified coordinate
            transformations.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException">
            <summary>
            The exception that is thrown when the iterator is not
            positioned at a valid item.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException">
            <summary>
            The exception that is thrown when the specified iterator
            position is out of range or not valid.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException">
            <summary>
            The exception that is thrown when the iterator is at the
            end of the collection.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCollectionInvalidIndexException">
            <summary>
            The exception that is thrown when the specified index is
            not valid for the collection.  The index value should be greater
            than zero and less than the collection item count.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCollectionInvalidKeyException">
            <summary>
            The exception that is thrown when the specified key is
            not a valid key value. The key is a string that uniquely identifies
            an item in the collection.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCollectionKeyNotFoundException">
            <summary>
            The exception that is thrown when the specified key
            string was not found in the collection. Keys are case-sensitive.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCollectionDuplicateItemException">
            <summary>
            The exception that is thrown when the item already exists
            in the collection.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCollectionDuplicateKeyException">
            <summary>
            The exception that is thrown when the key already exists
            in the collection. Key strings must be unique. Keys are case-sensitive.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogCollectionNullItemException">
            <summary>
            The exception that is thrown when a collection item
            cannot be null or empty.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogVProThread.MakeNewThread(System.Threading.ThreadStart)">
            <summary>
            Assigns the newly created thread's UI culture 
            to that of the current thread. This enforces 
            all VisionPro .NET threads to have the same UI culture
            of the main thread.
            </summary>
            <param name="start">a delegate that allows an object to be passed 
            to the thread when the thread is started</param>
            <returns>newly created thread</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogVProThread.MakeNewThread(System.Threading.ThreadStart,System.Int32)">
            <summary>
            Assigns the newly created thread's UI culture 
            to that of the current thread. This enforces 
            all VisionPro .NET threads to have the same UI culture
            of the main thread.
            </summary>
            <param name="start">a delegate that allows an object to be passed 
            to the thread when the thread is started</param>
            <param name="maxStackSize">the maximum stack size for the thread</param>
            <returns>newly created thread</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogVProThread.MakeNewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Assigns the newly created thread's UI culture 
            to that of the current thread. This enforces 
            all VisionPro .NET threads to have the same UI culture
            of the main thread.
            </summary>
            <param name="start">a delegate that allows an object to be passed 
            to the thread when the thread is started</param>
            <returns>newly created thread</returns>
        </member>
        <member name="M:Cognex.VisionPro.Implementation.Internal.CogVProThread.MakeNewThread(System.Threading.ParameterizedThreadStart,System.Int32)">
            <summary>
            Assigns the newly created thread's UI culture 
            to that of the current thread. This enforces 
            all VisionPro .NET threads to have the same UI culture
            of the main thread.
            </summary>
            <param name="start">a delegate that allows an object to be passed 
            to the thread when the thread is started</param>
            <param name="maxStackSize">the maximum stack size for the thread</param>
            <returns>newly created thread</returns>
        </member>
        <member name="T:Cognex.VisionPro.CogColor4F">
            <summary>
            The CogColor4F struct is a lightweight, immutable
            representation of an ARGB color with float values
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogColor4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs CogColor4F instance with the given ARGB float values 
            </summary>
            <param name="a">The value of the Aplha component</param>
            <param name="r">The value of the Red component</param>
            <param name="g">The value of the Green component</param>
            <param name="b">The value of the Blue component</param>
        </member>
        <member name="M:Cognex.VisionPro.CogColor4F.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs CogColor4F instance with the given RGB byte values 
            </summary>
            <param name="r">The value of the Red component</param>
            <param name="g">The value of the Green component</param>
            <param name="b">The value of the Blue component</param>
        </member>
        <member name="M:Cognex.VisionPro.CogColor4F.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs CogColor4F instance with the given ARGB byte values 
            </summary>
            <param name="a">The value of the Aplha component</param>
            <param name="r">The value of the Red component</param>
            <param name="g">The value of the Green component</param>
            <param name="b">The value of the Blue component</param>
        </member>
        <member name="M:Cognex.VisionPro.CogColor4F.#ctor(System.Int32,System.Single)">
            <summary>
            Constructs CogColor4F instance with the given ARGB byte values 
            </summary>
            <param name="color">The OLE color (CogColorConstant)</param>
            <param name="opacity">The value of the opacity</param>
        </member>
        <member name="T:Cognex.VisionPro.CogAddSpaceConstants">
            <summary> In a coordinate space tree each child of a given parent
            space must have a unique name.  This enumeration specifies what
            action will be taken when the user attempts to add a duplicate
            child space name to an existing parent in the tree. </summary>
            <remarks><para> In a
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />
            each child of a given parent space must have a unique
            name. This enumeration specifies what action to take if you try to add
            a coordinate space to a parent space that already has an immediate
            child with the same name as the one you are trying to add.
            The options are to return an error, replace the named item, or do
            nothing. </para></remarks>
        </member>
        <member name="F:Cognex.VisionPro.CogAddSpaceConstants.DuplicateIsError">
            <summary> Attempts to add a duplicate child space will fail.
            An error will be returned. </summary>
            <remarks><para> Attempts to add a duplicate child space will fail,
            and an error will be returned. </para></remarks>
        </member>
        <member name="F:Cognex.VisionPro.CogAddSpaceConstants.ReplaceDuplicate">
            <summary> Attempts to add a duplicate child space will,
            instead, replace the transform of the existing child with the
            same name.  Attempts to add a duplicate child tree will
            replace the entire subtree of the existing child, as well as
            its transform. </summary>
            <remarks><para> Attempts to add a duplicate child space will,
            instead, replace the transform of the existing child with the
            same name.  Attempts to add a duplicate child tree will
            replace the entire subtree of the existing child, as well as
            its transform. </para></remarks>
        </member>
        <member name="F:Cognex.VisionPro.CogAddSpaceConstants.IgnoreDuplicate">
            <summary> Attempts to add a duplicate child space will be ignored.
            No error will be returned. </summary>
            <remarks><para> Attempts to add a duplicate child space will be
            ignored. No error will be returned. </para></remarks>
        </member>
        <member name="T:Cognex.VisionPro.CogSpaceTreePathnameConstants">
            <summary> This enumeration controls the formatting of coordinate
            space names that are returned from a coordinate space tree 
            (<see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> or
            <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />). </summary>
            <remarks><para> This enumeration controls the formatting of
            <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">coordinate
            space names</see> that are returned from a coordinate space tree
            (<see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> or
            <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />).
            </para></remarks>
        </member>
        <member name="F:Cognex.VisionPro.CogSpaceTreePathnameConstants.None">
            <remarks><para> Express space names as a single,
            nonqualified name. </para></remarks>
            <summary> Returned space names will be expressed as a single,
            non-qualified name. </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogSpaceTreePathnameConstants.Full">
            <summary> Returned space names will be expressed as a full pathname
            through the coordinate space tree. </summary>
            <remarks><para> Express space names as a full pathname through
            the coordinate space tree. </para></remarks>
        </member>
        <member name="F:Cognex.VisionPro.CogSpaceTreePathnameConstants.Partial">
            <summary> Returned space names will be expressed as a partial
            pathname through the coordinate space tree, starting at the space
            named by the first argument of the method that you called. </summary>
            <remarks><para> Express space names as a partial pathname through
            the coordinate space tree object, starting at the space specified
            by the first method argument. </para></remarks>
        </member>
        <member name="T:Cognex.VisionPro.CogSpaceAddedEventArgs">
            <summary>
            This class provides data for the SpaceAdded event
            of a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogSpaceAddedEventArgs.#ctor(System.String)">
            <summary> Constructor for these EventArgs.  You typically will
            not need to use this method. </summary>
            <param name="newSpaceName">n/a</param>
        </member>
        <member name="P:Cognex.VisionPro.CogSpaceAddedEventArgs.NewSpaceName">
            <summary> The fully-qualified pathname of the added coordinate
            space. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogSpaceAddedEventHandler">
            <summary>
            Represents the method that will handle the SpaceAdded event of a
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            The method must have the same parameters as this delegate.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> An instance of CogSpaceAddedEventArgs
            containing the data for this event. </param>
        </member>
        <member name="T:Cognex.VisionPro.CogTreeAddedEventArgs">
            <summary>
            This class provides data for the TreeAdded event
            of a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogTreeAddedEventArgs.#ctor(System.String)">
            <summary> Constructor for these EventArgs.  You typically will
            not need to use this method. </summary>
            <param name="newSpaceName">n/a</param>
        </member>
        <member name="P:Cognex.VisionPro.CogTreeAddedEventArgs.NewSpaceName">
            <summary> The fully-qualified pathname of the added tree's
            root space. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogTreeAddedEventHandler">
            <summary>
            Represents the method that will handle the TreeAdded event of a
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            The method must have the same parameters as this delegate.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> An instance of CogTreeAddedEventArgs
            containing the data for this event. </param>
        </member>
        <member name="T:Cognex.VisionPro.CogNameChangedEventArgs">
            <summary>
            This class provides data for the NameChanged event
            of a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogNameChangedEventArgs.#ctor(System.String,System.String)">
            <summary> Constructor for these EventArgs.  You typically will
            not need to use this method. </summary>
            <param name="oldSpaceName">n/a</param>
            <param name="newSpaceName">n/a</param>
        </member>
        <member name="P:Cognex.VisionPro.CogNameChangedEventArgs.OldSpaceName">
            <summary> The old, fully-qualified pathname of the coordinate
            space. </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogNameChangedEventArgs.NewSpaceName">
            <summary> The new, fully-qualified pathname of the coordinate
            space. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogNameChangedEventHandler">
            <summary>
            Represents the method that will handle the NameChanged event of a
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            The method must have the same parameters as this delegate.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> An instance of CogNameChangedEventArgs 
            containing the data for this event. </param>
        </member>
        <member name="T:Cognex.VisionPro.CogTransformChangedEventArgs">
            <summary>
            This class provides data for the TransformChanged event
            of a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogTransformChangedEventArgs.#ctor(System.String)">
            <summary> Constructor for these EventArgs.  You typically will
            not need to use this method. </summary>
            <param name="spaceName">n/a</param>
        </member>
        <member name="P:Cognex.VisionPro.CogTransformChangedEventArgs.SpaceName">
            <summary> The fully-qualified pathname of the child space for
            which the transform has changed.  The new transform describes
            the mapping between this space and its parent space. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogTransformChangedEventHandler">
            <summary>
            Represents the method that will handle the TransformChanged event
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            The method must have the same parameters as this delegate.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> An instance of CogTransformChangedEventArgs
            containing the data for this event. </param>
        </member>
        <member name="T:Cognex.VisionPro.CogSubtreeDeletedEventArgs">
            <summary>
            This class provides data for the SubtreeDeleted event
            of a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogSubtreeDeletedEventArgs.#ctor(System.String)">
            <summary> Constructor for these EventArgs.  You typically will
            not need to use this method. </summary>
            <param name="oldSpaceName">n/a</param>
        </member>
        <member name="P:Cognex.VisionPro.CogSubtreeDeletedEventArgs.OldSpaceName">
            <summary> The fully-qualified pathname of the deleted subtree's root
            space.  This space no longer exists in the coordinate space
            tree. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogSubtreeDeletedEventHandler">
            <summary>
            Represents the method that will handle the SubtreeDeleted event of
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            The method must have the same parameters as this delegate.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> An instance of CogSubtreeDeletedEventArgs
            containing the data for this event. </param>
        </member>
        <member name="T:Cognex.VisionPro.CogSubtreeMovedEventArgs">
            <summary>
            This class provides data for the SubtreeMoved event
            of a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogSubtreeMovedEventArgs.#ctor(System.String,System.String)">
            <summary> Constructor for these EventArgs.  You typically will
            not need to use this method. </summary>
            <param name="oldSpaceName">n/a</param>
            <param name="newSpaceName">n/a</param>
        </member>
        <member name="P:Cognex.VisionPro.CogSubtreeMovedEventArgs.OldSpaceName">
            <summary> The old, fully-qualified pathname of the subtree's root
            space.  This space no longer exists in the coordinate space
            tree. </summary>
        </member>
        <member name="P:Cognex.VisionPro.CogSubtreeMovedEventArgs.NewSpaceName">
            <summary> The new, fully-qualified pathname of the subtree's root
            space. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogSubtreeMovedEventHandler">
            <summary>
            Represents the method that will handle the SubtreeMoved event of a
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            The method must have the same parameters as this delegate.
            </summary>
            <param name="sender"> The source of the event. </param>
            <param name="e"> An instance of CogSubtreeMovedEventArgs
            containing the data for this event. </param>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException">
            <summary> The exception that is thrown when you attempt to add a
            duplicate nonqualified coordinate space name to a single node in
            a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> or
            <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            All nonqualified space names that share the same parent node
            must be unique.  For more information, see the topic titled <see
            cref="u:Framework.Coordinates.Theory.CoordSpaceNames">'Coordinate
            Space Names'</see> in the online User's Guide. </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogSpaceTreeFixturedSpaceNameCollisionException">
            <summary> The exception that is thrown when a fixture tool
            attempts to add a space to a coordinate space tree that already
            has a space by that name. This exception is only generated by
            <see cref="T:Cognex.VisionPro.CalibFix.CogFixture" /> or <see
            cref="T:Cognex.VisionPro.CalibFix.CogFixtureNPointToNPoint" />.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
            <summary> The exception that is thrown when the syntax of the
            supplied coordinate space name is invalid.  For more
            information, see the topic titled <see
            cref="u:Framework.Coordinates.Theory.CoordSpaceNames">'Coordinate
            Space Names'</see> in the online User's Guide. </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
            <summary> The exception that is thrown when the specified
            coordinate space name was not found in the
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />.
            </summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
            <summary> The exception that is thrown when a nonqualified
            coordinate space name is expected to be unique within a
            <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
            or <see cref="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree" />,
            but is not unique. </summary>
        </member>
        <member name="T:Cognex.VisionPro.CogFeatureCrsp">
            <summary>
            This class holds one pair of feature correspondence: image position and 
            the corresponding physical position.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeatureCrsp.SfImageX">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by ImageX
            may have been changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeatureCrsp.SfImageY">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by ImageY
            may have been changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeatureCrsp.SfPhysicalX">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by PhysicalX
            may have been changed.
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.CogFeatureCrsp.SfPhysicalY">
            <summary>
            This bit will be set in the EventArgs of a Changed event
            every time the value returned by PhysicalY
            may have been changed.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsp.#ctor">
            <summary>
            Construct a default CogFeatureCrsp: ImageX = 0.0, ImageY = 0.0, PhysicalX = 0.0, PhysicalY = 0.0.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsp.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct this CogFeatureCrsp with the supplied components.
            </summary>
            <param name="imageX">
            The x value of the image position for this feature.
            </param>
            <param name="imageY">
            The y value of the image position for this feature.
            </param>
            <param name="physicalX">
            The x value of the physical position for this feature.
            </param>
            <param name="physicalY">
            The y value of the physical position for this feature.
            </param>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsp.#ctor(Cognex.VisionPro.CogFeatureCrsp)">
            <summary>
            Construct this object by making a deep copy of the supplied object.
            </summary>
            <param name="other">
            The CogFeatureCrsp object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsp.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeatureCrsp object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="P:Cognex.VisionPro.CogFeatureCrsp.ImageX">
            <summary>
            Gets/sets the x value of image position.
            </summary>
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CogFeatureCrsp.ImageY">
            <summary>
            Gets/sets the y value of image position.
            </summary>
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CogFeatureCrsp.PhysicalX">
            <summary>
            Gets/sets the x value of physical position.
            </summary>    
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="P:Cognex.VisionPro.CogFeatureCrsp.PhysicalY">
            <summary>
            Gets/sets the y value of physical position.
            </summary>    
            <event cref="E:Cognex.VisionPro.ChangedEvent">
            Fires when this property changes.
            </event>
        </member>
        <member name="T:Cognex.VisionPro.CogFeatureCrsps">
            <summary>
            This class holds the feature correspondences found from one image.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsps.#ctor">
            <summary>
            Constructs a default (empty) CogFeatureCrsps.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsps.#ctor(Cognex.VisionPro.CogFeatureCrsps)">
            <summary>
            Copy constructs a CogFeatureCrsps object. This is a deep
            copy.
            </summary>
            <param name="other">
            The CogFeatureCrsps object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsps.GetImagePoints">
            <summary>
            Get the ImageX, ImageY pairs in this collection
            as a row-major two dimensional array of double.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If Count is less than one.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsps.GetPhysicalPoints">
            <summary>
            Get the PhysicalX, PhysicalY pairs in this collection
            as a row-major two dimensional array of double.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If Count is less than one.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrsps.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeatureCrsps object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.CogFeatureCrspsMCameras">
            <summary>
            This class holds the feature correspondences found from multiple cameras at one pose.
            <para>
            CogFeatureCrspsMCameras[cameraIndex] is a <see cref="T:Cognex.VisionPro.CogFeatureCrsps"/> holding the feature correspondence
            for camera "cameraIndex" at one pose.
            </para>
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrspsMCameras.#ctor">
            <summary>
            Constructs a default (empty) CogFeatureCrspsMCameras.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrspsMCameras.#ctor(Cognex.VisionPro.CogFeatureCrspsMCameras)">
            <summary>
            Copy constructs a CogFeatureCrspsMCameras object. This is a deep
            copy.
            </summary>
            <param name="other">
            The CogFeatureCrspsMCameras object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrspsMCameras.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeatureCrspsMCameras object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
        <member name="T:Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses">
            <summary>
            This class holds the feature correspondences found from multiple cameras at multiple poses.
            <para>
            CogFeatureCrspsMCamerasNPoses[poseIndex][cameraIndex] is a <see cref="T:Cognex.VisionPro.CogFeatureCrsps"/> holding the feature correspondence
            for camera "cameraIndex" at  pose "poseIndex".
            </para>
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses.#ctor">
            <summary>
            Constructs a default (empty) CogFeatureCrspsMCamerasNPoses.
            </summary>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses.#ctor(Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses)">
            <summary>
            Copy constructs a CogFeatureCrspsMCamerasNPoses object. This is a deep
            copy.
            </summary>
            <param name="other">
            The CogFeatureCrspsMCamerasNPoses object to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="other"/>  is null.
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.CogFeatureCrspsMCamerasNPoses.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization construct a CogFeatureCrspsMCamerasNPoses object.
            </summary>
            <param name="Info">
            The standard SerializationInfo argument.
            </param>
            <param name="Ctxt">
            The standard StreamingContext argument.
            </param>
        </member>
    </members>
</doc>
