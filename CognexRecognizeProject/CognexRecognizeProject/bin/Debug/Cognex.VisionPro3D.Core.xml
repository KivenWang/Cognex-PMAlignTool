<?xml version="1.0"?>
<doc>
    <assembly>
        "Cognex.VisionPro3D.Core"
    </assembly>
    <members>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.PositionResidualsPhys3D">
            <summary>
Gets the overall residual statistics corresponding to the distribution of 
physical 3D residuals over all robot poses used for validation.
</summary>
            <value>
The residual statistics characterizing the accuracy of the hand-eye 
system.
</value>
            <remarks>
PositionResidualsPhys3D.ResidualsDistance.Rms can be used to compare
between the stored validation result and the current validation result and see
whether the measurements satisfactorily agree. 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.CameraCalibrationValidationResult">
            <summary>
Gets the camera calibration validation result.
</summary>
            <value>
The camera calibration validation result characterizing the accuracy of
camera intrinsic parameters.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult.#ctor(Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHandEyeCalibrationValidationResult">
            <summary>
This class encapsulates a hand-eye calibration validation result.
It contains 
a camera calibration validation result with 2D and 3D residuals to  
characterize the accuracy of the camera intrinsic parameters, and 3D residuals 
to characterize the accuracy of the whole hand-eye system. These
residuals objects are intended to be used to determine 
whether a system is "out of calibration".
<para> Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DHandEyeCalibrationValidator class and always
contains a hand-eye calibration validation result and 3D residuals.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.RmsOfResidualsPhys3D">
            <summary>
Gets the RMS error of the RMS errors of the Phys3D residuals
for each combination of calibration plate pose and camera.
</summary>
            <value>
The RMS error of the RMS errors of the Phys3D residuals
for each combination of calibration plate pose and camera.
</value>
            <remarks>
This value can be used as an overall accuracy metric for all
the cameras and camera calibrations in the system.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.RmsOfResidualsRaw2D">
            <summary>
Gets the RMS error of the RMS errors of the Raw2D residuals
for each combination of calibration plate pose and camera.
</summary>
            <value>
The RMS error of the RMS errors of the Raw2D residuals
for each combination of calibration plate pose and camera.
</value>
            <remarks>
This value can be used as an overall accuracy metric for all
the cameras and camera calibrations in the system.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.CameraCalibrationResult">
            <summary>
Gets the camera calibration result for all the calibration plate poses and for all the cameras.
</summary>
            <value>
The camera calibration result.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationValidationResult">
            <summary>
This class encapsulates the results of a 3D camera calibration validation.
It contains a 3D camera calibration result and two RMS error values.
The two RMS error values are the RMS error of the 
RMS errors in the residuals observed over all of the calibration plate poses
for all the cameras.
One RMS error value is the RMS error observed for raw image 2D residuals.
The other RMS error value is the RMS error observed for the physical 3D residuals. 
These RMS error values are designed to be used to determine thresholds
for whether a system is "out of calibration".
<para> Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DCameraCalibrationValidator class and always
contains the results from a camera calibration validation.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.CreateCameraCalibWherePhys3DIsHand3D(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Create the camera calibration for a stationary camera hand-eye calibration
at the supplied robot hand pose.
The physical 3D (Phys3D) space is the Hand 3D space (Hand3D).
</summary>
            <param name="robotBase3DFromHand3D">
The current robot hand pose in RobotBase 3D space (RobotBase3D).
</param>
            <returns>
The 3D camera calibration composed of the camera intrinsics in this result, and the
stationary camera's extrinsics, derived from the supplied robot hand pose.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
If IsCameraMoving would return true.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.CreateCameraCalibWherePhys3DIsRobotBase3D(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Create the camera calibration for a moving camera hand-eye calibration, 
at the supplied robot hand pose.
The physical 3D space (Phys3D) is the RobotBase 3D space (RobotBase3D).
</summary>
            <param name="robotBase3DFromHand3D">
The current robot hand pose in RobotBase 3D space (RobotBase3D).
</param>
            <returns>
The 3D camera calibration composed of the camera intrinsics in this result, and the
moving camera's extrinsics, derived from the supplied robot hand pose.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.InvalidOperationException">
If IsCameraMoving would return false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.CreateCameraCalibWherePhys3DIsRobotBase3D">
            <summary>
Create the camera calibration for a stationary camera hand-eye calibration.
The physical 3D space (Phys3D) is the RobotBase 3D space (RobotBase3D).
</summary>
            <returns>
The 3D camera calibration composed of the camera intrinsics in this result, and the
stationary camera's extrinsics (in RobotBase 3D space).
</returns>
            <exception cref="T:System.InvalidOperationException">
If IsCameraMoving would return true.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.CreateCameraCalib(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Create the camera calibration based on the supplied camera extrinsics.
</summary>
            <param name="cam3DFromPhys3D">
The camera extrinsics. This rigid 3D transform maps points from the
physical 3D space (Phys3D) into the camera 3D space (Camera3D).
</param>
            <returns>
The 3D camera calibration composed of the camera intrinsics in this result, and the
supplied camera extrinsics.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.Raw2DFromCamera2D">
            <summary>
Gets the camera intrinsics (which correspond to the mapping from Camera2D space
(the z=1 plane in front of the camera) to Raw2D image space).
</summary>
            <value>
The camera intrinsics (which correspond to the mapping from Camera2D space
(the z=1 plane in front of the camera) to Raw2D image space).
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.RobotBase3DFromStationaryCamera3D">
            <summary>
Gets the transformation from Camera3D to RobotBase3D for a stationary camera/moving plate
calibration. The returned transformation maps points from the calibrated camera 3D
space to robot base 3D space.
</summary>
            <value>
The transformation from Camera3D to RobotBase3D for a stationary camera/moving plate
calibration. 
</value>
            <exception cref="T:System.InvalidOperationException">
If this is a moving camera calibration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.MovingCamera3DFromHand3D">
            <summary>
Gets the hand-eye transformation for a moving camera/stationary plate
calibration. 
The returned transformation maps points from the robot hand 3D space (Hand3D) to
the calibrated camera 3D space (Camera3D). 
</summary>
            <value>
The hand-eye transformation for a moving camera/stationary plate
calibration. 
</value>
            <exception cref="T:System.InvalidOperationException">
If this is a stationary camera calibration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.PositionResidualsPhys3D">
            <summary>
Gets the overall residual statistics. These statistics represent all mapped samples
from all stations.
</summary>
            <value>
The overall residual statistics.
</value>
            <exception cref="T:System.Exception">
If this result has no valid residual statistics.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.IsResidualsComputed">
            <summary>
Gets whether this result contains valid residual statistics.
</summary>
            <value>
Whether this result contains valid residual statistics.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.CalibRoiRaw2D">
            <summary>
Gets the region of interest of the raw acquired calibration image (the field of view
of the calibrated camera).
</summary>
            <value>
The region of interest of the raw acquired calibration image (the field of view
of the calibrated camera).
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.IsCameraMoving">
            <summary>
Gets whether this is a moving camera hand-eye calibration result. 
</summary>
            <value>
True if this is a moving camera hand-eye calibration result; False otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.#ctor(Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult.#ctor">
            <summary>
Construct this default Cog3DHandEyeCalibrationResult.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DHandEyeCalibrationResult">
            <summary>
This class encapsulates a hand-eye calibration result. 
Note that this class is immutable - it may not be changed once
it has been constructed. The usage model for this class is that it 
gets factoried by the Cog3DHandEyeCalibrator class and always 
contains a hand-eye calibration result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.ExportToCVLArchive(System.String)">
            <summary>
Convert this camera calibration result to a cc3DCameraCalibResult and export to a CVL archive file.
</summary>
            <param name="pathOfCVLArchiveFile">
The path of CVL archive file to store the camera calibration result. May not be null or empty.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null or an empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.ImportFromCVLArchive(System.String)">
            <summary>
Import a cc3DCameraCalibResult from a CVL archive file.
</summary>
            <param name="pathOfCVLArchiveFile">
The path of the CVL archive file containing the camera calibration result. May not be null or empty.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null or an empty string.
</exception>
            <returns>
A converted 3D camera calibration result.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.GetRaw2DFromCamera2Ds">
            <summary>
Get the camera intrinsics from the camera calibration result.
</summary>
            <returns>
The list of camera intrinsics for all cameras.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.FeatureCoverageOfCameraPlate(System.Int32,System.Int32)">
            <summary>
Gets the proportion of a particular camera's field of view which was covered 
by the convex hull of the feature correspondences found in the particular
calibration plate pose.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <param name="platePoseIndex">
The zero-based index of the calibration plate pose.
</param>
            <value>
The proportion of the specified camera's field of view which was covered 
by the convex hull of the feature correspondences found in the specified calibration 
plate pose.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.FeatureCoverageOfCamera(System.Int32)">
            <summary>
Gets the proportion of a particular camera's field of view which was covered 
by the convex hull of the feature correspondences found in all calibration plate poses.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <value>
The proportion of the specified camera's field of view which was covered 
by the convex hull of the feature correspondences found in all calibration 
plate poses.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.NumCorrespondences(System.Int32,System.Int32)">
            <summary>
Gets the number of correspondences found for 
a particular calibration plate pose and a particular camera.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <param name="platePoseIndex">
The zero-based index of the calibration plate pose.
</param>
            <value>
The number of correspondences found for the specified calibration plate pose and the specified camera.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.ResidualsPhys3D(System.Int32,System.Int32)">
            <summary>
Gets the residual statistics in Phys3D for the specified calibration plate pose and the specified camera.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <param name="platePoseIndex">
The zero-based index of the calibration plate pose.
</param>
            <value>
The residual statistics in Phys3D for the specified calibration plate pose and the specified camera.
</value>
            <inheritdoc cref="P:Cognex.VisionPro3D.ICog3DBase.ResidualsPhys3DCalibration" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.ResidualsRaw2D(System.Int32,System.Int32)">
            <summary>
Gets the residual statistics in Raw2D for the specified calibration plate pose and the specified camera.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <param name="platePoseIndex">
The zero-based index of the calibration plate pose.
</param>
            <value>
The residual statistics in Raw2D for the specified calibration plate pose and the specified camera.
</value>
            <inheritdoc cref="P:Cognex.VisionPro3D.ICog3DBase.ResidualsRaw2DCalibration" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.OverallResidualsRaw2D">
            <summary>
Gets the overall residual statistics in Raw2D (over all cameras and over all calibration plate poses). 
</summary>
            <value>
The overall residual statistics in Raw2D. 
</value>
            <inheritdoc cref="P:Cognex.VisionPro3D.ICog3DBase.ResidualsRaw2DCalibration" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.OverallResidualsPhys3D">
            <summary>
Gets the overall residual statistics in Phys3D (over all cameras and over all calibration plate poses). 
</summary>
            <value>
The overall residual statistics in Phys3D. 
</value>
            <inheritdoc cref="P:Cognex.VisionPro3D.ICog3DBase.ResidualsPhys3DCalibration" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.MaximumTilt">
            <summary>
Gets the maximum tilt of the calibration plate over all 
the measured poses.
</summary>
            <value>
The maximum tilt of the calibration plate. 
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.CalPlate3DFromCamera3D(System.Int32,System.Int32)">
            <summary>
Gets the pose of  a particular camera relative to the calibration plate at a particular 
calibration plate pose index.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <param name="platePoseIndex">
The zero-based index of the calibration plate pose.
</param>
            <value>
The pose of  a particular camera relative to the calibration plate at the specified calibration
plate pose index.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="platePoseIndex" />  is out of range [0, NumCalPlatePoses-1], or
<paramref name="cameraIndex" />  is out of range [0, NumCameras-1].
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.NumCalPlatePoses">
            <summary>
Gets the number of calibration plate poses, i.e., the number of views. 
</summary>
            <value>
The number of calibration plate poses.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.NumCameras">
            <summary>
Gets the number of cameras inside this camera calibration result. 
</summary>
            <value>
The number of cameras.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.Camera3DFromPhys3D(System.Int32)">
            <summary>
Gets the transform between the specified camera and the physical 
coordinate system (Phys3D). The physical coordinate system 
corresponds to the view having pose type PoseDefineWorldCoord.
</summary>
            <param name="cameraIndex">
The zero-based index of the camera.
</param>
            <value>
The transform between the specified camera and the physical 
coordinate system (Phys3D).
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="cameraIndex" />  is out of range [0, NumCameras-1].
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.GetPhys3DFromCalPlate3Ds">
            <summary>
Get the calibration plate poses computed by the 3D camera calibration
algorithm. The poses are computed with respect to the calibration plate
pose which defines the world coordinates (which is equivalent to Phys3D).
</summary>
            <returns>
A list of calibration plate poses.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.GetRaw2DFromPhys3Ds">
            <summary>
Get the calibrations computed by the 3D camera calibration
algorithm. 
</summary>
            <returns>
The list of camera calibrations.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationResult.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibrationResult)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationResult">
            <summary>
This class holds 3D camera calibration result.  It contains the 
set of Cog3DCameraCalibration for all the cameras.
Note that this class is immutable - it may not be changed once
it has been constructed.  The usage model for this class is that it 
gets factoried by the Cog3DCameraCalibrator class and *always* 
contains a camera calibration result. Note that in camera calibration,
Phys3D is the coordinate space defined by the calibration plate pose 
with pose type of Cog3DCalibrationPlatePoseTypeConstants.PoseDefineWorldCoord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.ExportToCVLArchive(System.String)">
            <summary>
Convert this camera calibration to a cc3DCameraCalib and export to a CVL archive file.
</summary>
            <param name="pathOfCVLArchiveFile">
The path of CVL archive file to store the camera calibration. May not be null or empty.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null or an empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.ImportFromCVLArchive(System.String)">
            <summary>
Import a cc3DCameraCalib from a CVL archive file.
</summary>
            <param name="pathOfCVLArchiveFile">
The path of the CVL archive file containing the camera calibration. May not be null or empty.
</param>
            <exception cref="T:System.ArgumentException">
If the input argument is null or an empty string.
</exception>
            <returns>
A converted 3D camera calibration.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.RealEqual(Cognex.VisionPro3D.Cog3DCameraCalibration,Cognex.VisionPro3D.Cog3DCameraCalibration,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.op_Multiply(Cognex.VisionPro3D.Cog3DCameraCalibration,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Operator for mapping a 3D physical position to a Raw2D image position using the specified camera calibration.
</summary>
            <param name="cameraCalibration">
The specified camera calibration. May not be null.
</param>
            <param name="pointPhys3D">
The 3D point in Phys3D to map using the specified camera calibration.
</param>
            <returns>
The mapped point in Raw2D.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="cameraCalibration" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.CloneComposeWithPhys3DFromAny3D(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
                <para> Create a new camera calibration by composing the current 
Camera3DFromPhys3D transform with the specified 
Phys3DFromAny3D transform. The value of camera3DFromPhys3D in the new camera calibration object 
becomes </para>
                <para>    Camera3DFromPhys3D * <paramref name="phys3DFromAny3D" /></para>
            </summary>
            <param name="phys3DFromAny3D">
The transform from a 3D space to the current camera calibration's Phys3D. May not be null.
</param>
            <returns>
The created camera calibration.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="phys3DFromAny3D" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.CloneWithNewCamera3DFromPhys3D(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Create a new camera calibration by using the specified
 Camera3DFromPhys3D transform.
</summary>
            <param name="newCamera3DFromPhys3D">
The new Camera3DFromPhys3D transform. May not be null.
</param>
            <returns>
The created new camera calibration.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="newCamera3DFromPhys3D" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.ComputeRayPhys3DFromPointRaw2D(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Compute a 3D ray through the camera origin from the given
2D image position.
</summary>
            <param name="pointRaw2D">
The 2D image point in  Raw2D space.
</param>
            <returns>
A ray in Phys3D.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.MapPointFromRaw2DToPhys3D(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants@)">
            <summary>
Map a 2D point from Raw2D to a 3D point in Phys3D. The 3D physical
point is computed by intersecting
the ray corresponding to a 2D raw image point with the given plane in Phys3D.
</summary>
            <param name="pointRaw2D">
The 2D point in  Raw2D space.
</param>
            <param name="planePhys3D">
The 3D plane in Phys3D used for intersection with the ray. May not be null.
</param>
            <param name="pointPhys3D">
A reference to the 3D point to store the resulting intersection position between the ray and the plane.  
</param>
            <param name="resultStatus">
jA reference to the intersection result status to store the intersection status.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="planePhys3D" /> is null.
</exception>
            <remarks>
The resultStatus is set to Cog3DShapeIntersectionStatusConstants.Intersect if 
<paramref name="pointPhys3D" /> is computed; Otherwise it is set to 
Cog3DShapeIntersectionStatusConstants.None, and <paramref name="pointPhys3D" /> 
is not updated.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.MapPointFromPhys3DToRaw2D(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Project a 3D point from Phys3D to Raw2D.
</summary>
            <param name="pointPhys3D">
The 3D point in  Phys3D.
</param>
            <returns>
The projected point in Raw2D.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibration.CalibRoiRaw2D">
            <summary>
Gets the region of interest (the field of view) of the raw 
acquired image (the field of view of the camera). 
</summary>
            <value>
The region of interest of the raw acquired image.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibration.Phys3DFromCamera3D">
            <summary>
Get the inverse of the camera extrinsics from this camera calibration. 
</summary>
            <value>
The 3D transform that corresponds to Phys3D space from Camera3D space.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibration.Camera3DFromPhys3D">
            <summary>
Get the camera extrinsics from this camera calibration. 
</summary>
            <value>
The camera extrinsics that correspond to the 
position of the camera with respect to Phys3D space.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibration.Raw2DFromCamera2D">
            <summary>
Gets the camera intrinsic parameters from this camera calibration. 
</summary>
            <value>
The camera intrinsic parameters.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibration.IsTelecentric">
            <summary>
Gets whether this camera calibration's distortion model is 
Cog3DCameraCalibrationDistortionModelConstants::eTelecentric. 
</summary>
            <value>
True if this camera calibration's distortion model is 
Cog3DCameraCalibrationDistortionModelConstants::eTelecentric; False otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics,Cognex.VisionPro3D.Cog3DTransformRigid,System.Drawing.Rectangle)">
            <summary>
Construct this Cog3DCameraCalibration using the specified camera intrinsics, 
Camera3DFromPhys3D pose, and the specified calibration region of interest.
</summary>
            <param name="raw2DFromCamera2D">
The camera intrinsics. May not be null.
</param>
            <param name="camera3DFromPhys3D">
The camera extrinsics. May not be null.
</param>
            <param name="calibROIRaw2D">
The region of interest (the field of view) of the raw 
acquired image (the field of view of the camera). Must be the size of acquired calibration images
for this camera (with origin(0,0)).
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="raw2DFromCamera2D" /> or <paramref name="camera3DFromPhys3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If width or height of <paramref name="calibROIRaw2D" /> is equal or less than 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibration.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibration)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibration">
            <summary>
This class holds intrinsic and extrinsic camera calibration parameters for one
camera. 
<para> Note that in camera calibration,
Phys3D is the coordinate space defined by the calibration plate pose 
with pose type of Cog3DCalibrationPlatePoseTypeConstants.PoseDefineWorldCoord.
</para><para> Note that this class is immutable - it may not be changed once
it has been constructed. </para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.RealEqual(Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics,Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.MapPointFromCamera2DToRaw2D(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Map a 2D point from Camera2D to Raw2D.
</summary>
            <param name="pointCamera2D">
The 2D point in Camera2D.
</param>
            <returns>
The mapped point.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.MapPointFromRaw2DToCamera2D(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Map a 2D point from Raw2D to Camera2D.
</summary>
            <param name="pointRaw2D">
The 2D point in Raw2D.
</param>
            <returns>
The mapped point.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.DistortionModel">
            <summary>
Gets the distortion model. 
</summary>
            <value>
The distortion model.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.GetKc">
            <summary>
Get the coefficients of lens distortion. 
</summary>
            <returns>
The coefficients of lens distortion.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.Skew">
            <summary>
Gets the skew coefficient. 
</summary>
            <value>
The skew coefficient.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.Translation">
            <summary>
Gets the x and y translations. 
</summary>
            <value>
The x and y translations.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.Scale">
            <summary>
Gets the x and y scales. 
</summary>
            <value>
The x and y scales.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.#ctor(Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics.#ctor(Cognex.VisionPro3D.Cog3DVect2,System.Double,Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DCameraCalibrationDistortionModelConstants,Cognex.VisionPro3D.Cog3DScalarCollection)">
            <summary>
Construct this Cog3DCameraCalibrationIntrinsics using the specified camera intrinsics parameters.   
</summary>
            <param name="scale">
The x and y scales.
</param>
            <param name="translation">
The x and y translations.
</param>
            <param name="skew">
The skew coefficient. 
</param>
            <param name="distortionModel">
The distortion model. 
</param>
            <param name="kc">
The coefficients of lens distortion. Note that the number of elements in Kc must match the distortion model <paramref name="distortionModel" />.
</param>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item> 
If <paramref name="scale" />.X is less or equal to 0, or <paramref name="scale" />.Y is less or equal to 0.
</item>
                    <item> 
If <paramref name="kc" /> does not have the number of coefficients required for <paramref name="distortionModel" />.
</item>
                </list>
            </exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationIntrinsics">
            <summary>
This class holds camera intrinsic parameters. These
parameters include: two scales, skew, translation
and coefficients of radial distortion.
Note that this class is immutable - it may not be changed once
it has been constructed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCameraCalibrationDistortionModelConstants">
            <summary>
This class defines enumeration constants used for calibration distortion model.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCameraCalibrationDistortionModelConstants.eTelecentric">
            <summary>
Supported in 3D camera calibration, and used for telecentric lenses.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCameraCalibrationDistortionModelConstants.e3ParamRadial">
            <summary>
Supported in 3D camera calibration, and may be used for “low distortion” 
lenses – where the distortion is not apparent to the human eye – but where 
distortion correction can improve accuracy performance nonetheless.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCameraCalibrationDistortionModelConstants.eNoDistortion">
            <summary>
Supported in 3D camera calibration, and may be used for ideal lenses without distortion.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCameraCalibrationDistortionModelConstants.eSineTanLawProjection">
            <summary>
Supported in 3D camera calibration, and may be used for “high distortion” 
lenses – short focal length lenses which exhibit apparent distortion.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPositionResiduals.RealEqual(Cognex.VisionPro3D.Cog3DPositionResiduals,Cognex.VisionPro3D.Cog3DPositionResiduals,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPositionResiduals.op_Inequality(Cognex.VisionPro3D.Cog3DPositionResiduals,Cognex.VisionPro3D.Cog3DPositionResiduals)">
            <summary>
Compare two Cog3DPositionResiduals.
</summary>
            <param name="alpha">
The first PositionResiduals.
</param>
            <param name="beta">
The second PositionResiduals.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPositionResiduals.op_Equality(Cognex.VisionPro3D.Cog3DPositionResiduals,Cognex.VisionPro3D.Cog3DPositionResiduals)">
            <summary>
Compare two Cog3DPositionResiduals.
</summary>
            <param name="alpha">
The first PositionResiduals.
</param>
            <param name="beta">
The second PositionResiduals.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPositionResiduals.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPositionResiduals.ResidualsDistance">
            <summary>
Gets the residual statistics based on Euclidian distance.
</summary>
            <value>
The residual statistics based on Euclidian distance.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPositionResiduals.ResidualsZ">
            <summary>
Gets the residual statistics based on distance measured solely along the "z" axis.
</summary>
            <value>
The residual statistics based on distance measured solely along the "z" axis.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPositionResiduals.ResidualsY">
            <summary>
Gets the residual statistics based on distance measured solely along the "y" axis.
</summary>
            <value>
The residual statistics based on distance measured solely along the "y" axis.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPositionResiduals.ResidualsX">
            <summary>
Gets the residual statistics based on distance measured solely along the "x" axis.
</summary>
            <value>
The residual statistics based on distance measured solely along the "x" axis.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPositionResiduals.#ctor(Cognex.VisionPro3D.Cog3DResiduals,Cognex.VisionPro3D.Cog3DResiduals,Cognex.VisionPro3D.Cog3DResiduals,Cognex.VisionPro3D.Cog3DResiduals)">
            <summary>
Construct this Cog3DPositionResiduals with the supplied values.
</summary>
            <param name="initialX">
The initial ResidualsX value.
</param>
            <param name="initialY">
The initial ResidualsY value.
</param>
            <param name="initialZ">
The initial ResidualsZ value.
</param>
            <param name="initialDistance">
The initial ResidualsDistance value.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPositionResiduals">
            <summary>
This value class holds residual error statistics for a collection of 3D locations.
This class lets you obtain both maximum and RMS error for differences in the x-, y-, and
 z-directions as well as for the Euclidean distance between expected and actual points.
Note that this class is immutable - it may not be changed once
it has been constructed.
<para>
The default values for properties ResidualsX, ResidualsY, ResidualsZ, and ResidualsDistance are 
default constructed Cog3DResiduals.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.RealEqual(Cognex.VisionPro3D.Cog3DAngleRange,Cognex.VisionPro3D.Cog3DAngleRange,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.op_Inequality(Cognex.VisionPro3D.Cog3DAngleRange,Cognex.VisionPro3D.Cog3DAngleRange)">
            <summary>
Compare two Cog3DAngleRange's.
</summary>
            <param name="alpha">
The first Cog3DAngleRange.
</param>
            <param name="beta">
The second Cog3DAngleRange.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.op_Equality(Cognex.VisionPro3D.Cog3DAngleRange,Cognex.VisionPro3D.Cog3DAngleRange)">
            <summary>
Compare two Cog3DAngleRange's.
</summary>
            <param name="alpha">
The first Cog3DAngleRange.
</param>
            <param name="beta">
The second Cog3DAngleRange.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.Dilate(Cognex.VisionPro3D.Cog3DAngleRange)">
            <summary>
Dilate this angle range by another angle range.
</summary>
            <param name="other">
The other angle range.
</param>
            <returns>
An angle range characterized by dilating this angle range by <paramref name="other" />.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.IsWithin(System.Double)">
            <summary>
Check whether a value is inside the angle range.
</summary>
            <param name="value">
The value (in radians) for checking.
</param>
            <returns>
True if <paramref name="value" /> is inside the angle range; false otherwise.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAngleRange.Length">
            <summary>
Gets the length of the angle range in radians, and is defined as follows:
<list type="bullet"><item> If RangeType is Cog3DRangeTypeConstants.Full, Length is 2 * Math.PI. </item><item> If RangeType is Cog3DRangeTypeConstants.Empty,Length is 0. </item><item> If RangeType is Cog3DRangeTypeConstants.Partial, Length is (End -Start). </item></list></summary>
            <value>
The length of the angle range in radians.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAngleRange.RangeType">
            <summary>
Gets the type of the angle range.
</summary>
            <value>
The type of the angle range.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAngleRange.Middle">
            <summary>
Gets the middle of the angle range in radians.
</summary>
            <value>
The middle of the angle range in radians.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If RangeType is NOT Cog3DRangeTypeConstants.Partial.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAngleRange.End">
            <summary>
Gets the end value of the angle range in radians.
</summary>
            <value>
The end value of the angle range in radians.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If RangeType is NOT Cog3DRangeTypeConstants.Partial.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAngleRange.Start">
            <summary>
Gets the start value of the angle range in radians.
</summary>
            <value>
The start value of the angle range in radians.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If RangeType is NOT Cog3DRangeTypeConstants.Partial.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.CreateFullRange">
            <summary>
Create a full range object.
</summary>
            <returns>
A Cog3DAngleRange object with full range.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAngleRange.#ctor(System.Double,System.Double)">
            <summary>
Construct this Cog3DAngleRange with the given start and end values. Note that if 
<paramref name="end" /> - <paramref name="start" /> &gt; 2*PI, then it constructs 
a full angle range.
</summary>
            <param name="start">
The start value of the angle range in radians.
</param>
            <param name="end">
The end value of the angle range in radians.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="start" /> &gt; <paramref name="end" />.
</exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DAngleRange">
            <summary>
This value class describes an angle range and associated operations. 
An angle range can have a range type of Cog3DRangeTypeConstants.Full, or .Empty, or .Partial.
If the range type is Cog3DRangeTypeConstants:Partial, it has a start value and 
an end value.
</summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> The default constructor creates an object with an empty angle range. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.RealEqual(Cognex.VisionPro3D.Cog3DRange,Cognex.VisionPro3D.Cog3DRange,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.op_Inequality(Cognex.VisionPro3D.Cog3DRange,Cognex.VisionPro3D.Cog3DRange)">
            <summary>
Compare two Cog3DRange's.
</summary>
            <param name="alpha">
The first Cog3DRange.
</param>
            <param name="beta">
The second Cog3DRange.
</param>
            <returns>
False if the two ranges are exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.op_Equality(Cognex.VisionPro3D.Cog3DRange,Cognex.VisionPro3D.Cog3DRange)">
            <summary>
Compare two Cog3DRange's.
</summary>
            <param name="alpha">
The first Cog3DRange.
</param>
            <param name="beta">
The second Cog3DRange.
</param>
            <returns>
True if the two ranges are exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.Erode(Cognex.VisionPro3D.Cog3DRange)">
            <summary>
Erode this range by another range.
</summary>
            <param name="other">
The other range.
</param>
            <returns>
A new range computed by eroding this range by <paramref name="other" />.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.Dilate(Cognex.VisionPro3D.Cog3DRange)">
            <summary>
Dilate this range by another range.
</summary>
            <param name="other">
The other range.
</param>
            <returns>
A new range computed by dilating this range by <paramref name="other" />.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.Scale(System.Double)">
            <summary>
Scale this range by the given amount.
</summary>
            <param name="value">
The scale factor.
</param>
            <returns>
A new range computed by scaling this range by <paramref name="value" />.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.Translate(System.Double)">
            <summary>
Translate this range by the given amount.
</summary>
            <param name="value">
The amount to translate.
</param>
            <returns>
A new range computed by translating this range by <paramref name="value" />.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.Intersect(Cognex.VisionPro3D.Cog3DRange)">
            <summary>
Intersect this range with another range.
</summary>
            <param name="other">
The other range.
</param>
            <returns>
A new range resulting from the intersection of this range and <paramref name="other" />.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.IsWithin(System.Double)">
            <summary>
Check whether a value is inside the range.
</summary>
            <param name="value">
The value for checking.
</param>
            <returns>
True if <paramref name="value" /> is inside the range; false otherwise.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRange.Length">
            <summary>
Gets the length of the range, and is defined as follows:
<list type="bullet"><item> If RangeType is Cog3DRangeTypeConstants.Full, Length is Double.MaxValue. </item><item> If RangeType is Cog3DRangeTypeConstants.Empty,Length is 0. </item><item> If RangeType is Cog3DRangeTypeConstants.Partial, Length is (End -Start). </item></list></summary>
            <value>
The length of the range.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRange.RangeType">
            <summary>
Gets the type of the range.
</summary>
            <value>
The type of the range.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRange.Middle">
            <summary>
Gets the middle of the range.
</summary>
            <value>
The middle of the range.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If RangeType is NOT Cog3DRangeTypeConstants.Partial.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRange.End">
            <summary>
Gets the end value of the range.
</summary>
            <value>
The end value of the range.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If RangeType is NOT Cog3DRangeTypeConstants.Partial.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRange.Start">
            <summary>
Gets the start value of the range.
</summary>
            <value>
The start value of the range.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If RangeType is NOT Cog3DRangeTypeConstants.Partial.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.CreateFullRange">
            <summary>
Create a full range object.
</summary>
            <returns>
A Cog3DRange object with full range.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRange.#ctor(System.Double,System.Double)">
            <summary>
Construct this Cog3DRange with the given start and end values.
</summary>
            <param name="start">
The start value of the range.
</param>
            <param name="end">
The end value of the range.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="start" /> &gt; <paramref name="end" />.
</exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRange">
            <summary>
This value class describes a range and associated operations. 
A range can have a range type of Cog3DRangeTypeConstants.Full, or .Empty, or .Partial.
If the range type is Cog3DRangeTypeConstants:Partial, it has a start value and 
an end value.
</summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> The default constructor creates an object with an empty range. </item>
                </list>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRangeTypeConstants">
            <summary>
This class defines enumeration constants used for Cog3DRange.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeTypeConstants.Full">
            <summary>
Range spans the entire space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeTypeConstants.Empty">
            <summary>
Range is completely empty.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DRangeTypeConstants.Partial">
            <summary>
Range spans a finite segment.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DResiduals.RealEqual(Cognex.VisionPro3D.Cog3DResiduals,Cognex.VisionPro3D.Cog3DResiduals,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DResiduals.op_Inequality(Cognex.VisionPro3D.Cog3DResiduals,Cognex.VisionPro3D.Cog3DResiduals)">
            <summary>
Compare two Cog3DResiduals.
</summary>
            <param name="alpha">
The first Residual.
</param>
            <param name="beta">
The second Residual.
</param>
            <returns>
False if the two Residuals are exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DResiduals.op_Equality(Cognex.VisionPro3D.Cog3DResiduals,Cognex.VisionPro3D.Cog3DResiduals)">
            <summary>
Compare two Cog3DResiduals.
</summary>
            <param name="alpha">
The first Residual.
</param>
            <param name="beta">
The second Residual.
</param>
            <returns>
True if the two Residuals are exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DResiduals.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DResiduals.Max">
            <summary>
Gets the maximum residual value.
</summary>
            <value>
The maximum residual value.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DResiduals.Rms">
            <summary>
Gets the RMS residual value.
</summary>
            <value>
The RMS residual value.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DResiduals.#ctor(System.Double,System.Double)">
            <summary>
Construct this Cog3DResiduals with the supplied Rms, Max values.
</summary>
            <param name="initialRms">
The initial Rms value.
</param>
            <param name="initialMax">
The initial Max value.
</param>
            <exception cref="T:System.ArgumentException">
If any argument is less than 0, or 
initialMax is less than initialRms.
</exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DResiduals">
            <summary>
This value class holds residual statistics information.
Residual error is the difference between a measured metric and its 
expected value. Residual statistics may be expressed as the
maximum error (the largest difference) or the RMS error (Root Mean Square, 
the square root of the average of the differences squared).
Note that this class is immutable - it may not be changed once
it has been constructed.
<para>
The default values for properties Rms and Max are 0.0.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealPerpendicular(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DPlane,System.Double)">
            <summary>
Check whether one line and one plane  are perpendicular within the 
specified tolerance, i.e., whether <paramref name="line3D" /> is parallel
to the normal vector of <paramref name="plane3D" />
within <paramref name="epsilon" /> .
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="plane3D">
The 3D plane. May not be null.
</param>
            <param name="line3D">
The 3D line. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="plane3D" /> and <paramref name="line3D" /> are
perpendicular within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="plane3D" /> or <paramref name="line3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="plane3D" /> is degenerate or <paramref name="line3D" />
is degenerate.
</exception>
            <remarks>
This method computes the cross product of 
<paramref name="line3D" />.Direction and 
<paramref name="plane3D" />.Normal. If
        the length of the cross product is less than or equal to 
        <paramref name="epsilon" />, returns true, false otherwise
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DPlane,System.Double)">
            <summary>
Check whether one line and one plane are parallel within the specified 
tolerance, i.e., whether <paramref name="line3D" /> is 
perpendicular to the normal vector of <paramref name="plane3D" />
within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="plane3D">
The 3D plane. May not be null.
</param>
            <param name="line3D">
The 3D line. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="plane3D" /> and <paramref name="line3D" /> are
parallel within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="plane3D" /> or <paramref name="line3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="plane3D" /> is degenerate or <paramref name="line3D" />
is degenerate.
</exception>
            <remarks>
This method computes the dot product of 
<paramref name="line3D" />.Direction and 
<paramref name="plane3D" />.Normal. If
  the absolute value of the dot product is less than or equal to 
 <paramref name="epsilon" />, returns true, false otherwise
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealAntiParallel(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,System.Double)">
            <summary>
Check whether two planes  are anti-parallel
within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="planeA">
The first plane. May not be null.
</param>
            <param name="planeB">
The second plane. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="planeA" /> and <paramref name="planeB" /> are 
anti-parallel within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="planeA" /> or <paramref name="planeB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="planeA" /> is degenerate or <paramref name="planeB" />
is degenerate.
</exception>
            <remarks>
See section of remarks in 
<see cref="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,System.Double)" /></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallelIncludingDirection(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,System.Double)">
            <summary>
Check whether two planes  are parallel including direction 
within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="planeA">
The first plane. May not be null.
</param>
            <param name="planeB">
The second plane. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="planeA" /> and <paramref name="planeB" /> are 
parallel including direction 
within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="planeA" /> or <paramref name="planeB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="planeA" /> is degenerate or <paramref name="planeB" />
is degenerate.
</exception>
            <remarks>
See section of remarks in 
<see cref="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,System.Double)" /></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,System.Double)">
            <summary>
Check whether two planes  are parallel including direction 
or anti-parallel within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="planeA">
The first plane. May not be null.
</param>
            <param name="planeB">
The second plane. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="planeA" /> and <paramref name="planeB" /> 
are parallel including direction 
or anti-parallel within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="planeA" /> or <paramref name="planeB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="planeA" /> is degenerate or <paramref name="planeB" />
is degenerate.
</exception>
            <remarks>
Plane parallelism checking methods compute the cross product and dot 
product of the two unit normal vectors of 
<paramref name="planeA" /> and   <paramref name="planeB" />.
<list type="bullet"><item> If the length of the cross product vector is less than or equal to
     <paramref name="epsilon" />,  AreRealParallel() returns true; </item><item>  If the dot product is greater than 0 and AreRealParallel() is 
   true, AreRealParallelIncludingDirection() returns true; </item><item> If the dot product is less than 0 and AreRealParallel() is true, 
        AreRealAntiParallel() returns true. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealAntiParallel(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,System.Double)">
            <summary>
Check whether two lines  are anti-parallel
within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="lineA">
The first line. May not be null.
</param>
            <param name="lineB">
The second line. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="lineA" /> and <paramref name="lineB" /> are
anti-parallel within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="lineA" /> or <paramref name="lineB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="lineA" /> is degenerate or <paramref name="lineB" />
is degenerate.
</exception>
            <remarks>
See section of remarks in 
<see cref="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,System.Double)" /></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallelIncludingDirection(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,System.Double)">
            <summary>
Check whether two lines  are parallel including direction 
within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="lineA">
The first line. May not be null.
</param>
            <param name="lineB">
The second line. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="lineA" /> and <paramref name="lineB" />
are parallel including direction 
within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="lineA" /> or <paramref name="lineB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="lineA" /> is degenerate or <paramref name="lineB" />
is degenerate.
</exception>
            <remarks>
See section of remarks in 
<see cref="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,System.Double)" /></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.AreRealParallel(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,System.Double)">
            <summary>
Check whether two lines  are parallel including direction 
or anti-parallel within the specified tolerance.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="lineA">
The first line. May not be null.
</param>
            <param name="lineB">
The second line. May not be null.
</param>
            <param name="epsilon">
The tolerance used in checking.
</param>
            <returns>
True if <paramref name="lineA" /> and <paramref name="lineB" /> are 
parallel including direction 
or anti-parallel within the specified tolerance, false otherwise.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="lineA" /> or <paramref name="lineB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="lineA" /> is degenerate or <paramref name="lineB" /> is
degenerate.
</exception>
            <remarks>
Line parallelism checking methods compute the cross product and dot 
product of the two unit direction vectors of <paramref name="lineA" />
and   <paramref name="lineB" />.
<list type="bullet"><item> If the length of the cross product vector is less than or equal to
     <paramref name="epsilon" />,  AreRealParallel() returns true; </item><item>  If the dot product is greater than 0 and AreRealParallel() is 
       true, AreRealParallelIncludingDirection() returns true; </item><item> If the dot product is less than 0 and AreRealParallel() is true, 
        AreRealAntiParallel() returns true. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.ProjectOntoPlane(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DLineSeg,Cognex.VisionPro3D.Cog3DLineSeg@,Cognex.VisionPro3D.Cog3DShapeProjectionStatusConstants@)">
            <summary>
Project a 3D line segment onto a specified 3D plane.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="plane3D">
The 3D plane to project onto. May not be null.
</param>
            <param name="lineSeg3D">
The 3D line segment. May not be null.
</param>
            <param name="projectedLineSeg3D">
This output parameter is used to keep the projected line segment.
</param>
            <param name="projectionStatus">
This output parameter is used to keep the projection status. 
</param>
            <remarks>
If <paramref name="projectionStatus" /> is 
Cog3DShapeProjectionStatusConstants.DegenerateProjection,
<paramref name="projectedLineSeg3D" /> will be a degenerate line segment.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="plane3D" /> or <paramref name="lineSeg3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="plane3D" /> is degenerate or 
<paramref name="lineSeg3D" /> is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.ProjectOntoPlane(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine@,Cognex.VisionPro3D.Cog3DShapeProjectionStatusConstants@)">
            <summary>
Project a 3D line onto a specified 3D plane.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="plane3D">
The 3D plane to project onto. May not be null.
</param>
            <param name="line3D">
The 3D line. May not be null.
</param>
            <param name="projectedLine3D">
This output parameter is used to keep the projected line.
</param>
            <param name="projectionStatus">
This output parameter is used to keep the projection status. 
</param>
            <remarks>
If <paramref name="projectionStatus" /> is 
Cog3DShapeProjectionStatusConstants.DegenerateProjection,
<paramref name="projectedLine3D" /> will be a degenerate line.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="plane3D" /> or <paramref name="line3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="plane3D" /> is degenerate or <paramref name="line3D" />
is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.ComputeDistance(Cognex.VisionPro3D.Cog3DLineSeg,Cognex.VisionPro3D.Cog3DLineSeg)">
            <summary>
Compute the minimum distance between two line segments.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="lineSegA">
The first 3D line segment. May not be null.
</param>
            <param name="lineSegB">
The second 3D line segment. May not be null.
</param>
            <returns>
The minimum distance between <paramref name="lineSegA" /> and
<paramref name="lineSegB" /></returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="lineSegA" /> or <paramref name="lineSegB" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.Intersect(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DLine@,Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants@)">
            <summary>
Compute the intersection line between two given planes.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="planeA">
The first 3D plane. May not be null.
</param>
            <param name="planeB">
The second 3D plane. May not be null.
</param>
            <param name="line3D">
This output parameter is used to keep the intersection line.
</param>
            <param name="intersectionStatus">
This output parameter is used to keep the intersection status. 
</param>
            <remarks>
                <paramref name="line3D" /> is valid if and only if 
<paramref name="intersectionStatus" /> is
Cog3DShapeIntersectionStatusConstants.Intersect, and unchanged otherwise.
<para><paramref name="intersectionStatus" /> is 
Cog3DShapeIntersectionStatusConstants.Overlap 
if <paramref name="planeB" /> is coincident with 
<paramref name="planeA" />. </para><para><paramref name="intersectionStatus" /> is 
Cog3DShapeIntersectionStatusConstants.None 
if <paramref name="planeB" /> is parallel to  <paramref name="planeA" />.
</para></remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="planeA" /> or <paramref name="planeB" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="planeA" /> is degenerate or <paramref name="planeB" />
is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.Intersect(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DRay,Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants@)">
            <summary>
Compute the intersection point between the given plane and 
the given 3D ray.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="plane3D">
The 3D plane. May not be null.
</param>
            <param name="ray3D">
The 3D ray. May not be null.
</param>
            <param name="point3D">
This output parameter is used to keep the intersection point.
</param>
            <param name="intersectionStatus">
This output parameter is used to keep the intersection status. 
</param>
            <remarks>
                <paramref name="point3D" /> is valid if and only if 
<paramref name="intersectionStatus" /> is
Cog3DShapeIntersectionStatusConstants.Intersect, and unchanged otherwise.
<para><paramref name="intersectionStatus" /> is 
Cog3DShapeIntersectionStatusConstants.Overlap 
if <paramref name="ray3D" /> is on <paramref name="plane3D" />. </para><para><paramref name="intersectionStatus" /> is 
Cog3DShapeIntersectionStatusConstants.None 
if <paramref name="ray3D" /> is parallel to  <paramref name="plane3D" /> 
or if <paramref name="ray3D" /> is 
pointing away from <paramref name="plane3D" />.
</para><para> An intersection will not be found if <paramref name="ray3D" /> is 
       pointing away from <paramref name="plane3D" />. </para></remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="plane3D" /> or <paramref name="ray3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="plane3D" /> is degenerate or <paramref name="ray3D" /> is
degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.Intersect(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants@)">
            <summary>
Compute the intersection point between the given plane and 
the given 3D line.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="plane3D">
The 3D plane. May not be null.
</param>
            <param name="line3D">
The 3D line. May not be null.
</param>
            <param name="point3D">
This output parameter is used to keep the intersection point.
</param>
            <param name="intersectionStatus">
This output parameter is used to keep the intersection status. 
</param>
            <remarks>
                <paramref name="point3D" /> is valid if and only if 
<paramref name="intersectionStatus" /> is
Cog3DShapeIntersectionStatusConstants.Intersect, and unchanged otherwise.
<para><paramref name="intersectionStatus" /> is 
Cog3DShapeIntersectionStatusConstants.Overlap 
if <paramref name="line3D" /> is on <paramref name="plane3D" />. </para><para><paramref name="intersectionStatus" /> is 
Cog3DShapeIntersectionStatusConstants.None 
if <paramref name="line3D" /> is parallel to  <paramref name="plane3D" />.
</para></remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="plane3D" /> or <paramref name="line3D" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="plane3D" /> is degenerate or <paramref name="line3D" />
is degenerate.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeGeometricOperations.ComputeNearestPoints(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DVect3@)">
            <summary>
Compute the pair of nearest points between two lines.
It is the caller responsibility to map the shapes to a common 3D 
space before calling this method.
</summary>
            <param name="lineA">
The first line. May not be null.
</param>
            <param name="lineB">
The second line. May not be null.
</param>
            <param name="pointOnLineA">
This output parameter is a point on <paramref name="lineA" />.  The distance
between <paramref name="pointOnLineA" /> 
and <paramref name="pointOnLineB" /> is the shortest distance between
<paramref name="lineA" /> and <paramref name="lineB" />.
</param>
            <param name="pointOnLineB">
This output parameter is a point on <paramref name="lineB" />. The 
distance between <paramref name="pointOnLineA" /> 
and <paramref name="pointOnLineB" /> is the shortest distance between 
<paramref name="lineA" />  and <paramref name="lineB" />.
</param>
            <remarks>
If <paramref name="lineA" /> and <paramref name="lineB" /> are parallel 
or coincident, then the pair of 
nearest points is not unique. (<paramref name="pointOnLineA" />, 
<paramref name="pointOnLineB" />) is just
one of the pairs of nearest points.
</remarks>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="lineA" /> or <paramref name="lineB" /> is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DShapeGeometricOperations">
            <summary>
This class contains static methods that perform various 3D shape
geometric operations.
Note that this class has only static methods.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DShapeProjectionStatusConstants">
            <summary>
This class defines enumeration constants of the shape projection
status for 3D shapes.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DShapeProjectionStatusConstants.DegenerateProjection">
            <summary>
The projection results in a degenerate shape.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DShapeProjectionStatusConstants.StandardProjection">
            <summary>
Standard projection
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.cfConvert_ICog3DShape(Cognex.VisionPro3D.ICog3DShape)">
            <summary>
Internal helper function to convert a .NET ICog3DShape to a CVL cc3DShape*.
</summary>
            <param name="shape">
The CVL shape used in the conversion.  May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the cvlShape argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the cvlShape argument is an unknown CVL shape.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.cfConvert_cc3DShape(cc3DShape*,System.Boolean)">
            <summary>
Internal helper function to convert a CVL cc3DShape* to a .NET ICog3DShape.
</summary>
            <param name="cvlShape">
The CVL shape used in the conversion.  May not be null.
</param>
            <param name="takeOwnership">
Specifies whether or not the .NET class should take ownership of the cvlShape.  
If takeOwnership is true, then ownership of the specified cvlShape 
is taken by the .NET class returned.
If takeOwnership is false, then a copy of the specified cvlShape is held
by the .NET class returned.
</param>
            <exception cref="T:System.ArgumentNullException">
If the cvlShape argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the cvlShape argument is an unknown CVL shape.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.RealEqual(Cognex.VisionPro3D.Cog3DCylinder,Cognex.VisionPro3D.Cog3DCylinder,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this cylinder through the specified rigid transform and 
returns a new Cog3DCylinder.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this cylinder.
</param>
            <returns>
The Cog3DCylinder resulting from mapping this shape through the specified 
rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.SetShapeFromScaledUnitCylinder(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Set the ShapeFromScaledUnitCylinder transform of this cylinder.   
It may change the 
value of StartCircle.  It does not change the value of Radius and Height.
</summary>
            <param name="shapeFromScaledUnitCylinder">
A Cog3DTransformRigid used to specify the ShapeFromScaledUnitCylinder 
transform of this cylinder.  This transform 
specifies the pose of the ScaledUnitCylinder in 3D space.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitCylinder" /> is null.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitCylinder </item>
                    <item> SfStartCircle </item>
                    <item> SfGetEndCircle </item>
                    <item> SfAxisDirection </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.GetShapeFromScaledUnitCylinder">
            <summary>
Get the ShapeFromScaledUnitCylinder transform of this cylinder.   
</summary>
            <returns>
The ShapeFromScaledUnitCylinder transform of this cylinder.  This transform 
specifies the pose of the ScaledUnitCylinder in 3D space.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.GetEndCircle">
            <summary>
Get the end circle of this cylinder.   
</summary>
            <returns>
The end circle of this cylinder.  
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.StartCircle">
            <summary>
Gets/Sets the start circle of this cylinder.
</summary>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="value" /> of setter is null.
</exception>
            <value>
The start circle of the cylinder, and it might be a degenerate circle. 
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfStartCircle </item>
                    <item> SfGetEndCircle </item>
                    <item> SfGetShapeFromScaledUnitCylinder </item>
                    <item> SfRadius </item>
                    <item> SfAxisDirection </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeVolume </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                    <item> SfIsDegenerateVolume </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.AxisDirection">
            <summary>
Gets the axis direction of this cylinder.
</summary>
            <value>
The axis direction of the cylinder.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.Height">
            <summary>
Gets/sets the height  of this cylinder.
</summary>
            <value>
The height of this cylinder.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="value" /> is less than 0.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfHeight </item>
                    <item> SfGetEndCircle </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeVolume </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateVolume </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.Radius">
            <summary>
Gets the radius of this cylinder.
</summary>
            <value>
The radius of this cylinder.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Curve, or .Surface, or .Volume.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is not  Cog3DShapeStateConstants.Curve, .Surface, or .Volume.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeDistanceVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeNearestPointVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.IsDegenerateVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCylinder.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.#ctor(Cognex.VisionPro3D.Cog3DCylinder)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.#ctor(Cognex.VisionPro3D.Cog3DCircle,System.Double,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a cylinder using the specified start circle, height, and
Cog3DShapeStateConstants.  The cylinder extends from the start circle
in the direction of the start circle's normal.
</summary>
            <param name="startCircle">
The start circle of the cylinder. May not be null, but a degenerate circle
is allowed.
</param>
            <param name="height">
The height of this cylinder.  Must be &gt;= 0.
</param>
            <param name="shapeState">
The state of this cylinder.  Must be Cog3DShapeStateConstants.Curve, 
.Surface, or .Volume.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="startCircle" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="height" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is not
Cog3DShapeStateConstants.Curve, .Surface, or .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.#ctor(System.Double,System.Double,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a cylinder using the specified radius, height, 
rigid transform, and Cog3DShapeStateConstants.
</summary>
            <param name="radius">
The radius of this cylinder.  Must be &gt;= 0.
</param>
            <param name="height">
The height of this cylinder.  Must be &gt;= 0.
</param>
            <param name="shapeFromScaledUnitCylinder">
The rigid transform that maps the ScaledUnitCylinder to a pose in 3D space.
May not be null.
</param>
            <param name="shapeState">
The state of this cylinder.  Must be Cog3DShapeStateConstants.Curve, 
.Surface, or .Volume.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="radius" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="height" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitCylinder" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is not
Cog3DShapeStateConstants.Curve, .Surface, or .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCylinder.#ctor">
            <summary>
Constructs a degenerate cylinder with Radius of 0, Height of 0,
ShapeFromScaledUnitCylinder of identity transform, 
and ShapeState of Cog3DShapeStateConstants.Volume.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCylinder">
            <summary>
This class encapsulates a 3D cylinder. 
A Cog3DCylinder can be defined by a 3D circle (StartCircle) and a 
height(Height). The 3D circle defines the cylinder's bottom circle
(StartCircle), radius (Radius) and axis direction (AxisDirection). 
The height (Height) defines the cylinder's height along the normal 
direction of StartCircle.
A 3D cylinder can also be defined by using a UnitCylinder, a radius, a height, and 
a rigid transform ShapeFromScaledUnitCylinder.
The UnitCylinder has a bottom unit circle centered at the origin, the axis
of the UnitCylinder is along the positive Z axis and has unit length.
Scale UnitCylinder using the specified radius and height, so the ScaledUnitCylinder
has the specified radius and height.
The rigid transform ShapeFromScaledUnitCylinder is used to transform
ScaledUnitCylinder to the expected pose in 3D space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.RealEqual(Cognex.VisionPro3D.Cog3DSphere,Cognex.VisionPro3D.Cog3DSphere,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this sphere through the specified rigid transform and 
returns a new Cog3DSphere.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this sphere.
</param>
            <returns>
The Cog3DSphere resulting from mapping this shape through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.SetShapeFromScaledUnitSphere(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Set the ShapeFromScaledUnitSphere transform of this sphere.   
It may change the 
value of Center.  It does not change the value of Radius.
</summary>
            <param name="shapeFromScaledUnitSphere">
A Cog3DTransformRigid used to specify the ShapeFromScaledUnitSphere transform of this sphere.  
This transform 
specifies the pose of the ScaledUnitSphere in 3D space.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitSphere" /> is null.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitSphere </item>
                    <item> SfCenter </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.GetShapeFromScaledUnitSphere">
            <summary>
Get the ShapeFromScaledUnitSphere transform of this sphere.   
</summary>
            <returns>
The ShapeFromScaledUnitSphere transform of this sphere.  This transform 
specifies the pose of the ScaledUnitSphere in 3D space.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.Center">
            <summary>
Gets/sets the center position of this sphere.
</summary>
            <value>
The center point of this sphere.
</value>
            <remarks>
The setter might change the value of GetShapeFromScaledUnitSphere().
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfCenter </item>
                    <item> SfGetShapeFromScaledUnitSphere </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.Radius">
            <summary>
Gets/sets the radius of this sphere.
</summary>
            <value>
The radius of this sphere.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="newRadius" /> is less than 0.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfRadius </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeVolume </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateSurface </item>
                    <item> SfIsDegenerateVolume </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Surface, or .Volume.
</value>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Surface, or .Volume.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeDistanceVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeNearestPointVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.IsDegenerateVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DSphere.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.#ctor(Cognex.VisionPro3D.Cog3DSphere)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.#ctor(System.Double,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a sphere using the specified radius, center, and
Cog3DShapeStateConstants.
</summary>
            <param name="radius">
The radius of the sphere.  radius must be &gt;= 0.
</param>
            <param name="center">
The center of the sphere.
</param>
            <param name="shapeState">
The state of this sphere.  Must be Cog3DShapeStateConstants.Surface,
or .Volume.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="radius" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is neither 
Cog3DShapeStateConstants.Surface, nor .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.#ctor(System.Double,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a sphere using the specified radius, rigid transform, 
and Cog3DShapeStateConstants.
</summary>
            <param name="radius">
The radius of this sphere.  Must be &gt;= 0.
</param>
            <param name="shapeFromScaledUnitSphere">
The rigid transform that maps the ScaledUnitSphere to a pose in 3D space.
</param>
            <param name="shapeState">
The state of this sphere.  Must be Cog3DShapeStateConstants.Surface, 
or .Volume.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="radius" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitSphere" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is neither 
Cog3DShapeStateConstants.Surface nor .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DSphere.#ctor">
            <summary>
Constructs a degenerate sphere with Radius of 0, Center of (0,0,0),
ShapeFromScaledUnitSphere of identity transform, 
and ShapeState of Cog3DShapeStateConstants.Volume.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DSphere">
            <summary>
This class encapsulates a 3D sphere. 
A Cog3DSphere can be defined by a radius (Radius) and a center (Center).
It can also be defined by a radius and a 3D rigid transform: the radius
defines a sphere centered at the origin (cc3DVect(0,0,0)) with the
specified radius, and the rigid transform (ShapeFromScaledUnitSphere) 
is used to transform the above sphere to the expected pose in 3D space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.RealEqual(Cognex.VisionPro3D.Cog3DPoint,Cognex.VisionPro3D.Cog3DPoint,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this point through the specified rigid transform and 
returns a Cog3DPoint.
</summary>
            <param name="transform">
The rigid transform to use when mapping this point.
</param>
            <returns>
The Cog3DPoint resulting from mapping this point through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="transform" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.Z">
            <summary>
Gets/sets the z component of this point's 3D position.
</summary>
            <value>
The z component of this point's 3D position.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.Y">
            <summary>
Gets/sets the y component of this point's 3D position.
</summary>
            <value>
The y component of this point's 3D position.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.X">
            <summary>
Gets/sets the x component of this point's 3D position.
</summary>
            <value>
The x component of this point's 3D position.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.ShapeState">
            <summary>
Gets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPoint.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.#ctor(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Constructs a Cog3DPoint using a specified Cog3DVect3.
</summary>
            <param name="point">
The position vector of the 3D point.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a Cog3DPoint using the specified 3D position.
</summary>
            <param name="x">
The x component of the point's 3D position.
</param>
            <param name="y">
The y component of the point's 3D position.
</param>
            <param name="z">
The z component of the point's 3D position.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.#ctor(Cognex.VisionPro3D.Cog3DPoint)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPoint.#ctor">
            <summary>
Constructs a  Cog3DPoint consistent with
Cog3DPoint(0, 0, 0).
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPoint">
            <summary>
This class encapsulates a 3D point shape.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.RealEqual(Cognex.VisionPro3D.Cog3DCircle,Cognex.VisionPro3D.Cog3DCircle,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this circle through the specified rigid transform and 
returns a Cog3DCircle.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this circle.
</param>
            <returns>
The Cog3DCircle resulting from mapping this shape through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.SetShapeFromScaledUnitCircle(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Set the ShapeFromScaledUnitCircle transform of this circle.   
It may change the 
value of Center.  It does not change the value of Radius.
</summary>
            <param name="shapeFromScaledUnitCircle">
A Cog3DTransformRigid used to specify the ShapeFromScaledUnitCircle transform of this circle.  
This transform 
specifies the pose of the ScaledUnitCircle in 3D space.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitCircle" /> is null.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitCircle </item>
                    <item> SfNormal </item>
                    <item> SfCenter </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.GetShapeFromScaledUnitCircle">
            <summary>
Get the ShapeFromScaledUnitCircle transform of this circle.   
</summary>
            <returns>
The ShapeFromScaledUnitCircle transform of this circle.  This transform 
specifies the pose of the ScaledUnitCircle in 3D space.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.Normal">
            <summary>
Gets/sets the normal direction of this circle.
</summary>
            <value>
The normal direction of this circle.
</value>
            <remarks>
The setter might change the value of GetShapeFromScaledUnitCircle().
</remarks>
            <exception cref="T:System.ArgumentException">
If <paramref name="normal" /> is (0,0,0).
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfNormal </item>
                    <item> SfGetShapeFromScaledUnitCircle </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.Center">
            <summary>
Gets/sets the center position of this circle.
</summary>
            <value>
The center point of this circle.
</value>
            <remarks>
The setter might change the value of GetShapeFromScaledUnitCircle().
</remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfCenter </item>
                    <item> SfGetShapeFromScaledUnitCircle </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.Radius">
            <summary>
Gets/sets the radius of this circle.
</summary>
            <value>
The radius of this circle.
</value>
            <exception cref="T:System.ArgumentException">
If <paramref name="newRadius" /> is less than 0.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfRadius </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Curve, or .Surface.
</value>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Curve, or .Surface.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCircle.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.#ctor(Cognex.VisionPro3D.Cog3DCircle)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.#ctor(System.Double,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a circle using the specified radius, center, normal direction, and
Cog3DShapeStateConstants.
</summary>
            <param name="radius">
The radius of the circle.  radius must be &gt;= 0.
</param>
            <param name="center">
The center of the circle.
</param>
            <param name="normal">
The normal direction of the circle.
</param>
            <param name="shapeState">
The state of this box.  Must be Cog3DShapeStateConstants..Curve, or .Surface.
</param>
            <exception cref="T:System.ArgumentException">
If radius is less than 0.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="normal" /> is (0,0,0).
</exception>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Curve, or .Surface.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.#ctor(System.Double,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a circle using the specified radius, transform, and Cog3DShapeStateConstants.
</summary>
            <param name="radius">
The radius of the circle.  radius must be &gt;= 0.
</param>
            <param name="shapeFromScaledUnitCircle">
The rigid transform that maps the ScaledUnitCircle to a pose in 3D space.
</param>
            <param name="shapeState">
The state of this box.  Must be Cog3DShapeStateConstants.Curve, or .Surface.
</param>
            <exception cref="T:System.ArgumentException">
If radius is less than 0.
</exception>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitCircle" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Curve, or .Surface.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCircle.#ctor">
            <summary>
Constructs a degenerate circle on the XY
plane and whose center is at the origin. Radius is 0, 
ShapeFromScaledUnitCircle is identity transform, 
and ShapeState is Cog3DShapeStateConstants.Surface.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCircle">
            <summary>
This is the shape class for representing an oriented 3D circle. 
A Cog3DCircle can be defined by a radius (Radius), a center (Center), and a normal 
direction (Normal). It can also be defined by a radius and a 3D rigid transform: 
the radius defines
a circle on the XY plane whose center is at the origin ((0,0,0)) and
has the specified radius, the rigid transform (ShapeFromScaledUnitCircle)  is used
to transform the above circle on the XY plane to the expected pose in 
3D space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.RealEqual(Cognex.VisionPro3D.Cog3DAlignedBox,Cognex.VisionPro3D.Cog3DAlignedBox,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.GetSurfaces">
            <summary>
Computes the surfaces of this box.
</summary>
            <returns>
The list of surfaces of this box. 
</returns>
            <remarks>
Notes:
<list type="bullet"><item> Assuming a unit box, the order of the returned rectangles is 
(uisng a pair of opposite vertices for each rectangle): 
<list type="bullet"><item>         0   Cog3DVect3(0,0,0), Cog3DVect3(1,1,0) </item><item>         1   Cog3DVect3(0,0,1), Cog3DVect3(1,1,1) </item><item>         2   Cog3DVect3(0,0,0), Cog3DVect3(1,0,1) </item><item>         3   Cog3DVect3(1,0,0), Cog3DVect3(1,1,1) </item><item>         4   Cog3DVect3(0,1,0), Cog3DVect3(1,1,1) </item><item>         5   Cog3DVect3(0,0,0), Cog3DVect3(0,1,1) </item></list></item><item>  Each element of the returned list has the
        ShapeState value of Cog3DShapeStateConstants.Surface no matter the current ShapeState
        value of the box.   </item><item>  Some elements of the returned list might be degenerate rectangles
        and some elements might be duplicate if this box is 
        degenerate. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.GetLineSegments">
            <inheritdoc cref="M:Cognex.VisionPro3D.Cog3DBox.GetLineSegments" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.GetVertices">
            <summary>
Computes the set of vertices defining this aligned box.  Assuming a 
unit box, the order of the returned vertices is: (0,0,0) (1,0,0)
(1,1,0) (0,1,0) (0,0,1) (1,0,1) (1,1,1), (0,1,1).
</summary>
            <returns>
The set of vertices defining this aligned box. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this aligned box through the specified rigid transform and 
returns a Cog3DBox.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this aligned box.
</param>
            <returns>
The Cog3DBox resulting from mapping this shape through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.Translation">
            <summary>
Gets/sets the translation of this aligned box.  Changing the translation 
will change the value returned by Center.
</summary>
            <value>
The translation of this aligned box.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfTranslation </item>
                    <item> SfCenter </item>
                    <item> SfGetSurfaces </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.Center">
            <summary>
Gets the center position of this aligned box.
</summary>
            <value>
The center point of this aligned box.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.Size">
            <summary>
Gets/sets the size of this aligned box.   The setter may change the 
value of Center.  It does not change the value of Translation.
</summary>
            <value>
The size of this aligned box.
</value>
            <exception cref="T:System.ArgumentException">
If any member of <paramref name="size" /> is less than 0.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfSize </item>
                    <item> SfCenter </item>
                    <item> SfGetSurfaces </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeVolume </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                    <item> SfIsDegenerateVolume </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Vertex, .Curve, .Surface, or .Volume.
</value>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Vertex, .Curve, .Surface, or .Volume.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeDistanceVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeNearestPointVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.IsDegenerateVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAlignedBox.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs an aligned box using 2 vertices: the origin vertex and the opposite vertex.  
After construction, the translation vector for this shape corresponds to the vertex 
with the most negative X, Y, and Z coordinates.
</summary>
            <param name="originVertex">
The first vertex used for defining this shape.
</param>
            <param name="oppositeVertex">
The second vertex used for defining this shape.
</param>
            <param name="shapeState">
The state of this aligned box.  Must be Cog3DShapeStateConstants.Vertex, Cog3DShapeStateConstants.Curve, 
Cog3DShapeStateConstants.Surface, or Cog3DShapeStateConstants.Volume.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is not one of Cog3DShapeStateConstants.Vertex, .Curve, .Surface, and .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.#ctor(Cognex.VisionPro3D.Cog3DVect3,System.Double,System.Double,System.Double,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs an aligned box using the specified size, translation, and Cog3DShapeStateConstants.
</summary>
            <param name="size">
The X, Y, and Z extents of this aligned box.  X, Y, and Z must be &gt; 0.
</param>
            <param name="translationX">
The X translation of this aligned box.
</param>
            <param name="translationY">
The Y translation of this aligned box.
</param>
            <param name="translationZ">
The Z translation of this aligned box.
</param>
            <param name="shapeState">
The state of this aligned box.  Must be Cog3DShapeStateConstants.Vertex, Cog3DShapeStateConstants.Curve,  
Cog3DShapeStateConstants.Surface, or Cog3DShapeStateConstants.Volume.
</param>
            <exception cref="T:System.ArgumentException">
If any member of <paramref name="size" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentException">
If <paramref name="shapeState" /> is not one of Cog3DShapeStateConstants.Vertex, .Curve, .Surface, and .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.#ctor(Cognex.VisionPro3D.Cog3DAlignedBox)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAlignedBox.#ctor">
            <summary>
Constructs a degenerate, aligned box with size of (0,0,0), translation of (0,0,0), and Cog3DShapeStateConstants of Volume.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DAlignedBox">
            <summary>
This class encapsulates an axis-aligned (edges are parallel to the coordinate
axes) 3D box.  An aligned box is parameterized by a size vector and a translation
vector.  The size vector specifies the extents of the aligned box.  The translation
vector moves the box from the coordinate space origin to its pose in 3D space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.RealEqual(Cognex.VisionPro3D.Cog3DBox,Cognex.VisionPro3D.Cog3DBox,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.SetOriginVertexXVectorYVectorZ(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <summary>
Set the box's origin vertex, extent X vector, extent Y vector, and Z height.
</summary>
            <param name="originVertex">
The origin vertex of the box.
</param>
            <param name="xVector">
The extent X vector of the box.
Note that this vector corresponds to the Size.X extent in ScaledUnitBox space.  
See the Remarks section.
</param>
            <param name="yVector">
The extent Y vector of the box.
Note that this vector corresponds to the Size.Y extent in ScaledUnitBox space.  
See the Remarks section.
</param>
            <param name="z">
The Z height of the box.
Note that this vector corresponds to the Size.Z extent in ScaledUnitBox space.  
See the Remarks section.
</param>
            <exception cref="T:System.ArgumentException">
If  <paramref name="xVector" /> or <paramref name="yVector" /> is (0,0,0), or 
<paramref name="xVector" /> and <paramref name="yVector" /> are parallel.
</exception>
            <remarks>
Notes:
<list type="bullet"><item> If <paramref name="yVector" /> is not perpendicular to 
<paramref name="xVector" /> 
internally  a new yVector is generated as follows and used instead:
<list type="bullet"><item>Create a plane with normal direction of 
<paramref name="xVector" />; </item><item> Project <paramref name="yVector" /> to this plane, and get the
        projected vector yVectorInternal;</item><item> Scale yVectorInternal to have the same length as 
         <paramref name="yVector" />. </item></list>
Otherwise, yVectorInternal = <paramref name="yVector" />. </item><item>   Size.X will be <paramref name="xVector" />.Length, and Size.Y will be 
         <paramref name="yVector" />.Length, and Size.Z will be <paramref name="z" />. </item><item>    The implicit extent Z vector's direction is decided by the cross
        product of <paramref name="xVector" /> and yVectorInternal.  </item><item>  Assume that the extent Z vector is named as zVectorInternal,
        then the center of the box will be:
          <paramref name="originVertex" /> + 
          (<paramref name="xVector" /> + yVectorInternal + 
          zVectorInternal * <paramref name="z" />/zVectorInternal.Length)/2  
</item></list></remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitBox </item>
                    <item> SfCenter </item>
                    <item> SfSize </item>
                    <item> SfGetSurfaces </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfGetOriginVertexXVectorYVectorZ </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeVolume </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                    <item> SfIsDegenerateVolume </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.GetOriginVertexXVectorYVectorZ(Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DVect3@,System.Double@)">
            <summary>
Get the box's origin vertex, extent X vector, extent Y vector, and Z height.
</summary>
            <param name="originVertex">
The output argument for the origin vertex of the box.
</param>
            <param name="xVector">
The output argument for the extent X vector of the box. 
Note that this vector corresponds to the Size.X extent in ScaledUnitBox space.  
See the Remarks section.
</param>
            <param name="yVector">
The output argument for the extent Y vector of the box.
Note that this vector corresponds to the Size.Y extent in ScaledUnitBox space.  
See the Remarks section.
</param>
            <param name="z">
The output argument for the Z height of the box.
Note that Z height corresponds to the Size.Z extent in ScaledUnitBox space.  
See the Remarks section.
</param>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the box is degenerate.
</exception>
            <remarks>
                <para>
                    <paramref name="z" /> will be Size.Z. </para>
                <para> ShapeFromScaledUnitBox will map point cc3Dvect(0,0,0) to 
<paramref name="originVertex" />, 
map vector (Size.X,0,0) to 
(<paramref name="originVertex" /> + <paramref name="xVector" />),
and map vector cc3DVect(0,Size.Y,0) to 
(<paramref name="originVertex" /> + <paramref name="yVector" />). 
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.GetSurfaces">
            <summary>
Computes the surfaces of this box.
</summary>
            <returns>
The list of surfaces of this box. 
</returns>
            <remarks>
Notes:
<list type="bullet"><item> Assuming a unit box, the order of the returned rectangles is 
(using a pair of opposite vertices to describe each rectangle): 
<list type="bullet"><item>         0   Cog3DVect3(0,0,0), Cog3DVect3(1,1,0) </item><item>         1   Cog3DVect3(0,0,1), Cog3DVect3(1,1,1) </item><item>         2   Cog3DVect3(0,0,0), Cog3DVect3(1,0,1) </item><item>         3   Cog3DVect3(1,0,0), Cog3DVect3(1,1,1) </item><item>         4   Cog3DVect3(0,1,0), Cog3DVect3(1,1,1) </item><item>         5   Cog3DVect3(0,0,0), Cog3DVect3(0,1,1) </item></list></item><item>  Each element of the returned list has the
        ShapeState value of Cog3DShapeStateConstants.Surface no matter the current ShapeState
        value of the box.   </item><item>  Some elements of the returned list might be degenerate rectangles
        and some elements might be duplicate if this box is 
        degenerate. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.GetLineSegments">
            <summary>
Computes the line segments for the edges of this box.
</summary>
            <returns>
The list of line segments for the edges of this box. 
</returns>
            <remarks>
Notes:
<list type="bullet"><item> Assuming a unit box, the order of the returned line segments is: 
<list type="bullet"><item>         0   Cog3DLineSeg(Cog3DVect3(0,0,0), Cog3DVect3(1,0,0), Cog3DShapeStateConstants.Curve) </item><item>         1   Cog3DLineSeg(Cog3DVect3(1,0,0), Cog3DVect3(1,1,0), Cog3DShapeStateConstants.Curve) </item><item>         2   Cog3DLineSeg(Cog3DVect3(1,1,0), Cog3DVect3(0,1,0), Cog3DShapeStateConstants.Curve) </item><item>         3   Cog3DLineSeg(Cog3DVect3(0,1,0), Cog3DVect3(0,0,0), Cog3DShapeStateConstants.Curve) </item><item>         4   Cog3DLineSeg(Cog3DVect3(0,0,1), Cog3DVect3(1,0,1), Cog3DShapeStateConstants.Curve) </item><item>         5   Cog3DLineSeg(Cog3DVect3(1,0,1), Cog3DVect3(1,1,1), Cog3DShapeStateConstants.Curve) </item><item>         6   Cog3DLineSeg(Cog3DVect3(1,1,1), Cog3DVect3(0,1,1), Cog3DShapeStateConstants.Curve) </item><item>         7   Cog3DLineSeg(Cog3DVect3(0,1,1), Cog3DVect3(0,0,1), Cog3DShapeStateConstants.Curve) </item><item>         8   Cog3DLineSeg(Cog3DVect3(0,0,0), Cog3DVect3(0,0,1), Cog3DShapeStateConstants.Curve) </item><item>         9   Cog3DLineSeg(Cog3DVect3(1,0,0), Cog3DVect3(1,0,1), Cog3DShapeStateConstants.Curve) </item><item>        10   Cog3DLineSeg(Cog3DVect3(1,1,0), Cog3DVect3(1,1,1), Cog3DShapeStateConstants.Curve) </item><item>        11   Cog3DLineSeg(Cog3DVect3(0,1,0), Cog3DVect3(0,1,1), Cog3DShapeStateConstants.Curve) </item></list></item><item>  Each element of the returned list has the
        ShapeState value of Cog3DShapeStateConstants.Curve no matter the current ShapeState
        value of the box.   </item><item>  Some elements of the returned list might be degenerate line
        segments and some elements might be duplicate if this box is 
        degenerate. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.GetVertices">
            <summary>
Computes the set of vertices defining this box.  Assuming a 
unit box, the order of the returned vertices is: (0,0,0) (1,0,0)
(1,1,0) (0,1,0) (0,0,1) (1,0,1) (1,1,1), (0,1,1).
</summary>
            <returns>
The set of vertices defining this box. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this box through the specified rigid transform and 
returns a new Cog3DBox.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this box.
</param>
            <returns>
The Cog3DBox resulting from mapping this shape through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.SetShapeFromScaledUnitBox(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Set the ShapeFromScaledUnitBox transform of this box.   
It may change the 
value of Center.  It does not change the value of Size.
</summary>
            <param name="shapeFromScaledUnitBox">
A Cog3DTransformRigid used to specify the ShapeFromScaledUnitBox 
transform of this box.  This transform 
specifies the pose of the ScaledUnitBox in 3D space.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitBox" /> is null.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitBox </item>
                    <item> SfCenter </item>
                    <item> SfGetSurfaces </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfGetOriginVertexXVectorYVectorZ </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.GetShapeFromScaledUnitBox">
            <summary>
Get the ShapeFromScaledUnitBox transform of this box.   
</summary>
            <returns>
The ShapeFromScaledUnitBox transform of this box.  This transform 
specifies the pose of the ScaledUnitBox in 3D space.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.ShapeFromScaledUnitBox">
            <summary>
Deprecated. Please use GetShapeFromScaledUnitBox() and
SetShapeFromScaledUnitBox()instead.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.Center">
            <summary>
Gets the center position of this box.
</summary>
            <value>
The center point of this box.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.Size">
            <summary>
Gets/sets the size of this box.   The setter may change the 
value of Center.  It does not change the value of ShapeFromScaledUnitBox.
</summary>
            <value>
The size of this box.
</value>
            <exception cref="T:System.ArgumentException">
If any member of <paramref name="size" /> is less than 0.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfSize </item>
                    <item> SfCenter </item>
                    <item> SfGetSurfaces </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfComputeVolume </item>
                    <item> SfGetOriginVertexXVectorYVectorZ </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                    <item> SfIsDegenerateVolume </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Vertex, .Curve, .Surface, or .Volume.
</value>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Vertex, .Curve, .Surface, or .Volume.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeDistanceVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeNearestPointVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.IsDegenerateVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeVolume">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DBox.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.#ctor(Cognex.VisionPro3D.Cog3DBox)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a box using the specified size, rigid transform, and Cog3DShapeStateConstants.
</summary>
            <param name="size">
The X, Y, and Z extents of this aligned box.  X, Y, and Z must be &gt; 0.
</param>
            <param name="shapeFromScaledUnitBox">
The rigid transform that maps the ScaledUnitBox to a pose in 3D space.
</param>
            <param name="shapeState">
The state of this box.  Must be Cog3DShapeStateConstants.Vertex, .Curve, .Surface, 
or .Volume.
</param>
            <exception cref="T:System.ArgumentException">
If any member of <paramref name="size" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitBox" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Vertex, .Curve, .Surface, or .Volume.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DBox.#ctor">
            <summary>
Constructs a degenerate box with size of (0,0,0), translation of (0,0,0),
ShapeFromScaledUnitBox of identity transform, 
and Cog3DShapeStateConstants of Volume.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DBox">
            <summary>
This class encapsulates an oriented 3D box. 
A Cog3DBox is defined by a size vector and a 3D rigid transform. The size vector
defines an axis-aligned box which has the following pair of opposite
vertices: cc3DVect(0,0,0) and size().  This is referred to as the "ScaledUnitBox".
The rigid transform (ShapeFromScaledUnitBox)
maps the ScaledUnitBox to the desired pose in 3D space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.RealEqual(Cognex.VisionPro3D.Cog3DRectangle,Cognex.VisionPro3D.Cog3DRectangle,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.SetOriginVertexXVectorYVector(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Sets the rectangle's origin vertex, extent X vector and extent Y vector.
</summary>
            <param name="originVertex">
The origin vertex of the rectangle.
</param>
            <param name="xVector">
The extent X vector of the rectangle.
</param>
            <param name="yVector">
The extent Y vector of the rectangle.
</param>
            <exception cref="T:System.ArgumentException">
If  <paramref name="xVector" /> or <paramref name="yVector" /> 
is (0,0,0), or <paramref name="xVector" /> and 
<paramref name="yVector" /> are parallel.
</exception>
            <remarks>
Notes:
<list type="bullet"><item> If <paramref name="yVector" /> is not perpendicular to 
<paramref name="xVector" /> 
internally  a new yVector is generated as follows and used instead:
<list type="bullet"><item>Create a plane with normal direction of 
<paramref name="xVector" />; </item><item> Project <paramref name="yVector" /> to this plane, and get the
        projected vector yVectorInternal;</item><item> Scale yVectorInternal to have the same length as 
         <paramref name="yVector" />. </item></list>
Otherwise, yVectorInternal = <paramref name="yVector" />. </item><item>   Size.X will be <paramref name="xVector" />.Length, and 
         Size().Y will be <paramref name="yVector" />.Length. </item><item>  Center will be <paramref name="originVertex" /> + 
        (<paramref name="xVector" /> + yVectorInternal)/2
</item></list></remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitRectangle </item>
                    <item> SfCenter </item>
                    <item> SfSize </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfGetOriginVertexXVectorYVector </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.GetOriginVertexXVectorYVector(Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DVect3@,Cognex.VisionPro3D.Cog3DVect3@)">
            <summary>
Gets the rectangle's origin vertex, extent X vector and extent Y vector.
</summary>
            <param name="originVertex">
The output argument keeping the origin vertex of the rectangle.
</param>
            <param name="xVector">
The output argument keeping the extent X vector of the rectangle.
</param>
            <param name="yVector">
The output argument keeping the extent Y vector of the rectangle.
</param>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If  the rectangle is degenerate.
</exception>
            <remarks>
ShapeFromScaledUnitRectangle will map point cc3Dvect(0,0,0) to 
<paramref name="originVertex" />, map  vector (Size.X,0,0) to 
(<paramref name="originVertex" /> + <paramref name="xVector" /> ),
and map vector cc3DVect(0,Size.Y,0) to 
(<paramref name="originVertex" /> + <paramref name="yVector" /> ).
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.GetLineSegments">
            <summary>
Computes the line segments for the edges of this rectangle.
</summary>
            <returns>
The list of line segments for the edges of this rectangle. 
</returns>
            <remarks>
Notes:
<list type="bullet"><item> Assuming a unit rectangle, the order of the returned line segments is: 
<list type="bullet"><item>         0   Cog3DLineSeg(Cog3DVect3(0,0,0), Cog3DVect3(1,0,0), Cog3DShapeStateConstants.Curve) </item><item>         1   Cog3DLineSeg(Cog3DVect3(1,0,0), Cog3DVect3(1,1,0), Cog3DShapeStateConstants.Curve) </item><item>         2   Cog3DLineSeg(Cog3DVect3(1,1,0), Cog3DVect3(0,1,0), Cog3DShapeStateConstants.Curve) </item><item>         3   Cog3DLineSeg(Cog3DVect3(0,1,0), Cog3DVect3(0,0,0), Cog3DShapeStateConstants.Curve) </item></list></item><item>  Each element of the returned list has the
        ShapeState value of Cog3DShapeStateConstants.Curve no matter the current ShapeState
        value of the rectangle.   </item><item>  Some elements of the returned list might be degenerate line
        segments and some elements might be duplicate if this rectangle is 
        degenerate. </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.GetVertices">
            <summary>
Computes the set of vertices defining this rectangle.  Assuming a 
unit rectangle, the order of the returned vertices is: (0,0,0) (1,0,0)
(1,1,0) (0,1,0).
</summary>
            <returns>
The set of vertices defining this rectangle. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this rectangle through the specified rigid transform and 
returns a new Cog3DRectangle.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this rectangle.
</param>
            <returns>
The Cog3DRectangle resulting from mapping this shape through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.SetShapeFromScaledUnitRectangle(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Set the ShapeFromScaledUnitRectangle transform of this rectangle.   
It may change the 
value of Center.  It does not change the value of Size.
</summary>
            <param name="shapeFromScaledUnitRectangle">
A Cog3DTransformRigid used to specify the ShapeFromScaledUnitRectangle 
transform of this rectangle.  This transform 
specifies the pose of the ScaledUnitRectangle in 3D space.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitRectangle" /> is null.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfGetShapeFromScaledUnitRectangle </item>
                    <item> SfCenter </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfGetOriginVertexXVectorYVector </item>
                    <item> SfComputeBoundingBox </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.GetShapeFromScaledUnitRectangle">
            <summary>
Get the ShapeFromScaledUnitRectangle transform of this rectangle.   
</summary>
            <returns>
The ShapeFromScaledUnitRectangle transform of this rectangle.  This transform 
specifies the pose of the ScaledUnitRectangle in 3D space.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.ShapeFromScaledUnitRectangle">
            <summary>
Deprecated. Please use GetShapeFromScaledUnitRectangle() and
SetShapeFromScaledUnitRectangle()instead.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.Center">
            <summary>
Gets the center position of this rectangle.
</summary>
            <value>
The center point of this rectangle.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.Size">
            <summary>
Gets/sets the size of this rectangle.   The setter may change the 
value of Center.  It does not change the value of ShapeFromScaledUnitRectangle.
</summary>
            <value>
The size of this rectangle.
</value>
            <exception cref="T:System.ArgumentException">
If any member of <paramref name="size" /> is less than 0.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfSize </item>
                    <item> SfCenter </item>
                    <item> SfGetLineSegments </item>
                    <item> SfGetVertices </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeArea </item>
                    <item> SfGetOriginVertexXVectorYVector </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                    <item> SfIsDegenerateSurface </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Vertex, .Curve, or .Surface.
</value>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Vertex, .Curve, or .Surface.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRectangle.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.#ctor(Cognex.VisionPro3D.Cog3DRectangle)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.#ctor(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a rectangle using the specified size, rigid transform, and Cog3DShapeStateConstants.
</summary>
            <param name="size">
The X, Y extents of this rectangle.  X and Y must be &gt;= 0.
</param>
            <param name="shapeFromScaledUnitRectangle">
The rigid transform that maps the ScaledUnitRectangle to a pose in 3D space.
</param>
            <param name="shapeState">
The state of this rectangle.  Must be Cog3DShapeStateConstants.Vertex, .Curve, or .Surface.
</param>
            <exception cref="T:System.ArgumentException">
If any member of <paramref name="size" /> is less than 0.
</exception>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="shapeFromScaledUnitRectangle" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
The ShapeState for this shape must be Cog3DShapeStateConstants.Vertex, .Curve, or .Surface.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRectangle.#ctor">
            <summary>
Constructs a degenerate rectangle with Size of (0,0),
ShapeFromScaledUnitRectangle of identity transform, 
and ShapeState of Cog3DShapeStateConstants.Surface.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRectangle">
            <summary>
This class encapsulates an oriented 3D rectangle. 
A Cog3DRectangle is defined by a size vector and a 3D rigid transform. The size vector
defines an axis-aligned rectangle on the XY plane (whose
edges are parallel to x axis or y axis), whose vertex with minimum x
and minimum y is at the origin (cc3DVect(0,0,0)), and the opposite 
vertex's coordinates are defined by the size vector
(Cog3DVect3(Size.X, Size.Y, 0)). This is referred to as the "ScaledUnitRectangle".
The rigid transform (ShapeFromScaledUnitRectangle)
maps the ScaledUnitRectangle to the desired pose in 3D space.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.RealEqual(Cognex.VisionPro3D.Cog3DPlane,Cognex.VisionPro3D.Cog3DPlane,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ProjectVectorOntoPlane(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Computes the vector resulting from projecting the specified vector
onto this plane.
</summary>
            <param name="vector3D">
The vector to be projected onto this plane.
</param>
            <returns>
The vector resulting from projecting the specified vector onto this plane.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeSignedDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Computes the signed distance from this plane to the specified point.
The distance is positive if the point is on the same side of the plane
as the normal.
</summary>
            <param name="point3D">
The point to use for computing the distance.
</param>
            <returns>
The signed distance from this plane to the specified point.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.SetNormalAndOffset(Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <summary>
Sets this plane using the specified normal and an offset.
The offset is the translation of the plane from the origin
along the normal direction.
The specified normal is normalized to a unit vector.
<para> Note that the following point is on the plane:
   <paramref name="offset" /> * <paramref name="normal3D" /> / <paramref name="normal3D" />.Length 
</para></summary>
            <param name="normal3D">
The normal of the plane.
The specified normal is normalized to a unit vector.
</param>
            <param name="offset">
The translation of the plane from the origin
along the normal direction.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="normal3D" /> is (0,0,0).
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfNormal </item>
                    <item> SfGetTilt </item>
                    <item> SfGetRotation </item>
                    <item> SfOffset </item>
                    <item> SfIsDegenerateSurface </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.SetPointAndNormal(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Sets this plane using the specified point (a point in the plane)
and the specified normal.  
The specified normal is normalized to a unit vector.
</summary>
            <param name="pointOnPlane3D">
A point on the plane.
</param>
            <param name="normal3D">
The normal of the plane.
The specified normal is normalized to a unit vector.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="normal3D" /> is (0,0,0).
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfNormal </item>
                    <item> SfGetTilt </item>
                    <item> SfGetRotation </item>
                    <item> SfOffset </item>
                    <item> SfIsDegenerateSurface </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.SetPoints(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Sets this plane according to the specified 3 points.  If the 3 points are 
collinear or coincident, then the plane is degenerate, else constructs
a plane with a normal determined by (pB - pA) crossProduct (pC - pA).
</summary>
            <param name="pointA3D">
One of the 3 points used to define this plane.
</param>
            <param name="pointB3D">
One of the 3 points used to define this plane.
</param>
            <param name="pointC3D">
One of the 3 points used to define this plane.
</param>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfNormal </item>
                    <item> SfGetTilt </item>
                    <item> SfGetRotation </item>
                    <item> SfOffset </item>
                    <item> SfIsDegenerateSurface </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this plane through the specified rigid transform and 
returns a Cog3DPlane.
</summary>
            <param name="newFromOld">
The rigid transform to use when mapping this plane.
</param>
            <returns>
The Cog3DPlane resulting from mapping this plane through the 
specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="newFromOld" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.GetRotation">
            <summary>
Computes the rotation of this plane, where "rotation" is 
defined as the angle (in radians) between the projection of the plane Normal on the 
XY-plane and the X-axis, and normalized to the range [0, Math.PI * 2).
</summary>
            <returns>
The angle (in radians) between the projection of the plane Normal on the 
XY-plane and the X-axis.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.GetTilt">
            <summary>
Computes the tilt of this plane, where "tilt"  is defined as the 
angle (in radians) between the plane Normal and the Z-axis, and 
normalized to the range [0, Math.PI].
</summary>
            <returns>
The angle (in radians) between the plane Normal and the Z-axis.  
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.Offset">
            <summary>
Gets/sets the offset for this plane.  The offset is the translation from the origin
along the normal direction.
</summary>
            <value>
The offset of this plane.  The offset is the translation from the origin
along the normal direction.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the plane is degenerate. 
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfOffset </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.Normal">
            <summary>
Gets/sets the normal for this plane. The getter returns a unit vector.
</summary>
            <value>
The normal of this plane.
</value>
            <exception cref="T:System.ArgumentException">
From the setter if  <paramref name="normal" /> is degenerate i.e. (0,0,0).
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the plane is degenerate. 
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfNormal </item>
                    <item> SfGetTilt </item>
                    <item> SfGetRotation </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.ShapeState">
            <summary>
Get/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape is always Cog3DShapeStateConstants.Surface.
</value>
            <exception cref="T:System.ArgumentException">
If the ShapeState for this shape is not Cog3DShapeStateConstants.Surface.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.IsDegenerateSurface">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeArea">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DPlane.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.Finalize">
            <summary>
Finalize this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <summary>
Constructs a plane using the specified normal and an offset.
The offset is the translation of the plane from the origin
along the normal direction.
The specified normal is normalized to a unit vector. 
<para> Note that the following point is on the plane:
   <paramref name="offset" /> * <paramref name="normal3D" /> / <paramref name="normal3D" />.Length 
</para></summary>
            <param name="normal3D">
The normal of the plane being constructed.
The specified normal is normalized to a unit vector.
</param>
            <param name="offset">
The translation of the plane from the origin
along the normal direction.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="normal3D" /> is (0,0,0).
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Constructs a plane using the specified 3 points.  If the 3 points are 
collinear or coincident, then the plane is degenerate, else constructs
a plane with a normal determined by (pointB3D - pointA3D) crossProduct (pointC3D - pointA3D).
</summary>
            <param name="pointA3D">
One of the 3 points used to define this plane.
</param>
            <param name="pointB3D">
One of the 3 points used to define this plane.
</param>
            <param name="pointC3D">
One of the 3 points used to define this plane.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Constructs a plane using the specified point (a point in the plane)
and the specified normal.  
The specified normal is normalized to a unit vector.
</summary>
            <param name="pointOnPlane3D">
A point on the plane being constructed.
</param>
            <param name="normal3D">
The normal of the plane being constructed.
The specified normal is normalized to a unit vector.
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="normal3D" /> is (0,0,0).
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.#ctor(Cognex.VisionPro3D.Cog3DPlane)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DPlane.#ctor">
            <summary>
Constructs a degenerate plane consistent with 
Cog3DPlane(Cog3DVect3(), Cog3DVect3(), Cog3DVect3()).
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DPlane">
            <summary>
This class encapsulates a plane.
Planes have 3 parameterizations: 3 points, point-in-the-plane plus normal, 
normal plus offset-from-origin.  The offset-from-origin is
the translation from the origin along the normal direction.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.RealEqual(Cognex.VisionPro3D.Cog3DRay,Cognex.VisionPro3D.Cog3DRay,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.CreateLine">
            <summary>
Creates the Cog3DLine coincident with this ray.
</summary>
            <returns>
The Cog3DLine coincident with this ray.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this ray through the specified rigid transform and 
return a Cog3DRay.
</summary>
            <param name="transform">
The rigid transform to use when mapping this ray.
</param>
            <returns>
The Cog3DRay resulting from mapping this ray through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="transform" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.Direction">
            <summary>
Gets/sets the direction of this ray. The getter returns a unit vector.
</summary>
            <value>
The direction of the ray.
</value>
            <exception cref="T:System.ArgumentException">
If  <paramref name="direction3D" /> is degenerate i.e. (0,0,0).
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
From the getter if the ray is degenerate. 
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfDirection </item>
                    <item>  SfIsDegenerateCurve </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.P1">
            <summary>
Gets/sets the start point of the ray.
</summary>
            <value>
The start point of the ray.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfP1 </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be Cog3DShapeStateConstants.Vertex or Cog3DShapeStateConstants.Curve.
</value>
            <exception cref="T:System.ArgumentException">
If the ShapeState for this shape is neither Cog3DShapeStateConstants.Vertex nor Cog3DShapeStateConstants.Curve.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DRay.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DRay.ParameterizationType,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a Cog3DRay using parameterizationType to interpret v1 and v2.
</summary>
            <param name="v1">
The start point of the ray.
</param>
            <param name="v2">
If parameterizationType is Points, 
then v2 is interpreted as a point along the ray.
If parameterizationType is PointAndDirection,
then v2 is interpreted as a direction vector.
</param>
            <param name="parameterizationType">
Specifies how v1 and v2 are interpreted. 
</param>
            <param name="shapeState">
The state of this ray.  Must be Cog3DShapeStateConstants.Vertex or Cog3DShapeStateConstants.Curve.
</param>
            <exception cref="T:System.ArgumentException">
If  <paramref name="shapeState" /> is not Cog3DShapeStateConstants.Vertex or Cog3DShapeStateConstants.Curve.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.#ctor(Cognex.VisionPro3D.Cog3DRay)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DRay.#ctor">
            <summary>
Constructs a degenerate Cog3DRay consistent with
Cog3DRay(Cog3DVect3(), Cog3DVect3(), Cog3DShapeStateConstants.Points, Cog3DShapeStateConstants.Curve).
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRay.ParameterizationType">
            <summary>
This enum allows the client to specify whether the parameters
being specified represent the ray's origin and a point on
the ray or if the parameters specify the ray's origin and a 
direction vector.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DRay">
            <summary>
This class encapsulates a directed 3D ray.  It is parameterized as
a start point (represented using P1) and a direction (represented   
using Direction). A ray is infinite like a line, but only extends in
one direction. 
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.RealEqual(Cognex.VisionPro3D.Cog3DLine,Cognex.VisionPro3D.Cog3DLine,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.SetPointAndDirection(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Sets this line according to the specified point and direction.
</summary>
            <param name="point3D">
One point on the line.
</param>
            <param name="direction3D">
The direction of the line.
</param>
            <exception cref="T:System.ArgumentException">
if <paramref name="direction3D" /> is 
 a degenerate direction, i.e. (0,0,0). 
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfDirection </item>
                    <item> SfPointNearestOrigin </item>
                    <item> SfIsDegenerateCurve </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.SetPoints(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Sets this line according to the specified 2 points.  If the 2 points are 
coincident, then the line is degenerate, else constructs
a line with a direction from pointA3D to pointB3D.
</summary>
            <param name="pointA3D">
One of the 2 points used to define this line.
</param>
            <param name="pointB3D">
One of the 2 points used to define this line.
</param>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when some properties change.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfDirection </item>
                    <item> SfPointNearestOrigin </item>
                    <item> SfIsDegenerateCurve </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this line through the specified rigid transform and 
returns a Cog3DLine.
</summary>
            <param name="transform">
The rigid transform to use when mapping this line.
</param>
            <returns>
The Cog3DLine resulting from mapping this Line through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="transform" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.Direction">
            <summary>
Gets the direction of this line.  It returns a unit vector. 
</summary>
            <value>
The direction of the Line.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the line is degenerate.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.PointNearestOrigin">
            <summary>
Gets the point on this line nearest to the origin.
</summary>
            <value>
The point on the line nearest the origin.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape is always Cog3DShapeStateConstants.Curve.
</value>
            <exception cref="T:System.ArgumentException">
If the ShapeState for this shape is not Cog3DShapeStateConstants.Curve.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLine.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.#ctor(Cognex.VisionPro3D.Cog3DLineSeg)">
            <summary>
Constructs a Cog3DLine from the specified lineSeg.
The direction of the line is the same as the lineSeg's direction.
</summary>
            <param name="lineSeg">
The lineSeg to use when constructing this Cog3DLine. 
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DLine.ParameterizationType)">
            <summary>
Constructs a Cog3DLine using parameterizationType to interpret v1 and v2.
If parameterizationType is Points and v1 is equal to v2, then the line is degenerate.
</summary>
            <param name="v1">
A point on the line.
</param>
            <param name="v2">
If <paramref name="parameterizationType" /> is Points, 
then <paramref name="v2" /> is interpreted as a point on 
the line and the line's direction
is from <paramref name="v1" /> to <paramref name="v2" />.
If <paramref name="parameterizationType" /> is PointAndDirection,
then <paramref name="v2" /> is interpreted as a direction 
vector and will be normalized to a unit vector.
</param>
            <param name="parameterizationType">
Specifies how v1 and v2 are interpreted. 
</param>
            <exception cref="T:System.ArgumentException">
If <paramref name="parameterizationType" /> is PointAndDirection and
<paramref name="v2" /> is a degenerate direction i.e. (0,0,0).
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.#ctor(Cognex.VisionPro3D.Cog3DLine)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLine.#ctor">
            <summary>
Default constructor.  Constructs a degenerate Cog3DLine consistent with
Cog3DLine(Cog3DVect3(), Cog3DVect3(), ParameterizationType.Points).
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLine.ParameterizationType">
            <summary>
This enum allows the client to specify whether the parameters
being specified represent two points on
the Line or if the parameters specify the Line's one point and a 
direction vector.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLine">
            <summary>
This class encapsulates an infinite, directed 3D line.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.RealEqual(Cognex.VisionPro3D.Cog3DLineSeg,Cognex.VisionPro3D.Cog3DLineSeg,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.CreateLine">
            <summary>
Creates a Cog3DLine coincident with this lineSeg.
</summary>
            <returns>
A Cog3DLine coincident with this LineSeg.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.MapRigid(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Maps this LineSeg through the specified rigid transform and 
returns a Cog3DLineSeg.
</summary>
            <param name="transform">
The rigid transform to use when mapping this lineSeg.
</param>
            <returns>
The Cog3DLineSeg resulting from mapping this lineSeg through the specified rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="transform" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.Length">
            <summary>
Gets the length of this lineSeg.
</summary>
            <value>
The length of this lineSeg.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.P2">
            <summary>
Gets/sets the end point of this lineSeg.
</summary>
            <value>
The end point of this lineSeg.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfP2 </item>
                    <item> SfLength </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.P1">
            <summary>
Gets/sets the start point of this lineSeg.
</summary>
            <value>
The start point of this lineSeg.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfP1 </item>
                    <item> SfLength </item>
                    <item> SfComputePerimeter </item>
                    <item> SfComputeBoundingBox </item>
                    <item> SfIsDegenerateCurve </item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.ShapeState">
            <summary>
Gets/sets the ShapeState for this shape.
</summary>
            <value>
The ShapeState of this Shape.  Must be 
Cog3DShapeStateConstants.Vertex or Cog3DShapeStateConstants.Curve.
</value>
            <exception cref="T:System.ArgumentException">
If the ShapeState for this shape is neither Cog3DShapeStateConstants.Vertex 
nor Cog3DShapeStateConstants.Curve.
</exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flags may be affected:</para>
                <list type="bullet">
                    <item> SfShapeState </item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.IsDegenerateCurve">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputePerimeter">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.SelectedSpaceName3D">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.IsEmpty">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DLineSeg.IsFinite">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.Clone">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.#ctor(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DShapeStateConstants)">
            <summary>
Constructs a Cog3DLineSeg using p1 and p2.
</summary>
            <param name="p1">
The start point of the LineSeg.
</param>
            <param name="p2">
The end point of the LineSeg.
</param>
            <param name="shapeState">
The state of this LineSeg.  Must be Cog3DShapeStateConstants.Vertex or Cog3DShapeStateConstants.Curve.
</param>
            <exception cref="T:System.ArgumentException">
If  <paramref name="shapeState" /> is not Cog3DShapeStateConstants.Vertex or Cog3DShapeStateConstants.Curve.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.#ctor(Cognex.VisionPro3D.Cog3DLineSeg)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DLineSeg.#ctor">
            <summary>
Constructs a degenerate Cog3DLineSeg consistent with
Cog3DLineSeg(Cog3DVect3(), Cog3DVect3(), Cog3DShapeStateConstants.Curve).
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DLineSeg">
            <summary>
This class encapsulates a directed 3D line segment which
has a start point (represented by P1) and an end point (represented   
by P2). The direction of a 3D line segment is from its start point
(P1) to its end point (P2).
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeBase.#ctor(Cognex.VisionPro3D.Cog3DShapeBase)">
            <summary>
Copy constructor.
</summary>
            <exception cref="T:System.ArgumentNullException">
If other is null.
</exception>
            <exception cref="!:ObjectDisposedExceptio">
If other is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DShapeBase.#ctor">
            <summary>
Default constructor.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DShapeBase">
            <summary>
This class is the base class for all Cognex-implemented 3D shapes.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DVolume.ComputeDistanceVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the distance from ComputeNearestPointVolume(<paramref name="point3D" />) 
to the specified point <paramref name="point3D" />.
</summary>
            <param name="point3D">
The specified point to use when computing the distance to this volume shape.
</param>
            <returns>
The distance from ComputeNearestPointVolume() on this volume shape
to the specified point. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DVolume.ComputeNearestPointVolume(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the point on this volume shape that is nearest to the specified point.
If the nearest point on this volume shape is not unique, returns one of the nearest points.
</summary>
            <param name="point3D">
The specified point to use when computing the nearest point on this volume shape.
</param>
            <returns>
The point on this volume shape that is nearest to the specified point.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DVolume.IsDegenerateVolume">
            <summary>
Determines whether or not this volume shape is degenerate.  This occurs
when volume shapes have a volume of 0.
</summary>
            <value>
True, if this volume shape is degenerate (volume = 0), else returns false.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DVolume.ComputeVolume">
            <summary>
Determines the volume of this shape.  
</summary>
            <returns>
The volume of this shape or returns 0, if this volume shape is empty or degenerate.
</returns>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DVolume">
            <summary>
This interface is used to represent a 3D volume or a shape 
composed/represented by a set of 3D volumes.  It defines 
the common methods for such shapes.  In this context, volume means a 
3 dimensional shape representation e.g. box, alignedBox, etc.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DSurface.ComputeDistanceSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the distance from ComputeNearestPointSurface(<paramref name="point3D" />) 
to the specified point <paramref name="point3D" />.
</summary>
            <param name="point3D">
The specified point to use when computing the distance to this surface shape.
</param>
            <returns>
The distance from ComputeNearestPointSurface() on this surface shape
to the specified point. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DSurface.ComputeNearestPointSurface(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the point on this surface shape that is nearest to the specified point.
If the nearest point on this surface shape is not unique, returns one of the nearest points.
</summary>
            <param name="point3D">
The specified point to use when computing the nearest point on this surface shape.
</param>
            <returns>
The point on this surface shape that is nearest to the specified point.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DSurface.IsDegenerateSurface">
            <summary>
Determines whether or not this surface shape is degenerate.  This occurs
when surface shapes have an area of 0.
</summary>
            <value>
True, if this surface shape is degenerate (area = 0), else returns false.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DSurface.ComputeArea">
            <summary>
Determines the area of this shape.  
For an infinite shape, like Cog3DPlane, the area is 0.
</summary>
            <returns>
The area of this shape or returns 0, if this surface shape is empty or degenerate.
</returns>
            <remarks>
                <list type="bullet">
                    <item> For a Cog3DCylinder shape, no matter whether is is degenerate or not, 
its area is computed as: StartCircle.ComputeArea * 2 + Radius *Height .</item>
                    <item> For a Cog3DBox or Cog3DAlignedBox shape, no matter whether is is degenerate or not, 
its area is computed as: (Size.X * Size.Y + Size.X * Size.Z + Size.Y * Size.Z) * 2 . </item>
                </list>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DSurface">
            <summary>
This interface is used to represent a 3D Surface or a shape 
composed/represented by a set of 3D Surfaces.  It defines 
the common methods for such shapes.  In this context, surface means a 
2 dimensional shape representation e.g. circle, box, plane, etc.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DCurve.ComputeDistanceCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the distance from ComputeNearestPointCurve(<paramref name="point3D" />) 
to the specified point <paramref name="point3D" />.
</summary>
            <param name="point3D">
The specified point to use when computing the distance to this curve shape.
</param>
            <returns>
The distance from ComputeNearestPointCurve() on this curve shape
to the specified point. 
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DCurve.ComputeNearestPointCurve(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the point on this curve shape that is nearest to the specified point.
If the nearest point on this curve shape is not unique, returns one of the nearest points.
</summary>
            <param name="point3D">
The specified point to use when computing the nearest point on this curve shape.
</param>
            <returns>
The point on this curve shape that is nearest to the specified point.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DCurve.IsDegenerateCurve">
            <summary>
Determines whether or not this curve shape is degenerate.  This occurs
when curve shapes have a perimeter of 0.
</summary>
            <value>
True, if this curve shape is degenerate (perimeter = 0), else returns false.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DCurve.ComputePerimeter">
            <summary>
Determines the perimeter of this shape.  For a wireframe shape, the
perimeter is the total length of all the wires.  For an infinite shape, like Cog3DLine, 
the perimeter is 0.
</summary>
            <returns>
The perimeter of this shape.
</returns>
            <remarks>
                <list type="bullet">
                    <item> For a Cog3DCylinder shape, no matter whether is is degenerate or not, 
its perimeter is computed as StartCircle.ComputePerimeter() * 2 .</item>
                    <item> For a Cog3DRectangle shape, no matter whether is is degenerate or not, 
its perimeter is computed as (Size.X + Size.Y) * 2 . </item>
                    <item> For a Cog3DBox or Cog3DAlignedBox shape, no matter whether is is degenerate or not, 
its perimeter is computed as (Size.X + Size.Y + Size.Z) * 4. </item>
                </list>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DCurve">
            <summary>
This interface is used to represent a 3D curve or a shape 
composed/represented by a set of 3D curves.  It defines 
the common methods for such shapes.  In this context, curve means a 
1 dimensional shape representation e.g. line, lineSeg, circle, wireframe, etc.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DVertex.ComputeDistanceVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the distance from ComputeNearestPointVertex(<paramref name="point3D" />) 
to the specified point <paramref name="point3D" />.
</summary>
            <param name="point3D">
The specified point to use when computing the distance to this shape.
</param>
            <returns>
The distance from the nearest vertex on this shape to the specified point.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DVertex.ComputeNearestPointVertex(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determines the vertex on this shape that is nearest to the specified point.
If the nearest vertex is not unique, returns one of the nearest vertices.
</summary>
            <param name="point3D">
The specified point to use when computing the nearest vertex on this shape.
</param>
            <returns>
The vertex on this shape nearest to the specified point.
</returns>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DVertex">
            <summary>
This interface is used to represent a 3D vertex or a shape 
composed/represented by a set of 3D vertices.  It defines 
the common methods for such shapes.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DShape.SelectedSpaceName3D">
            <summary>
The 3D coordinate space in which this shape is to be interpreted.
</summary>
            <value>
The default value is ".".
</value>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
If the value is an invalid space name syntax.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DShape.ShapeState">
            <summary>
Gets/sets the shape state of this shape. 
</summary>
            <value>
The shape state of this shape.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DShape.MapShape(Cognex.VisionPro3D.ICog3DTransform)">
            <summary>
Creates a new shape by mapping this shape through the specified transform.
</summary>
            <param name="transform">
The transform to use when mapping this shape.
</param>
            <returns>
The new shape that results from mapping this shape through the specified transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="transform" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the specified transform is not a Cog3DTransformRigid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DShape.ComputeBoundingBox">
            <summary>
Computes the axis-aligned bounding box for this shape.
</summary>
            <returns>
The axis-aligned bounding box.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If this shape's IsFinite is false.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DShape.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Computes the distance from this shape to the specified point.  
The point on this shape used to compute the distance is a function of ShapeState.
</summary>
            <param name="point3D">
The specified point to use when computing the distance to this shape.
</param>
            <returns>
The distance from this shape to the specified point.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DShape.ComputeNearestPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Computes the point on this shape that is nearest to the specified point.
The nearest point on this shape to the specified point is a function of ShapeState.
If the nearest point is not unique, returns one of the nearest points.
</summary>
            <param name="point3D">
The specified point to use when computing the nearest point on the shape.
</param>
            <returns>
The point on this shape nearest to the specified point.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DShape.IsEmpty">
            <summary>
Indicates if the set of points lying on the boundary of this shape is empty.  
</summary>
            <value>
True if the set of points that lie on the boundary of this shape is empty, and false otherwise.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DShape.IsFinite">
            <summary>
Indicates if this shape has finite extents.
</summary>
            <value>
True if this shape has finite extents, and false otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DShape.Clone">
            <summary>
Creates a deep copy of this shape.
</summary>
            <returns>
A deep copy of this shape.
</returns>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DShape">
            <summary>
This is the most basic interface class for all 3D shapes.  It specifies
the properties and methods provided by all shapes.  All shapes 
implement this interface.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DShapeStateConstants">
            <summary>
This enum defines the available shape states for 3D shapes.  
The shape state is used to disambiguate the behavior of various methods and properties of 3D shapes.
Cog3DShapeStateConstants.Vertex causes a shape to be treated as a set of vertices.
Cog3DShapeStateConstants.Curve causes a shape to be treated as a wireframe.
As an example, calling the ICog3DShape.ComputeDistance() method of a Cog3DBox returns different 
distances depending on how the Cog3DBox's shape state is set.  
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants">
            <summary>
This enum defines the possible shape intersection status for 3D shapes.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants.None">
            <summary>
Two Shapes have no intersection.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants.Overlap">
            <summary>
One shape is coincident with the other shape, or is on the other shape, or has overlap with the other shape.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DShapeIntersectionStatusConstants.Intersect">
            <summary>
Two Shapes intersect.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3ShapeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3ShapeCollection.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3ShapeCollection.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3ShapeCollection.#ctor(Cognex.VisionPro3D.Cog3DVect3ShapeCollection)">
            <summary>
Construct a deep copy of the supplied Cog3DVect3Collection.
</summary>
            <param name="other">
The Cog3DVect3Collection object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3ShapeCollection.#ctor(System.Int32)">
            <summary>
Construct this default (empty) Cog3DVect3Collection
with the specified capacity.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3ShapeCollection.#ctor">
            <summary>
Construct this default (empty) Cog3DVect3Collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVect3ShapeCollection">
            <summary>
This class holds a collection of Cog3DVect3 and a SelectedSpaceName3D.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.MoveSubtree(System.String,System.String,Cognex.VisionPro.CogAddSpaceConstants)">
            <summary> Move the subtree rooted at spaceName and attach it to
the newParentSpaceName, using spaceName's existing parent
transform. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the root space of the subtree to
move. </para>
            </param>
            <param name="newParentSpaceName">
                <para> The valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">name</see>
of the parent space to which to append the
subtree.</para>
            </param>
            <param name="duplicateHandling">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants" /> value that
specifies what do if the parent coordinate space contains an
immediate child with the same name as <paramref name="spaceName" />.
The options are to return an error, replace the named child
with the copied subtree, or do nothing. </para>
            </param>
            <remarks>
                <para> Moves the subtree rooted at the given space name
to the new parent space name.  Attaches the given space name
using its existing parent transform. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentException">
                <para>
                    <paramref name="spaceName" /> cannot be the root
space. <paramref name="newParentSpaceName" /> cannot be a descendant
of <paramref name="spaceName" />. </para>
            </exception>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="duplicateHandling" /> value is not a
member of <see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException">
                <para>
                    <paramref name="spaceName" /> is already a child of the
<paramref name="newParentSpaceName" /> and
the <paramref name="duplicateHandling" /> argument is
<see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError
</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> or 
<paramref name="newParentSpaceName" /> is not a
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> or 
<paramref name="newParentSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" />  or 
<paramref name="newParentSpaceName" /> does not exist in this tree.
</para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.SubtreeMoved">
Fires when a subtree is moved. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.CopySubtree(System.String)">
            <summary> Return a copy of the subtree rooted at SpaceName. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the root space of the subtree to
copy. </para>
            </param>
            <returns>
                <para> The copied coordinate space subtree. </para>
            </returns>
            <remarks>
                <para> Returns a copy of the subtree rooted at the given
space name. The returned tree contains a shallow copy of any trees
embedded in this tree using the
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro3D.Cog3DCoordinateSpaceTree,Cognex.VisionPro3D.ICog3DTransform,Cognex.VisionPro.CogAddSpaceConstants)" />
method. </para>
            </remarks>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> is not a 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.DeleteSubtree(System.String)">
            <summary> Delete the subtree rooted at spaceName.  spaceName and all
of its children will be removed from the tree. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or fully-qualified 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the root space of the subtree to
delete. </para>
            </param>
            <remarks>
                <para> Deletes the subtree rooted at the given space
name.  All children of the space are also removed from the
tree. </para>
                <para> If this method encounters the root node of
a tree embedded using the
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro3D.Cog3DCoordinateSpaceTree,Cognex.VisionPro3D.ICog3DTransform,Cognex.VisionPro.CogAddSpaceConstants)" />
method, it unlinks the embedded tree, and other clients of
that embedded tree can continue to use it. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentException">
                <para>
                    <paramref name="spaceName" /> cannot be the root space.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> is not a 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.SubtreeDeleted">
Fires when a subtree is deleted. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.ChangeTransform(System.String,Cognex.VisionPro3D.ICog3DTransform)">
            <summary> Change the transform which maps points from the given
child space into its parent space.  The new transform is given
by newParentFromChild. </summary>
            <param name="childSpaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the coordinate space to modify. </para>
            </param>
            <param name="newParentFromChild">
                <para> A 3D transform that maps
points from the child space you are changing to its parent coordinate
space. </para>
            </param>
            <remarks>
                <para> Changes the transform that maps points from the
given child space name into its parent space. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentNullException">
                <para>
                    <paramref name="newParentFromChild" /> is null. </para>
            </exception>
            <exception cref="!:T:System.ArgumentException">
                <para>
                    <paramref name="childSpaceName" /> is the root space.</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="childSpaceName" /> is not a 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="childSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="childSpaceName" /> does not exist in this tree.
</para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.TransformChanged">
Fires when the transform changes. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.ChangeName(System.String,System.String)">
            <summary> Change the given space name to newSpaceName. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to change. This space must exist in the tree. </para>
            </param>
            <param name="newSpaceName">
                <para> A valid nonqualified 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> for the new coordinate space. </para>
            </param>
            <remarks>
                <para>Change the 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">name</see>
of a space in this tree. If the <paramref name="spaceName" /> is a
fully-qualified pathname this method modifies only the trailing
nonqualified name. The new space name must meet the syntactical
requirements of a nonqualified space names. </para>
                <NOTE>If you want to modify the tree's root name the
<see cref="!:P:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.RootName" />
property permits less restrictive space names. </NOTE>
            </remarks>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException">
                <para>
                    <paramref name="newSpaceName" /> is already a child of
<paramref name="spaceName" />'s parent space. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> or <paramref name="newSpaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.NameChanged">
Fires when the name changes. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.GetTransform(System.String,System.String)">
            <summary> Return a composed transform which can map points from
the 'from' coordinate space to the 'to' space. </summary>
            <param name="toSpaceName">
                <para> A valid nonqualified or fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the coordinate space to which to map
points. </para>
            </param>
            <param name="fromSpaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see>. This name indicates the coordinate space from which
to map points into the <paramref name="toSpaceName" />. </para>
            </param>
            <returns>
                <para> The resulting 3D transform. </para>
            </returns>
            <remarks>
                <para>Returns a composed transform that maps points
from one coordinate space to another. </para>
            </remarks>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="toSpaceName" /> or 
<paramref name="fromSpaceName" /> is not a
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="toSpaceName" /> or 
<paramref name="fromSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="toSpaceName" /> or 
<paramref name="fromSpaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro3D.Cog3DCoordinateSpaceTree,Cognex.VisionPro3D.ICog3DTransform,Cognex.VisionPro.CogAddSpaceConstants)">
            <summary> Add a tree of coordinate spaces to the given
parentSpaceName of this tree using the supplied
parentFromTreeRoot transform.  The tree is added by reference,
so any changes to it will be visible to clients of both
trees. </summary>
            <param name="parentSpaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the parent space. </para>
            </param>
            <param name="treeToAdd">
                <para> The coordinate space tree to add
to the given <paramref name="parentSpaceName" />. </para>
            </param>
            <param name="parentFromTreeRoot">
                <para> A 3D transformation
that transforms points from the root of the space tree you are
adding to the parent space. </para>
            </param>
            <param name="duplicateHandling">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants" /> value that
specifies what do if the parent coordinate space already
contains an immediate child with the same name as the root of
<paramref name="treeToAdd" />. The options are to return an
error, replace the named child with the given tree, or do
nothing. </para>
            </param>
            <remarks>
                <para> Adds a tree of coordinate spaces to the given
parent space name of this tree. You must also supply a
transformation that defines the relationship between the parent
space and the root of the new spaces. </para>
                <para> Trees are added
by-reference. If you copy the parent tree, the copy contains an
additional reference to the supplied tree. You must avoid
creating new trees that contain circular references to other
coordinate space trees. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentNullException">
                <para>
                    <paramref name="treeToAdd" /> or
<paramref name="parentFromTreeRoot" /> is null. </para>
            </exception>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="duplicateHandling" /> value is not a
member of <see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException">
                <para> The root name of <paramref name="treeToAdd" /> is already a
child of <paramref name="parentSpaceName" /> and
the <paramref name="duplicateHandling" /> argument is
<see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError
</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="parentSpaceName" /> is not a
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="parentSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="parentSpaceName" /> does not exist in this tree.
</para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.TreeAdded">
Fires when a tree is added to this tree. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AddSpaceWithID(System.String,System.String,Cognex.VisionPro3D.ICog3DTransform,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> For Cognex internal use only. </summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.VisionPro3D.ICog3DTransform,Cognex.VisionPro.CogAddSpaceConstants)">
            <summary> Add a new coordinate space, with the given name and
transform, to this tree.  Attach it to the specified
pre-existing parent space. </summary>
            <param name="parentSpaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> that indicates the parent space. </para>
            </param>
            <param name="newSpaceName">
                <para> A valid nonqualified 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> for the new coordinate space. </para>
            </param>
            <param name="parentFromNew">
                <para> A 3D transform that maps
points from the space you are adding to the parent coordinate
space. </para>
            </param>
            <param name="duplicateHandling">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants" /> value that
specifies what do if the parent coordinate space already
contains an immediate child with the same name as
<paramref name="newSpaceName" />. The options are to return an
error, replace the transform of the named child, or do
nothing. </para>
            </param>
            <remarks>
                <para> Adds a new user coordinate space to this tree.
You must specify the name of the parent space for the newly added
space, and supply a transformation that defines the relationship
between the parent space and the new space.</para>
            </remarks>
            <exception cref="!:T:System.ArgumentNullException">
                <para>
                    <paramref name="parentFromNew" /> is null. </para>
            </exception>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="duplicateHandling" /> value is not a
member of <see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException">
                <para>
                    <paramref name="newSpaceName" /> is already a
child of <paramref name="parentSpaceName" /> and
the <paramref name="duplicateHandling" /> argument is
<see cref="!:T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError
</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="parentSpaceName" /> or 
<paramref name="newSpaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="parentSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="parentSpaceName" /> does not exist in this tree.
</para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.SpaceAdded">
Fires when a coordinate space is added to this tree. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.VerifyChild(System.String,System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.Boolean,System.String@)">
            <summary> Return true if the given childSpaceName is a direct or
indirect child of parentSpaceName.  Otherwise, return false.
The formatted child name, or "", can be obtained through the
foundChildName output argument. </summary>
            <param name="parentSpaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">
name</see> that indicates the parent space. </para>
            </param>
            <param name="childSpaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">
name</see> that indicates the child space to verify. </para>
            </param>
            <param name="pathnameFormat">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value
that indicates how the returned name should be
formatted. </para>
            </param>
            <param name="childrenOnly">
                <para> If false, the parent space is
considered a valid descendant of itself, which allows you to
find space names that are at or descended from the given parent
space name. If true, the parent space is not a valid descendant
of itself. </para>
            </param>
            <param name="foundChildName">
                <para> If this method returns true,
<paramref name="foundChildName" /> contains the formatted child
space name. Otherwise, it contains "". </para>
            </param>
            <returns>
                <para> True if the given <paramref name="childSpaceName" />
is a descendant of <paramref name="parentSpaceName" />;
otherwise, false. </para>
            </returns>
            <remarks>
                <para> Returns true if the given
<paramref name="childSpaceName" /> is a descendant of 
<paramref name="parentSpaceName" />. Otherwise, returns false. Both
spaces must exist in the tree. </para>
                <para> If 
<paramref name="childrenOnly" /> is true a coordinate
space will only be considered as child if it is a descendant of
the given parent space. In some applications, however, you may
need to test whether a space is a descendant of the given parent
<ITALIC>or</ITALIC> is the parent space itself. To do this, set the
<paramref name="childrenOnly" /> parameter to false. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="pathnameFormat" /> value is not a member
of <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="parentSpaceName" /> or 
<paramref name="childSpaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="parentSpaceName" /> or 
<paramref name="childSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="parentSpaceName" /> or 
<paramref name="childSpaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.VerifyName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.String@)">
            <summary> Return true if the given spaceName is a unique name in
this tree.  Return false if spaceName cannot be found.  The
formatted name, or "", can be obtained through the 
foundName output argument. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to find in this coordinate space tree. </para>
            </param>
            <param name="pathnameFormat">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value
that indicates how the returned name should be
formatted. </para>
            </param>
            <param name="foundName">
                <para> If this method returns true,
<paramref name="foundName" /> contains the formatted
space name. Otherwise, it contains "". </para>
            </param>
            <returns>
                <para>True if the given <paramref name="spaceName" />
is unique in this tree.  False if the name is not found in the
tree. </para>
            </returns>
            <remarks>
                <para> You can use this method to verify that a given
space name is legal and exists in the coordinate space tree.  It
returns true if the given <paramref name="spaceName" /> is a
unique name in this tree; false if <paramref name="spaceName" />
cannot be found.</para>
                <para> This method is is similar to
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)" />,
however it does not generate an error if <paramref name="spaceName" />
does not exist in the tree. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="pathnameFormat" /> value is not a member
of <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.FindNames(System.String)">
            <summary> Find the given spaceName in this tree and return a
collection containing the fully-qualified pathname(s) that are
found.  The collection may contain zero, one, or more items. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to find in this coordinate space tree. </para>
            </param>
            <returns>
                <para> A collection of space names; or an empty
collection if the given name does not exist in the tree.
</para>
            </returns>
            <remarks>
                <para> Finds the given coordinate space name in this
tree and returns a collection containing zero or more
fully-qualified pathnames that are found. The returned
collection contains more than one space name only if the given
<paramref name="spaceName" /> is nonqualified and exists at
multiple locations within the coordinate space tree. </para>
                <para> You can use this method to determine if a space name is
valid and exists in this tree, or to convert a nonqualified
space name to one or more fully-qualified space names.  This
method is similar to
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)" />,
but it does not generate an error if the given space name
exists more than once in the tree, or does not
exist in the tree at all. </para>
            </remarks>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AllChildNames(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.Boolean)">
            <summary> Returns a collection of names that includes all the
children, grandchildren, great-grandchildren, etc. of the given
space.  If there are no children, the collection will hold zero
items. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to find in this coordinate space tree. </para>
            </param>
            <param name="pathnameFormat">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value
that indicates how the returned name(s) should be
formatted. </para>
            </param>
            <param name="childrenOnly">
                <para> If false, the supplied space
name is included as a separate item in the returned collection
of space names. If true, the supplied space name does not appear
as a collection item. </para>
            </param>
            <returns>
                <para> A collection that contains a listing of
the child coordinate space names of the given space name. If no
children exist, the collection has no items. </para>
            </returns>
            <remarks>
                <para> Returns a collection of names that includes all
the descendants of the given space. If no children exist and
<paramref name="childrenOnly" /> is true, the collection has no
items. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="pathnameFormat" /> value is not a member
of <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.ChildNames(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)">
            <summary> Returns a collection of names containing the given
space's immediate children.  If there are no children, the
collection will hold zero items. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to find in this coordinate space tree. </para>
            </param>
            <param name="pathnameFormat">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value
that indicates how the returned name(s) should be
formatted. </para>
            </param>
            <returns>
                <para> A collection of child space names, or an empty
collection if no child spaces exist for the given coordinate
space name. </para>
            </returns>
            <remarks>
                <para>Returns a collection of names containing the
given space's immediate children. If no children exist, the
collection will hold zero items. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="pathnameFormat" /> value is not a member
of <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.ParentName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)">
            <summary> Returns the name of the given space's parent.  The
parent name for the root space is the empty name ("") because
the root space has no parent. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to find in this coordinate space tree. </para>
            </param>
            <param name="pathnameFormat">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value
that indicates how the returned name should be
formatted. </para>
            </param>
            <returns>
                <para> The formatted parent space name. </para>
            </returns>
            <remarks>
                <para> Returns the name of the given space's
parent. Because the root space has no parent, its parent space
name is the empty name string: "". </para>
            </remarks>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="pathnameFormat" /> value is not a member
of <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)">
            <summary> Looks up the given spaceName in this tree and
returns an appropriately formatted copy of the name. </summary>
            <param name="spaceName">
                <para> A valid nonqualified or
fully-qualified
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">space
name</see> to find in this coordinate space tree. </para>
            </param>
            <param name="pathnameFormat">
                <para> A
<see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value
that indicates how the returned name should be
formatted. </para>
            </param>
            <returns>
                <para> The formatted space name. </para>
            </returns>
            <remarks>
                <para> Looks up the given coordinate space name in this
tree and returns an appropriately formatted copy of the
name. You can use this method to verify that a given space name
is valid and exists in the tree. This method is similar to
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.FindNames(System.String)" />,
except that it requires that exactly one instance of the name
exist in the tree. </para>
            </remarks>
            <exception cref="!:T:System.ArgumentOutOfRangeException">
                <para> The <paramref name="pathnameFormat" /> value is not a member
of <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.
</para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="spaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="spaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="spaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.ResolvePartialName(System.String,System.String)">
            <summary> Use the given startingSpaceName to resolve any
ambiguity in nameToResolve, and return a name suitable for
lookup in this tree.  Note that a partial name, like ".", is
ambiguous without a specified starting space. </summary>
            <param name="startingSpaceName">
                <para> The starting space name
used to resolve <paramref name="nameToResolve" />, if
<paramref name="nameToResolve" /> is a
partially-qualified coordinate space name. </para>
            </param>
            <param name="nameToResolve">
                <para> The coordinate space name to
resolve. If <paramref name="nameToResolve" /> is a partially-qualified
name, this method resolves it using the
<paramref name="startingSpaceName" /> value. Otherwise, the
<paramref name="startingSpaceName" /> value is ignored and the
original <paramref name="nameToResolve" /> is returned. </para>
            </param>
            <returns>
                <para>
                    <paramref name="nameToResolve" /> as a
nonqualified or fully-qualified pathname. </para>
            </returns>
            <remarks>
                <para> Uses the given <paramref name="startingSpaceName" />
to resolve any ambiguity in <paramref name="nameToResolve" />,
and returns a name suitable for lookup in this tree.  Note that a
<see cgnxAnchor="partiallyqualified_pq_space_names" cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">
partial name</see>, such as ".", is ambiguous without a specified
starting space name. </para>
                <para> This method is the only
method of the coordinate space tree that can accept partially-qualified
space names.  It will never return a partially-qualified space
name, but it may return a space name that is not unique, or one
that does not exist in this space tree. </para>
            </remarks>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para>
                    <paramref name="startingSpaceName" /> 
is not a <see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see>. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException">
                <para>
                    <paramref name="startingSpaceName" /> is a nonqualified space name
and more than one instance of it exists in this tree. </para>
            </exception>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException">
                <para>
                    <paramref name="startingSpaceName" /> does not exist in this tree.
</para>
            </exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.RootName">
            <summary> Returns/sets the name of the root coordinate space in
this tree. </summary>
            <remarks>
                <para> Returns or sets the root coordinate space name
for this tree. The new space name must meet the syntactic
requirements of a 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">nonqualified
coordinate space name</see>, with the exception that you may
begin the name with any non-slash punctuation
character. </para>
                <NOTE>Do not change the root name
of a tree attached to an image. Any tree that is or will be
attached to an image must have a 
<see cref="!:P:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.RootName" />
value of "@" for VisionPro to function
properly.</NOTE>
                <DEFAULT>@ (root space)</DEFAULT>
            </remarks>
            <exception cref="!:T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException">
                <para> The new name is not a 
<see cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">legal
space name</see> for the root space. </para>
            </exception>
            <event cref="!:E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.NameChanged">
Fires when the root name changes. </event>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.Dispose">
            <summary> Releases all resources used by this class instance. </summary>
            <remarks>
                <para> This method deterministically unhooks events
from any embedded trees that might live within this one and then
releases all resources used by this tree.  It can be useful in
situations where you are finished with a coordinate space tree,
but are still using one of the trees embedded within it. </para>
                <para> Do not attempt to access the tree after calling this
method.  </para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.#ctor(Cognex.VisionPro3D.Cog3DCoordinateSpaceTree)">
            <summary> Constructs a new instance of this class as a deep copy
of the given instance. </summary>
            <param name="other"> The instance to copy from. </param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.#ctor">
            <summary> Constructs a new instance of this class. </summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Populates the provided SerializationInfo with the data needed to
serialize the object.
</summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Constructs a new instance of this object from saved data.
</summary>
            <param name="info">
The SerializationInfo that holds the saved object data.
</param>
            <param name="context">
The standard StreamingContext argument.
</param>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.TreeAdded">
            <summary> Occurs after a new tree is added to this tree. </summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.TransformChanged">
            <summary> Occurs after a transform is changed in this tree.  Note
that the meaning of any spaces descending from the changed
transform will also be altered.  This event can be fired 
in a variety of ways. For example: (1) by a call to the
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.ChangeTransform(System.String,Cognex.VisionPro3D.ICog3DTransform)" />
method, or (2) by a call to the
<see cref="!:M:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.VisionPro3D.ICog3DTransform,Cognex.VisionPro.CogAddSpaceConstants)" />
method that replaces an existing transform. </summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.SubtreeMoved">
            <summary> Occurs after a subtree is moved within this tree. </summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.SubtreeDeleted">
            <summary> Occurs after a subtree is deleted from this tree. </summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.SpaceAdded">
            <summary> Occurs after a new space is added to this tree. </summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree.NameChanged">
            <summary> Occurs after a space name is changed in this tree. </summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCoordinateSpaceTree">
            <summary> Tree of 3D coordinate spaces and the mappings between
them. </summary>
            <remarks>
                <para> A 3D coordinate space tree is associated with each
VisionPro range image. </para>
                <para> In VisionPro, you can define
and name your own coordinate spaces. Each user space is
defined, relative to an existing space, by a three-dimensional
transform. The coordinate space tree contains a node for each
coordinate space associated with an image, and maintains
information about the transform that produced it. VisionPro also
maintains a
<see cgnxAnchor="root_space" cref="!:u:Framework.Coordinates.Theory.CoordSpaces">
root space</see> based on the pixels in the acquired image. </para>
                <para> The methods and properties in this interface let you obtain
the 3D transformations that map points between any pair of
coordinate spaces in the space tree. They also allow you to
examine, add to, or rearrange the space tree.</para>
                <para>Many of
the methods use a client-specified coordinate space name to find a
coordinate space within the tree. You can supply any valid 
<see cgnxAnchor="nonqualified_nq_space_names" cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">
nonqualified (NQ)</see> or
<see cgnxAnchor="fullyqualified_fq_space_names" cref="!:u:Framework.Coordinates.Theory.CoordSpaceNames">
fully-qualified (FQ)</see> pathname. If you supply a NQ name, the
method searches the coordinate space tree for instances of that
name. The NQ name must occur exactly once within the
tree.</para>
                <para>In addition, several methods return one or more
coordinate space names. You can control the format (nonqualified,
partially-qualified, or fully-qualified) of the returned names by
supplying a <see cref="!:T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />
value. If a partially-qualified (PQ) name is returned, it begins
with either "." or "..", and specifies a space relative to the
first space name argument of the method. </para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.Canonize(System.Boolean)">
            <summary>
Get the canonical form of this composed transform. This is the mathematically equivalent form that
has the fewest number of transforms. If <paramref name="typeSimplify" /> is True,
the returned type may be reduced to a type simpler than this. 
</summary>
            <param name="typeSimplify">
Specify False to force this function to return a transformation of type 
Cog3DTransformComposed. If you specify True, then the returned transformation may be of a simpler type.
</param>
            <returns>
The returned canonical transformation, it might be Cog3DTransformComposed, or Cog3DTransformRotation, or Cog3DTransformRigid, or Cog3DTransformLinear
</returns>
            <remarks>
The transform reduction is based on checking each pair of adjacent transforms in the container, and see whether to merge them into one 
transform:
<list type="bullet"><item> [Cog3DTransformRotation, Cog3DTransformRotation]  becomes [Cog3DTransformRotation] </item><item> [Cog3DTransformRigid,    Cog3DTransformRigid]     becomes [Cog3DTransformRigid] </item><item> [Cog3DTransformLinear,   Cog3DTransformLinear]    becomes [Cog3DTransformLinear] </item><item> [Cog3DTransformRigid,    Cog3DTransformRotation]  becomes [Cog3DTransformRigid] </item><item> [Cog3DTransformLinear,   Cog3DTransformRotation]  becomes [Cog3DTransformLinear] </item><item> [Cog3DTransformRotation, Cog3DTransformRigid]     becomes [Cog3DTransformRigid] </item><item> [Cog3DTransformRotation, Cog3DTransformLinear]    becomes [Cog3DTransformLinear] </item><item> [Cog3DTransformRigid,    Cog3DTransformLinear]    becomes [Cog3DTransformLinear] </item><item> [Cog3DTransformLinear,   Cog3DTransformRigid]     becomes [Cog3DTransformLinear] </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.op_Multiply(Cognex.VisionPro3D.Cog3DTransformComposed,Cognex.VisionPro3D.Cog3DTransformComposed)">
            <summary>
Operator for composing one composed transform and another composed transform. 
Note that the composing order is 
<paramref name="composed" /> * <paramref name="rhs" />. 
<para>
The returned transform is always the canonical representation 
of the composed transform. Therefore, the returned transform might be
of a simpler type.
</para></summary>
            <param name="composed">
One 3D composed transform. May not be null.
</param>
            <param name="rhs">
Another composed transform to compose with. May not be null.
</param>
            <returns>
The composed transform, and it might be of a simpler type.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.Compose(Cognex.VisionPro3D.ICog3DTransform)">
            <summary>
Compose this composed transform and another transform.
Note that composing is from left to right: this * <paramref name="rhs" /><para>
The returned transform is always the canonical representation 
of the composed transform. Therefore, the returned transform might be
of a simpler type.
</para></summary>
            <param name="rhs">
The transform to compose with. May not be null.
</param>
            <returns>
The composed transform, and it might be of a simpler type.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.Inverse">
            <summary>
Compute the inverse transform of this transform.
</summary>
            <returns>
The inverse transform, and it is always the canonical representation 
of the inverse of this transform. Therefore, the returned inverse transform might be
of a simpler type.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.ComposeBase(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.CopyBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.InverseBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.MapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.MapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformComposed.Count">
            <summary>
Gets the number of transforms contained in this composed transform's sequence. 
</summary>
            <value>
The number of transforms contained in this composed transform's sequence.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformComposed.Linear">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.#ctor(Cognex.VisionPro3D.Cog3DTransformComposed)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformComposed.#ctor">
            <summary>
Construct this default (identity transform) Cog3DTransformComposed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DTransformComposed">
            <summary>
This is the class for 3D composed transform which can contain transforms of different types.
The composed transform maps points through all its contained transformations (from 'Right' to 'Left'), 
and thus acts as their composition.
<para> Note that this class is immutable - it may not be changed once
it has been constructed. </para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.RealEqual(Cognex.VisionPro3D.Cog3DTransformLinear,Cognex.VisionPro3D.Cog3DTransformLinear,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.op_Multiply(Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DTransformLinear)">
            <summary>
Operator for composing one rigid transform and one linear transform. 
Note that the composing order is 
<paramref name="rigid" /> * <paramref name="linear" />. 
</summary>
            <param name="rigid">
One 3D rigid transform. May not be null.
</param>
            <param name="linear">
One 3D linear transform to compose with. May not be null.
</param>
            <returns>
The composed linear transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.op_Multiply(Cognex.VisionPro3D.Cog3DTransformLinear,Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Operator for composing one linear transform and one rigid transform. 
Note that the composing order is 
<paramref name="linear" /> * <paramref name="rigid" />. 
</summary>
            <param name="linear">
One 3D linear transform. May not be null.
</param>
            <param name="rigid">
One 3D rigid transform to compose with. May not be null.
</param>
            <returns>
The composed linear transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.op_Multiply(Cognex.VisionPro3D.Cog3DTransformLinear,Cognex.VisionPro3D.Cog3DTransformLinear)">
            <summary>
Operator for composing one linear transform and another linear transform. 
Note that the composing order is 
<paramref name="linear" /> * <paramref name="rhs" />. 
</summary>
            <param name="linear">
One 3D linear transform. May not be null.
</param>
            <param name="rhs">
Another 3D linear transform to compose with. May not be null.
</param>
            <returns>
The composed linear transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.Compose(Cognex.VisionPro3D.Cog3DTransformLinear)">
            <summary>
Compose this linear transform and another linear transform.
Note that composing is from left to right: this * <paramref name="rhs" /></summary>
            <param name="rhs">
The linear transform to compose with. May not be null.
</param>
            <returns>
The composed linear transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.Inverse">
            <summary>
Compute the inverse transform of this transform.
</summary>
            <returns>
The inverse transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.op_Multiply(Cognex.VisionPro3D.Cog3DTransformLinear,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Operator for mapping a 3D point using the specified 3D linear transform. 
The definition is: <paramref name="linear" /> * <paramref name="point3D" />.
</summary>
            <param name="linear">
The 3D linear transform used for mapping. May not be null.
</param>
            <param name="point3D">
The 3D point to map.
</param>
            <returns>
The mapped point.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="linear" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.InverseBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.InvMapVectors(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D vectors using the inverse transform of this transform, i.e. use only the matrix part of 
the inverse transform in mapping.
</summary>
            <param name="vectors3D">
The collection of 3D vectors to map using the inverse transform of this transform. May not be null.
</param>
            <returns>
A collection holding the inversely mapped vectors.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.InvMapVector(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D vector using the inverse transform of this transform, i.e. map the given vector 
using only the matrix part of the inverse transform.
</summary>
            <param name="vector3D">
The 3D vector to map using the inverse transform of this transform.
</param>
            <returns>
The inversely mapped vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.MapVectors(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D vectors using this transform, i.e., only use the matrix part in mapping.
</summary>
            <param name="vectors3D">
The collection of 3D vectors to map using this transform. May not be null.
</param>
            <returns>
A collection holding the mapped vectors.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.MapVector(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D Vector using this transform. 
This corresponds to map the vector only using the matrix part of this transform.
</summary>
            <param name="vector3D">
The 3D vector to map using this transform.
</param>
            <returns>
The mapped vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.InvMapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D points using the inverse transform of this transform.
</summary>
            <param name="points3D">
The collection of 3D points to map using the inverse transform of this transform. May not be null.
</param>
            <returns>
A collection holding the inversely mapped points.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.InvMapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D point using the inverse transform of this transform.
</summary>
            <param name="point3D">
The 3D point to map using the inverse transform of this transform.
</param>
            <returns>
The inversely mapped point.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformLinear.Linear">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.ComposeBase(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.CopyBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.MapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.MapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformLinear.IsIdentity">
            <summary>
Gets whether this transform is identity. 
</summary>
            <value>
True if this 3D linear transform is identity; False otherwise.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformLinear.Translation">
            <summary>
Gets the translation of this linear transform. 
</summary>
            <value>
The translation part of this linear transform.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.GetMatrix">
            <summary>
Get a copy of the matrix part of this linear transform. 
</summary>
            <returns>
A copy of the matrix part of this linear transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.#ctor(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Construct this Cog3DTransformLinear using 3x3 matrix  and translation.
</summary>
            <param name="matrix">
The 3x3 matrix. May not be null.
</param>
            <param name="translation">
The translation part of the linear transform.
</param>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.#ctor(Cognex.VisionPro3D.Cog3DTransformLinear)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformLinear.#ctor">
            <summary>
Construct this default (identity transform) Cog3DTransformLinear.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DTransformLinear">
            <summary>
This is the class for 3D linear (affine) transform. A 3D linear transform has
rotation, translation, scale, and shear.  It  contains a 3x3 matrix part and a 3D translation part.
<para> Note that this class is immutable - it may not be changed once
it has been constructed. </para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformRigid.Linear">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.ComposeBase(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.CopyBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.RealEqual(Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DTransformRigid,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.LoadFromCvlArchive(System.String)">
            <summary>
Load a list of transforms from a CVL archive.
The purpose of this function is to provide access to transforms stored from legacy 3DLocate tool.
</summary>
            <param name="archiveName">
The name of the CVL archive
</param>
            <returns>
A list containing the loaded Transforms.
</returns>
            <remarks> 
This method is for Cognex internal usage only.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.op_Multiply(Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Operator for composing one rigid transform and another rigid transform. 
Note that the composing order is 
<paramref name="rigid" /> * <paramref name="rhs" />. 
</summary>
            <param name="rigid">
One 3D rigid transform. May not be null.
</param>
            <param name="rhs">
Another rigid transform to compose with. May not be null.
</param>
            <returns>
The composed rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.Compose(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <summary>
Compose this rigid transform and another rigid transform.
Note that composing is from left to right: this * <paramref name="rhs" /></summary>
            <param name="rhs">
The rigid transform to compose with. May not be null.
</param>
            <returns>
The composed rigid transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.Inverse">
            <summary>
Compute the inverse transform of this transform.
</summary>
            <returns>
The inverse transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.op_Multiply(Cognex.VisionPro3D.Cog3DTransformRigid,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Operator for mapping a 3D point using the specified 3D rigid transform. 
The definition is: <paramref name="rigid" /> * <paramref name="point3D" />.
</summary>
            <param name="rigid">
The 3D rigid transform used for mapping. May not be null.
</param>
            <param name="point3D">
The 3D point to map.
</param>
            <returns>
The mapped point.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="rigid" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.InverseBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.InvMapVectors(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D vectors using the inverse transform of this transform, i.e. rotate the given vectors
using the inverse transform.
</summary>
            <param name="vectors3D">
The collection of 3D vectors to map using the inverse transform of this transform. May not be null.
</param>
            <returns>
A collection holding the inversely mapped vectors.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.InvMapVector(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D vector using the inverse transform of this transform, i.e. rotate the given vector 
using the inverse transform.
</summary>
            <param name="vector3D">
The 3D vector to map using the inverse transform of this transform.
</param>
            <returns>
The inversely mapped vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.MapVectors(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D vectors using this transform, i.e., rotate the given vectors.
</summary>
            <param name="vectors3D">
The collection of 3D vectors to map using this transform. May not be null.
</param>
            <returns>
A collection holding the mapped vectors.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.MapVector(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D Vector using this transform. 
This corresponds to rotating the vector using the rotation part of this transform.
</summary>
            <param name="vector3D">
The 3D vector to map using this transform.
</param>
            <returns>
The mapped vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.InvMapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D points using the inverse transform of this transform.
</summary>
            <param name="points3D">
The collection of 3D points to map using the inverse transform of this transform. May not be null.
</param>
            <returns>
A collection holding the inversely mapped points.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.InvMapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D point using the inverse transform of this transform.
</summary>
            <param name="point3D">
The 3D point to map using the inverse transform of this transform.
</param>
            <returns>
The inversely mapped point.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.MapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.MapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformRigid.IsIdentity">
            <summary>
Gets whether this transform is identity. 
</summary>
            <value>
True if this 3D rigid transform is identity; False otherwise.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformRigid.Translation">
            <summary>
Gets the translation of this rigid transform. 
</summary>
            <value>
The translation part of this rigid transform.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformRigid.Rotation">
            <summary>
Get the rotation part of this rigid transform. 
</summary>
            <returns>
The rotation part of this rigid transform. May not be null.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.#ctor(Cognex.VisionPro3D.Cog3DTransformRotation,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Construct this Cog3DTransformRigid using rotation and translation.
</summary>
            <param name="rotation">
The rotation part of the rigid transform. May not be null.
</param>
            <param name="translation">
The translation part of the rigid transform.
</param>
            <exception cref="T:System.ArgumentNullException">
If  <paramref name="rotation" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.#ctor(Cognex.VisionPro3D.Cog3DTransformRigid)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRigid.#ctor">
            <summary>
Construct this default (identity transform) Cog3DTransformRigid.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DTransformRigid">
            <summary>
This is the class for 3D rigid transform. A 3D rigid transform has
only pure rotation and translation, and no scale. A rigid transform preserves 
relative distances: if point P and point Q are transformed to P' and Q',
then the distance from P to Q is the same as that from P' to Q'.
<para> Note that this class is immutable - it may not be changed once
it has been constructed. </para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformRotation.Linear">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.ComposeBase(Cognex.VisionPro3D.ICog3DTransform)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.CopyBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.RealEqual(Cognex.VisionPro3D.Cog3DTransformRotation,Cognex.VisionPro3D.Cog3DTransformRotation,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.op_Multiply(Cognex.VisionPro3D.Cog3DTransformRotation,Cognex.VisionPro3D.Cog3DTransformRotation)">
            <summary>
Operator for composing one rotation transform and another rotation 
transform: 
<para><paramref name="rotation" /> * <paramref name="rhs" />.
</para></summary>
            <param name="rotation">
One rotation transform.  May not be null.
</param>
            <param name="rhs">
Another rotation transform to compose with. May not be null.
</param>
            <returns>
The composed rotation transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.Compose(Cognex.VisionPro3D.Cog3DTransformRotation)">
            <summary>
Compose this rotation transform and another rotation transform.
Note that composing is from left to right: this * <paramref name="rhs" /></summary>
            <param name="rhs">
The rotation transform to compose with. May not be null.
</param>
            <returns>
The composed rotation transform.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.Inverse">
            <summary>
Compute the inverse transform of this transform.
</summary>
            <returns>
The inverse transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.op_Multiply(Cognex.VisionPro3D.Cog3DTransformRotation,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Operator for mapping a 3D point using the specified 3D rotation transform: 
<paramref name="rotation" /> * <paramref name="point3D" />.
</summary>
            <param name="rotation">
One 3D rotation transform used for mapping. May not be null.
</param>
            <param name="point3D">
The 3D point to map using the specified 3D rotation transform.
</param>
            <returns>
The mapped point.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="rotation" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.InverseBase">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.InvMapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D points using the inverse transform of this transform.
</summary>
            <param name="points3D">
The collection of 3D points to map using the inverse transform of this transform. May not be null.
</param>
            <returns>
A collection holding the inversely mapped points.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.InvMapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D point using the inverse transform of this transform.
</summary>
            <param name="point3D">
The 3D point to map using the inverse transform of this transform.
</param>
            <returns>
The inversely mapped point.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.MapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <inheritdoc />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.MapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <inheritdoc />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DTransformRotation.IsIdentity">
            <summary>
Gets whether this transform is identity. 
</summary>
            <value>
True if this 3D rotation transform is identity; False otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetMatrix">
            <summary>
Get the matrix representation of this rotation transform. 
</summary>
            <returns>
The matrix representation of this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetAxisAngle">
            <summary>
Get the axis/angle representation of this rotation transform. 
</summary>
            <returns>
The axis/angle representation of this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetQuaternion">
            <summary>
Get the quaternion representation of this rotation transform. 
</summary>
            <returns>
The quaternion representation of this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetEulerZYZMovingAxes">
            <summary>
Get the EulerZYZ of moving axes for this rotation transform. 
</summary>
            <returns>
The EulerZYZ of moving axes representation for this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetEulerZYXMovingAxes">
            <summary>
Get the EulerZYX of moving axes for this rotation transform. 
</summary>
            <returns>
The EulerZYX of moving axes representation for this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetEulerXYZMovingAxes">
            <summary>
Get the EulerXYZ of moving axes representation of this rotation transform. 
</summary>
            <returns>
The EulerXYZ of moving axes representation of this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetEulerZYX">
            <summary>
Get the EulerZYX of fixed axes representation of this rotation transform. 
</summary>
            <value>
The EulerZYX of fixed axes representation of this rotation transform.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.GetEulerXYZ">
            <summary>
Get the EulerXYZ of fixed axes representation of this rotation transform. 
</summary>
            <returns>
The EulerXYZ of fixed axes representation of this rotation transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Construct this Cog3DTransformRotation using a matrix representation. Theoretically, 
<paramref name="matrix" /> must
satisfy <paramref name="matrix" />.Determinant is 1 and 
<paramref name="matrix" /> * <paramref name="matrix" />.Transpose() is Identity. 
If <paramref name="matrix" /> is not exactly a rotation matrix then it attempts to 
compute a rotation matrix closest to <paramref name="matrix" />, and use the computed 
rotation matrix. Such a computation should succeed in practical
situations. 
</summary>
            <param name="matrix">
The 3x3 matrix representation of rotation transform.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">      
If computation of the rotation matrix  (if necessary) does not succeed.   
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DAxisAngle)">
            <summary>
Construct this Cog3DTransformRotation using a rotation axis and rotation angle. 
<para> Note that if the given axis is not a unit vector,
a corresponding unit vector is computed and used.
</para></summary>
            <param name="axisAngle">
The axis/angle representation of rotation transform.
</param>
            <exception cref="T:System.ArgumentException">      
If  <paramref name="axisAngle" />.Axis is (0,0,0).   
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Construct this Cog3DTransformRotation using a quaternion representation. 
<para> Note that if the given quaternion 
is not a unit quaternion, a corresponding unit quaternion is computed and used.
</para></summary>
            <param name="quaternion">
The quaternion representation of rotation transform.
</param>
            <exception cref="T:Cognex.VisionPro3D.Cog3DZeroQuaternionException">
If <paramref name="quaternion" />.Norm is 0.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes)">
            <summary>
Construct this Cog3DTransformRotation using a Cog3DEulerZYZMovingAxes.
</summary>
            <param name="eulerZYZ">
The EulerZYZ representation of moving axes.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes)">
            <summary>
Construct this Cog3DTransformRotation using a Cog3DEulerZYXMovingAxes.
</summary>
            <param name="eulerZYX">
The EulerZYX representation of moving axes.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes)">
            <summary>
Construct this Cog3DTransformRotation using a Cog3DEulerXYZMovingAxes.
</summary>
            <param name="eulerXYZ">
The EulerXYZ representation of moving axes.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DEulerZYX)">
            <summary>
Construct this Cog3DTransformRotation using a Cog3DEulerZYX.
</summary>
            <param name="eulerZYX">
The EulerZYX representation of fixed axes.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DEulerXYZ)">
            <summary>
Construct this Cog3DTransformRotation using a Cog3DEulerXYZ.
</summary>
            <param name="eulerXYZ">
The EulerXYZ representation of fixed axes.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor(Cognex.VisionPro3D.Cog3DTransformRotation)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DTransformRotation.#ctor">
            <summary>
Construct this default (identity transform) Cog3DTransformRotation.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DTransformRotation">
            <summary>
This is the class for 3D rotation transform. A 3D rotation can be 
represented in different ways, such as using 3 Euler angles (Cog3DEulerXYZ).
A 3D rotation transform can be constructed  by any of the supported 
representations, and also has getters to return the instances of different rotation 
representation classes.
<para> Note that this class is immutable - it may not be changed once
it has been constructed. </para></summary>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DTransform.Linear">
            <summary>
Gets whether this transform is linear. 
</summary>
            <value>
True if this 3D composed transform is linear; False otherwise.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DTransform.ComposeBase(Cognex.VisionPro3D.ICog3DTransform)">
            <summary>
Creates a new transform which is the composition of the given transform (on the right side) and this one (on the left side).
<para>
Note that the return transform is always the canonical representation of the composed transform. 
Therefore, it might be of type Cog3DTransformComposed or a simpler type.
</para></summary>
            <returns>
An ICog3DTransform that represents the result of the composition.
</returns>
            <remarks>
The returned transform type depends on the type of this transform and the type of <param name="rhs" />, for example :
<list type="bullet"><item>  Cog3DTransformRotation, Cog3DTransformRotation  returns  Cog3DTransformRotation </item><item>  Cog3DTransformRigid,    Cog3DTransformRigid     returns  Cog3DTransformRigid </item><item>  Cog3DTransformLinear,   Cog3DTransformLinear    returns  Cog3DTransformLinear </item><item>  Cog3DTransformRigid,    Cog3DTransformRotation  returns  Cog3DTransformRigid </item><item>  Cog3DTransformLinear,   Cog3DTransformRotation  returns  Cog3DTransformLinear </item><item>  Cog3DTransformRotation, Cog3DTransformRigid     returns  Cog3DTransformRigid </item><item>  Cog3DTransformRotation, Cog3DTransformLinear    returns  Cog3DTransformLinear </item><item>  Cog3DTransformRigid,    Cog3DTransformLinear    returns  Cog3DTransformLinear </item><item>  Cog3DTransformLinear,   Cog3DTransformRigid     returns  Cog3DTransformLinear </item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DTransform.CopyBase">
            <summary>
Create a deep copy of this transform.
</summary>
            <returns>
The copied transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DTransform.InverseBase">
            <summary>
Compute the inverse of this transform.
</summary>
            <returns>
The inverse transform.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DTransform.MapPoints(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Map a collection of 3D points.
</summary>
            <param name="points3D">
The 3D points to map using this transform.
</param>
            <returns>
A collection holding the mapped points.
</returns>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DTransform.MapPoint(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Map a 3D point.
</summary>
            <param name="point3D">
The 3D point to map using this transform.
</param>
            <returns>
The mapped point.
</returns>
        </member>
        <member name="T:Cognex.VisionPro3D.ICog3DTransform">
            <summary>
This is the interface class for 3D transforms.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAxisAngle.RealEqual(Cognex.VisionPro3D.Cog3DAxisAngle,Cognex.VisionPro3D.Cog3DAxisAngle,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAxisAngle.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAxisAngle.op_Inequality(Cognex.VisionPro3D.Cog3DAxisAngle,Cognex.VisionPro3D.Cog3DAxisAngle)">
            <summary>
Compare two Cog3DAxisAngle.
</summary>
            <param name="alpha">
The first Cog3DAxisAngle.
</param>
            <param name="beta">
The second Cog3DAxisAngle.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAxisAngle.op_Equality(Cognex.VisionPro3D.Cog3DAxisAngle,Cognex.VisionPro3D.Cog3DAxisAngle)">
            <summary>
Compare two Cog3DAxisAngle.
</summary>
            <param name="alpha">
The first Cog3DAxisAngle.
</param>
            <param name="beta">
The second Cog3DAxisAngle.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAxisAngle.Angle">
            <summary>
The rotation angle in radians.
</summary>
            <value>
The rotation angle in radians around the rotation axis.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DAxisAngle.Axis">
            <summary>
The rotation axis.
</summary>
            <value>
The axis of rotation.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DAxisAngle.#ctor(Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <summary>
Construct this Cog3DAxisAngle with the supplied axis and angle value.
</summary>
            <param name="axis">
The rotation axis.
</param>
            <param name="angle">
The rotation angle in radians.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DAxisAngle">
            <summary>
This value class describes 3D rotation representation 
based on a rotation axis and an angle around the axis.  Go to the following
link (Section "Euler axis and angle") for more information: 
http://en.wikipedia.org/wiki/Rotation_representation_%28mathematics%29
</summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> The default constructor creates an object with axis of (0,0,0), 
angle of 0.0, which 
is not valid for usage by Cog3DTransformRotation. </item>
                    <item> This class is just a container class for initializing/getting the
        rotation axis and angle, and it does not handle rotation operations.
        Please use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.RealEqual(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DMatrix3x3,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_UnaryNegation(Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Unary minus Operator, defined as 
-<paramref name="matrix" /></summary>
            <param name="matrix">
The input matrix.
</param>
            <returns>
The resulting 3x3 matrix.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Subtraction(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Subtraction operator for one matrix and another matrix, defined as 
<paramref name="matrix" /> - <paramref name="rhs" /></summary>
            <param name="matrix">
The first matrix. May not be null.
</param>
            <param name="rhs">
The second matrix. May not be null.
</param>
            <returns>
The resulting 3x3 matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Addition(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Addition operator for one matrix and another matrix, defined as 
<paramref name="matrix" /> + <paramref name="rhs" /></summary>
            <param name="matrix">
The first matrix. May not be null.
</param>
            <param name="rhs">
The second matrix. May not be null.
</param>
            <returns>
The resulting 3x3 matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Division(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Division operator for one matrix and another matrix. This operator is defined as
<paramref name="matrix" /> / <paramref name="rhs" /> = <paramref name="matrix" /> * <paramref name="rhs" />.Inverse()
</summary>
            <param name="matrix">
The first matrix. May not be null.
</param>
            <param name="rhs">
The second matrix. May not be null.
</param>
            <returns>
The resulting 3x3 matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If <paramref name="rhs" /> is singular.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Multiply(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Operator for composing one matrix and another matrix. Note that the definition of this operation is
<paramref name="matrix" /> * <paramref name="rhs" />.
</summary>
            <param name="matrix">
The first matrix. May not be null.
</param>
            <param name="rhs">
The second matrix. May not be null.
</param>
            <returns>
The composed 3x3 matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If any input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Division(System.Double,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Division operator for a scalar and a matrix. Note that 
<paramref name="scale" /> / <paramref name="matrix" /> = <paramref name="scale" /> * <paramref name="matrix" />.Inverse().
</summary>
            <param name="matrix">
The 3D matrix. May not be null.
</param>
            <param name="scale">
The scale factor.
</param>
            <returns>
The scaled matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Division(Cognex.VisionPro3D.Cog3DMatrix3x3,System.Double)">
            <summary>
Division operator for a matrix and a scalar. 
<para> Note that   <paramref name="matrix" /> / <paramref name="scale" />  = <paramref name="matrix" /> * 1/<paramref name="scale" />. </para></summary>
            <param name="matrix">
The 3D matrix. May not be null.
</param>
            <param name="scale">
The divisor.
</param>
            <returns>
The resulting matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Multiply(System.Double,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Multiplication operator for a scalar and a matrix. 
<para> Note that the definition of this operator is:  
<paramref name="scale" /> * <paramref name="matrix" /> = <paramref name="matrix" /> * <paramref name="scale" />.
</para></summary>
            <param name="matrix">
The 3D matrix. May not be null.
</param>
            <param name="scale">
The scaling factor.
</param>
            <returns>
The scaled matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Multiply(Cognex.VisionPro3D.Cog3DMatrix3x3,System.Double)">
            <summary>
Multiplication operator for a matrix and a scalar. Note that the definition of this operation is
<paramref name="matrix" /> * <paramref name="scale" />.
</summary>
            <param name="matrix">
The 3D matrix for scaling. May not be null.
</param>
            <param name="scale">
The scaling factor.
</param>
            <returns>
The scaled matrix.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Division(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Division operator for a 3D point and a 3D matrix. The definition of this operator is 
<paramref name="point3D" /> / <paramref name="matrix" /> = <paramref name="point3D" /> * <paramref name="matrix" />.Inverse().
</summary>
            <param name="matrix">
The 3D matrix . May not be null.
</param>
            <param name="point3D">
The 3D point.
</param>
            <returns>
The resulting point.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Multiply(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <summary>
Multiplication operator for a 3D point and a 3D matrix. The definition of this operator is 
<paramref name="point3D" /> * <paramref name="matrix" /> = <paramref name="matrix" />.Transpose() * <paramref name="point3D" />.
</summary>
            <param name="matrix">
The 3D matrix . May not be null.
</param>
            <param name="point3D">
The 3D point.
</param>
            <returns>
The resulting point.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.op_Multiply(Cognex.VisionPro3D.Cog3DMatrix3x3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Multiplication operator for a 3D matrix and a 3D point. Note that the definition of this operation is
<paramref name="matrix" /> * <paramref name="point3D" />.
</summary>
            <param name="matrix">
The 3D matrix. May not be null.
</param>
            <param name="point3D">
The 3D point.
</param>
            <returns>
The resulting point.
</returns>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="matrix" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.Transpose">
            <summary>
Compute the transpose matrix of this matrix.
</summary>
            <returns>
The transpose matrix.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.Inverse">
            <summary>
Compute the inverse matrix of this matrix.
</summary>
            <returns>
The inverse matrix.
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the matrix is singular.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.SetElement(System.Int32,System.Int32,System.Double)">
            <summary>
Sets one element of the matrix.
</summary>
            <param name="rowIndex">
The zero-based row index of the matrix.
</param>
            <param name="colIndex">
The zero-based column index of the matrix.
</param>
            <param name="value">
The value of the element at the given row and column.
</param>
            <remarks>
This setter recalculates Determinant.
</remarks>
            <exception cref="T:System.ArgumentException">
If <paramref name="rowIndex" /> or <paramref name="colIndex" /> is not inside range [0,2].
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.GetElement(System.Int32,System.Int32)">
            <summary>
Gets one element of the matrix.
</summary>
            <param name="rowIndex">
The zero-based row index of the matrix.
</param>
            <param name="colIndex">
The zero-based column index of the matrix.
</param>
            <returns>
The value of the element at the given row and column.
</returns>
            <exception cref="T:System.ArgumentException">
If <paramref name="rowIndex" /> or <paramref name="colIndex" /> is not inside range [0,2].
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.IsIdentity">
            <summary>
Gets whether this matrix is identity. 
</summary>
            <value>
True if this matrix is identity; false otherwise.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.IsSingular">
            <summary>
Gets whether this matrix is singular. 
</summary>
            <value>
True if the matrix is singular; false otherwise.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.Element(System.Int32,System.Int32)">
            <summary>
This property is deprecated, please use GetElment and SetElement instead.
</summary>
            <param name="rowIndex">
The zero-based row index of the matrix.
</param>
            <param name="colIndex">
The zero-based column index of the matrix.
</param>
            <value>
The value of the element at the given row and column.
</value>
            <remarks>
The setter recalculates Determinant.
</remarks>
            <exception cref="T:System.ArgumentException">
If <paramref name="rowIndex" /> or <paramref name="colIndex" /> is not inside range [0,2].
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.ScaleZ">
            <summary>
Gets the z scale value of this matrix. 
The z scale is defined to be the length of the vector 
resulting from mapping the z unit vector through this matrix.
</summary>
            <value>
The z scale of this matrix.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the matrix is singular.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.ScaleY">
            <summary>
Gets the y scale value of this matrix. 
The y scale is defined to be the length of the vector 
resulting from mapping the y unit vector through this matrix.
</summary>
            <value>
The y scale of this matrix.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the matrix is singular.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.ScaleX">
            <summary>
Gets the x scale value of this matrix. 
The x scale is defined to be the length of the vector 
resulting from mapping the x unit vector through this matrix.
</summary>
            <value>
The x scale of this matrix.
</value>
            <exception cref="T:Cognex.VisionPro3D.Cog3DException">
If the matrix is singular.
</exception>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DMatrix3x3.Determinant">
            <summary>
Gets the determinant of this matrix. 
</summary>
            <value>
The determinant of this matrix.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DMatrix3x3 using the given element values.
</summary>
            <param name="e00">
Specified value for Element(0,0).
</param>
            <param name="e01">
Specified value for Element(0,1).
</param>
            <param name="e02">
Specified value for Element(0,2).
</param>
            <param name="e10">
Specified value for Element(1,0).
</param>
            <param name="e11">
Specified value for Element(1,1).
</param>
            <param name="e12">
Specified value for Element(1,2).
</param>
            <param name="e20">
Specified value for Element(2,0).
</param>
            <param name="e21">
Specified value for Element(2,1).
</param>
            <param name="e22">
Specified value for Element(2,2).
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.#ctor(Cognex.VisionPro3D.Cog3DMatrix3x3)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DMatrix3x3.#ctor">
            <summary>
Construct a default (representing an identity transform) Cog3DMatrix3x3.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DMatrix3x3">
            <summary>
This class describes a 3X3 matrix representation and associated operations. 
Note that although 3x3 matrices are useful in calculation involving 3D rotations, 
users should use Cog3DTransformRotation for general 3D rotation operations.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.RealEqual(Cognex.VisionPro3D.Cog3DQuaternion,Cognex.VisionPro3D.Cog3DQuaternion,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.op_Inequality(Cognex.VisionPro3D.Cog3DQuaternion,Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Compare two Cog3DQuaternion.
</summary>
            <param name="alpha">
The first quaternion.
</param>
            <param name="beta">
The second quaternion.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.op_Equality(Cognex.VisionPro3D.Cog3DQuaternion,Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Compare two Cog3DQuaternion.
</summary>
            <param name="alpha">
The first quaternion.
</param>
            <param name="beta">
The second quaternion.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.op_Multiply(Cognex.VisionPro3D.Cog3DQuaternion,System.Double)">
            <summary>
Multiply a Cog3DQuaternion by a scalar.
</summary>
            <param name="quaternion">
The quaternion.
</param>
            <param name="mult">
The scalar multiplier.
</param>
            <returns>
The multiplied (scaled) quaternion.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.op_Subtraction(Cognex.VisionPro3D.Cog3DQuaternion,Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Subtract two quaternions: <paramref name="alpha" /> - <paramref name="beta" />.
</summary>
            <param name="alpha">
The first quaternion.
</param>
            <param name="beta">
The second quaternion.
</param>
            <returns>
The quaternion after subtraction.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.op_Addition(Cognex.VisionPro3D.Cog3DQuaternion,Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Add two quaternions.
</summary>
            <param name="alpha">
The first quaternion.
</param>
            <param name="beta">
The second quaternion.
</param>
            <returns>
The sum quaternion.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.ComputeInnerProduct(Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Compute the inner product of this Cog3DQuaternion with the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other quaternion.
</param>
            <returns>
The computed inner product.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.ComputeGrassmannProduct(Cognex.VisionPro3D.Cog3DQuaternion)">
            <summary>
Compute the Grassmann product of this Cog3DQuaternion with the supplied <paramref name="other" />. 
</summary>
            <param name="other">
The other quaternion.
</param>
            <returns>
The computed Grassmann product quaternion.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.ComputeUnitQuaternion">
            <summary>
Gets the normalized quaternion (a unit quaternion) whose Norm
value is 1.
</summary>
            <returns>
Gets the normalized quaternion (a unit quaternion). 
</returns>
            <exception cref="T:Cognex.VisionPro3D.Cog3DZeroQuaternionException">
If  W == X == Y == Z == 0
</exception>
            <remarks>
A unit quaternion is obtained by dividing the quaternion by its Norm value.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.ComputeConjugate">
            <summary>
Gets the conjugate quaternion of this quaternion, which is defined
as follows:  W - X i - Y j - Z k
</summary>
            <returns>
The conjugate quaternion of this quaternion.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.NormSquared">
            <summary>
Gets the norm squared value of this quaternion object.
</summary>
            <value>
The norm squared value of this quaternion object.
</value>
            <remarks>
The norm squared value is the Grassmann product of this quaternion
 and its conjugate, i.e.,  NormSquared is (W*W) + (X*X) + (Y*Y) + (Z*Z) 
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.Norm">
            <summary>
Gets the norm (magnitude) value of this quaternion object.
</summary>
            <value>
The norm (magnitude) value of this quaternion object.
</value>
            <remarks>
The norm value of a quaternion is  sqrt(NormSquared).
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.Z">
            <summary>
Gets the fourth component of this quaternion object.
</summary>
            <value>
The fourth component of this quaternion object.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.Y">
            <summary>
Gets the third component of this quaternion object.
</summary>
            <value>
The third component of this quaternion object.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.X">
            <summary>
Gets the second component of this quaternion object.
</summary>
            <value>
The second component of this quaternion object.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.XYZ">
            <summary>
Gets the vector (imaginary) part of this quaternion object.
</summary>
            <value>
The vector (imaginary) part of this quaternion object.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DQuaternion.W">
            <summary>
Gets the scalar part (the first component) of this quaternion.
</summary>
            <value>
The scalar part (the first component) of this quaternion.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DQuaternion with the supplied W,X,Y,Z values.
</summary>
            <param name="initialW">
The initial W value.
</param>
            <param name="initialX">
The initial X value.
</param>
            <param name="initialY">
The initial Y value.
</param>
            <param name="initialZ">
The initial Z value.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DQuaternion">
            <summary>
This value class describes a quaternion representation and associated operations.
</summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> The default constructor creates a zero quaternion, which 
is not valid for usage by Cog3DTransformRotation. </item>
                    <item> Although quaternions are useful in calculations involving 3D rotations, users
       should use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.RealEqual(Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes,Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.op_Inequality(Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes,Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes)">
            <summary>
Compare two Cog3DEulerZYZMovingAxes.
</summary>
            <param name="alpha">
The first Cog3DEulerZYZMovingAxes.
</param>
            <param name="beta">
The second Cog3DEulerZYZMovingAxes.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.op_Equality(Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes,Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes)">
            <summary>
Compare two Cog3DEulerZYZMovingAxes.
</summary>
            <param name="alpha">
The first Cog3DEulerZYZMovingAxes.
</param>
            <param name="beta">
The second Cog3DEulerZYZMovingAxes.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.ZMovedAxis">
            <summary>
Gets the ZMovedAxis component of the Cog3DEulerZYZMovingAxes 
(rotation about the moved Z-axis in radians).
</summary>
            <value>
The ZMovedAxis component of the Cog3DEulerZYZMovingAxes.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.Y">
            <summary>
Gets the Y component of the Cog3DEulerZYZMovingAxes 
(rotation about the moved Y-axis in radians).
</summary>
            <value>
The Y component of the Cog3DEulerZYZMovingAxes.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.Z">
            <summary>
Gets the Z component of the Cog3DEulerZYZMovingAxes
(rotation about the original Z-axis in radians).
</summary>
            <value>
The Z component of the Cog3DEulerZYZMovingAxes.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DEulerZYZMovingAxes with the supplied components.
</summary>
            <param name="angleZ">
The 'Z' component of the Cog3DEulerZYZMovingAxes (rotation about the original Z-axis in radians).
</param>
            <param name="angleY">
The 'Y' component of the Cog3DEulerZYZMovingAxes (rotation about the moved Y-axis in radians).
</param>
            <param name="angleZMovedAxis">
The 'ZMovedAxis' component of the Cog3DEulerZYZMovingAxes (rotation about the moved Z-axis in radians).
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DEulerZYZMovingAxes">
            <summary>
                <para> This value class holds an EulerZYZ of moving axes representation for a 3D rotation 
transform . It holds three angles which express rotations about axes
 of a mobile 3D coordinate system. It is used to express the orientation of one rotated
 coordinate system (target XYZ-system) with respect to a fixed coordinate system (reference xyz-system).
 </para>
                <para>  Starting with the target XYZ system coincident the reference xyz-system, the rotation of the target XYZ-system is expressed as: 
<list type="bullet"><item>  Rotate the target XYZ-system about the Z-axis.</item><item>  Rotate the target XYZ-system about the now rotated Y-axis </item><item>  Rotate the target XYZ-system about the new Z-axis. </item></list></para>
                <para>
The default values for properties Z, Y, ZMovedAxis are 0.0. 
</para>
            </summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> This class is just a container class for initializing/getting the
       Euler angles, and it does not handle rotation operations.
       Please use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.RealEqual(Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes,Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.op_Inequality(Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes,Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes)">
            <summary>
Compare two Cog3DEulerZYXMovingAxes.
</summary>
            <param name="alpha">
The first Cog3DEulerZYXMovingAxes.
</param>
            <param name="beta">
The second Cog3DEulerZYXMovingAxes.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.op_Equality(Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes,Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes)">
            <summary>
Compare two Cog3DEulerZYXMovingAxes.
</summary>
            <param name="alpha">
The first Cog3DEulerZYXMovingAxes.
</param>
            <param name="beta">
The second Cog3DEulerZYXMovingAxes.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.Z">
            <summary>
Gets the Z component of the Cog3DEulerZYXMovingAxes
(rotation about the moving Z-axis in radians).
</summary>
            <value>
The Z component of the Cog3DEulerZYXMovingAxes
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.Y">
            <summary>
Gets the Y component of the Cog3DEulerZYXMovingAxes
(rotation about the moving Y-axis in radians).
</summary>
            <value>
The Y component of the Cog3DEulerZYXMovingAxes
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.X">
            <summary>
Gets the X component of the Cog3DEulerZYXMovingAxes 
(rotation about the moving X-axis in radians).
</summary>
            <value>
The X component of the Cog3DEulerZYXMovingAxes
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DEulerZYXMovingAxes with the supplied components.
</summary>
            <param name="angleX">
The 'X' component of the Cog3DEulerZYXMovingAxes (rotation about the moving X axis in radians).
</param>
            <param name="angleY">
The 'Y' component of the Cog3DEulerZYXMovingAxes (rotation about the moving Y-axis in radians).
</param>
            <param name="angleZ">
The 'Z' component of the Cog3DEulerZYXMovingAxes (rotation about the moving Z-axis in radians).
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DEulerZYXMovingAxes">
            <summary>
                <para> This value class holds an EulerZYX of moving axes representation for a 3D rotation 
transform . It holds three angles which express rotations about axes
 of a mobile 3D coordinate system. It is used to express the orientation of one rotated
 coordinate system (target XYZ-system) with respect to a fixed coordinate system (reference xyz-system).
 </para>
                <para>  Starting with the target XYZ system coincident the reference xyz-system, the rotation of 
the target XYZ-system is expressed as: 
<list type="bullet"><item>  Rotate the target XYZ-system about the Z-axis.</item><item>  Rotate the target XYZ-system about the now rotated Y-axis </item><item>  Rotate the target XYZ-system about the new X-axis. </item></list></para>
                <para>
The default values for properties X, Y, Z are 0.0. 
</para>
            </summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> This class is just a container class for initializing/getting the
       Euler angles, and it does not handle rotation operations.
       Please use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.RealEqual(Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes,Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.op_Inequality(Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes,Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes)">
            <summary>
Compare two Cog3DEulerXYZMovingAxes.
</summary>
            <param name="alpha">
The first Cog3DEulerXYZMovingAxes.
</param>
            <param name="beta">
The second Cog3DEulerXYZMovingAxes.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.op_Equality(Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes,Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes)">
            <summary>
Compare two Cog3DEulerXYZMovingAxes.
</summary>
            <param name="alpha">
The first Cog3DEulerXYZMovingAxes.
</param>
            <param name="beta">
The second Cog3DEulerXYZMovingAxes.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.Z">
            <summary>
Gets the Z component of the Cog3DEulerXYZMovingAxes 
(rotation about the moving Z-axis in radians).
</summary>
            <value>
The Z component of the Cog3DEulerXYZMovingAxes.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.Y">
            <summary>
Gets the Y component of the Cog3DEulerXYZMovingAxes 
(rotation about the moving Y-axis in radians).
</summary>
            <value>
The Y component of the Cog3DEulerXYZMovingAxes.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.X">
            <summary>
Gets the X component of the Cog3DEulerXYZMovingAxes
(rotation about the moving X-axis in radians).
</summary>
            <value>
The X component of the Cog3DEulerXYZMovingAxes.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DEulerXYZMovingAxes with the supplied components.
</summary>
            <param name="angleX">
The 'X' component of the Cog3DEulerXYZMovingAxes (rotation about the moving X-axis in radians).
</param>
            <param name="angleY">
The 'Y' component of the Cog3DEulerXYZMovingAxes (rotation about the moving Y-axis in radians).
</param>
            <param name="angleZ">
The 'Z' component of the Cog3DEulerXYZMovingAxes (rotation about the moving Z-axis in radians).
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DEulerXYZMovingAxes">
            <summary>
                <para> This value class holds an EulerXYZ of moving axes representation for a 3D rotation 
transform . It holds three angles which express rotations about axes
 of a mobile 3D coordinate system. It is used to express the orientation of one rotated
 coordinate system (target XYZ-system) with respect to a fixed coordinate system (reference xyz-system).
 </para>
                <para>  Starting with the target XYZ system coincident the reference xyz-system, the rotation of the target XYZ-system is expressed as: 
<list type="bullet"><item>  Rotate the target XYZ-system about the X-axis.</item><item>  Rotate the target XYZ-system about the now rotated Y-axis </item><item>  Rotate the target XYZ-system about the new Z-axis. </item></list></para>
                <para>
The default values for properties X, Y, Z are 0.0. 
</para>
            </summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> This class is just a container class for initializing/getting the
       Euler angles, and it does not handle rotation operations.
       Please use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYX.RealEqual(Cognex.VisionPro3D.Cog3DEulerZYX,Cognex.VisionPro3D.Cog3DEulerZYX,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYX.op_Inequality(Cognex.VisionPro3D.Cog3DEulerZYX,Cognex.VisionPro3D.Cog3DEulerZYX)">
            <summary>
Compare two Cog3DEulerZYX.
</summary>
            <param name="alpha">
The first Cog3DEulerZYX.
</param>
            <param name="beta">
The second Cog3DEulerZYX.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYX.op_Equality(Cognex.VisionPro3D.Cog3DEulerZYX,Cognex.VisionPro3D.Cog3DEulerZYX)">
            <summary>
Compare two Cog3DEulerZYX.
</summary>
            <param name="alpha">
The first Cog3DEulerZYX.
</param>
            <param name="beta">
The second Cog3DEulerZYX.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYX.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYX.Z">
            <summary>
Gets the Z component of the Cog3DEulerZYX 
(rotation about the fixed z-axis in radians).
</summary>
            <value>
The Z component of the Cog3DEulerZYX. 
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYX.Y">
            <summary>
Gets the Y component of the Cog3DEulerZYX 
(rotation about the fixed y-axis in radians).
</summary>
            <value>
The Y component of the Cog3DEulerZYX. 
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerZYX.X">
            <summary>
Gets the X component of the Cog3DEulerZYX 
(rotation about the fixed x-axis in radians).
</summary>
            <value>
The X component of the Cog3DEulerZYX. 
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerZYX.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DEulerZYX (EulerZYX of fixed axes) with the supplied components.
</summary>
            <param name="angleX">
The 'X' component of the Cog3DEulerZYX (rotation about the fixed x-axis in radians).
</param>
            <param name="angleY">
The 'Y' component of the Cog3DEulerZYX (rotation about the fixed y-axis in radians).
</param>
            <param name="angleZ">
The 'Z' component of the Cog3DEulerZYX (rotation about the fixed z-axis in radians).
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DEulerZYX">
            <summary>
                <para> This value class holds an EulerZYX of fixed axes representation 
for a 3D rotation 
transform. It holds three angles which express rotations about the fixed axes
 of a 3D coordinate system. It is used to express the orientation of one 
 coordinate system (target frame) with respect to another (fixed reference frame).
 </para>
                <para>  A rotation R of 3D coordinate axes is expressed as: 
</para>
                <para>       R = Rx * Ry * Rz </para>
                <para> Where </para>
                <list type="bullet">
                    <item>  Rz = rotation of xy-axes about fixed z-axis, </item>
                    <item>  Ry = rotation of zx-axes about fixed y-axis, </item>
                    <item>  Rx = rotation of yz-axes about fixed x-axis. </item>
                </list>
                <para>
The order of applying rotations is: Rz first, Ry second and Rx third. 
</para>
                <para>
The default values for properties X, Y, Z are 0.0. 
</para>
            </summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> This class is just a container class for initializing/getting the
       Euler angles, and it does not handle rotation operations.
       Please use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZ.RealEqual(Cognex.VisionPro3D.Cog3DEulerXYZ,Cognex.VisionPro3D.Cog3DEulerXYZ,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZ.op_Inequality(Cognex.VisionPro3D.Cog3DEulerXYZ,Cognex.VisionPro3D.Cog3DEulerXYZ)">
            <summary>
Compare two Cog3DEulerXYZ.
</summary>
            <param name="alpha">
The first Cog3EulerXYZ.
</param>
            <param name="beta">
The second Cog3EulerXYZ.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZ.op_Equality(Cognex.VisionPro3D.Cog3DEulerXYZ,Cognex.VisionPro3D.Cog3DEulerXYZ)">
            <summary>
Compare two Cog3DEulerXYZ.
</summary>
            <param name="alpha">
The first Cog3EulerXYZ.
</param>
            <param name="beta">
The second Cog3EulerXYZ.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZ.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerXYZ.Z">
            <summary>
Gets the Z component of the Cog3DEulerXYZ 
(rotation about the fixed z-axis in radians).
</summary>
            <value>
The Z component of the Cog3DEulerXYZ 
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerXYZ.Y">
            <summary>
Gets the Y component of the Cog3DEulerXYZ 
(rotation about the fixed y-axis in radians).
</summary>
            <value>
The Y component of the Cog3DEulerXYZ 
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DEulerXYZ.X">
            <summary>
Gets the X component of the Cog3DEulerXYZ 
(rotation about the fixed x-axis in radians).
</summary>
            <value>
The X component of the Cog3DEulerXYZ 
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DEulerXYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DEulerXYZ (EulerXYZ of fixed axes) with the supplied components.
</summary>
            <param name="angleX">
The 'X' component of the Cog3DEulerXYZ (rotation about the fixed x-axis in radians).
</param>
            <param name="angleY">
The 'Y' component of the Cog3DEulerXYZ (rotation about the fixed y-axis in radians).
</param>
            <param name="angleZ">
The 'Z' component of the Cog3DEulerXYZ (rotation about the fixed z-axis in radians).
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DEulerXYZ">
            <summary>
                <para> This value class holds an EulerXYZ of fixed axes representation
for a 3D rotation transform. It holds three angles which express rotations 
about the fixed axes
of a 3D coordinate system. It is used to express the orientation of one 
 coordinate system (target frame) with respect to another (fixed reference frame).
 </para>
                <para>  A rotation R of 3D coordinate axes is expressed as: 
</para>
                <para>       R = Rz * Ry * Rx </para>
                <para> Where </para>
                <list type="bullet">
                    <item>  Rz = rotation of xy-axes about fixed z-axis, </item>
                    <item>  Ry = rotation of zx-axes about fixed y-axis, </item>
                    <item>  Rx = rotation of yz-axes about fixed x-axis. </item>
                </list>
                <para>
The order of applying rotations is: Rx first, Ry second and Rz third. 
</para>
                <para>
The default values for properties X, Y, Z are 0.0. 
</para>
            </summary>
            <remarks>
                <list type="bullet">
                    <item> This class is immutable - it may not be changed once 
it has been constructed. </item>
                    <item> This class is just a container class for initializing/getting the
        Euler angles, and it does not handle rotation operations.
        Please use Cog3DTransformRotation for general 3D rotation operations. </item>
                </list>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.RemoveAt(System.Int32)">
            <summary>
Remove the value at the specified index.
</summary>
            <param name="index">
The zero based index at which the item is to be removed.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Insert(System.Int32,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Insert the supplied item at the specified index.
</summary>
            <param name="index">
The zero based index at which the item is to be inserted.
</param>
            <param name="value">
The Cog3DVect3 value to be inserted at the specified index.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.IndexOf(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Find the first collection element that matches the supplied value,
returning the index.
</summary>
            <param name="value">
The supplied value to match.
</param>
            <returns>
The zero based index of the first matching element. If no match
is found this will be -1.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3Collection.Item(System.Int32)">
            <summary>
Gets or sets the item at the specified index.
</summary>
            <param name="index">
The zero based index of the item of interest.
</param>
            <param name="value">
The Cog3DVect3 value to be applied to the specified item.
</param>
            <value>
The item at the specified index.
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Remove(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Remove the matching value. If no match is found, do nothing.
</summary>
            <param name="value">
The Cog3DVect3 value to be removed from the collection.
</param>
            <returns>
True if the item was successfully removed; false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Contains(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Determine if this collection contains an element whose value
matches that of the specified value.
</summary>
            <param name="value">
The Cog3DVect3 to match.
</param>
            <returns>
True if the collection contains a matching element; false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Clear">
            <summary>
Delete any elements contained in this collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Add(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Appends the supplied item to the end of the collection.
</summary>
            <param name="value">
The Cog3DVect3 to be added to this collection.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3Collection.IsReadOnly">
            <summary>
Gets a value that indicates if this collection is read only.
</summary>
            <value>
True if this collection is read only; otherwise false.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3Collection.Count">
            <summary>
Gets the number of items in this collection.
</summary>
            <value>
The number of items in this collection.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.CopyTo(Cognex.VisionPro3D.Cog3DVect3[],System.Int32)">
            <summary>
Copies the contained set of Cog3DVect3's into the supplied, previously allocated
array of Cog3DVect3's starting at the specified index.
</summary>
            <param name="arr">
The destination array of type Cog3DVect3. May not be null.
</param>
            <param name="index">
A zero based index into the destination array at which copying
begins.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="arr" /> is null.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index argument is not valid.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied array is not of rank 1.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied array does not have zero based indexing.
</exception>
            <exception cref="T:System.ArgumentException">
If the contained Cog3DVect3 will not fit into the destination
array starting at the specified index.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.GetEnumerator">
            <summary>
Gets an enumerator for this collection.
</summary>
            <returns>
A reference to an IEnumerable suitable for this collection type.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Reserve(System.Int32)">
            <summary>
If Capacity is less than the supplied value, set it.
</summary>
            <param name="minimumCapacity">
The largest number of elements that this collection can
store without reallocation.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3Collection.Capacity">
            <summary>
Gets the largest number of elements that this collection
can store without reallocation.
</summary>
            <value>
The largest number of elements that this collection can
store without reallocation.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.#ctor(Cognex.VisionPro3D.Cog3DVect3Collection)">
            <summary>
Construct a deep copy of the supplied Cog3DVect3Collection.
</summary>
            <param name="other">
The Cog3DVect3Collection object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.#ctor(System.Int32)">
            <summary>
Construct this default (empty) Cog3DVect3Collection
with the specified capacity.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3Collection.#ctor">
            <summary>
Construct this default (empty) Cog3DVect3Collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVect3Collection">
            <summary>
This class holds a collection of Cog3DVect3.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.RealEqual(Cognex.VisionPro3D.Cog3DScalarCollection,Cognex.VisionPro3D.Cog3DScalarCollection,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.RemoveAt(System.Int32)">
            <summary>
Remove the value at the specified index.
</summary>
            <param name="index">
The zero based index at which the item is to be removed.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Insert(System.Int32,System.Double)">
            <summary>
Insert the supplied item at the specified index.
</summary>
            <param name="index">
The zero based index at which the item is to be inserted.
</param>
            <param name="value">
The double value to be inserted at the specified index.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.IndexOf(System.Double)">
            <summary>
Find the first collection element that matches the supplied value,
returning the index.
</summary>
            <param name="value">
The supplied value to match.
</param>
            <returns>
The zero based index of the first matching element. If no match
is found this will be -1.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.IsFixedSize">
            <summary>
Gets a value that indicates if this collection is fixed size.
</summary>
            <value>
True if this collection is fixed size; otherwise false.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.Item(System.Int32)">
            <summary>
Gets or sets the item at the specified index.
</summary>
            <param name="index">
The zero based index of the item of interest.
</param>
            <param name="value">
The double value to be applied to the specified item.
</param>
            <value>
The item at the specified index.
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Remove(System.Double)">
            <summary>
Remove the matching value. If no match is found, do nothing.
</summary>
            <param name="value">
The double value to be removed from the collection.
</param>
            <returns>
True if the item was successfully removed; false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Contains(System.Double)">
            <summary>
Determine if this collection contains an element whose value
matches the supplied argument.
</summary>
            <param name="value">
The double to match.
</param>
            <returns>
True if the collection contains a matching element; false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Clear">
            <summary>
Delete any elements contained in this collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Add(System.Double)">
            <summary>
Appends the supplied item to the end of the collection.
</summary>
            <param name="value">
The Cog3DVect3 to be added to this collection.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.IsReadOnly">
            <summary>
Gets a value that indicates if this collection is read only.
</summary>
            <value>
True if this collection is read only; otherwise false.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.SyncRoot">
            <summary>
Gets an object that can be used to synchronize access to the collection.
</summary>
            <value>
The synchronization object.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.IsSynchronized">
            <summary>
Gets a value indicating whether access to the collection is synchronized
(thread safe).
</summary>
            <value>
True if access to the collection is synchronized (thread safe);
otherwise false.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.Count">
            <summary>
Gets the number of items in this collection.
</summary>
            <value>
The number of items in this collection.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.CopyTo(System.Double[],System.Int32)">
            <summary>
Copies the contained double into the supplied, previously allocated
array of double starting at the specified index.
</summary>
            <param name="arr">
The destination array of type double. May not be null.
</param>
            <param name="index">
A zero based index into the destination array at which copying
begins.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="arr" /> is null.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index argument is not valid.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied array is not of rank 1.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied array does not have zero based indexing.
</exception>
            <exception cref="T:System.ArgumentException">
If the contained double will not fit into the destination
array starting at the specified index.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.GetEnumerator">
            <summary>
Gets an enumerator for this collection.
</summary>
            <returns>
A reference to an IEnumerable suitable for this collection type.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Reserve(System.Int32)">
            <summary>
If Capacity is less than the supplied value, set it.
</summary>
            <param name="minimumCapacity">
The largest number of elements that this collection can
store without reallocation.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DScalarCollection.Capacity">
            <summary>
Gets the largest number of elements that this collection
can store without reallocation.
</summary>
            <value>
The largest number of elements that this collection can
store without reallocation.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.#ctor(Cognex.VisionPro3D.Cog3DScalarCollection)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.#ctor(System.Int32)">
            <summary>
Construct this default (empty) Cog3DScalarCollection
with the specified capacity.
</summary>
            <param name="minimumCapacity">
The specified capacity of this collection.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DScalarCollection.#ctor">
            <summary>
Construct this default (empty) Cog3DScalarCollection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DScalarCollection">
            <summary>
This class holds a collection of double.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.RemoveAt(System.Int32)">
            <summary>
Remove the value at the specified index.
</summary>
            <param name="index">
The zero based index at which the item is to be removed.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Insert(System.Int32,Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Insert the supplied item at the specified index.
</summary>
            <param name="index">
The zero based index at which the item is to be inserted.
</param>
            <param name="value">
The Cog3DVect2 value to be inserted at the specified index.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.IndexOf(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Find the first collection element that matches the supplied value,
returning the index.
</summary>
            <param name="value">
The supplied value to match.
</param>
            <returns>
The zero based index of the first matching element. If no match
is found this will be -1.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2Collection.Item(System.Int32)">
            <summary>
Gets or sets the item at the specified index.
</summary>
            <param name="index">
The zero based index of the item of interest.
</param>
            <param name="value">
The Cog3DVect2 value to be applied to the specified item.
</param>
            <value>
The item at the specified index.
</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not valid.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Remove(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Remove the matching value. If no match is found, do nothing.
</summary>
            <param name="value">
The Cog3DVect2 value to be removed from the collection.
</param>
            <returns>
True if the item was successfully removed; false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Contains(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Determine if this collection contains an element whose value
matches that of the specified value.
</summary>
            <param name="value">
The Cog3DVect2 to match.
</param>
            <returns>
True if the collection contains a matching element; false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Clear">
            <summary>
Delete any elements contained in this collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Add(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Appends the supplied item to the end of the collection.
</summary>
            <param name="value">
The Cog3DVect2 to be added to this collection.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2Collection.IsReadOnly">
            <summary>
Gets a value that indicates if this collection is read only.
</summary>
            <value>
True if this collection is read only; otherwise false.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2Collection.Count">
            <summary>
Gets the number of items in this collection.
</summary>
            <value>
The number of items in this collection.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.CopyTo(Cognex.VisionPro3D.Cog3DVect2[],System.Int32)">
            <summary>
Copies the contained set of Cog3DVect2's into the supplied, previously allocated
array of Cog3DVect2's starting at the specified index.
</summary>
            <param name="arr">
The destination array of type Cog3DVect2. May not be null.
</param>
            <param name="index">
A zero based index into the destination array at which copying
begins.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="arr" /> is null.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the index argument is not valid.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied array is not of rank 1.
</exception>
            <exception cref="T:System.ArgumentException">
If the supplied array does not have zero based indexing.
</exception>
            <exception cref="T:System.ArgumentException">
If the contained Cog3DVect2 will not fit into the destination
array starting at the specified index.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.GetEnumerator">
            <summary>
Gets an enumerator for this collection.
</summary>
            <returns>
A reference to an IEnumerable suitable for this collection type.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Reserve(System.Int32)">
            <summary>
If Capacity is less than the supplied value, set it.
</summary>
            <param name="minimumCapacity">
The largest number of elements that this collection can
store without reallocation.
</param>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2Collection.Capacity">
            <summary>
Gets the largest number of elements that this collection
can store without reallocation.
</summary>
            <value>
The largest number of elements that this collection can
store without reallocation.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Finalize">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.Dispose">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.#ctor(Cognex.VisionPro3D.Cog3DVect2Collection)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.#ctor(System.Int32)">
            <summary>
Construct this default (empty) Cog3DVect2Collection
with the specified capacity.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2Collection.#ctor">
            <summary>
Construct this default (empty) Cog3DVect2Collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVect2Collection">
            <summary>
This class holds a collection of Cog3DVect2.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnMovedItem(System.Int32,System.Int32)">
            <summary>
Raises the MovedItem event.
</summary>
            <param name="fromIndex">Source index of item moved.</param>
            <param name="toIndex">gcnew index of item moved.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnMovingItem(System.Int32,System.Int32)">
            <summary>
Raises the MovingItem event.
</summary>
            <param name="fromIndex">Index of item being moved.</param>
            <param name="toIndex">Destination index of item being moved.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnReplacedItem(System.Int32,System.Object,System.Object)">
            <summary>
Raises the ReplacedItem event.
</summary>
            <param name="index">Index of item replaced.</param>
            <param name="oldValue">Value of item replaced.</param>
            <param name="newValue">Value of item that replaced oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
Raises the ReplacingItem event.
</summary>
            <param name="index">Index of item being replaced.</param>
            <param name="oldValue">Value of item being replaced.</param>
            <param name="newValue">Value of item replacing oldValue.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnRemovedItem(System.Int32,System.Object)">
            <summary>
Raises the RemovedItem event.
</summary>
            <param name="index">Index of item removed.</param>
            <param name="value">Value of item removed.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnRemovingItem(System.Int32,System.Object)">
            <summary>
Raises the RemovingItem event.
</summary>
            <param name="index">Index of item being removed.</param>
            <param name="value">Value of item being removed.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnInsertedItem(System.Int32,System.Object)">
            <summary>
Raises the InsertedItem event.
</summary>
            <param name="index">Index at which item was inserted.</param>
            <param name="value">Value of item inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnInsertingItem(System.Int32,System.Object)">
            <summary>
Raises the InsertingItem event.
</summary>
            <param name="index">Index to insert item being inserted.</param>
            <param name="value">Value of item being inserted.</param>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnCleared">
            <summary>
Raises the Cleared event.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.OnClearing">
            <summary>
Raises the Clearing event.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.MovedItem">
            <summary>
Raised after an item is moved to a new index.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.MovingItem">
            <summary>
Raised before an item is moved to a new index.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.ReplacedItem">
            <summary>
Raised after an item is replaced.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.ReplacingItem">
            <summary>
Raised before an item is replaced.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.RemovedItem">
            <summary>
Raised after an item is removed.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.RemovingItem">
            <summary>
Raised before an item is removed.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.InsertedItem">
            <summary>
Raised after an item is inserted.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.InsertingItem">
            <summary>
Raised before an item is inserted.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.Cleared">
            <summary>
Raised after the collection is cleared.
</summary>
        </member>
        <member name="E:Cognex.VisionPro3D.Cog3DCollectionEventsBase.Clearing">
            <summary>
Raised before the collection is cleared.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DCollectionEventsBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCollectionEventsBase.SfCount">
            <summary>
State flag for the Count property.
</summary>
        </member>
        <member name="F:Cognex.VisionPro3D.Cog3DCollectionEventsBase.SfItem">
            <summary>
State flag for the Item (indexer) property.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DCollectionEventsBase">
            <summary>
This class defines the changed events common to VPro 3D collection classes.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.RealEqual(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.op_Inequality(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Compare two Cog3DVect3.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.op_Equality(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Compare two Cog3DVect3.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.op_Division(Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <summary>
Divide a Cog3DVect3 by a scalar.
</summary>
            <param name="vect">
The vector.
</param>
            <param name="denom">
The scalar divisor.
</param>
            <returns>
The divided (scaled) vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.op_Multiply(Cognex.VisionPro3D.Cog3DVect3,System.Double)">
            <summary>
Multiply a Cog3DVect3 by a scalar.
</summary>
            <param name="vect">
The vector.
</param>
            <param name="mult">
The scalar multiplier.
</param>
            <returns>
The multiplied (scaled) vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.op_Subtraction(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Subtract two Cog3DVect3.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
The vector difference.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.op_Addition(Cognex.VisionPro3D.Cog3DVect3,Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Add two Cog3DVect3.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
The vector sum.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.ComputeDistance(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Compute the distance of this Cog3DVect3 from the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other vector.
</param>
            <returns>
The computed distance.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.ComputeDotProduct(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Compute the dot product of this Cog3DVect3 with the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other vector.
</param>
            <returns>
The computed dot product.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.ComputeCrossProduct(Cognex.VisionPro3D.Cog3DVect3)">
            <summary>
Compute the cross product of this Cog3DVect3 with the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other vector.
</param>
            <returns>
The computed cross product vector.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3.Length">
            <summary>
Gets the length of this vector.
</summary>
            <value>
The length of this vector.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3.Z">
            <summary>
Gets the Z coordinate value.
</summary>
            <value>
The Z coordinate value.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3.Y">
            <summary>
Gets the Y coordinate value.
</summary>
            <value>
The Y coordinate value.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect3.X">
            <summary>
Gets the X coordinate value.
</summary>
            <value>
The X coordinate value.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Construct this Cog3DVect3 with the supplied X,Y,Z values.
</summary>
            <param name="initialX">
The initial X value.
</param>
            <param name="initialY">
The initial Y value.
</param>
            <param name="initialZ">
The initial Z value.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVect3">
            <summary>
This value class encapsulates a three dimensional point or vector.
Note that this class is immutable - it may not be changed once
it has been constructed.
<para>
The default values for properties X, Y, and Z are 0.0.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.RealEqual(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2,System.Double)">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.op_Inequality(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Compare two Cog3DVect2.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
False if exactly equal, true otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.op_Equality(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Compare two Cog3DVect2.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
True if exactly equal, false otherwise.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.op_Division(Cognex.VisionPro3D.Cog3DVect2,System.Double)">
            <summary>
Divide a Cog3DVect2 by a scalar.
</summary>
            <param name="vect">
The vector.
</param>
            <param name="denom">
The scalar divisor.
</param>
            <returns>
The divided (scaled) vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.op_Multiply(Cognex.VisionPro3D.Cog3DVect2,System.Double)">
            <summary>
Multiply a Cog3DVect2 by a scalar.
</summary>
            <param name="vect">
The vector.
</param>
            <param name="mult">
The scalar multiplier.
</param>
            <returns>
The multiplied (scaled) vector.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.op_Subtraction(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Subtract two Cog3DVect2.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
The vector difference.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.op_Addition(Cognex.VisionPro3D.Cog3DVect2,Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Add two Cog3DVect2.
</summary>
            <param name="alpha">
The first vector.
</param>
            <param name="beta">
The second vector.
</param>
            <returns>
The vector sum.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.ToString">
            <inheritdoc cref="M:Cognex.VisionPro3D.ICog3DBase.ToString" />
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.ComputeDistance(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Compute the distance of this Cog3DVect2 from the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other vector.
</param>
            <returns>
The computed distance.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.ComputeDotProduct(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Compute the dot product of this Cog3DVect2 with the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other vector.
</param>
            <returns>
The computed dot product.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.ComputeCrossProduct(Cognex.VisionPro3D.Cog3DVect2)">
            <summary>
Compute the cross product of this Cog3DVect2 with the supplied <paramref name="other" />.
</summary>
            <param name="other">
The other vector.
</param>
            <returns>
The computed cross product vector.
</returns>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2.Length">
            <summary>
Gets the length of this vector.
</summary>
            <value>
The length of this vector.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2.Y">
            <summary>
Gets the Y coordinate value.
</summary>
            <value>
The Y coordinate value.
</value>
        </member>
        <member name="P:Cognex.VisionPro3D.Cog3DVect2.X">
            <summary>
Gets the X coordinate value.
</summary>
            <value>
The X coordinate value.
</value>
        </member>
        <member name="M:Cognex.VisionPro3D.Cog3DVect2.#ctor(System.Double,System.Double)">
            <summary>
Construct this Cog3DVect2 with the supplied X,Y values.
</summary>
            <param name="initialX">
The initial X value.
</param>
            <param name="initialY">
The initial Y value.
</param>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DVect2">
            <summary>
This value class encapsulates a two dimensional point or vector.
Note that this class is immutable - it may not be changed once
it has been constructed. The default values for properties X and Y are 0.0.
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DInternalErrorException">
            <summary>
The exception that is thrown when an internal error occurs during the operation of the 
Cognex 3D vision tool. 
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DOperationCancelledByUserException">
            <summary>
The exception that is thrown when the operation of the Cognex 3D vision tool is cancelled by 
the user. 
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DZeroQuaternionException">
            <summary>
The exception that is thrown when zero quaternion is used. 
</summary>
        </member>
        <member name="T:Cognex.VisionPro3D.Cog3DException">
            <summary>
This is the base class for all VisionPro3D exceptions.
It is a concrete class.
This base class allows clients to catch all VisionPro3D exceptions if they wish.
</summary>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DBase.ResidualsPhys3DCalibration">
            <remarks>
Residual error in Phys3D space is the distance between a ray of any 2D feature
(generated using the estimated camera calibration data) and its corresponding 3D feature.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DBase.ResidualsRaw2DCalibration">
            <remarks>
Residual error in Raw2D space is the distance from the found location of any
2D feature in the image to the 2D location that you would expect if you took the
3D feature and mapped it using the estimated camera calibration data.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.TriangulatorOrModelGenerator">
            <remarks>
                <para>
Residual error in Raw2D space is the distance from the found location of any
2D feature in the image to the 2D location that you would expect if you took the
fitted 3D feature and mapped it using the camera calibration data.
</para>
                <para>
Residual error in Phys3D space is the distance between a ray of any 2D feature
(generated using camera calibration data) and its corresponding fitted 3D feature.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DBase.ResidualsRaw2D">
            <summary>
Gets the 2D residual statistics of this result.
</summary>
            <value>
Residual statistics of this result in Raw2D space.
</value>
            <remarks>
Residual error in Raw2D space is the distance from the found location of any
2D feature in the image to the 2D location that you would expect if you took the
mapped/fitted 3D feature and mapped it using the camera calibration data.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DBase.ResidualsPhys3DUsing3DPoints">
            <summary>
Gets the 3D residual statistics  of this result.
</summary>
            <value>
Residual statistics  of this result in Phys3D space.
</value>
            <remarks>
Residual error in Phys3D space is the distance between any input 3D point
and its corresponding mapped/fitted 3D feature.
</remarks>
        </member>
        <member name="P:Cognex.VisionPro3D.ICog3DBase.ResidualsPhys3D">
            <summary>
Gets the 3D residual statistics  of this result.
</summary>
            <value>
Residual statistics  of this result in Phys3D space.
</value>
            <remarks>
Residual error in Phys3D space is the distance between a ray of any 2D feature
(generated using camera calibration data)
and its corresponding mapped/fitted 3D feature.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.DeepCopyConstructorForThisClass(System.Object)">
            <summary>
Construct this object by making a deep copy of the supplied 
object.
</summary>
            <param name="other">
The object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If <paramref name="other" />  is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.FinalizerForThisClass">
            <summary>
Finalize this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.DestructorForThisClass">
            <summary>
Dispose this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.SerializationConstructor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serializer for this object.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.RealEqual(System.Object,System.Object,System.Double)">
            <summary>
Compares the internal state of the specified instances and returns
true if the internal state is within epsilon.
</summary>
            <param name="a">
The first instance of this class to use in the comparison.
</param>
            <param name="b">
The second instance of this class to use in the comparison.
</param>
            <param name="epsilon">
The tolerance to use in the comparison.
</param>
            <returns>
True if the internal state of the specified instances is within epsilon.
</returns>
        </member>
        <member name="M:Cognex.VisionPro3D.ICog3DBase.ToString">
            <summary>
Override of ToString method to get a string for describing this object.
</summary>
            <returns>
A string describing this object.
</returns>
        </member>
    </members>
</doc>