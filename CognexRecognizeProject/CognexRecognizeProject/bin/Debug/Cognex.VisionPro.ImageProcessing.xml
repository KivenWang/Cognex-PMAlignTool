<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.ImageProcessing</name></assembly><members><member name="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException"><summary>The exception that is thrown when an image processing operation is attempted with two regions that do not overlap.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingXOverflowException"><summary>The exception that is thrown when CogPolarUnwrap's Execute method is called with with more than 32767 samples in the x-direction.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingYOverflowException"><summary>The exception that is thrown when CogPolarUnwrap's Execute method is called with with more than 32767 samples in the y-direction.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapNullRegionException"><summary>The exception that is thrown when CogPolarUnwrap's Execute method is called with a null Region.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapInvalidRegionException"><summary>The exception that is thrown when CogPolarUnwrap's Region is is neither a <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> nor a <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapInvalidMapPointException"><summary>The exception that is thrown when attempting a polar mapping of the point at the center of an annular region.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapRegionClippedException"><summary>The exception that is thrown when CogPolarUnwrap's Execute method discovers that some of the sampling points require data that lies outside the input image.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPAffineTransformZeroSizeException"><summary>The exception that is thrown when the output image calculated by CogAffineTransform's Execute method contains less than 1 pixel in either direction.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPAffineTransformOverSizeException"><summary>The exception that is thrown when the output image calculated by CogAffineTransform's Execute method contains more than 32767 pixels in either direction.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPNoDataAvailableToProcessException"><summary>The exception that is thrown when the number of images to average is less than one.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPRegionSizeMismatchException"><summary>The exception that is thrown if you call CogImageAverage's Add method and the resulting image does not have the same number of rows and columns as previous calls to this method.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPNxMKernelSize"><summary>The NxM kernel dimensions must be positive odd integers (e.g. 1, 3, 5, 7, 9, 11, ...).</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPNxMKernelValuesAllZero"><summary>The CogIPOneImageConvolveNxM kernel values may not all be zero.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPMissingPixelInvalidDirectionException"><summary>The CogIPOneImageMissingPixel invalid direction.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPMissingPixelInvalidValueComputationException"><summary>The CogIPOneImageMissingPixel invalid value computation.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPMissingPixelInvalidGlobalValueModeException"><summary>The CogIPOneImageMissingPixel invalid global value mode.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPMissingPixelInvalidSmoothingException"><summary>The CogIPOneImageMissingPixel smoothing values must be between 1 and 64.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPMissingPixelFixedGlobalValueOutsideDstRangeException"><summary>The CogIPOneImageMissingPixel global value is outside destination image pixel.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogIPMissingPixelBoundDestRangeImageException"><summary>The CogIPOneImageMissingPixel bound destination image.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperatorParamsStateFlags"><summary>Class that defines the state flags for the ICogIPOneImageOperatorParams interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogIPOneImageOperatorParams.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperatorParamsStateFlags.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperatorParamsStateFlags.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperatorStateFlags"><summary>Class that defines the state flags for the ICogIPOneImageOperator interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogIPOneImageOperator.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperatorStateFlags.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperatorStateFlags.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransform"><summary>Class that transforms a portion of an image defined by a CogRectangleAffine into a new rectangular image.</summary><remarks><PARA>Primary interface of the CogAffineTransform class that transforms a portion of an image defined by a CogRectangleAffine into a new rectangular image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.#ctor(Cognex.VisionPro.ImageProcessing.CogAffineTransform)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfScalingX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfScalingY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfSamplingMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SamplingMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ClipMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipFillValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ClipFillValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipFillPlane0Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ClipFillPlane0Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipFillPlane1Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ClipFillPlane1Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipFillPlane2Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ClipFillPlane2Value may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipFillPlane2Value"><summary>Specifies the plane 2 value with which to fill clipped color pixels if ClipMode=cogAffineTransformClipModeFill.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipFillPlane1Value"><summary>Specifies the plane 1 value with which to fill clipped color pixels if ClipMode=cogAffineTransformClipModeFill.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipFillPlane0Value"><summary>Specifies the plane 0 value with which to fill clipped color pixels if ClipMode=cogAffineTransformClipModeFill.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipFillValue"><event cref="E:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Changed" cgnxEvent="singleState"><para>
		
Fires when the fill value changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransform_ClipFillValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipFillValue" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0 or &gt; 255.</para></exception><summary>Specifies the value with which to fill clipped pixels if ClipMode=cogAffineTransformClipModeFill.</summary><remarks><PARA>Specifies the value with which to fill clipped pixels if <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipMode" /> is set to <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants">Fill</see>.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipMode"><summary>Specifies what to do if any portion of the affine region lies outside the input image.</summary><remarks><PARA>Specifies what to do if any portion of the affine region lies outside the input image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants">Zeroes</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Changed" cgnxEvent="singleState"><para>
		
Fires when the clip mode changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransform_ClipMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfClipMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SamplingMode"><event cref="E:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Changed" cgnxEvent="singleState"><para>
		
Fires when the sampling mode changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransform_SamplingMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfSamplingMode" /></li></ul></event><summary>Specifies the sampling mode used when performing the affine transform operation.</summary><remarks><PARA>Specifies the sampling mode used when performing the affine transform operation.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants">BilinearInterpolation</see></DEFAULT></remarks><value><see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants">BilinearAccurate</see></value><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ScalingY"><remarks><PARA>Specifies the scaling factor for the Y direction of the output image. For example, setting ScalingY to 2.0 will result in an output image that is approximately twice as high as the SideYLength of the input region (when measured in image pixels).</PARA><DEFAULT>1.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Changed" cgnxEvent="singleState"><para>
		
Fires when the y-scaling factor changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransform_ScalingY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfScalingY" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.001 or &gt; 1000.0.</para></exception><summary>Specifies the scaling factor for the Y direction of the output image. For example, setting ScalingY to 2.0 will result in an output image that is approximately twice as high as the SideYLength of the input region (when measured in image pixels).</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ScalingX"><summary>Specifies the scaling factor for the X direction of the output image. For example, setting ScalingX to 2.0 will result in an output image that is approximately twice as wide as the SideXLength of the input region (when measured in image pixels).</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Changed" cgnxEvent="singleState"><para>
		
Fires when the x-scaling factor changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransform_ScalingX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SfScalingX" /></li></ul></event><remarks><PARA>Specifies the scaling factor for the X direction of the output image. For example, setting ScalingX to 2.0 will result in an output image that is approximately twice as wide as the SideXLength of the input region (when measured in image pixels).</PARA><DEFAULT>1.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.001 or &gt; 1000.0.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRectangleAffine,Cognex.VisionPro.ICogImage@)"><param name="inputImage"><PARA>The <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.InputImage">InputImage</see> to analyze.</PARA></param><param name="region"><PARA>A <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> that specifies the region to be transformed.</PARA></param><param name="outputImageMask"><PARA>An optional <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImageMask">OutputImageMask</see>, the same size as the <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImage" />.</PARA></param><remarks><PARA>Transforms a portion of the input image defined by an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> into a rectangular output image with a relative size determined by the <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ScalingX" />, <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ScalingY" /> properties. If the region parameter is Nothing then the whole input image is transformed.</PARA></remarks><returns><PARA>An <see cref="T:Cognex.VisionPro.CogImage" /> containing the results of the image transformation.</PARA></returns><summary>Transforms a portion of the input image defined by an affine rectangle into a rectangular output image with a relative size determined by the ScalingX, ScalingY properties. If the Region parameter is Nothing then the whole input image is transformed.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not support <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="region" /> is partly or entirely outside the image and <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipMode" /> is <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants">Error</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPAffineTransformZeroSizeException" cgnxHRESULT="E_CogIP_AffineTransform_ZeroSize"><para>The calculated output image was less than 1 pixel in either direction.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPAffineTransformOverSizeException" cgnxHRESULT="E_CogIP_AffineTransform_OverSize"><para>The calculated output image was greater than 32767 pixels in either direction.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space of <paramref name="inputImage" /> is not a valid space of the <paramref name="inputImage" />'s coordinate space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of
    <paramref name="inputImage" /> is a nonqualified space name and more than one
      instance of it exists in the space tree of <paramref name="inputImage" />.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name
   	     of <paramref name="inputImage" /> is not a legal space name</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of the
          <paramref name="region" /> is not a valid space of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of the
          <paramref name="region" />is a nonqualified space name and more than one instance
          of it exists in the space tree of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of the
          <paramref name="region" />is not a legal space name.</para></exception></member><member name="E:Cognex.VisionPro.ImageProcessing.CogAffineTransform.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool"><remarks><PARA>Tool that transforms a portion of an image defined by a CogRectangleAffine into a new rectangular image.</PARA><NOTE>
	The output image's coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks><summary>Tool that transforms a portion of an image defined by a CogRectangleAffine into a new rectangular image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.#ctor(Cognex.VisionPro.ImageProcessing.CogAffineTransformTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfCreateOutputImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateOutputImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfOutputImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageMask may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImageMask"><remarks><PARA>Returns a <see cref="u:ImageProcessing.AffineTransform.Theory.AffineTheory" cgnxAnchor="mask_creation">mask image</see> that is the same size as the <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImage" />. If clipping occurred when the value for a pixel in the OutputImage was computed, the corresponding pixel in OutputImageMask is set to 0; otherwise it is set to 255.</PARA></remarks><summary>Returns a mask image that is the same size as the OutputImage. If clipping occurred when the value for a pixel in the OutputImage was computed, the corresponding pixel in OutputImageMask is set to 0; otherwise it is set to 255.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImage"><remarks><PARA>The output image into which the region was <see cref="u:ImageProcessing.AffineTransform.Theory.AffineTheory">transformed</see>.</PARA></remarks><summary>The output image into which the region was transformed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.CreateOutputImageMask"><remarks><PARA>Specifies whether to create an optional <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImageMask">OutputImageMask</see> image when the tool is run.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_CreateOutputImageMask--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfCreateOutputImageMask" /></li></ul></event><summary>Specifies whether to create the OutputImageMask image when the tool is run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.RunParams"><summary>Run parameters for affine transform.</summary><remarks><PARA>Run parameters for the <see cref="u:ImageProcessing.AffineTransform.Theory.AffineTheory">transformation</see>.</PARA><DEFAULT>A default constructed CogAffineTransform</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfRunParams" /></li></ul></event><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransform" /> interface is not supported.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.Region"><remarks><PARA>A <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> that specifies the region to be transformed. Can be set to Nothing in order to transform the entire image.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>A CogRectangleAffine that specifies the region to be transformed. Can be set to Nothing in order to transform the entire image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfRegion" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfInputImage" /></li></ul></event><remarks><PARA>The image from which to read the pixels.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>The image from which to read the pixels.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.CurrentRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants">CurrentRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants">InputImage</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants">Region</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfCurrentRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfLastRunRecordDiagEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants">LastRunRecordDiagConstants</see>.  These are diagnostic records that might cause the tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants">Region</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.LastRunRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants">LastRunRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants">OutputImage</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAffineTransformTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfLastRunRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfOutputImage" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.SfOutputImageMask" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Transform the portion of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.InputImage">InputImage</see> defined by an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> and generate an <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImage" />, along with an optional <see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.OutputImageMask">OutputImageMask</see>.</PARA></remarks><summary>Runs the tool using the current parameter settings.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegion"><summary>Class that copies a region of pixels into a destination image.</summary><remarks><PARA>Primary interface of the <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegion" /> class.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.#ctor(Cognex.VisionPro.ImageProcessing.CogCopyRegion)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillRegion may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegionValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillRegionValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBox"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillBoundingBox may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBoxValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillBoundingBoxValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfImageAlignmentEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAlignmentEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfInputImageAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfInputImageAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfDestinationImageAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DestinationImageAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfDestinationImageAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DestinationImageAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfSpaceTreeMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SpaceTreeMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfMergedSpaceTreeName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MergedSpaceTreeName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegionPlane0Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillRegionPlane0Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegionPlane1Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillRegionPlane1Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegionPlane2Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillRegionPlane2Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBoxPlane0Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillBoundingBoxPlane0Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBoxPlane1Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillBoundingBoxPlane1Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBoxPlane2Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillBoundingBoxPlane2Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfDefaultOutputImageType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DefaultOutputImageType may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.DefaultOutputImageType"><value>The output image type when no input image is supplied.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Specifies the output image type when no input image is supplied.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.MergedSpaceTreeName"><summary>Specifies the name of a coordinate space that bridges the root nodes of the two coordinate space trees if a merged SpaceTreeMode is selected.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_MergedSpaceTreeName--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfMergedSpaceTreeName" /></li></ul></event><remarks><PARA>Specifies the name of a coordinate space that bridges the root nodes of the two coordinate space trees if a merged <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SpaceTreeMode" /> is selected.</PARA><DEFAULT>"MergedSpaceTree"</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SpaceTreeMode"><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_SpaceTreeMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfSpaceTreeMode" /></li></ul></event><remarks>Trees are copied and merged by reference. If this value is either CopyInputMergeDestination or UseDestinationMergeInput, be careful to avoid circular references to coordinate space trees.</remarks><summary>Specifies how the coordinate space tree of the DestinationImage should be affected. Ignored if no DestinationImage is given.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The space tree mode is not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionSpaceTreeModeConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.DestinationImageAlignmentY"><summary>Specifies the Y coordinate on DestinationImage used to align both images.  This coordinate is specified in the same selected space as DestinationImage.  It is only used when ImageAlignmentEnabled is true.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_DestinationImageAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfDestinationImageAlignmentY" /></li></ul></event><remarks><PARA>Specifies the y-coordinate on <paramref name="DestinationImage" /> used to align both images.  This coordinate is specified in the same selected space as <paramref name="DestinationImage" />.  It is only used when <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ImageAlignmentEnabled" /> is true.</PARA><DEFAULT>0.0 (in selected space of <paramref name="DestinationImage" />)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.DestinationImageAlignmentX"><summary>Specifies the X coordinate on DestinationImage used to align both images.  This coordinate is specified in the same selected space as DestinationImage.  It is only used when ImageAlignmentEnabled is true.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_DestinationImageAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfDestinationImageAlignmentX" /></li></ul></event><remarks><PARA>Specifies the x-coordinate on <paramref name="DestinationImage" /> used to align both images.  This coordinate is specified in the same selected space as <paramref name="DestinationImage" />.  It is only used when <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ImageAlignmentEnabled" /> is true.</PARA><DEFAULT>0.0 (in selected space of <paramref name="DestinationImage" />)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.InputImageAlignmentY"><remarks><PARA>Specifies the y-coordinate on <paramref name="InputImage" /> used to align both images.  This coordinate is specified in the same selected space as InputImage passed to the Execute method.  It is only used when <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 (in selected space of <paramref name="InputImage" />)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_InputImageAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfInputImageAlignmentY" /></li></ul></event><summary>Specifies the Y coordinate on InputImage used to align both images.  This coordinate is specified in the same selected space as InputImage passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.InputImageAlignmentX"><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_InputImageAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfInputImageAlignmentX" /></li></ul></event><summary>Specifies the X coordinate on InputImage used to align both images.  This coordinate is specified in the same selected space as InputImage passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><remarks><PARA>Specifies the x-coordinate on <paramref name="InputImage" /> used to align both images.  This coordinate is specified in the same selected space as InputImage passed to the Execute method.  It is only used when <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 (in selected space of <paramref name="InputImage" />)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ImageAlignmentEnabled"><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_ImageAlignmentEnabled--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfImageAlignmentEnabled" /></li></ul></event><summary>Specifies whether or not the alignment coordinates should be used to align the InputImage with the DestinationImage (if given).  If not enabled, the upper-left corner of the images will be used for alignment.</summary><remarks><PARA>Specifies whether or not the alignment coordinates should be used to align the <paramref name="InputImage" /> with the <paramref name="DestinationImage" />, if given.  If not enabled, the upper-left corner of the images are used for alignment.</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.RegionMode"><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_RegionMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfRegionMode" /></li></ul></event><summary>Specifies whether copying will be performed strictly within the confines of the region specified or within the image aligned bounding box of the region.</summary><remarks><PARA>Specifies whether copying will be performed strictly within the confines of <paramref name="Region" /> or within the image aligned bounding box of the region.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region mode is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxPlane2Value"><value>The value to write into Plane 2 of pixels outside of the region and inside of the bounding box, if FillBoundingBox is True and the output image is a CogImage24PlanarColor.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Specifies the value to write into Plane 2 of pixels outside of the region and inside of the bounding box, if FillBoundingBox is True and the output image is a CogImage24PlanarColor.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxPlane1Value"><value>The value to write into Plane 1 of pixels outside of the region and inside of the bounding box, if FillBoundingBox is True and the output image is a CogImage24PlanarColor.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Specifies the value to write into Plane 1 of pixels outside of the region and inside of the bounding box, if FillBoundingBox is True and the output image is a CogImage24PlanarColor.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxPlane0Value"><summary>Specifies the value to write into Plane 0 of pixels outside of the region and inside of the bounding box, if FillBoundingBox is True and the output image is a CogImage24PlanarColor.</summary><value>The value to write into Plane 0 of pixels outside of the region and inside of the bounding box, if FillBoundingBox is True and the output image is a CogImage24PlanarColor.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxValue"><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_FillBoundingBoxValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBoxValue" /></li></ul></event><summary>If FillBoundingBox=True, specifies the value with which to fill the bounding box outside the region. Otherwise, this property is ignored.</summary><remarks><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBox" /> is True, specifies the value with which to fill the bounding box outside the region. Otherwise, this property is ignored.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBox"><remarks><PARA>Specifies whether to fill the bounding box with <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxValue" />
(or with
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxPlane0Value" />,
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxPlane1Value" />, and
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxPlane2Value" />
if the image is <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" />)
instead of leaving it unchanged.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_FillBoundingBox--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillBoundingBox" /></li></ul></event><summary>Specifies whether to fill the bounding box with FillBoundingBoxValue instead of leaving it unchanged.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionPlane2Value"><summary>Specifies the value with which to fill Plane 2 of the destination region if FillRegion is True and the output image is a CogImage24PlanarColor.</summary><value>The value with which to fill Plane 2 of the destination region if FillRegion is True and the output image is a CogImage24PlanarColor.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionPlane1Value"><summary>Specifies the value with which to fill Plane 1 of the destination region if FillRegion is True and the output image is a CogImage24PlanarColor.</summary><value>The value with which to fill Plane 1 of the destination region if FillRegion is True and the output image is a CogImage24PlanarColor.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionPlane0Value"><summary>Specifies the value with which to fill Plane 0 of the destination region if FillRegion is True and the output image is a CogImage24PlanarColor.</summary><value>The value with which to fill Plane 0 of the destination region if FillRegion is True and the output image is a CogImage24PlanarColor.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionValue"><remarks><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> is True, specifies the value with which to fill the destination region.</PARA><DEFAULT>255</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_FillRegionValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegionValue" /></li></ul></event><summary>Specifies the value with which to fill the destination region if FillRegion=True.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion"><remarks><PARA>Specifies whether to fill the destination region with <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionValue" />
(or with
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionPlane0Value" />,
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionPlane1Value" />, and
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionPlane2Value" />
if the image is <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" />)


instead of copying pixels from the source image.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Specifies whether to fill the destination region with FillRegionValue instead of copying pixels from the source image.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegion_FillRegion--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SfFillRegion" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ComputeDestinationRegion(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogImage,System.Boolean@,System.Boolean@,Cognex.VisionPro.ICogRegion@)"><param name="inputImage"><PARA>The input image.</PARA></param><param name="region"><PARA>The portion of <paramref name="inputImage" /> to use. If NULL, the entire <paramref name="inputImage" /> is used. Otherwise <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.RegionMode" /> specifies how the region is used.</PARA></param><param name="destinationImage"><PARA>The destination image.</PARA></param><param name="sourceClipped"><PARA>True if the <paramref name="inputImage" /> was clipped. False otherwise.</PARA></param><param name="destinationClipped"><PARA>True if the <paramref name="destinationImage" /> was clipped. False otherwise.</PARA></param><param name="destinationRegion"><PARA>The input <paramref name="region" /> mapped into the pixel space of the <paramref name="destinationImage" /> .  This shape is not clipped.</PARA></param><remarks><PARA>Computes the <paramref name="destinationClipped" /> and <paramref name="destinationRegion" /> values that would be returned by the <see cref="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogImage,System.Boolean@,System.Boolean@,Cognex.VisionPro.ICogRegion@)" /> method, but does not copy any pixels.</PARA></remarks><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="destinationRegion" /> is NULL .</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>Either <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBox" /> is True and the value of either <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionValue" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxValue" /> is outside the range of valid values for <paramref name="inputImage" /> (for example 0 to 255 for <see cref="T:Cognex.VisionPro.CogImage8Grey" />).
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL and (<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> = False or <paramref name="region" /> = NULL).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated and (<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> = False or <paramref name="region" /> = NULL).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para><paramref name="inputImage" /> is not NULL and the selected space of <paramref name="region" /> is not a valid space name in <paramref name="inputImage" />.</para></exception><summary>Computes the SourceClipped, DestinationClipped and DestinationRegion values that would be returned by the Execute method, but does not copy any pixels.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogImage,System.Boolean@,System.Boolean@,Cognex.VisionPro.ICogRegion@)"><param name="inputImage"><PARA>The input image.</PARA></param><param name="region"><PARA>The portion of <paramref name="inputImage" /> to use. If NULL, the entire <paramref name="inputImage" /> is used. Otherwise <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.RegionMode" /> specifies how the region is used.</PARA></param><param name="destinationImage"><PARA>The destination image.</PARA></param><param name="sourceClipped"><PARA>True if the <paramref name="inputImage" /> was clipped. False otherwise.</PARA></param><param name="destinationClipped"><PARA>True if the <paramref name="destinationImage" /> was clipped. False otherwise.</PARA></param><param name="destinationRegion"><PARA>The input <paramref name="region" /> mapped into the pixel space of the <paramref name="destinationImage" /> .  This shape is not clipped.</PARA></param><remarks><PARA>Copies a region of the <paramref name="inputImage" /> into the <paramref name="destinationImage" />, or into a newly-created image if no <paramref name="destinationImage" />  is given.</PARA></remarks><summary>Copies a region of the InputImage into the DestinationImage, or into a newly-created OutputImage if no DestinationImage is given.</summary><returns><PARA>The destination image. If <paramref name="destinationImage" /> is NULL, this is a new image. Otherwise it is <paramref name="destinationImage" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>Either <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBox" /> is True and the value of either <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegionValue" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillBoundingBoxValue" /> is outside the range of valid values for <paramref name="inputImage" /> (for example 0 to 255 for <see cref="T:Cognex.VisionPro.CogImage8Grey" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL and (<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> = False or <paramref name="region" /> = NULL).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated and (<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> = False or <paramref name="region" /> = NULL).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para><paramref name="inputImage" /> is not NULL and the selected space of <paramref name="region" /> is not a valid space name in <paramref name="inputImage" />.</para></exception></member><member name="E:Cognex.VisionPro.ImageProcessing.CogCopyRegion.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool"><remarks><PARA>Tool that copies a region of pixels from one image to another, or copies a constant value into a given region of an image. Can either create a new output image or write into an existing one.</PARA><NOTE>
	If a new output image is created, its coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks><summary>Tool that copies a region of pixels into a destination image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.#ctor(Cognex.VisionPro.ImageProcessing.CogCopyRegionTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfDestinationImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DestinationImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfDestinationRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DestinationRegion may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfSourceClipped"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SourceClipped may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfDestinationClipped"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DestinationClipped may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.DestinationClipped"><remarks><PARA>Returns True if <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region" /> was partially or entirely outside the bounds of <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" />. This condition is not an error; the tool will copy as much of the region as possible in this case.</PARA></remarks><summary>Returns True if the Region was partially or entirely outside the bounds of the OutputImage. This condition does not indicate an error and the tool will still copy as much of the region as possible in this case.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SourceClipped"><remarks><PARA>Returns True if <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region" /> was partially or entirely outside the bounds of <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" />. This condition is not an error; the tool will copy as much of the region as possible in this case.</PARA></remarks><summary>Returns True if the Region was partially or entirely outside the bounds of the InputImage. This condition does not indicate an error and the tool will still copy as much of the region as possible in this case.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.DestinationRegion"><summary>Returns a destination region graphic that was created when the tool was last run by mapping the input region into the pixel space of the output image.</summary><remarks><PARA>Returns a destination region graphic that was created when the tool was last run by mapping the input region into the pixel space of the output image.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage"><remarks><PARA>The resulting image. 
If <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.DestinationImage" /> was not NULL when the tool ran, <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" /> returns a reference to that image. Otherwise it returns a reference to a new image created by the tool.</PARA></remarks><summary>If DestinationImage was non-NULL when the tool ran, this just returns a reference to that image. Otherwise it returns a reference to a new image created by the tool.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.RunParams"><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The object does not support the <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegion" /> interface.</para></exception><remarks><PARA>Run parameters for region copying.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfRunParams" /></li></ul></event><summary>Run parameters for region copying.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.DestinationImage"><remarks><PARA>The image into which to copy the region of pixels, or Nothing to create a new image.
If <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.DestinationImage" /> is not Nothing, <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" /> returns a reference to this image.
</PARA></remarks><summary>The image into which to copy the region of pixels, or Nothing to create a new image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_DestinationImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfDestinationImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region"><summary>Which portion of the InputImage shall be copied. If Region is NULL then the entire InputImage is copied.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfRegion" /></li></ul></event><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" /> to copy to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" />.
The <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.RegionMode" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the tool uses the entire <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" />.</PARA><DEFAULT>Null</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage"><remarks><PARA>The image to copy to <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" />.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region" /> specifies that portion of the image that will be copies. If <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region" /> is NULL, the tool uses the entire <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" />.
</PARA><PARA>
If <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegion" />.<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegion.FillRegion" /> is True, then <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" /> is optional and used only to map <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region" /> to pixel coordinates.</PARA></remarks><summary>The tool will copy a portion of this image, or the entire image if Region=NULL. If FillRegion=True then InputImage is optional and used only to map the region into pixel coordinates.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfInputImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.CurrentRecordEnable"><remarks><PARA>
	Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
	of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants">InputImage</see> + 
   <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants">Region</see> +
   <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants">DestinationImage</see>.
	</DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.LastRunRecordDiagEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants">Region </see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCopyRegionTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants">OutputImage</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
		
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfOutputImage" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfDestinationRegion" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfSourceClipped" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.SfDestinationClipped" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Copies the <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" /> using the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.RunParams" /> to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" />.
If <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.DestinationImage" /> is NULL (Nothing), then <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.OutputImage" /> is a newly-created image.
You can specify that the copy be limited to part of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.InputImage" /> by supplying a <see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Region" />.
</PARA></remarks><summary>Runs the tool using the current parameter settings.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogram"><summary>Class for generating a histogram.</summary><remarks><PARA>Interface for configuring and generating a histogram.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.#ctor(Cognex.VisionPro.ImageProcessing.CogHistogram)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfNumBins"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumBins may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfInputImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfInputImageMaskOffsetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfInputImageMaskOffsetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfBinMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BinMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.BinMode"><summary>The BinMode specifies how bin processing should be performed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMaskOffsetY"><event cref="E:Cognex.VisionPro.ImageProcessing.CogHistogram.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogram_InputImageMaskOffsetY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfInputImageMaskOffsetY" /></li></ul></event><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in pixel coordinates of the InputImage.</summary><remarks><PARA>The offset of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMask" /> in the y-direction in pixels.
The offset is measured from the upper-left corner of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> to the upper-left corner of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMask" /> in pixel coordinates of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" />.
</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMaskOffsetX"><remarks><PARA>The offset of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMask" /> in the x-direction in pixels.
The offset is measured from the upper-left corner of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> to the upper-left corner of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMask" /> in pixel coordinates of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" />.
</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogHistogram.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogram_InputImageMaskOffsetX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfInputImageMaskOffsetX" /></li></ul></event><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in pixel coordinates of the InputImage.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMask"><remarks><PARA>A mask that indicates which pixels to consider or ignore when generating the histogram.
Non-zero pixels in the mask are Care pixels which will be considered; zero pixels are Don't Care pixels which will be ignored.</PARA><PARA>The mask is aligned to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> using the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMaskOffsetX" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMaskOffsetY" /> values.</PARA><DEFAULT>Nothing. (No mask image.)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogHistogram.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogram_InputImageMask--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfInputImageMask" /></li></ul></event><summary>Mask indicating areas of Care (Non-Zero Mask Pixels) and Don't Care (Zero).  The mask is aligned to the InputImage using the InputImageMaskOffsetX &amp; Y values.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.NumBins"><summary>Specifies the size of the histogram.  When an image is analyzed, each histogram bin is computed up to index NumBins-1.  Pixel values that are greater than or equal to NumBins will be included in the total number of samples and placed in the highest bin.</summary><remarks><PARA>Sets or gets the size of the histogram.  When an image is sampled, each histogram bin is summed up to index <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.NumBins" />-1.  Pixel values that are greater than or equal to <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.NumBins" /> will be included in the total number of samples and placed in the highest bin.</PARA><DEFAULT>256 for 8-bit greyscale images.</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogHistogram.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogram_NumBins--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfNumBins" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.RegionMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>This new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBox</see>.</para></exception><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Region" /> parameter should be interpreted.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogHistogram.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogram_RegionMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogram.SfRegionMode" /></li></ul></event><summary>The RegionMode specifies how the region should be interpreted.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogram.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogram.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image for which to generate a histogram.</PARA></param><param name="region"><PARA>A region that, together with the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.RegionMode" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.InputImageMask" />, specifies the region of the image for which the histogram will be generated.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="RegionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.OUTOFMEMORYException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <paramref name="OutputImage" />.</para></exception><summary>Generates a histogram from the provided InputImage and optional Region, creating a CogHistogramResult object that provides the result of the analysis.  If Region is nothing then histogram will be generated from the entire InputImage.</summary><returns><PARA>The histogram result.</PARA></returns><remarks><PARA>Generates a histogram from the provided <paramref name="inputImage" /> and optional <paramref name="region" />, creating a <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramResult" /> object that provides the result of the analysis.  If <paramref name="region" /> is Nothing (the default), the histogram will be generated from the entire <paramref name="inputImage" />.</PARA></remarks></member><member name="E:Cognex.VisionPro.ImageProcessing.CogHistogram.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramResult"><remarks><PARA>The histogram result that the tool generated.</PARA></remarks><summary>Result of the histogram operation.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.#ctor(Cognex.VisionPro.ImageProcessing.CogHistogramResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Variance"><summary>Returns the variance of the pixel values in the histogram.</summary><remarks><PARA>Returns the variance of pixel values in the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.StandardDeviation"><remarks><PARA>Returns the standard deviation of pixel values in the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see>.</PARA></remarks><summary>Returns the standard deviation of the pixel values in the histogram.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Maximum"><remarks><PARA>Returns the maximum <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see> bin index that contains a non-zero pixel count.</PARA></remarks><summary>Returns the maximum histogram bin index that contains a non-zero pixel count.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Minimum"><remarks><PARA>Returns the minimum <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see> bin index that contains a non-zero pixel count.</PARA></remarks><summary>Returns the minimum histogram bin index that contains a non-zero pixel count.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Median"><summary>Returns the histogram bin index of the bin containing the median (middle) pixel value in the histogram.  This is the histogram bin index where half of the distribution of pixel values is above and half below it.</summary><remarks><PARA>Returns the histogram bin index of the bin containing the median (middle) pixel value in the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see>.  This is the histogram bin index where half of the distribution of pixel values is above and half below it.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Mode"><remarks><PARA>Returns the histogram bin index of the bin containing the modal (most common) pixel value in the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see>.  This is the histogram bin index with the greatest pixel count.</PARA></remarks><summary>Returns the histogram bin index of the bin containing the modal (most common) pixel value in the histogram.  This is the histogram bin index with the greatest pixel count.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Mean"><summary>Returns the arithmetic mean (average) pixel value in the histogram.  The pixel value is grey-level.</summary><remarks><PARA>Returns the arithmetic mean (average) pixel value in the histogram.  The pixel value is a grey level, not an index into the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramResult.NumSamples"><summary>Returns the total number of pixels in the histogram.</summary><remarks><PARA>Returns the total number of pixels in the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see>.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram"><summary>Returns the histogram.</summary><remarks><PARA>Returns the histogram as an array of <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.NumBins" /> elements.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetInverseCumulativeGreyLevel(System.Int32)"><param name="percent"><PARA>The percentage.</PARA></param><remarks><PARA>Returns the <see cref="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetHistogram">histogram</see> bin index such that the specified percentage of pixels fall at or below that histogram bin index.  The returned grey-level is guaranteed to be at least the minimum histogram bin index that contains a non-zero pixel count.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="percent" /> is &lt; 0 or &gt; 100.</para></exception><returns><PARA>The returned index.</PARA></returns><summary>Returns the histogram bin index such that the specified percentage of pixels fall at or below that histogram bin index.  The returned grey level is guaranteed to be at least the minimum histogram bin index that contains a non-zero pixel count.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.CreateResultGraphics(Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants)"><param name="graphicOptions"><PARA>The graphics to create.</PARA></param><summary>Creates a composite result graphic containing child graphics specified by the GraphicOptions which is a bitwise combination of CogHistogramResultGraphicConstants.</summary><remarks><PARA>
	Creates result graphics, including a graphical representation of the histogram. You 
	supply a bitwise combination of <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants" /> that specifies what to put in the 
	<see cref="P:Cognex.VisionPro.CogCompositeShape.Shapes" /> collection of the returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />. </PARA><PARA>The histogram graphics are mapped from (0,0) to (256,256) in the <!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Framework.Coordinates.Theory.CoordSpaces" cgnxAnchor="pixel_space">pixel coordinate space</see> (<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">#</see>).</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></returns></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetMinimumWGVThreshold(System.Int32,System.Int32,System.Double@)"><param name="leftIndex">The index of the lower bound of the partial histogram range for which to compute a threshold.</param><param name="rightIndex">The index of the upper bound of the partial histogram range for which to compute a threshold.  Specify a value of -1 to use the upper bound of the histogram as the upper bound of the range.</param><param name="score">An output value into which a score in the range 0.0 through 1.0 is placed.  Higher scores indicate better separation between the two groups determined by the threshold.</param><exception cref="T:System.InvalidOperationException">If the analyzed range of the histogram contains only empty bins.</exception><returns>The computed threshold value.</returns><summary>Returns a threshold using data from the given range of this histogram.  The computed threshold is appropriate for segmenting an image into object and background pixels and is often used to compute a segmentation threshold for blob analysis.  The threshold computation includes the left index value but excludes the right index value.  This range must include at least two nonzero bins.  The returned threshold will be within the range.  This threshold divides the histogram data into two groups such that the combined variance within the groups is a minimum.</summary><exception cref="T:System.ArgumentOutOfRangeException">If either index is less than zero or greater than the length of the histogram.  Or if leftIndex is greater than or equal to rightIndex.</exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramResult.GetMinimumWGVThreshold"><exception cref="T:System.InvalidOperationException">If the histogram contains only empty bins.</exception><summary>Returns a threshold using data from this histogram.  The computed threshold is appropriate for segmenting an image into object and background pixels and is often used to compute a segmentation threshold for blob analysis.  The returned threshold divides the histogram data into two groups such that the combined variance within the groups is a minimum.</summary><returns>The computed threshold value.</returns></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramTool"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramTool" />.  The histogram tool encapsulates all the classes needed to generate a histogram from an image.</PARA></remarks><summary>Tool that generates a histogram from a single input image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramTool.#ctor(Cognex.VisionPro.ImageProcessing.CogHistogramTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Region"><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> for which to generate the histogram.
The <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogram.RegionMode" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the tool generates a histogram for the entire <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" />.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogramTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfRegion" /></li></ul></event><summary>Region of interest in the InputImage that is used to operate over.  NULL means use entire InputImage.  The RegionMode property of the histogram parameters specifies exactly how the region will be used to generate the histogram.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.RunParams"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogramTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfRunParams" /></li></ul></event><remarks><PARA>Parameters used to generate the histogram.</PARA></remarks><summary>Parameters used to perform the histogram.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Result"><remarks><PARA>Returns the result of the histogram operation.</PARA></remarks><summary>Returns the result of the histogram operation.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage"><remarks><PARA>The image for which to generate a histogram.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogramTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfInputImage" /></li></ul></event><summary>Returns/sets the input image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.CurrentRecordEnable"><remarks><PARA>
	Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
	of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants">InputImage</see> + 
   <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants">Region</see> +
   <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants">InputImageMask</see>.
	</DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogramTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogramTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogHistogramTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants">Histogram</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants">Mean</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Run"><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="RegionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for the histogram.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.RunParams" /> is NULL.</para></exception><remarks><PARA>Generates a histogram for the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.InputImage" /> using the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.RunParams" />. You can specify that the histogram be limited to part of the input image by supplying a value for the <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Region" /> property.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogHistogramTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogHistogramTool.SfResult" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event></member><member name="M:Cognex.VisionPro.ImageProcessing.CogHistogramTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.ogIPOneImageAddSubtractConstant" /> object.
This object adds or subtracts a constant pixel value to an image to produce a new image.
The pixel value may be negative.</PARA></remarks><summary>Class that adds or subtracts a constant value from an image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfConstantValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfOverflowMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OverflowMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfConstantPlane0Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantPlane0Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfConstantPlane1Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantPlane1Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfConstantPlane2Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantPlane2Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.OutputImageFormat"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantImageFormatConstants" />.
	</para></exception><summary>The pixel depth of the output image.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageAddSubtractConstant_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfOutputImageFormat" /></li></ul></event><remarks><PARA>Sets or gets the pixel depth of the image generated by the add or subtract operation.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantImageFormatConstants">SameAsInputImage</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.OverflowMode"><summary>The mode used to handle overflow conditions that can occur while performing the add/subtract operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantOverflowModeConstants">Bounded</see>
 or
	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantOverflowModeConstants">Wrap</see></para></exception><remarks><PARA>Sets or gets the mode that specifies how the operator handles cases in which addition would result in values greater than the maximum pixel value or in which subtraction would result in values less than the minimum pixel value.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantOverflowModeConstants">Bounded</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageAddSubtractConstant_OverflowMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfOverflowMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ConstantPlane2Value"><summary>The constant plane 2 value used for the add operation on a three plane image.  The value may be negative to emulate the subtraction operation.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ConstantPlane1Value"><summary>The constant plane 1 value used for the add operation on a three plane image.  The value may be negative to emulate the subtraction operation.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ConstantPlane0Value"><summary>The constant plane 0 value used for the add operation on a three plane image.  The value may be negative to emulate the subtraction operation.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ConstantValue"><remarks><PARA>Sets or gets the constant value to add or subtract. Positive values are added to every pixel in the image; negative values are subtracted from every pixel in the image.</PARA><DEFAULT>0</DEFAULT></remarks><summary>The constant value used for the add operation.  The value may be negative to emulate the subtraction operation.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageAddSubtractConstant_ConstantValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SfConstantValue" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><summary>Perform a single image operation using the input image and region to produce the output image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3"><summary>Class that performs a 3x3 convolution on an image.</summary><remarks><PARA>Primary interface of CogIPOneImageConvolve3x3. This object performs a 3x3 <see cref="u:ImageProcessing.ConvolveOperator.Theory.3x3ConOperator">convolution</see> using user-specified kernel values.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfGetKernel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetKernel may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfGetKernelValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetKernelValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfKernelOrigin"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by KernelOrigin may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.OutputImageFormat"><summary>The pixel depth of the output image.</summary><remarks><PARA>The pixel depth of the output image.</PARA><DEFAULT>SameAsInputImage</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageConvolve3x3_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfOutputImageFormat" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3ImageFormatConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.KernelOrigin"><remarks><PARA>The position of the kernel origin.</PARA><DEFAULT>Center</DEFAULT></remarks><summary>The position of the kernel origin.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageConvolve3x3_KernelOrigin--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfKernelOrigin" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><summary>Perform a single image operation using the input image and region to produce the output image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.GetKernelValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants)"><param name="position"><PARA>A member of the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants" /> enumeration specifying which kernel value to set or get.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants" />  or the new value 
		is less than zero.</para></exception><summary>The kernel value at 'position'.</summary><remarks><PARA>The kernel value at the given position.</PARA><DEFAULT>1/9 for all locations (0.111)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageConvolve3x3_KernelValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfGetKernelValue" /></li></ul></event></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SetKernelValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants,System.Double)"><param name="position"><PARA>A member of the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants" /> enumeration specifying which kernel value to set or get.</PARA></param><param name="value"></param><remarks><PARA>The kernel value at the given position.</PARA><DEFAULT>1/9 for all locations (0.111)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageConvolve3x3_KernelValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.SfGetKernelValue" /></li></ul></event><summary>The kernel value at 'position'.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants" />  or the new value 
		is less than zero.</para></exception></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM"><summary>Class that performs the NxM convolution operation on an image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SfKernelWidth"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SfKernelHeight"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SfBoundaryMode"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by BoundaryMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SfGetKernelValue"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by GetKernelValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.BoundaryMode"><exception cref="T:System.ArgumentException">If the supplied value is not a valid member of the enumeration.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the boundary mode changes.</event><summary>Get or set the NxM convolution boundary mode. Legal values are Reflected and Clipped.</summary><value>The NxM convolution boundary mode.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.KernelHeight"><value>The convolution kernel height in pixels.</value><summary>Get or set the height of the convolution kernel in pixels.</summary><exception cref="T:System.ArgumentException">If the supplied value is not a positive odd integer.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the kernel height changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.KernelWidth"><summary>Get or set the width of the convolution kernel in pixels.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the kernel width changes.</event><value>The convolution kernel width in pixels.</value><exception cref="T:System.ArgumentException">If the supplied value is not a positive odd integer.</exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.OperatorName"><summary>Returns/sets a displayable operator name.</summary><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.GetKernelValue(System.Int32,System.Int32)"><param name="Col">The zero based column index of the desired kernel value.</param><param name="Row">The zero based row index of the desired kernel value.</param><summary>Get the kernel value at the specified column and row.</summary><exception cref="T:System.ArgumentException">If the supplied Col parameter is less than zero or not less than KernelWidth.</exception><returns>The kernel value at the specified column and row.</returns></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.SetKernelValue(System.Int32,System.Int32,System.Double)"><param name="Col">The zero based column index of the desired kernel value.</param><param name="Row">The zero based row index of the desired kernel value.</param><param name="NewValue">n/a</param><exception cref="T:System.ArgumentException">If the supplied Row parameter is less tahn zero or not less than KernelHeight.</exception><summary>Set the kernel value at the specified kernel column and row.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the specified kernel value changes.</event></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize"><summary>Class that performs the histogram equalization operation on an image.  Equalize is the re-mapping of an image by the integral of its histogram.</summary><remarks><PARA>Common interface for all one-image operators.</PARA><PARA><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperator" /> is the default interface for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize" /> and
<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand" /> object. This object magnifies an image to produce a new image.  Pixels are duplicated in the x- and y-directions according to the specified magnification factors.</PARA><PARA><PICTURE HEIGHT="385" WIDTH="352" SRC="expand.gif" apiSRC="ICogIPOneImageExpand_expand.gif" /></PARA></remarks><summary>Class that expands the size of an by duplicating pixels of an image in the X and Y directions.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SfExpansionX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpansionX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SfExpansionY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpansionY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.ExpansionY"><summary>The expansion factor used to increase the height of the image.  The expansion factor designates how many times a pixel will be replicated in the Y direction.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageExpand_ExpansionY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SfExpansionY" /></li></ul></event><remarks><PARA>The expansion factor used to increase the height of the image. This value specifies how many times a pixel is replicated in the y-direction.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The expansion factor is &lt; 1.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.ExpansionX"><summary>The expansion factor used to increase the width of the image.  The expansion factor designates how many times a pixel will be replicated in the X direction.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The expansion factor is &lt; 1.
	</para></exception><remarks><PARA>The expansion factor used to increase the width of the image. This value specifies how many times a pixel is replicated in the x-direction.</PARA></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageExpand_ExpansionX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SfExpansionX" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.OperatorName"><summary>Returns/sets a displayable operator name.</summary><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate"><summary>Class that flips and/or applies rotation to an image.</summary><remarks><PARA>Primary interface of a CogIPOneImageFlipRotate object.  This object allows an image to be rotated and/or flipped to produce a new image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.SfOperationInPixelSpace"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperationInPixelSpace may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.OperationInPixelSpace"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageFlipRotate_OperationInPixelSpace--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.SfOperationInPixelSpace" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants" />.
	</para></exception><summary>The operation used to re-orient the image.</summary><remarks><PARA>The operation used to reorient the image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler"><summary>Class that applies a kernel to the image that approximates a two-dimensional Gaussian distribution.  By varying the size of this kernel, you can reduce the strength of noise, or you can attenuate image features below a certain size.</summary><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler" /> object.  This object performs Gaussian subsampling on an image to produce a new image. See the <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian">Gaussian Sampling Theory Topic</see> to learn more about Gaussian Sampling.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSmoothnessX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SmoothnessX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSmoothnessY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SmoothnessY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfMagnitudeShift"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MagnitudeShift may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSigmaX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SigmaX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSigmaY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SigmaY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.OutputImageFormat"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGaussSampler_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfOutputImageFormat" /></li></ul></event><remarks><PARA>The pixel depth of the resulting image generated by the Gaussian operation.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSamplerImageFormatConstants">SameAsInputImage</see></DEFAULT></remarks><summary>The pixel depth of the image to generate by the Gaussian operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSamplerImageFormatConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SigmaY"><summary>Returns the standard deviation of the Gaussian curve along the Y axis.</summary><remarks><PARA>Gets the standard deviation (sigma) of the Gaussian curve in the y-direction. The standard deviation is computed using the following formula where s  is the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SmoothnessY">smoothing value</see>.</PARA><PARA><PICTURE SRC="sigma.gif" WIDTH="128" HEIGHT="76" apiSRC="SigmaY_sigma.gif" /></PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SigmaX"><remarks><PARA>Gets the standard deviation (sigma) of the Gaussian curve in the x-direction. The standard deviation is computed using the following formula where s is the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SmoothnessX">smoothing value</see>.</PARA><PARA><PICTURE SRC="sigma.gif" WIDTH="128" HEIGHT="76" apiSRC="SigmaX_sigma.gif" /></PARA></remarks><summary>Returns the standard deviation of the Gaussian curve along the X axis.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.MagnitudeShift"><summary>Bitwise shifts the pixel values of the result.  Valid shift values are from -7 to 7.  Negative values will darken the result by dividing the pixel value results by 2 for each bit specified.  Similarly, positive values will brighten by multiplying by 2.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The magnitude shift value is &lt; -7 or &gt; +7.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGaussSampler_MagnitudeShift--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfMagnitudeShift" /></li></ul></event><remarks><PARA>Shifts the pixel values of the resulting image using a bitwise shift.  Valid values are from -7 to 7.  Negative values effectively divide pixel values by two, darkening the resulting image. Positive values effectively multiply pixel values by two, lightening the resulting image.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SmoothnessY"><summary>Smoothness in the Y direction.  The smoothness value determines the sigma of the Gaussian curve and in turn the size of the Gaussian kernel.  For speed efficiency, it is recommended that the smoothness not exceed 24.</summary><remarks><PARA>Sets or gets the smoothness in the y-direction. The smoothness value
determines the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SigmaY">sigma</see> of the Gaussian curve and in turn the size of the Gaussian kernel. 
For speed efficiency, the smoothness should be less than or equal to 24.
</PARA><PARA>See <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian" cgnxAnchor="specifying_the_kernel_size">Specifying the Kernel Size</see> in the <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian">Gaussian Sampling Theory Topic</see>.</PARA><DEFAULT>2</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. Note that <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SigmaY" /> changes when <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler" /> changes.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSmoothnessX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSmoothnessY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfMagnitudeShift" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSigmaX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSigmaY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfOutputImageFormat" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SmoothnessX"><summary>Smoothness in the X direction.  The smoothness value determines the sigma of the Gaussian curve and in turn the size of the Gaussian kernel.  For speed efficiency, it is recommended that the smoothness not exceed 24.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. Note that <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SigmaX" /> changes when <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler" /> changes.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSmoothnessX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSmoothnessY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfMagnitudeShift" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSigmaX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSigmaY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfOutputImageFormat" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.
	</para></exception><remarks><PARA>Sets or gets the smoothness in the x-direction. The smoothness value
determines the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SigmaX">sigma</see> of the Gaussian curve and in turn the size of the Gaussian kernel.
For speed efficiency, the smoothness should be less than or equal to 24.
</PARA><PARA>See <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian" cgnxAnchor="specifying_the_kernel_size">Specifying the Kernel Size</see> in the <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian">Gaussian Sampling Theory Topic</see>.</PARA><DEFAULT>2</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SampleY"><summary>Subsampling rate in the Y direction that reduces the image height, dividing by the specified value.  Sampling is performed after the Gaussian filter is applied.  In general, SampleY should be less than SmoothnessY.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The sampling block size is &lt;= 0.
	</para></exception><remarks><PARA>Subsampling factor in the y-direction. The height of the resulting image is reduced in size by this factor. Sampling takes place after the Gaussian filter is applied.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGaussSampler_SampleY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleY" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SampleX"><remarks><PARA>Subsampling factor in the x-direction. The width of the resulting image is reduced in size by this factor. Sampling takes place after the Gaussian filter is applied.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The sampling block size is &lt;= 0.
	</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGaussSampler_SampleX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SfSampleX" /></li></ul></event><summary>Subsampling rate in the X direction that reduces the image width, dividing by the specified value.  Sampling is performed after the Gaussian filter is applied.  In general, SampleX should be less than SmoothnessX.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.OperatorName"><summary>Returns/sets a displayable operator name.</summary><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><summary>Perform a single image operation using the input image and region to produce the output image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology"><summary>Class that performs a grey-scale morphology operation on an image.</summary><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology" />object.  This object applies grey morphology operations to an image to produce a new image. See <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology">Grey-Scale Morphology</see> to learn more about the morphology operations.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfElements"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Elements may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOperation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Operation may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Width may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Height may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOriginX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OriginX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOriginY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OriginY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.OriginY"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0 or &gt;= <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Height" /></para></exception><remarks><PARA>The y-coordinate of the origin of the structuring element relative to the upper-left corner of the element. <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.OriginY" /> is zero-based.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Y Coordinate of the origin of the structuring element relative to the upper left corner of the structuring element.  OriginY is zero-based.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology_OriginY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOriginY" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.OriginX"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology_OriginX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOriginX" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0 or &gt;= <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Width" /></para></exception><summary>X Coordinate of the origin of the structuring element relative to the upper left corner of the structuring element.  OriginX is zero-based.  The result of a morphological operation is stored at the pixel in the output image corresponding to the origin.</summary><remarks><PARA>The x-coordinate of the origin of the structuring element relative to the upper-left corner of the element. <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.OriginX" /> is zero-based.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Height"><remarks><PARA>Height of the structuring element.
This value varies depending on the number of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Elements">morphology elements</see> associated with this object. For example, two morphology elements imply a 5x5 structuring element, so <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Height" /> would be 5.</PARA><DEFAULT>3</DEFAULT></remarks><summary>Height of the structuring element.    Varies according to the number of 3x3 elements.  For instance, two 3x3 morphology elements implies a 5x5 structuring element.  Hence, the Height would be 5.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Width"><remarks><PARA>Width of the structuring element.
This value varies depending on the number of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Elements">morphology elements</see> associated with this object. For example, two morphology elements imply a 5x5 structuring element, so <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Width" /> would be 5.</PARA><DEFAULT>3</DEFAULT></remarks><summary>Width of the structuring element.  Varies according to the number of 3x3 elements.  For instance, two 3x3 morphology elements implies a 5x5 structuring element.  Hence, the Width would be 5.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Operation"><remarks><PARA>The morphology operation to perform. To learn more about morphology operations, see <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="dilation_and_erosion">Dilation and Erosion</see> and <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="opening_and_closing">Opening and Closing</see> in the <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology">Grey-Scale Morphology</see> theory topic.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants">Erode</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The operation is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants" />.
	</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology_Operation--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfOperation" /></li></ul></event><summary>Morphology operation to perform.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Elements"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology_Elements--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SfElements" /></li></ul></event><summary>The collection of 3x3 elements.</summary><remarks><PARA>The set of grey morphology elements associated with this object. Each <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element" /> is a single 3x3 structuring element. Typically, the structuring element is one of the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants">predefined types</see>, but you can specify a custom element as well. You can <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="specifying_structuring_elements_larger_than_3x3">combine</see> more than one 3x3 element to create a larger structuring element.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><summary>Perform a single image operation using the input image and region to produce the output image.</summary><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element"><summary>Class that holds a grey morphology element.  Each element is 3x3 matrix to be used by the CogIPOneImageGreyMorphology object to produce the primary structuring element.</summary><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element" /> object.  This object defines a single grey morphology 3x3 matrix to be used by the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology" /> object.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Type may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfGetMemberValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetMemberValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfMemberMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MemberMask may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.MemberMask"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology3x3Element_MemberMask--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfMemberMask" /></li></ul></event><summary>Specifies the 'don't care' mask, members of the 3x3 element that will not be used in the computation.  The mask is specified by ORing together each of the values defined in CogIPOneImageMorphologyPositionConstants that corresponds to a dont care pixel.</summary><remarks><PARA>Specifies the Don't Care mask which are the members of the 3x3 element that are not used in the computation.
To specify a mask, OR the values defined in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants" /> that correspond the Don't Care pixels.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Type"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants" />.
	</para></exception><summary>Type of Morphology structuring element for this 3x3 matrix.  Types other than cogIPOneImageMorphologyElementTypeCustom use MemberValue offsets of zero.</summary><remarks><PARA>The type of structuring element for this 3x3 matrix. Types other than <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants">Custom</see> use <see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" /> offsets of zero.</PARA></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology3x3Element_Type--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfType" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)"><param name="position"><PARA>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants">location</see> within the 3x3 element of the member.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; -128 or &gt; 127.</para></exception><remarks><PARA>Specifies the value of an individual member of the 3x3 element.  This value is a signed pixel value offset for the specified position in the 3x3 element. To learn more about grey morphology structuring elements see <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="greyscale_morphological_structuring_elements">Grey-Scale Morphological Structuring Elements</see>.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Specifies an individual member value.  The value is an signed pixel value offset for the specified position in the 3x3 element.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology3x3Element_MemberValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfGetMemberValue" /></li></ul></event></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants,System.Int32)"><param name="position"><PARA>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants">location</see> within the 3x3 element of the member.</PARA></param><param name="value"></param><remarks><PARA>Specifies the value of an individual member of the 3x3 element.  This value is a signed pixel value offset for the specified position in the 3x3 element. To learn more about grey morphology structuring elements see <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="greyscale_morphological_structuring_elements">Grey-Scale Morphological Structuring Elements</see>.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Specifies an individual member value.  The value is an signed pixel value offset for the specified position in the 3x3 element.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; -128 or &gt; 127.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageGreyMorphology3x3Element_MemberValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SfGetMemberValue" /></li></ul></event></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements"><summary>Collection of 3x3 grey morphology elements.  Each grey morphology element is a 3x3 matrix used to compose the primary structuring element for the morphological operation.</summary><remarks><PARA>Collection of <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.IndexOf(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Insert(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Add(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM"><summary>Class that performs the NxM grey morphology operation on an image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfOperation"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by Operation may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfKernelWidth"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfKernelHeight"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfGetMaskValue"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by GetMaskValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfGetKernelValue"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by GetKernelValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfInputImageMask"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by InputImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfInputImageMaskOffsetX"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfInputImageMaskOffsetY"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfKernelEnabled"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.KernelEnabled"><summary>If true, utilize the values accessed via the GetKernelValue and SetKernelValue methods. Otherwise no offset is applied at run time.</summary><value>Whether or not to use the current kernel values as offsets at run time.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property is changed.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.InputImageMaskOffsetY"><value>The input image mask Y offset in pixels.</value><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in pixel coordinates of the InputImage.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the input image mask offset Y is changed.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.InputImageMaskOffsetX"><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in pixel coordinates of the InputImage.</summary><value>The input image mask X offset in pixels.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the input image mask offset X is changed.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.InputImageMask"><value>The input image mask. May be null.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the input image mask is changed.</event><summary>Mask indicating areas of Care (Non-Zero Mask Pixels) and Don't Care (Zero).  The mask is aligned to the InputImage using the InputImageMaskOffsetX &amp; Y values.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.KernelHeight"><exception cref="T:System.ArgumentException">If the supplied value is not a positive odd integer.</exception><summary>Get or set the height of the grey morphology kernel in pixels.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the kernel height changes.</event><value>The grey morphology kernel height in pixels.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.KernelWidth"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the kernel width changes.</event><value>The grey morphology kernel width in pixels.</value><exception cref="T:System.ArgumentException">If the supplied value is not a positive odd integer.</exception><summary>Get or set the width of the grey morphology kernel in pixels.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.Operation"><exception cref="T:System.ArgumentException">If the supplied value is not a valid member of the enumeration.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the operation changes.</event><summary>Get or set the NxM grey morphology operation.</summary><value>The NxM grey morphology operation.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.GetMaskValue(System.Int32,System.Int32)"><param name="Col">The zero based column index of the desired kernel mask value.</param><param name="Row">The zero based row index of the desired kernel mask value.</param><exception cref="T:System.ArgumentException">If the supplied Col parameter is less than zero or not less than KernelWidth.</exception><returns>The kernel mask value at the specified column and row. True means care and false means don't care.</returns><summary>Get the mask value at the specified kernel column and row.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SetMaskValue(System.Int32,System.Int32,System.Boolean)"><param name="Col">The zero based column index of the desired kernel mask value.</param><param name="Row">The zero based row index of the desired kernel mask value.</param><param name="NewValue">n/a</param><exception cref="T:System.ArgumentException">If the supplied Row parameter is less tahn zero or not less than KernelHeight.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the specified kernel mask value changes.</event><summary>Set the mask value at the specified kernel column and row.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.GetKernelValue(System.Int32,System.Int32)"><param name="Col">The zero based column index of the desired kernel value.</param><param name="Row">The zero based row index of the desired kernel value.</param><exception cref="T:System.ArgumentException">If the supplied Col parameter is less than zero or not less than KernelWidth.</exception><summary>Get the kernel value at the specified column and row.</summary><returns>The kernel value at the specified column and row.</returns></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.SetKernelValue(System.Int32,System.Int32,System.Int32)"><param name="Col">The zero based column index of the desired kernel value.</param><param name="Row">The zero based row index of the desired kernel value.</param><param name="NewValue">n/a</param><exception cref="T:System.ArgumentException">If the supplied Row parameter is less tahn zero or not less than KernelHeight.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the specified kernel value changes.</event><summary>Set the kernel value at the specified kernel column and row.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter" /> object.  This object applies a high pass filter to an image to produce a new image. The general effect of the high pass filter is to accentuate edges and to reduce low-frequency detail in the image.</PARA><PARA>
The high pass operation is performed by subtracting the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler" /> input image from the original image.</PARA></remarks><summary>Class that performs high pass filtering on an image.  The high pass operation is performed by subtracting the Gaussian filtered input image from the input image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSmoothnessX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SmoothnessX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSmoothnessY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SmoothnessY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSigmaX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SigmaX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSigmaY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SigmaY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfProcessingMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProcessingMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfKernelWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by KernelWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfKernelHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by KernelHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.KernelHeight"><summary>The height of the kernel used when ProcessingMode is either Mean or Median. Must be a positive odd value. This property is ignored when ProcessingMode is Gauss.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.KernelWidth"><summary>The width of the kernel used when ProcessingMode is either Mean or Median. Must be a positive odd value. This property is ignored when ProcessingMode is Gauss.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.ProcessingMode"><summary>Specifies the way the input image will be smoothed before subtracting that result from the input image to produce the high pass output image. Choices include Gauss, Mean, and Median.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.OutputImageFormat"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterImageFormatConstants" />.</para></exception><summary>The pixel depth of the image to generate by the high pass filter operation.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageHighPassFilter_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfOutputImageFormat" /></li></ul></event><remarks><PARA>The pixel depth of the resulting image generated by the high pass filter operation.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterImageFormatConstants">SameAsInputImage</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SigmaY"><remarks><PARA>Gets the standard deviation (sigma) of the Gaussian curve in the y-direction. The standard deviation is computed using the following formula where <ITALIC>s</ITALIC> is the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SmoothnessY">smoothing value</see>.</PARA><PARA><PICTURE SRC="sigma.gif" WIDTH="128" HEIGHT="76" apiSRC="SigmaY_sigma.gif" /></PARA></remarks><summary>Returns the standard deviation of the Gaussian curve along the Y axis. Only meaningfull when ProcessingMode is Gauss.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SigmaX"><remarks><PARA>Gets the standard deviation (sigma) of the Gaussian curve in the x-direction. The standard deviation is computed using the following formula where <ITALIC>s</ITALIC> is the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SmoothnessX">smoothing value</see>.</PARA><PARA><PICTURE SRC="sigma.gif" WIDTH="128" HEIGHT="76" apiSRC="SigmaX_sigma.gif" /></PARA></remarks><summary>Returns the standard deviation of the Gaussian curve along the X axis. Only meaningfull when ProcessingMode is Gauss.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SmoothnessY"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.
	</para></exception><remarks><PARA>Sets or gets the smoothness in the y-direction. The smoothness value
determines the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SigmaY">sigma</see> of the Gaussian curve and in turn the size of the Gaussian kernel. 
For speed efficiency, the smoothness should be less than or equal to 24.
</PARA><PARA>See <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian" cgnxAnchor="specifying_the_kernel_size">Specifying the Kernel Size</see> in the <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian">Gaussian Sampling Theory Topic</see>.</PARA><DEFAULT>2</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. Note that <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SigmaX" /> changes when <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter" /> changes.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSmoothnessX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSmoothnessY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSigmaX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSigmaY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfOutputImageFormat" /></li></ul></event><summary>Smoothness in Y direction.  The smoothness value determines the sigma of the Gaussian curve and in turn the size of the Gaussian kernel.  For speed efficiency, it is recommended that the smoothness not exceed 24. This property is ignored when ProcessingMode is not Gauss.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SmoothnessX"><summary>Smoothness in X direction.  The smoothness value determines the sigma of the Gaussian curve and in turn the size of the Gaussian kernel.  For speed efficiency, it is recommended that the smoothness not exceed 24. This property is ignored when ProcessingMode is not Gauss.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. Note that <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SigmaX" /> changes when <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter" /> changes.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSmoothnessX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSmoothnessY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSigmaX" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfSigmaY" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SfOutputImageFormat" /></li></ul></event><remarks><PARA>Sets or gets the smoothness in the x-direction. The smoothness value
determines the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SigmaX">sigma</see> of the Gaussian curve and in turn the size of the Gaussian kernel.
For speed efficiency, the smoothness should be less than or equal to 24.
</PARA><PARA>See <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian" cgnxAnchor="specifying_the_kernel_size">Specifying the Kernel Size</see> in the <see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian">Gaussian Sampling Theory Topic</see>.</PARA><DEFAULT>2</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.OperatorName"><summary>Returns/sets a displayable operator name.</summary><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><summary>Perform a single image operation using the input image and region to produce the output image.</summary><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3"><remarks><PARA>Common interface for all one-image operators.</PARA><PARA><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperator" /> is the default interface for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize" /> and
<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3" />.</PARA></remarks><summary>Class that performs the 3x3 median operation on an image. The 3x3 median filter replaces a source pixel with the median value of the 3x3 neighborhood centered around it.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><summary>Perform a single image operation using the input image and region to produce the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM"><summary>Class that performs the NxM median operation on an image. The NxM median filter replaces a source pixel with the median value of the NxM neighborhood centered around it.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfKernelWidth"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfKernelHeight"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by KernelHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfGetMaskValue"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by GetMaskValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfInputImageMask"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by InputImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfInputImageMaskOffsetX"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfInputImageMaskOffsetY"><summary>This bit wil be set in the EventArgs of a Changed event every time the value returned by InputImageMaskOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.InputImageMaskOffsetY"><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in pixel coordinates of the InputImage.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the input image mask offset Y is changed.</event><value>The input image mask Y offset in pixels.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.InputImageMaskOffsetX"><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the InputImage to the upper-left corner of the InputImageMask, in pixel coordinates of the InputImage.</summary><value>The input image mask X offset in pixels.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the input image mask offset X is changed.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.InputImageMask"><summary>Mask indicating areas of Care (Non-Zero Mask Pixels) and Don't Care (Zero).  The mask is aligned to the InputImage using the InputImageMaskOffsetX &amp; Y values.</summary><value>The input image mask. May be null.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the input image mask is changed.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.KernelHeight"><value>The median kernel height in pixels.</value><exception cref="T:System.ArgumentException">If the supplied value is not a positive odd integer.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the kernel height changes.</event><summary>Get or set the height of the median kernel in pixels.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.KernelWidth"><value>The median kernel width in pixels.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the kernel width changes.</event><summary>Get or set the width of the median kernel in pixels.</summary><exception cref="T:System.ArgumentException">If the supplied value is not a positive odd integer.</exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><summary>Perform a single image operation using the input image and region to produce the output image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.GetMaskValue(System.Int32,System.Int32)"><param name="Col">The zero based column index of the desired kernel mask value.</param><param name="Row">The zero based row index of the desired kernel mask value.</param><returns>The kernel mask value at the specified column and row. True means care and false means don't care.</returns><summary>Get the mask value at the specified kernel column and row.</summary><exception cref="T:System.ArgumentException">If the supplied Row parameter is less tahn zero or not less than KernelHeight.</exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.SetMaskValue(System.Int32,System.Int32,System.Boolean)"><param name="Col">The zero based column index of the desired kernel mask value.</param><param name="Row">The zero based row index of the desired kernel mask value.</param><param name="NewValue">n/a</param><summary>Set the mask value at the specified kernel column and row.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the specified kernel mask value changes.</event><exception cref="T:System.ArgumentException">If the supplied Row parameter is less tahn zero or not less than KernelHeight.</exception></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant"><summary>Class that multiplies pixel values of an image with a constant value.</summary><remarks><PARA>Primary interface of a CogIPOneImageMultiplyConstant object.  This object multiplies the pixel values in an image with a constant positive value to produce a new image.  The constant value may be les than 1 to emulate the division operation.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfConstantValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfOverflowMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OverflowMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfConstantPlane0Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantPlane0Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfConstantPlane1Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantPlane1Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfConstantPlane2Value"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConstantPlane2Value may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ConstantPlane2Value"><summary>The constant plane 2 value used for the multiplication of a 3 plane image. The value must be greater than or equal to zero.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ConstantPlane1Value"><summary>The constant plane 1 value used for the multiplication of a 3 plane image. The value must be greater than or equal to zero.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ConstantPlane0Value"><summary>The constant plane 0 value used for the multiplication of a 3 plane image. The value must be greater than or equal to zero.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.OutputImageFormat"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageMultiplyConstant_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfOutputImageFormat" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantImageFormatConstants" />.</para></exception><summary>The pixel depth of the output image.</summary><remarks><PARA>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantImageFormatConstants"> pixel depth</see> of the output image. </PARA><DEFAULT>cogIPOneImageMultiplyConstantImageFormatSameAsInputImage</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.OverflowMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not 
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantOverflowModeConstants">Bounded</see> 
		or 
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantOverflowModeConstants">Wrap</see>.
	</para></exception><summary>The mode used to handle overflow conditions that can occur while performing the multiply operation.</summary><remarks><PARA>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantOverflowModeConstants">mode</see>used to handle overflow conditions that can occur while performing the multiply operation. 
You can specify that result of the operation by clamped to the maximum value the at can be expressed by the selected 
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.OutputImageFormat" /> or you can specify that the value wrap.
</PARA><DEFAULT>cogIPOneImageMultiplyConstantOverflowModeBounded</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageMultiplyConstant_OverflowMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfOverflowMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ConstantValue"><summary>The constant value used for the multiplication.  The value must be greater or equal zero. If the value is less than one, division operation can be emulated.</summary><remarks><PARA>The constant value used for the multiplication.  The value must be greater than or equal to zero. If the value is less than one, division operation can be emulated.</PARA><DEFAULT>1.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is less than zero.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageMultiplyConstant_ConstantValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SfConstantValue" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><summary>Perform a single image operation using the input image and region to produce the output image.</summary><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators"><remarks><PARA>Collection of <see cref="T:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams" />.</PARA><PARA>Operators are executed in sequence.
	Operators whose 
		<see cref="P:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams.Enabled" />
	 property is False, are not executed.</PARA></remarks><summary>Collection of one image operators.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.IndexOf(Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Insert(Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Add(Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap"><remarks><PARA>This object maps the values of the image's pixels using the supplied pixel map.  The default pixel map is an 
	identity map an (input pixel value of 0 maps to an output value of 0, 1 to 1, and so on).</PARA></remarks><summary>This class converts all pixels of an image using the map defined by the user.  By default this class creates an identity map.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfGetMap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetMap may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfGetPlane0Map"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPlane0Map may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfGetPlane1Map"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPlane1Map may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfGetPlane2Map"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPlane2Map may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><summary>Perform a single image operation using the input image and region to produce the output image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.GetMap"><summary>Get the pixel map array.  When an image is mapped, each pixel in the input image is used as an index into the array and replaced by the returned value.</summary><remarks><PARA>
	Each pixel value is converted to its corresponding value in the pixel map.
	The default pixel map is an identity map an (input pixel value of 0 maps to an output value of 0, 1 to 1, and so on).

</PARA><PARA>
	The value returned by
		<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.GetMap" />
	is a copy of the pixel map.
	
	If you make changes to the returned array, and you want them reflected in
	the pixel map, you must pass the altered array to <see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SetMap" />.

</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SetMap(System.Byte[])"><param name="value"></param><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImagePixelMap_Map--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SfGetMap" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied map is NULL.</para></exception><remarks><PARA>
	Each pixel value is converted to its corresponding value in the pixel map.
	The default pixel map is an identity map an (input pixel value of 0 maps to an output value of 0, 1 to 1, and so on).

</PARA><PARA>
	The value returned by
		<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.GetMap" />
	is a copy of the pixel map.
	
	If you make changes to the returned array, and you want them reflected in
	the pixel map, you must pass the altered array to <see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SetMap" />.

</PARA></remarks><summary>Set the pixel map array.  When an image is mapped, each pixel in the input image is used as an index into the array and replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.CreateGraphics(Cognex.VisionPro.CogColorConstants)"><param name="color"><PARA>The color with which to draw the graphic.</PARA></param><summary>Creates a composite result graphic depicting the current lookup table for the mapping operation.</summary><returns><PARA>The returned graphic.</PARA></returns><remarks><PARA>Creates a composite result graphic depicting the current pixel map.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.GetPlane0Map"><summary>Get the plane 0 pixel map array.  When a 3 plane image is mapped, the plane 0 value of each pixel in the input image is used as an index into the array and is replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SetPlane0Map(System.Byte[])"><param name="value"></param><summary>Set the plane 0 pixel map array.  When a 3 plane image is mapped, each pixel's plane 0 value is used as an index into the array and is replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.GetPlane1Map"><summary>Get the plane 1 pixel map array.  When a 3 plane image is mapped, the plane 1 value of each pixel in the input image is used as an index into the array and is replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SetPlane1Map(System.Byte[])"><param name="value"></param><summary>Set the plane 1 pixel map array.  When a 3 plane image is mapped, each pixel's plane 1 value is used as an index into the array and is replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.GetPlane2Map"><summary>Get the plane 2 pixel map array.  When a 3 plane image is mapped, the plane 2 value of each pixel in the input image is used as an index into the array and is replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.SetPlane2Map(System.Byte[])"><param name="value"></param><summary>Set the plane 2 pixel map array.  When a 3 plane image is mapped, each pixel's plane 2 value is used as an index into the array and is replaced by the returned value.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.CreatePlanarGraphics(Cognex.VisionPro.CogColorConstants,System.Int32)"><param name="color"></param><param name="plane"></param><summary>Creates a composite result graphic depicting the current lookup table for the specified plane.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize"><remarks><PARA>This object quantizes an image.  It reduces the number of grey levels contained in the image while trying to retain image information.  This operation is useful for scenes that are easily described by a small number of discrete image intensities.</PARA></remarks><summary>Class that perform quantize to reduce the number of grey levels contained in the image while trying to retain image information.  This operation is useful for scenes that are easily described by a small number of discrete image intensities.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.SfLevels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Levels may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Levels"><summary>Specifies the number of pixel value levels to map the image to.  For instance, cogIPOneImageQuantizeLevel2 designates that the input image be partitioned into pixel values 0 and 128.</summary><remarks><PARA>For instance, if you specify <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants">cogIPOneImageQuantizeLevel2</see> all of the pixels in the image will be partitioned into one of two pixel values: 0 and 128.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants">s2</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants" />.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.OperatorName"><summary>Returns/sets a displayable operator name.</summary><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><summary>Perform a single image operation using the input image and region to produce the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Execute2(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion,System.Int32[]@)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><param name="thresholds"><PARA>The threshold grey-level values for each division. The number of elements in <paramref name="thresholds" /> is one less than the number of grey levels.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBox</see>.
	</para></exception><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Perform the quantize operation using the input image and region to produce the output image.  <paramref name="thresholds" /> contains the threshold grey-level values for each division.</PARA></remarks><summary>Perform the quantize operation using the input image and region to produce the output image.  The threshold grey-level values for each division are also returned.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler"><summary>Class that subsamples the pixels in a image by blocks specified by SampleX and SampleY to produce an image of reduced size.  Pixels selected will be the closest to each blocks center or the average pixel value if SpatialAverage is enabled.</summary><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler" /> object. 
This object samples an image in the x- and y-directions to produce a new image.
You can configure this object to perform <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SpatialAverage">spatial averaging</see> instead of sampling.</PARA><PARA>Subsampling  divides an image into blocks of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleX" /> by <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleY" /> pixels and selects the pixel closest to each block’s center. When there is no pixel at the exact center of a subsampling block (as is the case in the figure), the pixel to the upper left of center is selected.</PARA><PARA><PICTURE HEIGHT="266" WIDTH="460" SRC="sampled.gif" apiSRC="ICogIPOneImageSubSampler_sampled.gif" /></PARA><PARA><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SpatialAverage">Spatial averaging</see> divides an image  into of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleX" /> by <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleY" /> pixels. The pixel values from each pixel in the block are summed, and the result is divided by the number of pixels in the block. The averaged pixel value from the block of pixels is then applied to a single pixel in the destination window. Partial blocks in the image are ignored during spatial averaging. </PARA><PARA><PICTURE HEIGHT="197" WIDTH="462" SRC="averaged.gif" apiSRC="ICogIPOneImageSubSampler_averaged.gif" /></PARA><PARA>
If you specify an even subsampling rate and you do not use spatial averaging, the tool selects the pixel above and to the left of the center of the sampling area.
This introduces a one-half pixel shift in the locations of features in the sampled image. 
The tool automatically adjusts the output image coordinate space tree by shifting the coordinate space by one-half pixel.
Because spatial averaging averages pixel values evenly across the sampling area regardless of its size, no such adjustment is required when spatial averaging is enabled.
</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SfSampleX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SfSampleY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SfSpatialAverage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SpatialAverage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SpatialAverage"><remarks><PARA>Sets or gets whether the image should be averaged instead of sampled.
When this property is set to True, the image is averaged. When this property is set to False, the image is sampled.</PARA><PARA>Spatial averaging divides an image  into blocks of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleX" /> by <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleY" /> pixels. The pixel values from each pixel in the block are summed, and the result is divided by the number of pixels in the block. The averaged pixel value from the block of pixels is then applied to a single pixel in the destination window. Partial blocks in the image are ignored during spatial averaging. </PARA><PARA><PICTURE HEIGHT="197" WIDTH="462" SRC="averaged.gif" apiSRC="SpatialAverage_averaged.gif" /></PARA><PARA>
If you specify an even number for the subsampling rate and you do not use spatial averaging, the tool selects the pixel above and to the left of the center of the sampling area. This introduces a one-half pixel shift in the locations of features in the sampled image. The tool automatically adjusts the output image coordinate space tree by shifting the coordinate space by one-half pixel. Because spatial averaging averages pixel values evenly across the sampling area regardless of its size, no such adjustment is performed when spatial averaging is enabled.
</PARA><DEFAULT>False (sampled, not averaged)</DEFAULT></remarks><summary>A flag designating that the image should be averaged, and not merely sampled.  The pixel values from each pixel in the sample-size blocks are summed, and the result is divided by the number of pixels in the block.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleY"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The sampling block size is &lt;= 0.
	</para></exception><summary>The factor used to divide the image into blocks of SampleY pixels along its height.  The output image is produced from either most central pixel of each block specified by SampleX and SampleY, or if SpatialAverage is enabled, the average of the block.</summary><remarks><PARA>The size of the sampling block in pixels along the height of the image. Each pixel in the output image is produced by using either the most central pixel of each block, or if <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SpatialAverage" /> is True, by taking the average of all the pixels in the block.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SampleX"><summary>The factor used to divide the image into blocks of SampleX pixels along its width.  The output image is produced from either most central pixel of each block specified by SampleX and SampleY, or if SpatialAverage is enabled, the average of the block.</summary><remarks><PARA>The size of the sampling block in pixels along the width of the image. Each pixel in the output image is produced by using either the most central pixel of each block, or if <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SpatialAverage" /> is True, by taking the average of all the pixels in the block.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The sampling block size is &lt;= 0.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><summary>Perform a single image operation using the input image and region to produce the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel"><summary>Class that performs missing pixel processing on an image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SfDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Direction may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SfValueComputation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ValueComputation may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SfGlobalValueMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GlobalValueMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SfFixedGlobalValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FixedGlobalValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.FixedGlobalValue"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than zero.</exception><value>The value used when GlobalValueMode is set to Fixed.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Get or set the value used when GlobalValueMode is set to Fixed. Must be a legal pixel value.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.GlobalValueMode"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Get or set the manner in which the 'global' value will be determined. Possible choices include Fixed, ImageMinimum, ImageMaximum, and ImageAverage.</summary><value>The manner in which 'global' value will be processed.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.ValueComputation"><value>The manner in which 'neighboring' pixels will be processed.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Get or set the manner in which 'neighboring' pixels will be processed. Possible choices include NeighborMinimum, NeighborMaximum, NeighborInterpolation, and Global.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.Direction"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The direction in which missing pixel analysis is to be performed.</value><summary>Get or set the direction in which the missing pixel processing is to be performed. Possible choices include Horizontal, Vertical, or Both.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve"><summary>Class that performs a simultaneous separable convlution and sampling. A common use of this is downsampling with Gaussian smoothing.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfSampleX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfSampleY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfKernelXSize"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by KernelXSize may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfKernelYSize"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by KernelYSize may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfGetKernelXValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetKernelXValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfGetKernelYValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetKernelYValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SfOperatorName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OperatorName may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.KernelYSize"><summary>Get or set the size of the Y axis kernel. Directly setting this property to a larger value will cause new Y kernel elements, each with an initial value of zero, to be added. Directly setting this property to a smaller value will cause existing Y kernel elements to be discarded. Note that directly setting this property is considered an advanced usage.</summary><exception cref="T:System.ArgumentException">If the supplied value is less than 1 or greater than 127.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The size of the Y axis kernel.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.KernelXSize"><exception cref="T:System.ArgumentException">If the supplied value is even.</exception><summary>Get or set the size of the X axis kernel. Directly setting this property to a larger value will cause new X kernel elements, each with an initial value of zero, to be added. Directly setting this property to a smaller value will cause existing X kernel elements to be discarded. Note that directly setting this property is considered an advanced usage.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The size of the X axis kernel.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SampleY"><value>The sample rate in the Y direction.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Get or set the sample rate in the Y direction. To specify sampling every third pixel in the Y direction, set SampleY to 3.0. Note that non-integer sampling is fully supported.</summary><exception cref="T:System.ArgumentException">If the supplied value is less than or equal to zero.</exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SampleX"><summary>Get or set the sample rate in the X direction. To specify sampling every third pixel in the X direction, set SampleX to 3.0. Note that non-integer sampling is fully supported.</summary><exception cref="T:System.ArgumentException">If the supplied value is less than or equal to zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The sample rate in the X direction.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.Enabled"><summary>Whether this one image operator will be used to compute the output image.</summary><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><summary>Perform a single image operation using the input image and region to produce the output image.</summary><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.GetKernelXValue(System.Int32)"><param name="Index">A zero-based index into the X axis kernel.</param><exception cref="T:System.ArgumentException">If the index is less than zero, or greater than or equal to KernelXSize</exception><summary>Get the X axis kernel value at the specified index.</summary><returns>The X axis kernel value at the specified index.</returns></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SetKernelXValue(System.Int32,System.Int32)"><param name="Index">A zero-based index into the X axis kernel.</param><param name="NewValue">The new kernel value.</param><summary>Set the X axis kernel value at the specified index to the specified value.</summary><exception cref="T:System.ArgumentException">If the index is less than zero, or greater than or equal to KernelXSize</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the specified kernel value changes.</event></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.GetKernelYValue(System.Int32)"><param name="Index">A zero-based index into the Y axis kernel.</param><returns>The Y axis kernel value at the specified index.</returns><summary>Get the Y axis kernel value at the specified index.</summary><exception cref="T:System.ArgumentException">If the index is less than zero, or greater than or equal to KernelYSize</exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SetKernelYValue(System.Int32,System.Int32)"><param name="Index">A zero-based index into the Y axis kernel.</param><param name="NewValue">The new kernel value.</param><exception cref="T:System.ArgumentException">If the index is less than zero, or greater than or equal to KernelYSize</exception><summary>Set the Y axis kernel value at the specified index to the specified value.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the specified kernel value changes.</event></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SetGaussSample(System.Double,System.Double)"><param name="SampleX">The desired X axis sample rate.</param><param name="SampleY">The desired Y axis sample rate.</param><summary>Configure both the X axis and Y axis kernels to perform Gaussian sampling at the specified sample rates. The X axis sigma will be approximately 0.5 * floor(SampleX), while the Y axis sigma will be approximately 0.5 * floor(SampleY). This method may modify any or all of SampleX, SampleY, KernelXSize, KernelYSize, as well as the actual kernel values returned by GetKernelXValue(...) or GetKernelYValue(...).</summary><exception cref="T:System.ArgumentException">If SampleY is less than or equal to zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the state of this object changes.</event></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.SetGaussSigma(System.Double,System.Double)"><param name="SigmaX">The desired X axis sigma.</param><param name="SigmaY">The desired Y axis sigma.</param><exception cref="T:System.ArgumentException">If SigmaX is less than or equal to zero.</exception><summary>Configure both the X axis and Y axis kernels to perform Gaussian sampling at the specified sigma, leaving the sampling rate (SampleX, SampleY) unchanged. This method may modify any or all of KernelSizeX, KernelSizeY, as well as the actual kernel values returned by GetKernelXValue(...) or GetKernelYValue(...).</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the state of this object changes.</event></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.  This tool generates a new image by applying one or more <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators" /> to an image.</PARA><NOTE>
	The output image's coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks><summary>Tool that operates on a single input image to produce a single output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.#ctor(Cognex.VisionPro.ImageProcessing.CogIPOneImageTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfOperators"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Operators may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Region"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfRegion" /></li></ul></event><summary>Region of interest in the InputImage.  NULL means use entire InputImage.  The RegionMode property specifies how the region will be applied to the InputImage, and thus the region is only applied to the first operator in the Operators collection.</summary><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.InputImage" /> on which to execute the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators" />.
The <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.RegionMode" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the tool considers the entire <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.InputImage" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.RegionMode"><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Region" /> property should be interpreted. It may be either <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBox</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform
</see></PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBox</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageTool_RegionMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfRegionMode" /></li></ul></event><summary>The RegionMode specifies how the region should be interpreted.  It may be either cogRegionModeAffineTransform or cogRegionModePixelAlignedBoundingBox.  The Region is only applied to the first operator in the Operators collection.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>This new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBox</see>.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Operators"><summary>Returns the collection of ICogIPOneImageOperators.  When the tool is run, each operator in the collection will be executed sequentially with the output of the first passed on to the second, and so on.</summary><remarks><PARA>The collection of <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators" />.
Each operator in the collection executes sequentially with the output of the first operator passed on to the second and so on.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.OutputImage"><remarks><PARA>The image that results from executing all of tool's <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators" />.</PARA></remarks><summary>Returns the output image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfInputImage" /></li></ul></event><summary>Returns/sets the input image.</summary><remarks><PARA>The image on which the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Operators">operators</see> operate.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants">InputImage</see> + 
   <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants">Region</see>.
</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfLastRunRecordDiagEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.LastRunRecordEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordConstants">OutputImage</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPOneImageTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.SfOutputImage" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Executes each of the tool's <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators" /> in sequence.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.InputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para>The tool has no <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.InputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.RegionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform</see> but 
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.RegionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModeAffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">cogRegionModePixelAlignedBoundingBox</see>.
	</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd"><remarks><PARA>Primary interface for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd" /> object that adds two images.</PARA></remarks><summary>Class that adds two images and produces a new image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.#ctor(Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfRegionModeA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionModeA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfRegionModeB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionModeB may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageAlignmentEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAlignmentEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageAAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageAAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageBAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageBAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageBAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageBAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfSpaceTreeMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SpaceTreeMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfMergedSpaceTreeName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MergedSpaceTreeName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfOverflowMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OverflowMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.OutputImageFormat"><summary>The pixel depth of the image to generate by the add operation.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfOutputImageFormat" /></li></ul></event><remarks><PARA>The pixel depth of the output image generated by adding the two input images.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddFormatConstants">DeepestOfInputImages</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddFormatConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.OverflowMode"><remarks><PARA>Sets or gets the mode that specifies how to handle cases in which adding the two images results in values greater than the maximum pixel value.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddOverflowModeConstants">Bounded</see></DEFAULT></remarks><summary>The mode used to handle overflow conditions that can occur while performing the add operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddOverflowModeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_OverflowMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfOverflowMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.MergedSpaceTreeName"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_MergedSpaceTreeName--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfMergedSpaceTreeName" /></li></ul></event><summary>Specifies the name of the root node of the coordinate space tree that is generated if a merged SpaceTreeMode is selected.</summary><remarks><PARA>Sets or gets the name of 
newly added <see cref="u:ImageProcessing.General.Theory.IPCoordinates" cgnxAnchor="twoimage_tools">intermediate node</see> 
of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> that is generated when the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SpaceTreeMode" /> specifies that coordinate space trees should be merged.
</PARA><DEFAULT>MergedSpaceTree</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SpaceTreeMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants" />.</para></exception><remarks><PARA>Specifies how to generate the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of the output image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants">CopyA</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_SpaceTreeMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfSpaceTreeMode" /></li></ul></event><summary>The SpaceTreeMode specifies how the coordinate space tree of the OutputImage should be generated.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageBAlignmentY"><remarks><PARA>Specifies the y-coordinate in the second image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />)  used to align the images to be added.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_ImageBAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageBAlignmentY" /></li></ul></event><summary>Specifies the Y coordinate on InputImageB used to align both images.  This coordinate is specified in the same selected space as InputImageB passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageBAlignmentX"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_ImageBAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageBAlignmentX" /></li></ul></event><remarks><PARA>Specifies the x-coordinate in the second image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />) used to align the images to be added.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />.</DEFAULT></remarks><summary>Specifies the X coordinate on InputImageB used to align both images.   This coordinate is specified in the same selected space as InputImageB passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAAlignmentY"><summary>Specifies the Y coordinate on InputImageA used to align both images.   This coordinate is specified in the same selected space as InputImageA passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><remarks><PARA>Specifies the y-coordinate in the first image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />) used to align the images to be added.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_ImageAAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageAAlignmentY" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAAlignmentX"><remarks><PARA>Specifies the x-coordinate in the first image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />) used to align the images to be added.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />.</DEFAULT></remarks><summary>Specifies the X coordinate on InputImageA used to align both images.  This coordinate is specified in the same selected space as InputImageA passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_ImageAAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageAAlignmentX" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAlignmentEnabled"><summary>Specifies whether or not the alignment coordinates should be used to align the first image with the second image.  If not enabled, the upper-left corner of the image or transformed region image will be used for alignment.</summary><remarks><PARA>Specifies whether the alignment coordinates should be used to align the first image with the second image.
If this property is False, the images are aligned on their upper left corners of their transformed regions.

If not enabled, <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd" /> uses the upper-left corner of the image or of the transformed region for alignment.</PARA><PARA>You can set the alignment coordinates with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAAlignmentX" />,
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageAAlignmentY" />,
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageBAlignmentX" />, and
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ImageBAlignmentY" />.
</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_ImageAlignmentEnabled--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfImageAlignmentEnabled" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeB"><summary>The RegionModeB specifies how the region should be interpreted on InputImageB.</summary><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RegionB" /> parameter should be interpreted for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_RegionModeB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfRegionModeB" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeA"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RegionA" /> parameter should be interpreted for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><summary>The RegionModeA specifies how the region should be interpreted on InputImageA.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAdd_RegionModeA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SfRegionModeA" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogRegion)"><param name="inputImageA"><PARA>The first image to add.</PARA></param><param name="inputImageB"><PARA>The second image to add.</PARA></param><param name="regionA"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeA" />, specifies which part of <paramref name="inputImageA" /> to use.</PARA></param><param name="regionB"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeB" />, specifies which part of <paramref name="inputImageB" /> to use.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImageA" /> or <paramref name="inputImageB" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImageA" /> or <paramref name="inputImageB" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="RegionModeA" /> or <paramref name="RegionModeB" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <paramref name="OutputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException" cgnxHRESULT="E_CogIP_NoRegionOverlap"><para>The regions do not overlap.</para></exception><returns><PARA>The image generated by adding <paramref name="inputImageA" /> and <paramref name="inputImageB" /></PARA></returns><remarks><PARA>Generates a new image that is the result of adding the specified regions of the two input images. If the region parameter is Nothing, the entire image is used.</PARA></remarks><summary>Interface for performing addition of two images.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool"><summary>Tool that adds two input images to produce a single output image.</summary><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool" />.  This tool adds two images and generates a new output image.</PARA><NOTE>
	The output image's coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.#ctor(Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfInputImageA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfInputImageB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageB may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfRegionA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfRegionB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionB may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RegionB"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_RegionB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfRegionB" /></li></ul></event><summary>Region of interest in InputImageB that is used to operate over.  NULL means use entire InputImageB.  The RegionModeB property specifies exactly how the region will be applied to this image.</summary><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" /> to add to the other image.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeB" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the entire image is used.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RegionA"><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" /> to add to the other image.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeA" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the entire image is used.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_RegionA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfRegionA" /></li></ul></event><summary>Region of interest in InputImageA that is used to operate over.  NULL means use entire InputImageA.  The RegionModeA property specifies exactly how the region will be applied to this image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RunParams"><summary>Returns/sets the add operation parameters.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfRunParams" /></li></ul></event><remarks><PARA>Parameters used to add the two images.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.OutputImage"><summary>Returns the output image.</summary><remarks><PARA>The result of adding <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_InputImageB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfInputImageB" /></li></ul></event><remarks><PARA>The second image to add.</PARA></remarks><summary>Returns/sets the second input image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_InputImageA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfInputImageA" /></li></ul></event><remarks><PARA>The first image to add.</PARA></remarks><summary>Returns/sets the first input image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfCurrentRecordEnable" /></li></ul></event><remarks><PARA>
	Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
	of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants">InputImages</see> + 
  	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants">Regions</see> +	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants">AlignmentPoints</see>.
	</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfLastRunRecordDiagEnable" /></li></ul></event><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants">InputImagesByReference</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.LastRunRecordEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordConstants">OutputImage</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageAddTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.Run"><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>Adds <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" /> to create a new <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.OutputImage">output image</see> using the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RunParams" />.

You can supply values for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RegionA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RegionB" /> to limits which parts of the two images are added.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.SfOutputImage" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.InputImageB" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeB" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.OutputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException" cgnxHRESULT="E_CogIP_NoRegionOverlap"><para>The regions do not overlap.</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax"><remarks><PARA>Primary interface for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax" /> object that generates a new image from the minimum or maximum pixel values in two images.</PARA></remarks><summary>Class that produces an image based on the minimum or maximum pixels of two input images.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.#ctor(Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfRegionModeA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionModeA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfRegionModeB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionModeB may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageAlignmentEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAlignmentEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageAAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageAAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageBAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageBAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageBAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageBAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfSpaceTreeMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SpaceTreeMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfMergedSpaceTreeName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MergedSpaceTreeName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfOperation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Operation may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.OutputImageFormat"><summary>The pixel depth of the image to generate by the minimum or maximum operation.</summary><remarks><PARA>The pixel depth of the output image generated by adding the two input images.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxFormatConstants">DeepestOfInputImages</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxFormatConstants" />.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfOutputImageFormat" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Operation"><remarks><PARA>Specifies whether the generated image should be in minimum or maximum pixel values for both input images.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxOperationConstants">Min</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_Operation--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfOperation" /></li></ul></event><summary>The operation to perform.  The operation may be taking minimum pixel values from the input images or the maximum pixel values from the input images.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.MergedSpaceTreeName"><summary>Specifies the name of the root node of the coordinate space tree that is generated if a merged SpaceTreeMode is selected.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_MergedSpaceTreeName--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfMergedSpaceTreeName" /></li></ul></event><remarks><PARA>Sets or gets the name of 
newly added <see cref="u:ImageProcessing.General.Theory.IPCoordinates" cgnxAnchor="twoimage_tools">intermediate node</see> 
of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> that is generated when the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SpaceTreeMode" /> specifies that coordinate space trees should be merged.
</PARA><DEFAULT>MergedSpaceTree</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SpaceTreeMode"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_SpaceTreeMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfSpaceTreeMode" /></li></ul></event><summary>The SpaceTreeMode specifies how the coordinate space tree of the OutputImage should be generated.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants" />.</para></exception><remarks><PARA>Specifies how to generate the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of the output image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants">CopyA</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageBAlignmentY"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_ImageBAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageBAlignmentY" /></li></ul></event><summary>Specifies the Y coordinate on InputImageB used to align both images.  This coordinate is specified in the same selected space as InputImageB passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><remarks><PARA>Specifies the y-coordinate in the second image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />)  used to align the images to be operated on.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />.</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageBAlignmentX"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_ImageBAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageBAlignmentX" /></li></ul></event><summary>Specifies the X coordinate on InputImageB used to align both images.   This coordinate is specified in the same selected space as InputImageB passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><remarks><PARA>Specifies the x-coordinate in the second image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />) used to align the images to be operated on.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />.</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAAlignmentY"><summary>Specifies the Y coordinate on InputImageA used to align both images.   This coordinate is specified in the same selected space as InputImageA passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_ImageAAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageAAlignmentY" /></li></ul></event><remarks><PARA>Specifies the y-coordinate in the first image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />) used to align the images to be operated on.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />.</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAAlignmentX"><summary>Specifies the X coordinate on InputImageA used to align both images.  This coordinate is specified in the same selected space as InputImageA passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_ImageAAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageAAlignmentX" /></li></ul></event><remarks><PARA>Specifies the x-coordinate in the first image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />) used to align the images to be operated on.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />.</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAlignmentEnabled"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_ImageAlignmentEnabled--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfImageAlignmentEnabled" /></li></ul></event><remarks><PARA>Specifies whether the alignment coordinates should be used to align the first image with the second image.
If this property is False, the images are aligned on their upper left corners of their transformed regions.

If not enabled, <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax" /> uses the upper-left corner of the image or of the transformed region for alignment.</PARA><PARA>You can set the alignment coordinates with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAAlignmentX" />,
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageAAlignmentY" />,
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageBAlignmentX" />, and
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ImageBAlignmentY" />.
</PARA><DEFAULT>False</DEFAULT></remarks><summary>Specifies whether or not the alignment coordinates should be used to align the first image with the second image.  If not enabled, the upper-left corner of the image or transformed region image will be used for alignment.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.RegionModeB"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_RegionModeB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfRegionModeB" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RegionB" /> parameter should be interpreted for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><summary>The RegionModeB specifies how the region should be interpreted on InputImageB.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.RegionModeA"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception><summary>The RegionModeA specifies how the region should be interpreted on InputImageA.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMax_RegionModeA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SfRegionModeA" /></li></ul></event><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RegionA" /> parameter should be interpreted for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogRegion)"><param name="inputImageA"><PARA>The first image.</PARA></param><param name="inputImageB"><PARA>The second image.</PARA></param><param name="regionA"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.RegionModeA" />, specifies which part of <paramref name="inputImageA" /> to use.</PARA></param><param name="regionB"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.RegionModeB" />, specifies which part of <paramref name="inputImageB" /> to use.</PARA></param><remarks><PARA>Generates a new image that is the result of taking the minimum or maximum pixel values the two input images. Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Operation" /> to specify whether to use the minimum or maximum pixel values.

If the region parameter is Nothing, the entire image is used.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImageA" /> or <paramref name="inputImageB" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImageA" /> or <paramref name="inputImageB" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="RegionModeA" /> or <paramref name="RegionModeB" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <paramref name="OutputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException" cgnxHRESULT="E_CogIP_NoRegionOverlap"><para>The regions do not overlap.</para></exception><summary>Interface for generating and image that is comprised of either the minimum or maximum pixel values in two images.</summary><returns><PARA>The image generated by combining the minimum or maximum pixel values of the input images.</PARA></returns></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool" />.  This tool generates a new image from either the maximum or minimum pixel values of the two input images.</PARA><NOTE>
	The output image's coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks><summary>Tool that produces a new image based on either the minimum pixel values or the maximum pixel values taken from two images.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.#ctor(Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfInputImageA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfInputImageB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageB may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfRegionA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfRegionB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionB may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RegionB"><summary>Region of interest in InputImageB that is used to operate over.  NULL means use entire InputImageB.  The RegionModeB property specifies exactly how the region will be applied to this image.</summary><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" /> to combine with the other image.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeB" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the entire image is used.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_RegionB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfRegionB" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RegionA"><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" /> to combine with the other image.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.RegionModeA" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the entire image is used.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_RegionA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfRegionA" /></li></ul></event><summary>Region of interest in InputImageA that is used to operate over.  NULL means use entire InputImageA.  The RegionModeA property specifies exactly how the region will be applied to this image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RunParams"><summary>Returns/sets the CogIPTwoImageMinMax parameters.</summary><remarks><PARA>Parameters used to combine the two images.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.OutputImage"><remarks><PARA>The result of combining <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" />.</PARA></remarks><summary>Returns the output image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_InputImageB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfInputImageB" /></li></ul></event><remarks><PARA>The second image to combine.</PARA></remarks><summary>Returns/sets the second input image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA"><remarks><PARA>The first image to combine.</PARA></remarks><summary>Returns/sets the first input image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_InputImageA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfInputImageA" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.CurrentRecordEnable"><remarks><PARA>
	Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
	of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants">InputImages</see> + 
  	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants">Regions</see> +	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants">AlignmentPoints</see>.
	</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfCurrentRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.LastRunRecordDiagEnable"><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants">InputImagesByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageMinMaxTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordConstants">CogIPTwoImageMinMaxLastRunRecordConstants</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.SfOutputImage" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Takes either the maximum or minimum pixel values in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" /> to create a new <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.OutputImage">output image</see> using the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RunParams" />.

You can supply values for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RegionA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.RegionB" /> to limit which parts of the two images are added.</PARA><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.Operation" /> specifies whether to use minimum or maximum values.

	<NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.InputImageB" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.RegionModeA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.RegionModeB" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.OutputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException" cgnxHRESULT="E_CogIP_NoRegionOverlap"><para>The regions do not overlap.</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract"><summary>Class that subtracts an image from another and produces a new image.  Specifically, InputImageB is subtracted from InputImageA to produce the new image.</summary><remarks><PARA>Primary interface for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract" /> object that subtracts two images. <paramref name="InputImageB" /> is subtracted from <paramref name="InputImageA" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.#ctor(Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfRegionModeA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionModeA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfRegionModeB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionModeB may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageAlignmentEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAlignmentEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageAAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageAAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageAAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageBAlignmentX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageBAlignmentX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageBAlignmentY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageBAlignmentY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfSpaceTreeMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SpaceTreeMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfMergedSpaceTreeName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MergedSpaceTreeName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfOverflowMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OverflowMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfOutputImageFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImageFormat may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.OutputImageFormat"><remarks><PARA>The pixel depth of the output image generated by subtracting the two input images.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractFormatConstants">DeepestOfInputImages</see></DEFAULT></remarks><summary>The pixel depth of the image to generate by the subtract operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractFormatConstants" />.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_OutputImageFormat--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfOutputImageFormat" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.OverflowMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  in <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants" />.</para></exception><remarks><PARA>Sets or gets the mode that specifies how to handle cases in which subtracting the two images results in values less than the minimum pixel value.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants">Bounded</see></DEFAULT></remarks><summary>The mode used to handle overflow conditions that can occur while performing the subtract operation.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_OverflowMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfOverflowMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.MergedSpaceTreeName"><remarks><PARA>Sets or gets the name of 
newly added <see cref="u:ImageProcessing.General.Theory.IPCoordinates" cgnxAnchor="twoimage_tools">intermediate node</see> 
of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> that is generated when the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SpaceTreeMode" /> specifies that coordinate space trees should be merged.
</PARA><DEFAULT>MergedSpaceTree</DEFAULT></remarks><summary>Specifies the name of the root node of the coordinate space tree that is generated if a merged SpaceTreeMode is selected.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_MergedSpaceTreeName--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfMergedSpaceTreeName" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SpaceTreeMode"><summary>The SpaceTreeMode specifies how the coordinate space tree of the OutputImage should be generated.</summary><remarks><PARA>Specifies how to generate the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of the output image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants">CopyA</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_SpaceTreeMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfSpaceTreeMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageBAlignmentY"><remarks><PARA>Specifies the y-coordinate in the second image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />)  used to align the images to be subtracted.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_ImageBAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageBAlignmentY" /></li></ul></event><summary>Specifies the Y coordinate on InputImageB used to align both images.  This coordinate is specified in the same selected space as InputImageB passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageBAlignmentX"><remarks><PARA>Specifies the x-coordinate in the second image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />) used to align the images to be subtracted.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />.</DEFAULT></remarks><summary>Specifies the X coordinate on InputImageB used to align both images.   This coordinate is specified in the same selected space as InputImageB passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_ImageBAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageBAlignmentX" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAAlignmentY"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_ImageAAlignmentY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageAAlignmentY" /></li></ul></event><remarks><PARA>Specifies the y-coordinate in the first image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />) used to align the images to be subtracted.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />.</DEFAULT></remarks><summary>Specifies the Y coordinate on InputImageA used to align both images.   This coordinate is specified in the same selected space as InputImageA passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAAlignmentX"><remarks><PARA>Specifies the x-coordinate in the first image (<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />) used to align the images to be subtracted.
This coordinate is specified in <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />'s <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA><PARA>Alignment coordinates are used only when <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAlignmentEnabled" /> is True.</PARA><DEFAULT>0.0 in selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_ImageAAlignmentX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageAAlignmentX" /></li></ul></event><summary>Specifies the X coordinate on InputImageA used to align both images.  This coordinate is specified in the same selected space as InputImageA passed to the Execute method.  It is only used when ImageAlignmentEnabled is true.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAlignmentEnabled"><remarks><PARA>Specifies whether the alignment coordinates should be used to align the first image with the second image.
If this property is False, the images are aligned on their upper left corners of their transformed regions.

If not enabled, <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract" /> uses the upper-left corner of the image or of the transformed region for alignment.</PARA><PARA>You can set the alignment coordinates with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAAlignmentX" />,
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageAAlignmentY" />,
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageBAlignmentX" />, and
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ImageBAlignmentY" />.
</PARA><DEFAULT>False</DEFAULT></remarks><summary>Specifies whether or not the alignment coordinates should be used to align the first image with the second image.  If not enabled, the upper-left corner of the image or transformed region image will be used for alignment.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_ImageAlignmentEnabled--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfImageAlignmentEnabled" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeB"><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_RegionModeB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfRegionModeB" /></li></ul></event><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RegionB" /> parameter should be interpreted for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><summary>The RegionModeB specifies how the region should be interpreted on InputImageB.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeA"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtract_RegionModeA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SfRegionModeA" /></li></ul></event><summary>The RegionModeA specifies how the region should be interpreted on InputImageA.</summary><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RegionA" /> parameter should be interpreted for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogRegion)"><param name="inputImageA"><PARA>The first image.</PARA></param><param name="inputImageB"><PARA>The image to subtract from <paramref name="inputImageA" />.</PARA></param><param name="regionA"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeA" />, specifies which part of <paramref name="inputImageA" /> to use.</PARA></param><param name="regionB"><PARA>A region that, together with <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeB" />, specifies which part of <paramref name="inputImageB" /> to use.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImageA" /> or <paramref name="inputImageB" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImageA" /> or <paramref name="inputImageB" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="RegionModeA" /> or <paramref name="RegionModeB" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <paramref name="OutputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException" cgnxHRESULT="E_CogIP_NoRegionOverlap"><para>The regions do not overlap.</para></exception><remarks><PARA>Generates a new image that is the result of subtracting the specified regions of the two input images. If the region parameter is Nothing, the entire image is used.</PARA></remarks><returns><PARA>The image generated by subtracting <paramref name="inputImageB" /> from <paramref name="inputImageA" /></PARA></returns><summary>Interface for subtracting an image from another.  InputImageB is subtracted from InputImageA.</summary></member><member name="E:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool" />.  This tool subtracts one image from another and generates a new output image.</PARA><NOTE>
	The output image's coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks><summary>Tool that subtracts InputImageB from InputImageA to produce a single output image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.#ctor(Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfInputImageA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfInputImageB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImageB may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfRegionA"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionA may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfRegionB"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionB may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RegionB"><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" /> to subtract from the other image.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeB" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the entire image is used.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_RegionB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfRegionB" /></li></ul></event><summary>Region of interest in InputImageB that is used to operate over.  NULL means use entire InputImageB.  The RegionModeB property specifies exactly how the region will be applied to this image.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RegionA"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_RegionA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfRegionA" /></li></ul></event><summary>Region of interest in InputImageA that is used to operate over.  NULL means use entire InputImageA.  The RegionModeA property specifies exactly how the region will be applied to this image.</summary><remarks><PARA>The region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" /> from which the other image is subtracted.
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeA" /> determines how the input region is used to control which pixels are considered and which are ignored. If no region is supplied, the entire image is used.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RunParams"><summary>Returns/sets the subtract parameters.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfRunParams" /></li></ul></event><remarks><PARA>Parameters used to subtract the two images.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.OutputImage"><summary>Returns the output image.</summary><remarks><PARA>The result of subtracting <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" /> from <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB"><summary>Returns/sets the second input image.</summary><remarks><PARA>The image to subtract from <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" />.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_InputImageB--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfInputImageB" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_InputImageA--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfInputImageA" /></li></ul></event><summary>Returns/sets the first input image.</summary><remarks><PARA>The first image.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.CurrentRecordEnable"><remarks><PARA>
	Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> 
	of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants" />.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants">InputImages</see> +
	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants">Regions</see> +
	<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants">AlignmentPoints</see>.
	</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfCurrentRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants" />. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants">InputImagesByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfLastRunRecordDiagEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogIPTwoImageSubtractTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable the <see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordConstants">OutputImage</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.Run"><remarks><PARA>Subtracts <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" /> from <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" /> to create a new <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.OutputImage">output image</see> using the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RunParams" />.

You can supply values for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RegionA" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RegionB" /> to limit which parts of the two images are subtracted.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.SfOutputImage" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.InputImageB" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of one of the regions is not a valid space of the corresponding input image.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeA" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.RegionModeB" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><exception cref="T:System.OutOfMemoryException" cgnxHRESULT="E_OUTOFMEMORY"><para>Could not allocate memory for <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.OutputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoRegionOverlapException" cgnxHRESULT="E_CogIP_NoRegionOverlap"><para>The regions do not overlap.</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageAverage"><remarks><PARA>Access to the run parameters as well as the methods for image average processing.</PARA></remarks><summary>Class containing image average processing run parameters.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.#ctor(Cognex.VisionPro.ImageProcessing.CogImageAverage)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfStandardDeviationEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StandardDeviationEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfNumImages"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumImages may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.NumImages"><remarks><PARA>The current number of images that have been used to calculate the average image. </PARA><DEFAULT>0</DEFAULT></remarks><summary>How many images have been accumulated.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.StandardDeviationEnabled"><remarks><PARA>Determines whether or not the tool calculates the standard deviation image in addition to the average image. Changing the value of this property will clear the current average image. </PARA><DEFAULT>FALSE</DEFAULT></remarks><summary>When true, the StandardDeviationImage may be computed after one or more calls to Add().</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageAverage.Changed" cgnxEvent="multiState"><para>
	
		Fires when this property changes.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfRegionMode" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfStandardDeviationEnabled" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfNumImages" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.RegionMode"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region mode is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception><remarks><PARA>How the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region">Region</see> is applied to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage">InputImage</see>.</PARA><PARA> If the Region is not specified (is Nothing), then the entire InputImage will be processed.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.cogRegionModeConstants">PixelAlignedBoundingBox</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageAverage.Changed" cgnxEvent="multiState"><para>
	
		Fires when this property changes.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfRegionMode" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfStandardDeviationEnabled" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfNumImages" /></li></ul></event><!--
I think it should be this instead.  -pb.

	<EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change">
		<ACTUAL_PARAMS>
			<ACTUAL_PARAM>
				<LINK ENUM="CogCopyRegionStateIDs">cogCopyRegion_RegionMode</LINK>
			</ACTUAL_PARAM>
			<ACTUAL_PARAM>NewValue</ACTUAL_PARAM>
		<ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM>
		</ACTUAL_PARAMS>
Fires when the value of this property changes. 
</EVENT>
--><summary>How the Region is applied to the InputImage.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.Add(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage">InputImage</see> to add to the average image and optional standard deviation image. </PARA></param><param name="region"><PARA>An optional <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverage" />. By default, the tool uses the entire <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage">InputImage</see>. </PARA></param><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageAverage.Changed" cgnxEvent="multiState"><para>
	
		Fires when this method executes.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfRegionMode" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfStandardDeviationEnabled" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfNumImages" /></li></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogIPRegionSizeMismatchException" cgnxHRESULT="E_CogIP_RegionSizeMismatch"><para>This is not the first call to <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverage" /> or the
		resulting number of pixels do not resolve to the same number of rows and columns as in previous calls to
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not syntactically valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> does not exist within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not unique within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> is not syntactically valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> does not exist within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> is not unique within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> falls completely outside of <paramref name="inputImage" />. Clipping is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> is not an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.RegionMode" /> is 
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> is an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> that is too close to the edge of <paramref name="inputImage" />.</para></exception><remarks><PARA>Adds the current <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage">InputImage</see> and optional <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region">Region</see> to the accumulator. If Region is Nothing then adds the entire image.  </PARA></remarks><summary>Accumulate data from the supplied image.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.Reset"><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageAverage.Changed" cgnxEvent="multiState"><para>
	
		Fires when this method executes.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfRegionMode" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfStandardDeviationEnabled" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverage.SfNumImages" /></li></ul></event><summary>Clear all internal data.</summary><remarks><PARA>Clear all internal data.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.ExecuteAverage"><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoDataAvailableToProcessException" cgnxHRESULT="E_CogIP_NoDataAvailableToProcess"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.NumImages" /> &lt; 1.</para></exception><returns><PARA>An <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.AverageImage">AverageImage</see>.</PARA></returns><summary>Compute average image.</summary><remarks><PARA>Calculate the average image. </PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverage.ExecuteStandardDeviation"><summary>Compute standard deviation image.</summary><remarks><PARA> Calculate an optional standard deviation image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoDataAvailableToProcessException" cgnxHRESULT="E_CogIP_NoDataAvailableToProcess"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.NumImages" /> &lt; 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.StandardDeviationEnabled" /> is False.</para></exception><returns><PARA>A <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.StandardDeviationImage">StandardDeviationImage</see>.</PARA></returns></member><member name="E:Cognex.VisionPro.ImageProcessing.CogImageAverage.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageAverageTool"><remarks><PARA>This tool will accumulate images in an internal buffer and output the average of these images and an optional standard deviation of these images.</PARA></remarks><summary>Tool which performs image averaging.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.#ctor(Cognex.VisionPro.ImageProcessing.CogImageAverageTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfAverageImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AverageImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfStandardDeviationImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StandardDeviationImage may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.StandardDeviationImage"><summary>The output standard deviation image.</summary><remarks><PARA>An optional standard deviation image. When only one image has been accumulated, this property will reference an appropriately sized image filled with zeros. On the second and subsequent run it will reference the CVL computed standard deviation image.</PARA><DEFAULT>NULL</DEFAULT></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para>A standard deviation  image is not available.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.AverageImage"><summary>The output average image.</summary><remarks><PARA>The average image as calculated by the tool.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para>An average image is not available.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.RunParams"><remarks><PARA>Run parameters for image average processing.</PARA><DEFAULT>A default constructed <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverage" /></DEFAULT></remarks><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverage" /> interface is not supported.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageAverageTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfRunParams" /></li></ul></event><summary>Run parameters for image average processing.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region"><summary>Which portion of the InputImage shall be processed. Setting this property will clear any accumulated data.</summary><remarks><PARA>The portion of the input image that will be added to the average image. Changing the region will clear the current average image. </PARA><DEFAULT>NULL</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageAverageTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfRegion" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage"><summary>The image to be processed.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageAverageTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfInputImage" /></li></ul></event><remarks><PARA>The image to be added to the average image. The tool uses the entire image is <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region">Region</see> is set to Nothing. </PARA><DEFAULT>NULL</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants">CurrentRecordConstants</see></PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants">InputImage</see> +  
<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants">Region</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageAverageTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants">LastRunRecordDiagConstants</see>.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageAverageTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfLastRunRecordDiagEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.LastRunRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants">LastRunRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants">AverageImage</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants">StandardDeviationImage</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageAverageTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Run"><remarks><PARA>Adds the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" /> to the accumulator and calculates a new <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.AverageImage" />.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIPNoDataAvailableToProcessException" cgnxHRESULT="E_CogIP_NoDataAvailableToProcess"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.NumImages" /> &lt; 1.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPRegionSizeMismatchException" cgnxHRESULT="E_CogIP_RegionSizeMismatch"><para>This is not the first call to <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageTool" /> or the
		resulting number of pixels do not resolve to the same number of rows and columns as in previous calls to
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageAverageTool" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" /> is not syntactically valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" /> does not exist within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" /> is not unique within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region" />  is not syntactically valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region" /> does not exist within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region" /> is not unique within its space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region" /> falls completely outside of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" />. Clipping is allowed.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="Region" /> is not an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverage.RegionMode" /> is 
<see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="Region" /> is an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> that is too close to the edge of <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.InputImage" />.</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpness"><remarks><PARA>Interface used for calculating <see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness">image sharpness</see>.</PARA></remarks><summary>Class containing image Sharpness processing run parameters.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.#ctor(Cognex.VisionPro.ImageProcessing.CogImageSharpness)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Mode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfAbsDiffDistanceX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AbsDiffDistanceX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfAbsDiffDistanceY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AbsDiffDistanceY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfBandPassMaxFrequency"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BandPassMaxFrequency may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfBandPassMinFrequency"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BandPassMinFrequency may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfAutoCorrelationNoiseLevel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AutoCorrelationNoiseLevel may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfGradientEnergyLowPassSmoothing"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GradientEnergyLowPassSmoothing may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.GradientEnergyLowPassSmoothing"><summary>Get or set the low pass smoothing for gradient energy mode. The image is processed using Gaussian smoothing before sharpness is measured. It is only used in GradientEnergy mode.</summary><remarks><PARA>
			If <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" /> is
			<see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.GradientEnergy" />,
			the image is processed using 
			<see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian.html">Gaussian smoothing</see>
			before measuring sharpness.
		</PARA><DEFAULT>0 (No smoothing)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.AutoCorrelationNoiseLevel"><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpness_AbsDiffDistanceY--><ul><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfAutoCorrelationNoiseLevel" /></ul></event><summary>Returns/Sets the noise level for autocorrelation mode.  This value represents the grey-level variation inherent in the sensor, and should be significantly smaller than the grey-level range observed in the image.  It is only used in autocorrelation mode.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is &lt; 0.</para></exception><remarks><PARA>Sets or gets the noise level for autocorrelation mode. This value represents the grey-level variation inherent in the sensor.
	 It should be significantly smaller than the grey-level range observed in the image. It is only used in autocorrelation
	 <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode">mode</see>.</PARA><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.BandPassMinFrequency"><remarks><PARA>
Sets or gets the minimum  
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="image_frequency">frequency</see> for band pass filtering mode. 
	Image frequency is expressed as the reciprocal of the feature size in pixels.
	</PARA><PARA>If this property is set to a value greater than 
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.BandPassMaxFrequency" />,
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.BandPassMaxFrequency" />  is adjusted 
	so that is equal to the value of this property.
	</PARA><DEFAULT>0.25</DEFAULT></remarks><summary>Returns/Sets the minimum frequency for band pass filtering mode.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpness_BandPassMinFrequency--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfBandPassMinFrequency" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfBandPassMaxFrequency" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is &lt; 0.0 or &gt; 0.5.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.BandPassMaxFrequency"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is &lt; 0.0 or &gt; 0.5.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpness_BandPassMaxFrequency--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfBandPassMaxFrequency" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfBandPassMinFrequency" /></li></ul></event><remarks><PARA>
Sets or gets the maximum 
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="image_frequency">frequency</see> for band pass filtering mode. 
	Image frequency is expressed as the reciprocal of the feature size in pixels.
	</PARA><PARA>If this property is set to a value less than 
		<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.BandPassMinFrequency" />,
		<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.BandPassMinFrequency" />
		 is adjusted 
	so that is equal to the value of this property.
	</PARA><DEFAULT>0.45</DEFAULT></remarks><summary>Returns/Sets the maximum frequency for band pass filtering mode.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.AbsDiffDistanceY"><summary>Returns/Sets the separation in the Y direction.</summary><remarks><PARA>
	Sets or gets the image offset in the y-direction.
	Applies only in 
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="how_the_image_sharpness_tool_works">absolute difference mode</see>.
</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpness_AbsDiffDistanceY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfAbsDiffDistanceY" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is &lt; 0.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.AbsDiffDistanceX"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is &lt; 0.</para></exception><summary>Returns/Sets the separation in the X direction.</summary><remarks><PARA>
	Sets or gets the image offset in the x-direction.
	Applies only  in 
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="how_the_image_sharpness_tool_works">absolute difference mode</see>.
</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpness_AbsDiffDistanceX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfAbsDiffDistanceX" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode"><remarks><PARA>Sets or gets the 
	<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants">operating mode</see> for the tool.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.BandPass" /></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpness_Mode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SfMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The mode is not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants" />.</para></exception><summary>Returns/Sets the mode in which to execute.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image of which to compute sharpness.</PARA></param><param name="region"><PARA>The region within <paramref name="inputImage" /> to compute sharpness.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" /> is 
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants">AutoCorrelation</see> and
		the height or width of <paramref name="inputImage" /> is less than 3 pixels.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" /> is 
		<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants">AbsDiff</see>  and
		<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.AbsDiffDistanceX" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.AbsDiffDistanceY" /> like outside of <paramref name="inputImage" />.
	</para></exception><remarks><PARA>Calculates the <see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness">sharpness</see> of 
	of the supplied <paramref name="inputImage" /> within the supplied <paramref name="region" />.
	</PARA><PARA>
		If <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" /> is
		<see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.GradientEnergy" />,
		the image is processed using 
		<see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian.html">Gaussian smoothing</see>
		before measuring sharpness.
	</PARA><PARA>
		The returned sharpness value is only valid with respect to other sharpness values computed using the current 
		<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" />
		and image content.
		You cannot compare sharpness  scores generated using different methods or images.
	</PARA></remarks><summary>Calculate the sharpness of the given image in the given region.</summary><returns><PARA>The returned sharpness.</PARA></returns></member><member name="E:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool"><remarks><PARA>Primary interface of a CogImageSharpnessTool.</PARA></remarks><summary>Tool for calculating image sharpness.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.#ctor(Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfScore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Score may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Score"><remarks><PARA>Returns the score from the last run of the tool. Scores generated using different input image 
	content or different 
			<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" />s
		are not comparable.</PARA><NOTE>
	The returned score will be incorrect if
		<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" />
		 is 
	<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants">BandPass</see>
		and the width and height 
	of the input image are not powers of two.
	</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoResultException" cgnxHRESULT="E_CogTool_NoResult"><para>The tool has not yet <see cref="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Run" />, or the last run of the tool failed.</para></exception><summary>Score returned by image Sharpness processing.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.RunParams"><summary>Run parameters for image Sharpness processing.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpnessTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfRunParams" /></li></ul></event><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpness" /> interface is not supported.</para></exception><remarks><PARA>
		An <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessParams" /> specifying the run-time parameters for the tool.
</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Region"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpnessTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfRegion" /></li></ul></event><remarks><PARA>
	The region of interest. The tool computes the sharpness score for the 
	specified region of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.InputImage" />.
	</PARA></remarks><summary>Which portion of the InputImage shall be processed. Setting this property will clear any accumulated data.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpnessTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfInputImage" /></li></ul></event><summary>The image to be processed.</summary><remarks><PARA>The image whose sharpness is measured.</PARA><PARA>Image sharpness scores are only meaningful when compared with other scores 
	generated using the same
		<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" />
	and 
	image content.</PARA><DEFAULT>A Null image.</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.CurrentRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpnessTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfCurrentRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants">cogImageSharpnessCurrentRecordInputImage</see> +
<see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants">cogImageSharpnessCurrentRecordRegion</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants">cogImageSharpnessLastRunRecordDiagInputImageByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpnessTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.LastRunRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordConstants">cogImageSharpnessLastRunRecordAll</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageSharpnessTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.SfLastRunRecordEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Run"><remarks><PARA>Runs the tool. The computed sharpness score is placed in the 
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Score" /> property.</PARA><PARA>
		If <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Mode" /> is
		<see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.GradientEnergy" />,
		the image is processed using 
		<see cref="u:ImageProcessing.GaussianFilter.Theory.Gaussian.html">Gaussian smoothing</see>
		before measuring sharpness.
	</PARA></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><summary>Runs the tool using the current parameter settings.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap"><summary>Class that unwraps an annular region of pixels into a destination image.</summary><remarks><PARA>Primary interface of the CogPolarUnwrap class.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.#ctor(Cognex.VisionPro.ImageProcessing.CogPolarUnwrap)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SfScalingX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingX may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SfScalingY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingY may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SfSamplingMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SamplingMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SamplingMode"><remarks><PARA>Specifies the <see cref="u:ImageProcessing.General.Theory.ImageTransformation" cgnxAnchor="sampling_methods">sampling mode</see> used 
	when performing the unwrap operation.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapSamplingModeConstants">BilinearInterpolation</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrap_SamplingMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SfSamplingMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The sampling mode is not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapSamplingModeConstants" />.</para></exception><summary>Specifies the sampling mode used when performing the unwrap operation.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.ScalingY"><summary>Specifies the scaling factor for the Y direction of the output image which corresponds to the radial direction.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrap_ScalingY--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SfScalingY" /></li></ul></event><remarks><PARA>Specifies the scaling factor for the Y 
	direction of the output image which corresponds to the radial direction.</PARA><PARA>
	The default scaling factor minimizes the distortion present in the output image.
	</PARA><DEFAULT>1.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt;= 0.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.ScalingX"><event cref="E:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrap_ScalingX--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SfScalingX" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt;= 0.</para></exception><remarks><PARA>Specifies the scaling factor for the X direction of the output 
	image which corresponds to the angular span direction.</PARA><PARA>
	The default scaling factor minimizes the distortion present in the output image.
	</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>Specifies the scaling factor for the X direction of the output image which corresponds to the angular span direction.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.GetInputPointFromOutputPoint(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,System.Double,System.Double,System.Double@,System.Double@)"><param name="inputImage"><PARA>The input image. Corresponds to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> property.</PARA></param><param name="annularRegion"><PARA>The input region. Corresponds to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> property.</PARA></param><param name="outputPointX"><PARA>The x-coordinate of the mapped point.</PARA></param><param name="outputPointY"><PARA>The y-coordinate of the mapped point.</PARA></param><param name="inputPointX"><PARA>The x-coordinate of the point to map.</PARA></param><param name="inputPointY"><PARA>The y-coordinate of the point to map.</PARA></param><summary>Maps a point in the root space of the output image to the corresponding point in the selected space of the input image.</summary><remarks><PARA>Maps a point in the root space of the output image to the corresponding point in the selected space of the input image.</PARA><PARA>
	This function maps the points based on the input parameters you supply to the function, not the parameters that 
	you used to configure the object. You can perform a mapping that corresponds to the current state of the object 
	by supplying the object properties as parameters to this function, as shown in the example.
	</PARA></remarks><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="inputPointX" /> or <paramref name="inputPointY" /> is  NULL.  (C++ only)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> is not an 8-bit image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapNullRegionException" cgnxHRESULT="E_CogIP_PolarUnwrapNullRegion"><para><paramref name="annularRegion" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapInvalidRegionException" cgnxHRESULT="E_CogIP_PolarUnwrapInvalidRegion"><para><paramref name="annularRegion" /> is neither a <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> nor a <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException" cgnxHRESULT="E_CogTransform_NotLinear"><para>The transform from the selected space of the <paramref name="annularRegion" /> to the pixel space of <paramref name="inputImage" /> is not linear.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapRegionClippedException" cgnxHRESULT="E_CogIP_PolarUnwrapRegionClipped"><para>Some of the sampling points require data that is outside the <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> does not exist within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not unique within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> does not exist within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> is not unique  within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingXOverflowException" cgnxHRESULT="E_CogIP_PolarUnwrapSamplingXOverflow"><para>The resulting number of samples in the x-direction is greater than 32767.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingYOverflowException" cgnxHRESULT="E_CogIP_PolarUnwrapSamplingYOverflow"><para>The resulting number of samples in the y-direction is greater than 32767.</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.ImageProcessing

Dim UnwrapTool As New CogPolarUnwrapTool

Dim xIn As Integer
Dim yIn As Integer
Dim xOut As Integer
Dim yOut As Integer

UnwrapTool.RunParams.GetInputPointFromOutputPoint (_
    UnwrapTool.InputImage, _
    UnwrapTool.Region, _
    xOut, yOut, _
    xIn, yIn)
</code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.ImageProcessing;

CogPolarUnwrapTool UnwrapTool = new CogPolarUnwrapTool();
int xIn, yIn, xOut, yOut;

UnwrapTool.RunParams.GetInputPointFromOutputPoint (UnwrapTool.InputImage,
    UnwrapTool.Region,
    xOut, yOut,
    out xIn, out yIn);
</code></example></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.GetOutputPointFromInputPoint(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion,System.Double,System.Double,System.Double@,System.Double@,System.Int32)"><param name="inputImage"><PARA>The input image. Corresponds to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> property.</PARA></param><param name="annularRegion"><PARA>The input region. Corresponds to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> property.</PARA></param><param name="inputPointX"><PARA>The x-coordinate of the point to map.</PARA></param><param name="inputPointY"><PARA>The y-coordinate of the point to map.</PARA></param><param name="outputPointX"><PARA>The x-coordinate of the mapped point.</PARA></param><param name="outputPointY"><PARA>The y-coordinate of the mapped point.</PARA></param><param name="revolution"><PARA>If you have specified an unwrap greater than one revolution, you must supply the 
	number of whole revolutions.</PARA></param><summary>Maps a point in the selected space of the input image to a point in the root space of the output image. Every input point maps to multiple output points. The output plane is periodical in the x direction. 'Revolution' indicates the period.</summary><remarks><PARA>Maps a point in the selected space of the input image to the corresponding point in the root space of the output image.</PARA><PARA>
	This function maps the points based on the input parameters you supply to the function, not the parameters that 
	you used to configure the object. You can perform a mapping that corresponds to the current state of the object 
	by supplying the object properties as parameters to this function, as shown in the example.
	</PARA><PARA>
If you specify a <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> greater than 
360°, then a possible ambiguity exists when mapping input points to output points. Specifically, a given 
point in the input annulus region might be mapped to two (or more)points in the output image. The 
<paramref name="revolution" /> parameter allows you to resolve this ambiguity, as shown in the following figure:
</PARA><PICTURE SRC="revolution9.jpg" apiSRC="GetOutputPointFromInputPoint_revolution9.jpg" /></remarks><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="outputPointX" /> or <paramref name="outputPointY" /> was NULL.  (C++ only)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapInvalidMapPointException" cgnxHRESULT="E_CogIP_PolarUnwrapInvalidMapPoint"><para>The <paramref name="InputPoint" /> is the center of the <paramref name="annularRegion" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> is not an 8-bit image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapNullRegionException" cgnxHRESULT="E_CogIP_PolarUnwrapNullRegion"><para><paramref name="annularRegion" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapInvalidRegionException" cgnxHRESULT="E_CogIP_PolarUnwrapInvalidRegion"><para><paramref name="annularRegion" /> is neither a <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> nor a <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException" cgnxHRESULT="E_CogTransform_NotLinear"><para>The transform from the selected space of the <paramref name="annularRegion" /> to the pixel space of <paramref name="inputImage" /> is not linear.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapRegionClippedException" cgnxHRESULT="E_CogIP_PolarUnwrapRegionClipped"><para>Some of the sampling points require data that is outside the <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> does not exist within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not unique within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> does not exist within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> is not unique  within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingXOverflowException" cgnxHRESULT="E_CogIP_PolarUnwrapSamplingXOverflow"><para>The resulting number of samples in the x-direction is greater than 32767.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingYOverflowException" cgnxHRESULT="E_CogIP_PolarUnwrapSamplingYOverflow"><para>The resulting number of samples in the y-direction is greater than 32767.</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.ImageProcessing

Dim UnwrapTool As New CogPolarUnwrapTool

Dim xIn As Integer
Dim yIn As Integer
Dim xOut As Integer
Dim yOut As Integer

UnwrapTool.RunParams.GetOutputPointFromInputPoint (_
    UnwrapTool.InputImage, _
    UnwrapTool.Region, _
    xIn, yIn, _
    xOut, yOut, 0)
</code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.ImageProcessing;

CogPolarUnwrapTool UnwrapTool = new CogPolarUnwrapTool();
int xIn, yIn, xOut, yOut;

UnwrapTool.RunParams.GetOutputPointFromInputPoint (UnwrapTool.InputImage,
    UnwrapTool.Region,
    xIn, yIn, 
    out xOut, out yOut,
    0);
</code></example></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The input image.</PARA></param><param name="annularRegion"><PARA>
	The input region.
	</PARA></param><returns><PARA>The transformed image.</PARA></returns><summary>Performs the polar unwrap operation.</summary><remarks><PARA>Transforms the supplied annular region of the supplied input image into a new rectangular image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> is not an 8-bit image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapNullRegionException" cgnxHRESULT="E_CogIP_PolarUnwrapNullRegion"><para><paramref name="annularRegion" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapInvalidRegionException" cgnxHRESULT="E_CogIP_PolarUnwrapInvalidRegion"><para><paramref name="annularRegion" /> is neither a <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> nor a <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException" cgnxHRESULT="E_CogTransform_NotLinear"><para>The transform from the selected space of the <paramref name="annularRegion" /> to the pixel space of <paramref name="inputImage" /> is not linear.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapRegionClippedException" cgnxHRESULT="E_CogIP_PolarUnwrapRegionClipped"><para>Some of the sampling points require data that is outside the <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> does not exist within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not unique within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> does not exist within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="annularRegion" /> is not unique  within <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingXOverflowException" cgnxHRESULT="E_CogIP_PolarUnwrapSamplingXOverflow"><para>The resulting number of samples in the x-direction is greater than 32767.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIPPolarUnwrapSamplingYOverflowException" cgnxHRESULT="E_CogIP_PolarUnwrapSamplingYOverflow"><para>The resulting number of samples in the y-direction is greater than 32767.</para></exception></member><member name="E:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool"><summary>Tool that unwraps an annular region of pixels into a rectangular destination image.</summary><remarks><PARA>Tool that unwraps the pixels within an annular region of an input image into a rectangular image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.#ctor(Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.OutputImage"><summary>The output image into which the region was unwrapped.</summary><remarks><PARA>The output image into which the region was unwrapped.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.RunParams"><remarks><PARA>A <see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap" /> containing the parameters for the unwrap operation.</PARA></remarks><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap" /> interface is not supported.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrapTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfRunParams" /></li></ul></event><summary>Run parameters for polar unwrap.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region"><remarks><PARA>A 
	<see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> 
	or 
	<see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /> 
	that specifies the region to be unwrapped.</PARA><PARA>
The tool unwraps the specified region of the input image so that the x-axis of the transformed 
image always corresponds to the angular direction of the region and the y-axis of the 
transformed image always corresponds to the radial direction of the region.
</PARA><PARA>
The values of the 
<see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" />
and 
<see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" /> 
properties determine the relationship between the x-axis and y-axis in the output image 
and increasing and decreasing radius and angle in the input region. as shown 
in this <see cref="u:ImageProcessing.PolarUnwrap.Theory.PolarUnwrap" cgnxAnchor="anglespan_and_radiusscale">table</see>.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrapTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfRegion" /></li></ul></event><summary>A CogCircularAnnulusSection or CogEllipticalAnnulusSection that specifies the region to be unwrapped.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region is neither a <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> nor a <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrapTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfInputImage" /></li></ul></event><summary>The image from which to read the pixels.</summary><remarks><PARA>The image whose pixels are unwrapped.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
<see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants">cogPolarUnwrapCurrentRecordInputImage </see> +
<see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants">Region</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrapTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrapTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfLastRunRecordDiagEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPolarUnwrapTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordConstants">OutputImage</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Run"><remarks><PARA>Unwraps the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> using the supplied 
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.RunParams" /> and placing the result in the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.OutputImage" />.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.SfOutputImage" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.RunParams" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> is not an 8-bit image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> is not allocated.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> is neither a <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> nor a <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException" cgnxHRESULT="E_CogTransform_NotLinear"><para>The transform from the selected space of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> to the pixel space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> is not linear.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para>Some of the sampling points require data that is outside the <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> does not exist within <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" /> is not unique within <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> does not exist within <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Region" /> is not unique  within <see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.InputImage" />'s space tree.</para></exception><summary>Runs the tool using the current parameter settings.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdge"><summary>Class containing Sobel Edge processing run parameters.</summary><remarks><PARA>Access to both the run parameters and an execute method for Sobel Edge processing.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.#ctor(Cognex.VisionPro.ImageProcessing.CogSobelEdge)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfMagnitudeScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MagnitudeScale may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfPostProcessMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PostProcessMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfPeakDetectThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PeakDetectThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HysteresisThresholdLow may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HysteresisThresholdHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisSurvivorPelValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HysteresisSurvivorPelValue may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisNonSurvivorPelValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HysteresisNonSurvivorPelValue may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisNonSurvivorPelValue"><remarks><PARA>When <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see>, a non-surviving pixel will be output as this grey level.
</PARA><PARA>
A pixel in the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage" /> will not survive if it is neither &gt;=  <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" />, nor &gt;= <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> and 8-connected to a surviving pixel.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_HysteresisNonSurvivorPelValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisNonSurvivorPelValue" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value was less than 0 or greater than 255.</para></exception><summary>When hysteresis thresholding, a non-surviving pel will be output as this grey level. A pel in the EdgeMagnitudeImage will not survive if it is neither &gt;= HysteresisThresholdHigh, nor &gt;= HysteresisThresholdLow and 8-connected to a surviving pel.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisSurvivorPelValue"><summary>When hysteresis thresholding, a surviving pel will be output as this grey level. A pel in the EdgeMagnitudeImage will survive if it is either &gt;= HysteresisThresholdHigh, or &gt;= HysteresisThresholdLow and 8-connected to a surviving pel.</summary><remarks><PARA>When <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see>, a surviving pixel will be output as this grey level.
</PARA><PARA>
A pixel in the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage" /> will survive if it is either &gt;= <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" />, or &gt;= <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" />
and 8-connected to a surviving pixel.</PARA><DEFAULT>255</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_HysteresisSurvivorPelValue--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisSurvivorPelValue" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value was less than 0 or greater than 255.</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh"><summary>If PostProcessMode is cogSobelEdgePostProcessModeHysteresisThreshold, then hysteresis thresholding will be run on the Sobel magnitude image using this as the magnitude level at or above which edges are never discarded.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The threshold was less than 0 or greater than 255.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_HysteresisThresholdHigh--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> changes as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_SobelEdge_HysteresisThresholds--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdHigh" /></li></ul></event><remarks><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode" /> is <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">HysteresisThreshold</see>, then <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see> will be run on the <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_magnitude_images">edge magnitude image</see> using this as the magnitude level at or above which edges are never discarded.</PARA><PARA>This property is coupled to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> property such that the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> value will never be less than the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" />  value. If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> is set to a value less than the current <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> value, then <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> will be decreased to this new value automatically.</PARA><DEFAULT>20</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow"><remarks><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode" /> is <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">HysteresisThreshold</see>, then <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see> will be run on the <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_magnitude_images">edge magnitude image</see> using this as the magnitude level below which edges are always discarded.</PARA><PARA>This property is coupled to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> property such that the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> value will never be greater than the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> value. If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> is set to a value that is greater than the current <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> value, then <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> will be increased to this new value automatically.</PARA><DEFAULT>10</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The threshold was less than 0 or greater than 255.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_HysteresisThresholdLow--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdLow" /></li></ul></event><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> changes as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_SobelEdge_HysteresisThresholds--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdHigh" /></li></ul></event><summary>If PostProcessMode is cogSobelEdgePostProcessModeHysteresisThreshold, then hysteresis thresholding will be run on the Sobel magnitude image using this as the magnitude level below which edges are always discarded.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PeakDetectThreshold"><summary>If PostProcessMode is cogSobelEdgePostProcessModePeakDetect, then whole-pixel peak detection will be run on the Sobel angle and magnitude images using this as the minimum Sobel magnitude. Edges with magnitude less than this will be discarded.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_PeakDetectThreshold--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfPeakDetectThreshold" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The threshold was less than 0 or greater than 255.</para></exception><remarks><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode" /> is <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">PeakDetect</see>, then <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="whole-pixel_peak_detection">whole-pixel peak detection</see> will be run on the Sobel angle and magnitude images using this as the minimum Sobel magnitude. Magnitude values less than this value will be discarded.</PARA><DEFAULT>20</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode"><summary>What, if any, post-processing to perform after Sobel.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The mode was not in <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants" />.</para></exception><remarks><PARA>The <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="postprocessing_operations">post-processing operation</see> to perform, if any.</PARA><PARA><TABLE><CAPTION>Effect of post-processing operations on the final magnitude image</CAPTION><HEADING><ROW><CELL><see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode" /></CELL><CELL><see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.FinalMagnitudeImage" /> is...</CELL></ROW></HEADING><BODY><ROW><CELL><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">None</see></CELL><CELL>... the same as the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage" /></CELL></ROW><ROW><CELL><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">PeakDetect</see></CELL><CELL>... the result of running <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="wholepixel_peak_detection">whole-pixel peak detection</see> on the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage" /></CELL></ROW><ROW><CELL><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">HysteresisThreshold</see></CELL><CELL>... the result of running <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see> on the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage" /></CELL></ROW></BODY></TABLE></PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">cogSobelEdgePostProcessNone</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_PostProcessMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfPostProcessMode" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.MagnitudeScale"><summary>Each magnitude image pixel value is set equal to the Sobel-computed grey value difference at the corresponding location multiplied by this scaling factor.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_MagnitudeScale--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfMagnitudeScale" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The scale was less than 0.</para></exception><remarks><PARA>Each <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_magnitude_images">edge magnitude</see> image pixel value is set equal to the Sobel-computed grey value difference at the corresponding location multiplied by this scaling factor.</PARA><PARA>A value of 0.89 guarantees no pixel value exceeds 255, the maximum grey value. Magnitude values greater than 255 are clipped. The valid range is 0.5 through 50.</PARA><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.RegionMode"><remarks><PARA>Specifies how <see cref="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)" />'s <paramref name="Region" /> parameter is interpreted.</PARA><PARA>If the region is not specified (is Nothing), then the entire image is processed regardless of this property.</PARA><PARA>If this property is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> and the region is an <see cref="T:Cognex.VisionPro.CogRectangleAffine" />, then the region is mapped into a pixel aligned rectangle and the result of that mapping is processed. Attempting to use this property value with any other shape region generates an error.</PARA><PARA>If this property is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>, then any shape region may be used.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see></DEFAULT></remarks><summary>How the Region is applied to the InputImage.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdge_RegionMode--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfRegionMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The region mode is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SetHysteresisThresholds(System.Int32,System.Int32)"><param name="hysteresisThresholdLow"><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode" /> is <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">HysteresisThreshold</see>, then <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see> will be run on the <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_magnitude_images">edge magnitude image</see> using this as the magnitude level below which edges are always discarded.</PARA></param><param name="hysteresisThresholdHigh"><PARA>If <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.PostProcessMode" /> is <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants">HysteresisThreshold</see>, then <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">hysteresis thresholding</see> will be run on the <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_magnitude_images">edge magnitude image</see> using this as the magnitude level at or above which edges are never discarded.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>One of the  threshold values was less than 0 or greater than 255.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="HysteresisThreholdHigh" /> is less than  <paramref name="hysteresisThresholdLow" />.</para></exception><event cref="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed" cgnxEvent="multiState"><para>
		
Fires when the values of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> or <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> change. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_SobelEdge_HysteresisThresholds--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdLow" /></li><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdge.SfHysteresisThresholdHigh" /></li></ul></event><summary>Set the HysteresisThresholdLow and HysteresisThresholdHigh to the values supplied.</summary><remarks><PARA>Set the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdLow" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.HysteresisThresholdHigh" /> to the values supplied.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage">InputImage</see> to analyze.</PARA></param><param name="region"><PARA>An optional <see cref="T:Cognex.VisionPro.CogRegion" />. If supplied, only the pixels which lie within this region (subject to the value of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.RegionMode" />) will be analyzed.</PARA></param><summary>Perform Sobel edge detection on the specified region of the input image. Optionally post-process the Sobel angle and/or magnitude images. Resulting images are contained in the output Result object.</summary><returns><PARA>An <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult" /> containing the results of the analysis.</PARA></returns><remarks><PARA>Perform Sobel edge detection on the specified <paramref name="region" /> of the <paramref name="inputImage" />, creating a <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult" /> object that contains the output images. Optionally post-process the Sobel angle and edge magnitude images.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" />  is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of the <paramref name="inputImage" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> does not exist in the <paramref name="inputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <paramref name="inputImage" /> is not unique within the <paramref name="inputImage" />'s space tree</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <paramref name="region" /> is not a valid space of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> is a nonqualified space name and more than one instance of it exists in the space tree of <paramref name="inputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <paramref name="region" /> is not a legal space name. </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="region" /> falls  completely outside of <paramref name="inputImage" />.  Clipping of <paramref name="region" /> is allowed.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="region" /> is some region other than an
  <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> and the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.RegionMode" /> is
  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>.</para></exception></member><member name="E:Cognex.VisionPro.ImageProcessing.CogSobelEdge.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult"><summary>Class containing a Sobel Edge result.</summary><remarks><PARA>Access to Sobel Edge processing output.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.#ctor(Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.FinalMagnitudeImage"><remarks><PARA>If <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="post-processing_operations">post-processing</see> was performed, this is the result. If no post-processing was performed, then this is the same as <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage" />.</PARA></remarks><summary>If post-processing was performed, this is the result. If no post-processing was performed, then this is the same as EdgeMagnitudeImage.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeMagnitudeImage"><summary>The magnitude image generated by Sobel processing.</summary><remarks><PARA>The <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_magnitude_images">edge magnitude image</see> generated by Sobel processing.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.EdgeAngleImage"><remarks><PARA>The <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_angle_images">edge angle image</see> generated by Sobel processing.</PARA></remarks><summary>The angle image generated by Sobel processing.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool"><remarks><PARA>Tool which performs Sobel edge detection, optionally followed by either <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="wholepixel_peak_detection">whole-pixel peak detection</see> or <see cref="u:ImageProcessing.SobelEdge.Theory.SobelEdge" cgnxAnchor="edge_hysteresis_thresholding">edge hysteresis thresholding</see> post-processing.</PARA><NOTE>
	The output image's coordinate space tree is <see cref="u:ImageProcessing.General.Theory.IPCoordinates">adjusted</see> to preserve the relationship between root space and image features.
	</NOTE></remarks><summary>Tool which performs Sobel edge detection, optionally followed by either whole-pixel peak detection or hysteresis thresholding post-processing.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.#ctor(Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Result"><remarks><PARA>The output from processing the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region">input region</see>.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>The output from processing the input ROI.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.RunParams"><summary>Run parameters for Sobel Edge processing.</summary><exception cref="T:System.InvalidCastException" cgnxHRESULT="E_NOINTERFACE"><para>The <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdge" /> interface is not supported.</para></exception><remarks><PARA>Run parameters for Sobel Edge processing.</PARA><NOTE>Setting this property to NULL does not cause an error, however, an error will occur if the <see cref="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Run" /> method is called and this property is NULL.</NOTE><DEFAULT>A default constructed <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdge" /></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdgeTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfRunParams" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdgeTool_Region--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfRegion" /></li></ul></event><remarks><PARA>Which portion of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage">InputImage</see> shall be processed. The <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdge" />.<see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.RegionMode">RegionMode</see> property specifies exactly how the region will be applied to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage">InputImage</see>.</PARA><DEFAULT>A default constructed <see cref="T:Cognex.VisionPro.CogRectangleAffine" /></DEFAULT></remarks><summary>Which portion of the InputImage shall be processed. The ICogSobelEdgeParams::RegionMode property specifies exactly how the ROI will be applied to the InputImage.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdgeTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfInputImage" /></li></ul></event><remarks><PARA>The image to be processed.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>The image to be processed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.CurrentRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants">CurrentRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants">InputImage</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants">Region</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdgeTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants">LastRunRecordDiagConstants</see>. These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdgeTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogSobelEdgeTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants">LastRunRecordConstants</see>.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants">EdgeAngleImage</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants">EdgeMagnitudeImage</see> + <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants">FinalMagnitudeImage</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.SfResult" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>Performs Sobel Edge processing on the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" /> using the supplied <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.RunParams" />. You can specify that analysis be limited to part of the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" /> by supplying a value for the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> property.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool" />  is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.RunParams" /> is NULL</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of the <paramref name="InputImage" /> is not a valid name.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" /> does not exist in the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" />'s space tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" /> is not unique within the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" />'s space tree</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> is not a valid space of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> is a nonqualified space name and more than one instance of it exists in the space tree of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space name of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> is not a legal space name. </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> falls  completely outside of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.InputImage" />.  Clipping of <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> is allowed.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Region" /> is some region other than an
  <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> and the <see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdge.RegionMode" /> is
  <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see>.</para></exception></member><member name="M:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams"><summary>This class encapsulates the run time parameters used by the CogImageConvertTool::Run method.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfRunMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the RunMode property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfSharePelsIfPossible"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the SharePelsIfPossible property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfColorFromBayerRedScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the ColorFromBayerRedScale property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfColorFromBayerGreenScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the ColorFromBayerGreenScale property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfColorFromBayerBlueScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the ColorFromBayerBlueScale property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfIntensityFromBayerRedWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the IntensityFromBayerRedWeight property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfIntensityFromBayerGreenWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the IntensityFromBayerGreenWeight property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfIntensityFromBayerBlueWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the IntensityFromBayerBlueWeight property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfIntensityFromWeightedRGBRedWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the WeightedRGBRedWeight property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfIntensityFromWeightedRGBGreenWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the WeightedRGBGreenWeight property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfIntensityFromWeightedRGBBlueWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the WeightedRGBBlueWeight property may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SfBayerType"><summary>This bit will be set in the EventArgs of a Changed event every time the value of the BayerType property may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.BayerType"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Gets or sets the expected Bayer image type.</summary><value>The Bayer image type.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.IntensityFromWeightedRGBBlueWeight"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Output greyscale value is nominally computed blue times this weighting factor plus nominally computed green times IntensityFromWeightedRGBGreenWeight plus nominally computed red times IntensityFromWeightedRGBRedWeight.</summary><value>This read/write property can be any floating point number.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.IntensityFromWeightedRGBGreenWeight"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Output greyscale value is nominally computed green times this weighting factor plus nominally computed red times IntensityFromWeightedRGBRedWeight plus nominally computed blue times IntensityFromWeightedRGBBlueWeight.</summary><value>This read/write property can be any floating point number.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.IntensityFromWeightedRGBRedWeight"><value>This read/write property can be any floating point number.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Output greyscale value is nominally computed red times this weighting factor plus nominally computed green times IntensityFromWeightedRGBGreenWeight plus nominally computed blue times IntensityFromWeightedRGBBlueWeight.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.IntensityFromBayerBlueWeight"><value>This read/write property must be greater than or equal to zero. Note that this property plus IntensityFromBayerRedWeight plus IntensityFromBayerGreenWeight must add up to exactly 1.0.</value><summary>Output greyscale value is nominally computed blue times this weighting factor plus nominally computed red times IntensityFromBayerRedWeight plus nominally computed green times IntensityFromBayerGreenWeight.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero.</exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.IntensityFromBayerGreenWeight"><value>This read/write property must be greater than or equal to zero. Note that this property plus IntensityFromBayerRedWeight plus IntensityFromBayerBlueWeight must add up to exactly 1.0.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero.</exception><summary>Output greyscale value is nominally computed green times this weighting factor plus nominally computed red times IntensityFromBayerRedWeight plus nominally computed blue times IntensityFromBayerBlueWeight.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.IntensityFromBayerRedWeight"><summary>Output greyscale value is nominally computed red times this weighting factor plus nominally computed green times IntensityFromBayerGreenWeight plus nominally computed blue times IntensityFromBayerBlueWeight.</summary><value>This read/write property must be greater than or equal to zero. Note that this property plus IntensityFromBayerGreenWeight plus IntensityFromBayerBlueWeight must add up to exactly 1.0.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero.</exception></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.ColorFromBayerBlueScale"><summary>Nominally computed blue value is multiplied by this scaling factor to produce the output blue value.</summary><value>The scaling factor by which to  multiply the nominally computed blue value. Must be greater than zero.</value><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than or equal to zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.ColorFromBayerGreenScale"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The scaling factor by which to  multiply the nominally computed green value. Must be greater than zero.</value><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than or equal to zero.</exception><summary>Nominally computed green value is multiplied by this scaling factor to produce the output green value.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.ColorFromBayerRedScale"><value>The scaling factor by which to  multiply the nominally computed red value. Must be greater than zero.</value><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than or equal to zero.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Nominally computed red value is multiplied by this scaling factor to produce the output red value.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.SharePelsIfPossible"><summary>Gets or sets whether to try to produce an output image that shares pixels with the input image.</summary><value>Whether to try to produce an output image that shares pixels with the input image.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><remarks><para>Setting this property to True is only a hint. Under many circumstances it may 
			not be possible to produce an output image that shares pixels 
	   		with the input image, such as when a region is specified.</para></remarks></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertRunParams.RunMode"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>How to convert the input image.</value><summary>Gets or sets how to convert the input image.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageConvertTool"><summary>Tool that converts images, mainly from certain color formats to certain non-color formats.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Region may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.OutputImage"><summary>The converted image. This is the result from the last invocation of the Run method.</summary><value>This read-only property is of type ICogImage.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.RunParams"><value>This read/write property of type CogImageConvertRunParams may not be NULL.</value><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageConvertTool">Fires when this property changes.</event><exception cref="T:System.ArgumentNullException">If you attempt to set this property to NULL.</exception><summary>The run parameters for this ImageConvert tool.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.Region"><value>This read/write property is of type ICogRegion.</value><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageConvertTool">Fires when this property changes.</event><summary>Specifies the region of the InputImage that will be processed.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.InputImage"><summary>The image used to be processed. The Region property can be used to specify that this processing will be performed only on a portion of the InputImage. Processing is performed on the entire InputImage if Region is Nothing.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageConvertTool">Fires when this property changes.</event><value>This read/write property is of type ICogImage.</value></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate CogImageConvertLastRunRecordDiagConstants.</summary><value>This read/write property is a bitwise combination of CogImageConvertLastRunRecordDiagConstants. Options include None, InputImageByReference, InputImageDeepCopy, Region, All.</value><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageConvertTool">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CogImageConvertLastRunRecordConstants.</summary><value>This read/write property is a bitwise combination of CogImageConvertLastRunRecordConstants. Options include None, All.</value><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageConvertTool">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ImageProcessing.CogImageConvertTool.CurrentRecordEnable"><value>This read/write property is a bitwise combination of CogImageConvertCurrentRecordConstants. Options include None, InputImage, Region, All.</value><summary>Enable creation of records by bitwise ORing the appropriate CogImageConvertCurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ImageProcessing.CogImageConvertTool">Fires when this property changes.</event></member><member name="T:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams"><remarks><PARA>Common interface for all one-image operator parameters.</PARA></remarks><summary>Common interface for all one image operator parameters.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams.OperatorName"><remarks><PARA>Sets or gets the operator name as a string.</PARA></remarks><summary>Returns/sets a displayable operator name.</summary></member><member name="P:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperatorParams.Enabled"><remarks><PARA>Sets or gets whether this one-image operator will be used to compute the output image when used in a <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool" />.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Whether this one image operator will be used to compute the output image.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperator"><remarks><PARA>Common interface for all one-image operators.</PARA><PARA><see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperator" /> is the default interface for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize" /> and
<see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3" />.</PARA></remarks><summary>Common interface for all one image operators.</summary></member><member name="M:Cognex.VisionPro.ImageProcessing.ICogIPOneImageOperator.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRegionModeConstants,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image to which the operator is applied.</PARA></param><param name="regionMode"><PARA>Specifies how the region should be applied to the input image.</PARA></param><param name="region"><PARA>A region that, together with the <paramref name="regionMode" />, specifies which part of the image
the operator applies to.</PARA></param><returns><PARA>The image that results from applying this operator to the <paramref name="inputImage" /></PARA></returns><summary>Perform a single image operation using the input image and region to produce the output image.</summary><remarks><PARA>Performs a one-image operation using the input image and the region to produce the output image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="regionMode" /> is <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> but 
<paramref name="region" /> is not of type <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="regionMode" /> is not <see cref="T:Cognex.VisionPro.CogRegionModeConstants">AffineTransform</see> or <see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
	</para></exception></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPOneImage Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiponeimagetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants.Region"><remarks><PARA>Include the (interactive) region to be used for image processing in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) region to be used for image processing in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPOneImage Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiponeimagetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordConstants.OutputImage"><remarks><PARA>Include the OutputImage in the LastRunRecord.</PARA></remarks><summary>Include the OutputImage in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPOneImage Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiponeimagetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.Region"><remarks><PARA>Include the region used for image processing in the LastRunRecord.</PARA></remarks><summary>Include the region used for image processing in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.TransformedRegionImage"><summary>Generate a record containing the pixels within the Region of the InputImage.</summary><remarks><PARA>Generate a record containing the pixels within the Region of the InputImage.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.IntermediateImages"><remarks><PARA>Include the intermediate images from multiple operations in the LastRunRecord.</PARA></remarks><summary>Include the intermediate images from multiple operations in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantImageFormatConstants"><remarks><PARA>Enumeration of the pixel depths for <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant" /> addition and subtraction operation and result images.</PARA></remarks><summary>Enumeration of the pixel depths for image that is generated by the add/subtract operation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantImageFormatConstants.Format8Grey"><remarks><PARA>Image is an <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantImageFormatConstants.SameAsInputImage"><remarks><PARA>The image is the same format as the input image.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantOverflowModeConstants"><remarks><PARA>Enumeration of <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant" /> overflow modes.</PARA></remarks><summary>Enumeration of single image pixel addition and subtraction overflow modes.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantOverflowModeConstants.Wrap"><summary>Wrap pixel values that exceed the lowest and highest values that can be represented by the OutputImageFormat type.</summary><remarks><PARA>Wrap pixel values that overflow due to the operation performed.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstantOverflowModeConstants.Bounded"><remarks><PARA>Clamp pixel values to minimum and maximum values.  For <see cref="T:Cognex.VisionPro.CogImage8Grey" />, this is 0 and 255, respectively.</PARA></remarks><summary>Clamp pixel values to lowest and highest values that can be represented by the OutputImageFormat type.  For 8 bit unsigned images, this is 0 and 255, respectively.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants"><summary>Enumeration of the number of quantization levels for CogIPOneImageQuantize objects.</summary><remarks><PARA>Enumeration of the number of quantization levels for CogIPOneImageQuantize objects.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s2"><summary>Partition the pixel values into 2 grey levels.</summary><remarks><PARA>Partition the pixel values into 2 grey levels.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s128"><remarks><PARA>Partition the pixel values into 128 grey levels.</PARA></remarks><summary>Partition the pixel values into 128 grey levels.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s64"><remarks><PARA>Partition the pixel values into 64 grey levels.</PARA></remarks><summary>Partition the pixel values into 64 grey levels.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s32"><summary>Partition the pixel values into 32 grey levels.</summary><remarks><PARA>Partition the pixel values into 32 grey levels.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s16"><remarks><PARA>Partition the pixel values into 16 grey levels.</PARA></remarks><summary>Partition the pixel values into 16 grey levels.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s8"><remarks><PARA>Partition the pixel values into 8 grey levels.</PARA></remarks><summary>Partition the pixel values into 8 grey levels.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantizeLevelConstants.s4"><summary>Partition the pixel values into 4 grey levels.</summary><remarks><PARA>Partition the pixel values into 4 grey levels.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSamplerImageFormatConstants"><summary>Enumeration of image depths use to specify the Gaussian output image.</summary><remarks><PARA>Enumeration that specifies the pixel depth of the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler" /> output image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSamplerImageFormatConstants.Format8Grey"><remarks><PARA>Image is an <see cref="T:Cognex.VisionPro.CogImage8Grey" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSamplerImageFormatConstants.SameAsInputImage"><remarks><PARA>The image is the same format as the input image.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterImageFormatConstants"><summary>Enumeration of image depths use to specify the high pass sampled output image.</summary><remarks><PARA>Enumeration of image depths use to specify the high pass sampled output image.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterProcessingModeConstants"><summary>Enumeration of high pass filter processing modes.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterProcessingModeConstants.Median"><summary>Smooth the input via Median filtering, then subtract that from the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterProcessingModeConstants.Mean"><summary>Smooth the input via Mean filtering, then subtract that from the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilterProcessingModeConstants.Gauss"><summary>Perform Gauss smoothing on the input image, then subtract that from the input image.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants"><remarks><PARA>Enumeration of morphology element types. You can specify these with <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element" />.<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.Type" />.</PARA></remarks><summary>Enumeration of morphology element types.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.TypeCustom"><remarks><PARA>Specifies a custom structuring element.  Use <see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.SetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants,System.Int32)" /> and the <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.MemberMask" /> property to describe the element.</PARA></remarks><summary>Specifies a custom structuring element.  Use the MemberValue and MemberMask Parameters to structure this 3x3 element.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.Type1x3Line135Deg"><remarks><PARA>Specifies a 1x3 diagonal line structuring element that is angled downward
with signed offsets (<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" />) set to zero.
</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="sLine1x3_135.gif" apiSRC="cogIPOneImageMorphology3x3ElementType1x3Line135Deg_sLine1x3_135.gif" /></PARA></remarks><summary>Specifies a 1x3 diagonal line structuring element that runs from the upper-left to the lower-right corner with signed offsets (MemberValue) of zero.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.Type1x3Line90Deg"><summary>Specifies a 1x3 vertical line structuring element with signed offsets (MemberValue) of zero.</summary><remarks><PARA>Specifies a 1x3 vertical line structuring element
with signed offsets (<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" />) set to zero.
.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="sLine1x3_90.gif" apiSRC="cogIPOneImageMorphology3x3ElementType1x3Line90Deg_sLine1x3_90.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.Type1x3Line45Deg"><summary>Specifies a 1x3 diagonal line structuring element that runs from the upper-right to the lower-left corner with signed offsets (MemberValue) of zero.</summary><remarks><PARA>Specifies a 1x3 diagonal line structuring element that is angled upward
with signed offsets (<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" />) set to zero.
</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="sLine1x3_45.gif" apiSRC="cogIPOneImageMorphology3x3ElementType1x3Line45Deg_sLine1x3_45.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.Type1x3Line0Deg"><remarks><PARA>Specifies a 1x3 horizontal line structuring element
with signed offsets (<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" />) set to zero.
</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="sLine1x3_0.gif" apiSRC="cogIPOneImageMorphology3x3ElementType1x3Line0Deg_sLine1x3_0.gif" /></PARA></remarks><summary>Specifies a 1x3 horizontal line structuring element with signed offsets (MemberValue)  of zero.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.Type3x3Diamond"><summary>Specifies a 3x3 diamond (cross) structuring element with signed offsets (MemberValue) of zero.</summary><remarks><PARA>Specifies a 3x3 diamond (cross) structuring element
with signed offsets (<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" />) set to zero.
.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="sDiamond3x3.gif" apiSRC="cogIPOneImageMorphology3x3ElementType3x3Diamond_sDiamond3x3.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphology3x3ElementTypeConstants.Type3x3Square"><remarks><PARA>Specifies a 3x3 square structuring element
with signed offsets (<see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" />) set to zero.
</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="sSquare3x3.gif" apiSRC="cogIPOneImageMorphology3x3ElementType3x3Square_sSquare3x3.gif" /></PARA></remarks><summary>Specifies a 3x3 square structuring element with signed offsets (MemberValue) of zero.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants"><summary>Enumeration of morphology matrix positions.</summary><remarks><PARA>Enumeration of morphology matrix positions. These values are used by the <see cref="M:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.GetMemberValue(Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants)" /> and <see cref="P:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.MemberMask" /> properties to specify  custom structuring elements. </PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.N"><summary>Specifies the upper-center cell of the 3x3 matrix.</summary><remarks><PARA>Specifies the upper-center cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posN.gif" apiSRC="cogIPOneImageMorphologyPositionN_posN.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.Center"><remarks><PARA>Specifies the center cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posCtr.gif" apiSRC="cogIPOneImageMorphologyPositionCenter_posCtr.gif" /></PARA></remarks><summary>Specifies the center cell of the 3x3 matrix.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.E"><remarks><PARA>Specifies the middle-right cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posE.gif" apiSRC="cogIPOneImageMorphologyPositionE_posE.gif" /></PARA></remarks><summary>Specifies the middle-right cell of the 3x3 matrix.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.SE"><summary>Specifies the lower-right cell of the 3x3 matrix.</summary><remarks><PARA>Specifies the lower-right cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posSE.gif" apiSRC="cogIPOneImageMorphologyPositionSE_posSE.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.S"><summary>Specifies the lower-center cell of the 3x3 matrix.</summary><remarks><PARA>Specifies the lower-center cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posS.gif" apiSRC="cogIPOneImageMorphologyPositionS_posS.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.SW"><summary>Specifies the lower-left cell of the 3x3 matrix.</summary><remarks><PARA>Specifies the lower-left cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posSW.gif" apiSRC="cogIPOneImageMorphologyPositionSW_posSW.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.W"><summary>Specifies the middle-left cell of the 3x3 matrix.</summary><remarks><PARA>Specifies the middle-left cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posW.gif" apiSRC="cogIPOneImageMorphologyPositionW_posW.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.NW"><summary>Specifies the upper-left cell of the 3x3 matrix.</summary><remarks><PARA>Specifies the upper-left cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posNW.gif" apiSRC="cogIPOneImageMorphologyPositionNW_posNW.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyPositionConstants.NE"><remarks><PARA>Specifies the upper-right cell of the 3x3 matrix.</PARA><PARA><PICTURE HEIGHT="89" WIDTH="89" SRC="posNE.gif" apiSRC="cogIPOneImageMorphologyPositionNE_posNE.gif" /></PARA></remarks><summary>Specifies the upper-right cell of the 3x3 matrix.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants"><summary>Enumeration of morphology operations.</summary><remarks><PARA>Enumeration of morphology operations used by <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology" />.</PARA><PARA>To learn more about morphology operations, see <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="dilation_and_erosion">Dilation and Erosion</see> and <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology" cgnxAnchor="opening_and_closing">Opening and Closing</see> in the <see cref="u:ImageProcessing.Morphology.Theory.GreyScaleMorphology">Grey-Scale Morphology</see> theory topic.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.Close"><summary>Dilation followed by an erosion with the same structuring element; this eliminates small dark holes and gaps in light objects, and smoothes edges while preserving image details.</summary><remarks><PARA>Dilation followed by an erosion with the same structuring element. This operation eliminates small dark holes and gaps in light objects, and smoothes edges while preserving image details.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.Dilate"><summary>Morphological operation that expands light areas and shrinks dark areas in an image.</summary><remarks><PARA>Morphological operation that expands light areas and shrinks dark areas in an image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.Erode"><summary>Morphological operation that shrinks light areas and expands dark areas in an image.</summary><remarks><PARA>Morphological operation that shrinks light areas and expands dark areas in an image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.OriginalMinusOpen"><summary>Subtracts the image produced by the 'open' operation from the original image.</summary><remarks><PARA>Subtracts the image produced by the 'open' operation from the original image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.CloseMinusOriginal"><remarks><PARA>Subtracts the original image from the image produced by the 'close' operation.</PARA></remarks><summary>Subtracts the original image from the image produced by the 'close' operation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.DilateMinusErode"><remarks><PARA>Subtracts the image produced by the 'erode' operation from the image produced the 'dilate' operation.</PARA></remarks><summary>Subtracts the image produced by the 'erode' operation from the image produced the 'dilate' operation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMorphologyOperationConstants.Open"><remarks><PARA>Erosion followed by a dilation with the same structuring element. This operation eliminates extraneous light details, thin lines, and small islands. It smoothes object contours and maintains dark holes or narrow channels.</PARA></remarks><summary>Erosion followed by a dilation with the same structuring element; this eliminates extraneous light details, thin lines, and small islands. It smoothes object contours and maintains dark holes or narrow channels.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants"><remarks><PARA>Enumeration of flip/rotate operation values for the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate" /> operator.</PARA></remarks><summary>Enumeration of flip/rotate operation values.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.Flip"><remarks><PARA>Flip the image horizontally.  Do not apply image rotation.</PARA><PARA><PICTURE WIDTH="56" HEIGHT="70" SRC="cogIPOneImageFlipRotateOperationFlip.gif" apiSRC="cogIPOneImageFlipRotateOperationFlip_cogIPOneImageFlipRotateOperationFlip.gif" /></PARA></remarks><summary>Flip the image horizontally.  Do not apply image rotation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.FlipAndRotate270Deg"><remarks><PARA>Flip the image horizontally and then rotate the image pixels clockwise 270 degrees.</PARA><PARA><PICTURE WIDTH="70" HEIGHT="56" SRC="cogIPOneImageFlipRotateOperationFlipAndRotate270Deg.gif" apiSRC="cogIPOneImageFlipRotateOperationFlipAndRotate270Deg_cogIPOneImageFlipRotateOperationFlipAndRotate270Deg.gif" /></PARA></remarks><summary>Flip the image horizontally and then rotate the image pixels clockwise 270 degrees.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.FlipAndRotate180Deg"><remarks><PARA>Flip the image horizontally and then rotate the image pixels clockwise 180 degrees.  This is the same as flipping the original image vertically.</PARA><PARA><PICTURE WIDTH="56" HEIGHT="70" SRC="cogIPOneImageFlipRotateOperationFlipAndRotate180Deg.gif" apiSRC="cogIPOneImageFlipRotateOperationFlipAndRotate180Deg_cogIPOneImageFlipRotateOperationFlipAndRotate180Deg.gif" /></PARA></remarks><summary>Flip the image horizontally and then rotate the image pixels clockwise 180 degrees.  This is the same as flipping the original image vertically.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.FlipAndRotate90Deg"><remarks><PARA>Flip the image horizontally and then rotate the image pixels clockwise 90 degrees.</PARA><PARA><PICTURE WIDTH="70" HEIGHT="56" SRC="cogIPOneImageFlipRotateOperationFlipAndRotate90Deg.gif" apiSRC="cogIPOneImageFlipRotateOperationFlipAndRotate90Deg_cogIPOneImageFlipRotateOperationFlipAndRotate90Deg.gif" /></PARA></remarks><summary>Flip the image horizontally and then rotate the image pixels clockwise 90 degrees.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.Rotate270Deg"><remarks><PARA>Rotate the image pixels clockwise 270 degrees, but do not flip the image.</PARA><PARA><PICTURE WIDTH="70" HEIGHT="56" SRC="cogIPOneImageFlipRotateOperationRotate270Deg.gif" apiSRC="cogIPOneImageFlipRotateOperationRotate270Deg_cogIPOneImageFlipRotateOperationRotate270Deg.gif" /></PARA></remarks><summary>Do not flip, but rotate the image pixels clockwise 270 degrees.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.Rotate180Deg"><remarks><PARA>Rotate the image pixels clockwise 180 degrees, but do not flip the image.</PARA><PARA><PICTURE WIDTH="56" HEIGHT="70" SRC="cogIPOneImageFlipRotateOperationRotate180Deg.gif" apiSRC="cogIPOneImageFlipRotateOperationRotate180Deg_cogIPOneImageFlipRotateOperationRotate180Deg.gif" /></PARA></remarks><summary>Do not flip, but rotate the image pixels clockwise 180 degrees.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.Rotate90Deg"><summary>Do not flip, but rotate the image pixels clockwise 90 degrees.</summary><remarks><PARA>Rotate the image pixels clockwise 90 degrees, but do not flip the image.</PARA><PARA><PICTURE WIDTH="70" HEIGHT="56" SRC="cogIPOneImageFlipRotateOperationRotate90Deg.gif" apiSRC="cogIPOneImageFlipRotateOperationRotate90Deg_cogIPOneImageFlipRotateOperationRotate90Deg.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotateOperationConstants.None"><summary>Image is not flipped or rotated.</summary><remarks><PARA>Image is not flipped or rotated.</PARA><PARA><PICTURE WIDTH="56" HEIGHT="70" SRC="cogIPOneImageFlipRotateOperationNone.gif" apiSRC="cogIPOneImageFlipRotateOperationNone_cogIPOneImageFlipRotateOperationNone.gif" /></PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageBoundaryModeConstants"><summary>Enumeration of boundary mode values.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageBoundaryModeConstants.Reflected"><summary>In Reflected mode, missing pixels inside the kernel window are simulated as if the input image pixels are reflected at the image boundary. The size of the output image stays the same as the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageBoundaryModeConstants.Clipped"><summary>In Clipped mode, output pixels, where not all the pixels inside the kernel window are available, are not defined. Therefore the output image is shrunk by the size of the kernel.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageAdd Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimageaddtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants.InputImages"><remarks><PARA>Include the input images in the CurrentRecord.</PARA></remarks><summary>Include the input images in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants.AlignmentPoints"><remarks><PARA>Include the alignment axes (if enabled) in the CurrentRecord.</PARA></remarks><summary>Include the alignment axes (if enabled) in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants.Regions"><summary>Include the (interactive) regions to be used image processing in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) regions to be used image processing in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageAdd Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimageaddtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordConstants.OutputImage"><summary>Include the OutputImage in the LastRunRecord.</summary><remarks><PARA>Include the OutputImage in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageAdd Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimageaddtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.OverlapMasks"><summary>Include overlap masking on either the last run input images or last run region transformed images.  If no region was specified, then the overlap will be displayed on the corresponding input image.</summary><remarks><PARA>Include overlap masking on either the last run input images or last run region transformed images.  If no region was specified, then the overlap will be displayed on the corresponding input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.ImageAlignmentPoints"><remarks><PARA>Include alignment axes (if enabled) in the LastRunRecord.</PARA></remarks><summary>Include alignment axes (if enabled) in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.Regions"><remarks><PARA>Include the regions used for image processing in the LastRunRecord.</PARA></remarks><summary>Include the regions used for image processing in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.TransformedRegionImages"><summary>Generate records containing the pixels within the Region of the corresponding input image.</summary><remarks><PARA>Generate records containing the pixels within the Region of the corresponding input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.InputImagesDeepCopy"><summary>Include deep copies of the input images in the LastRunRecord.</summary><remarks><PARA>Include deep copies of the input images in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.InputImagesByReference"><summary>Include references to the input images in the LastRunRecord.</summary><remarks><PARA>Include references to the input images in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddLastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageSubtract Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimagesubtracttool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants.InputImages"><summary>Include the input images in the CurrentRecord.</summary><remarks><PARA>Include the input images in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants.AlignmentPoints"><remarks><PARA>Include the alignment axes (if enabled) in the CurrentRecord.</PARA></remarks><summary>Include the alignment axes (if enabled) in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants.Regions"><remarks><PARA>Include the (interactive) regions to be used image processing in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) regions to be used image processing in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageSubtract Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimagesubtracttool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordConstants.OutputImage"><remarks><PARA>Include the OutputImage in the LastRunRecord.</PARA></remarks><summary>Include the OutputImage in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageSubtract Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimagesubtracttool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.OverlapMasks"><remarks><PARA>Include overlap masking on either the last run input images or last run region transformed images.  If no region was specified, then the overlap will be displayed on the corresponding input image.</PARA></remarks><summary>Include overlap masking on either the last run input images or last run region transformed images.  If no region was specified, then the overlap will be displayed on the corresponding input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.ImageAlignmentPoints"><summary>Include alignment axes (if enabled) in the LastRunRecord.</summary><remarks><PARA>Include alignment axes (if enabled) in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.Regions"><summary>Include the regions used for image processing in the LastRunRecord.</summary><remarks><PARA>Include the regions used for image processing in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.TransformedRegionImages"><remarks><PARA>Generate records containing the pixels within the Region of the corresponding input image.</PARA></remarks><summary>Generate records containing the pixels within the Region of the corresponding input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.InputImagesDeepCopy"><summary>Include deep copies of the input images in the LastRunRecord.</summary><remarks><PARA>Include deep copies of the input images in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.InputImagesByReference"><remarks><PARA>Include references to the input images in the LastRunRecord.</PARA></remarks><summary>Include references to the input images in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageMinMax Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimageminmaxtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants.InputImages"><remarks><PARA>Include the input images in the CurrentRecord.</PARA></remarks><summary>Include the input images in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants.AlignmentPoints"><remarks><PARA>Include the alignment axes (if enabled) in the CurrentRecord.</PARA></remarks><summary>Include the alignment axes (if enabled) in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants.Regions"><remarks><PARA>Include the (interactive) regions to be used image processing in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) regions to be used image processing in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageMinMax Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimageminmaxtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordConstants.OutputImage"><remarks><PARA>Include the OutputImage in the LastRunRecord.</PARA></remarks><summary>Include the OutputImage in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogIPTwoImageMinMax Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogiptwoimageminmaxtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.OverlapMasks"><remarks><PARA>Include overlap masking on either the last run input images or last run region transformed images.  If no region was specified, then the overlap will be displayed on the corresponding input image.</PARA></remarks><summary>Include overlap masking on either the last run input images or last run region transformed images.  If no region was specified, then the overlap will be displayed on the corresponding input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.ImageAlignmentPoints"><summary>Include alignment axes (if enabled) in the LastRunRecord.</summary><remarks><PARA>Include alignment axes (if enabled) in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.Regions"><summary>Include the regions used for image processing in the LastRunRecord.</summary><remarks><PARA>Include the regions used for image processing in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.TransformedRegionImages"><summary>Generate records containing the pixels within the Region of the corresponding input image.</summary><remarks><PARA>Generate records containing the pixels within the Region of the corresponding input image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.InputImagesDeepCopy"><summary>Include deep copies of the input images in the LastRunRecord.</summary><remarks><PARA>Include deep copies of the input images in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.InputImagesByReference"><remarks><PARA>Include references to the input images in the LastRunRecord.</PARA></remarks><summary>Include references to the input images in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxLastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants"><remarks><PARA>Enumeration of options for copying the selected space trees of the input images to the OutputImage.</PARA></remarks><summary>Enumeration of options for copying the selected space trees of the input images to the OutputImage. Copying and merging operations are done by reference.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants.CopyBMergeA"><remarks><PARA>Copy the coordinate space tree of InputImageB to the OutputImage and merge the space tree of InputImageA.</PARA></remarks><summary>Copy the coordinate space tree of InputImageB to the OutputImage and merge the space tree of InputImageA.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants.CopyAMergeB"><summary>Copy the coordinate space tree of InputImageA to the OutputImage and merge the space tree of InputImageB.</summary><remarks><PARA>Copy the coordinate space tree of InputImageA to the OutputImage and merge the space tree of InputImageB.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants.CopyB"><summary>Copy the coordinate space tree of InputImageB to the OutputImage.</summary><remarks><PARA>Copy the coordinate space tree of InputImageB to the OutputImage.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSpaceTreeModeConstants.CopyA"><summary>Copy the coordinate space tree of InputImageA to the OutputImage.</summary><remarks><PARA>Copy the coordinate space tree of InputImageA to the OutputImage.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddOverflowModeConstants"><summary>Enumeration of two image addition overflow modes.</summary><remarks><PARA>Enumeration of two image addition overflow modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddOverflowModeConstants.Shift"><remarks><PARA>Divide result pixel values by two.</PARA></remarks><summary>Divide result pixel values by two.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddOverflowModeConstants.Wrap"><summary>Wrap pixel values that overflow from the add operation.</summary><remarks><PARA>Wrap pixel values that overflow from the add operation.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddOverflowModeConstants.Bounded"><remarks><PARA>Limit the pixel values to low and high values.  For 8 bit unsigned images, this is 0 and 255, respectively.</PARA></remarks><summary>Limit the pixel values to low and high values.  For 8 bit unsigned images, this is 0 and 255, respectively.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAddFormatConstants"><summary>Enumeration of the pixel depths for the image generated by the add operation.</summary><remarks><PARA>Enumeration of the pixel depths for the image generated by the add operation.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants"><summary>Enumeration of two image subtraction overflow modes.</summary><remarks><PARA>Enumeration of two image subtraction overflow modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants.Shift"><remarks><PARA>Divide result pixel values by two.</PARA></remarks><summary>Divide the signed pixel value result by two.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants.Absolute"><summary>Generate pixel values from the absolute value of the result of the subtract operation.</summary><remarks><PARA>Generate pixel values from the absolute value of the result of the subtract operation.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants.Wrap"><remarks><PARA>Wrap pixel values that overflow from the subtract operation.</PARA></remarks><summary>Wrap pixel values that overflow from the subtract operation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractOverflowModeConstants.Bounded"><remarks><PARA>Limit the pixel values to low and high values.  For 8 bit unsigned images, this is 0 and 255, respectively.</PARA></remarks><summary>Limit the pixel values to low and high values.  For 8 bit unsigned images, this is 0 and 255, respectively.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtractFormatConstants"><summary>Enumeration of the pixel depths for the image generated by the subtract operation.</summary><remarks><PARA>Enumeration of the pixel depths for the image generated by the subtract operation.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxOperationConstants"><summary>Enumeration of operations for the CogIPTwoImageMinMax object.</summary><remarks><PARA>Enumeration of operations for the <see cref="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax" /> object.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxOperationConstants.Max"><remarks><PARA>Takes the maximum pixel values from the input images.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxOperationConstants.Min"><remarks><PARA>Takes the minimum pixel values from the input images</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMaxFormatConstants"><summary>Enumeration of the pixel depths for the image generated by the minimum or maximum pixel value operation.</summary><remarks><PARA>Enumeration of the pixel depths for the image generated by the minimum or maximum pixel value operation.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogHistogram Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="coghistogramtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants.Region"><summary>Include the (interactive) region to be used for the histogram in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) region to be used for the histogram in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants.InputImageMask"><summary>Include a graphic representing the input image mask in the CurrentRecord.</summary><remarks><PARA>Include a graphic representing the input image mask in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogHistogram Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="coghistogramtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants.Histogram"><remarks><PARA>Include the histogram graph in the LastRunRecord.</PARA></remarks><summary>Include the histogram graph in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants.Median"><remarks><PARA>Include a yellow line designating the median with the histogram graphics in the LastRunRecord.</PARA></remarks><summary>Include a yellow line designating the median with the histogram graphics in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants.Mean"><summary>Include a white line designating the mean with the histogram graphics in the LastRunRecord.</summary><remarks><PARA>Include a white line designating the mean with the histogram graphics in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants.CumulativeHistogram"><remarks><PARA>Include the cumulative histogram graph with the histogram graphics in the LastRunRecord.</PARA></remarks><summary>Include the cumulative histogram graph with the histogram graphics in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogHistogramTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogHistogram Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="coghistogramtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants.Region"><remarks><PARA>Include the region used for image processing in the LastRunRecord.</PARA></remarks><summary>Include the region used for image processing in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants.InputImageMask"><remarks><PARA>Include a graphic representing the input image mask in the LastRunRecord.</PARA></remarks><summary>Include a graphic representing the input image mask in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants"><remarks><PARA>Constants used to specify desired histogram result graphics. The 
	following figure shows how the graphics appear when placed in a 
	<see cref="T:Cognex.VisionPro.Display.Controls.CogDisplay" />:</PARA><PICTURE SRC="histogram.gif" apiSRC="CogHistogramResultGraphicConstants_histogram.gif" /></remarks><summary>Constants used to specify desired result graphics.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.Histogram"><summary>Draw the histogram.</summary><remarks><PARA>Draw the histogram.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.All"><summary>Draw all result graphics.</summary><remarks><PARA>Draw all result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.Median"><remarks><PARA>Draw a yellow line designating the median.</PARA></remarks><summary>Draw a yellow line designating the median.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.Mean"><remarks><PARA>Draw a white line designating the mean.</PARA></remarks><summary>Draw a white line designating the mean.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.CumulativeHistogram"><summary>Draw the cumulative histogram.</summary><remarks><PARA>Draw the cumulative histogram.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.Axes"><summary>Draw a Coordinate Axes in which the histogram will be drawn.</summary><remarks><PARA>Draw a Coordinate Axes in which the histogram will be drawn.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.TipText"><summary>Turn on tip text for result graphics.</summary><remarks><PARA>Turn on tip text for result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramResultGraphicConstants.None"><summary>Draw no result graphics.</summary><remarks><PARA>Draw no result graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogramBinModeConstants"><summary>Enumeration of the histogram bin processing modes.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramBinModeConstants.Auto"><summary>Compute a histogram with the number of bins set at runtime to equal the full dynamic range of the current input image: 256 bins for a CogImage8Grey, 256 bins for a CogImage16Grey with Encoding set to Grey8, 1024 bins for a CogImage16Grey with Encoding set to Grey10, 4096 bins for a CogImage16Grey with Encoding set to Grey12, 16384 bins for a CogImage16Grey with Encoding set to Grey14, and 65536 bins for a CogImage16Grey with Encoding set to Grey16. The value of the NumBins property will be ignored in this mode. This mode is the default for CogHistogram.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramBinModeConstants.Uniform"><summary>Compute a histogram with NumBins many bins, each of which corresponds to an approximately equal sized number of possible greyscale values spread uniformly across the entire dynamic range of the current input image. It is a run time error to call CogHistogram's Execute method in this mode with NumBins set to a value larger than the current input image's maximum greyscale value plus one.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogHistogramBinModeConstants.Compatibility"><summary>Compute a histogram with the number of bins equal to NumBins. Any observed pixel with a greyscale value greater than or equal to NumBins will cause the count in the last bin (index NumBins - 1) to be incremented. This means that if NumBins is set to 2, then all pixels with a greyscale value greater than or equal to 2 will be included in the count in the histogram bin with index 1. This behavior was once but is no longer the default.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantImageFormatConstants"><remarks><PARA>Enumeration of the pixel depths for image that is generated by the multiply operation.</PARA></remarks><summary>Enumeration of the pixel depths for image that is generated by the multiply operation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantImageFormatConstants.Format8Grey"><remarks><PARA>Create an 8-bit grey-scale output image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantImageFormatConstants.SameAsInputImage"><remarks><PARA>Create an output image having the same format as the input image.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantOverflowModeConstants"><summary>Enumeration of single image pixel multiplication overflow modes.</summary><remarks><PARA>Enumeration of single image pixel multiplication overflow modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantOverflowModeConstants.Wrap"><summary>Wrap pixel values that exceed the lowest and highest values that can be represented by the OutputImageFormat type.</summary><remarks><PARA>Wrap pixel values that exceed the lowest and highest values that can be represented by the OutputImageFormat type.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstantOverflowModeConstants.Bounded"><remarks><PARA>Clamp pixel values to lowest and highest values that can be represented by the OutputImageFormat type.  For 8 bit unsigned images, this is 0 and 255, respectively.</PARA></remarks><summary>Clamp pixel values to lowest and highest values that can be represented by the OutputImageFormat type.  For 8 bit unsigned images, this is 0 and 255, respectively.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3ImageFormatConstants"><summary>Enumeration of the pixel depths for image that is generated by the convolution operation.</summary><remarks><PARA>Enumeration of the pixel depths for image that is generated by the convolution operation.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3ImageFormatConstants.Format8Grey"><remarks><PARA>Create an 8-bit grey-scale output image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3ImageFormatConstants.SameAsInputImage"><remarks><PARA>Create an output image with the same pixel format as the input image.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3PositionConstants"><summary>Enumeration of kernel positions.</summary><remarks><PARA>Enumeration of kernel positions.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelDirectionConstants"><summary>Constants used to specify the missing pixel analysis direction or geometry.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelDirectionConstants.Both"><summary>The value of the missing pixel is computed by combining the result sof horizontal- and vertical-based processing. The method of combining the values depends on the ValueComputation parameter.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelDirectionConstants.Vertical"><summary>The value of the missing pixel is computed from at most two nearest valid pixels which lie in the same column but on different sides of the missing pixel.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelDirectionConstants.Horizontal"><summary>The value of the missing pixel is computed from at most two nearest valid pixels which lie in the same row but on different sides of the missing pixel.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelValueComputationConstants"><summary>Constants used to specify how a missing pixel replacement value is computed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelValueComputationConstants.Global"><summary>Specified by the user.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelValueComputationConstants.NeighborInterpolation"><summary>In this case the combining of horizontal and vertical processing is done by averaging.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelValueComputationConstants.NeighborMaximum"><summary>Used for both the interpolation and for combining horizontal and vertical.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelValueComputationConstants.NeighborMinimum"><summary>Used for both the interpolation and for combining horizontal and vertical.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelGlobalValueModeConstants"><summary>Constants used to specify how the global value - the one used when a missing pixel cannot or should not be derived from its valid neighbors - is computed.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelGlobalValueModeConstants.ImageAverage"><summary>Use the average greyscale value of all valid pixels in the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelGlobalValueModeConstants.ImageMaximum"><summary>Use the maximum greyscale value of all valid pixels in the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelGlobalValueModeConstants.ImageMinimum"><summary>Use the minimum greyscale value of all valid pixels in the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixelGlobalValueModeConstants.Fixed"><summary>Use the FixedGlobalValue.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants"><summary>Enumeration of ICogSobelEdge post-processing modes.</summary><remarks><PARA>Enumeration of ICogSobelEdge post-processing modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants.HysteresisThreshold"><summary>Sobel followed by hysteresis thresholding.</summary><remarks><PARA>Sobel followed by hysteresis thresholding.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants.PeakDetect"><remarks><PARA>Sobel followed by whole-pixel peak detection.</PARA></remarks><summary>Sobel followed by whole-pixel peak detection.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgePostProcessModeConstants.None"><remarks><PARA>Sobel only, no post-processing.</PARA></remarks><summary>Sobel only, no post-processing.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogSobelEdge Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogsobeledgetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants.Region"><remarks><PARA>Include the (interactive) region to be processed in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) region to be processed in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogSobelEdge Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogsobeledgetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants.FinalMagnitudeImage"><summary>Include in the LastRunRecord a reference to the Result object's FinalMagnitudeImage.</summary><remarks><PARA>Include in the LastRunRecord a reference to the Result object's FinalMagnitudeImage.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants.EdgeMagnitudeImage"><remarks><PARA>Include in the LastRunRecord a reference to the Result object's EdgeMagnitudeImage.</PARA></remarks><summary>Include in the LastRunRecord a reference to the Result object's EdgeMagnitudeImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants.EdgeAngleImage"><remarks><PARA>Include in the LastRunRecord a reference to the Result object's EdgeAngleImage.</PARA></remarks><summary>Include in the LastRunRecord a reference to the Result object's EdgeAngleImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogSobelEdgeTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogSobelEdge Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogsobeledgetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants.Region"><remarks><PARA>Generate a record containing the Region.</PARA></remarks><summary>Generate a record containing the Region.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants.TransformedRegionPixels"><summary>Generate a record containing the pixels within the Region.</summary><remarks><PARA>Generate a record containing the pixels within the Region.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogSobelEdgeLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionSpaceTreeModeConstants"><summary>Enumeration of options for copying the selected space tree of the InputImage to the DestinationImage. Copying and merging operations are done by reference.</summary><remarks><PARA>Enumeration of options for copying the selected space tree of the InputImage to the DestinationImage.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionSpaceTreeModeConstants.CopyInputMergeDestination"><summary>Copy the coordinate space tree of the InputImage to the DestinationImage and merge the original space tree of the DestinationImage into it.</summary><remarks><PARA>Copy the coordinate space tree of the InputImage to the DestinationImage and merge the original space tree of the DestinationImage into it.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionSpaceTreeModeConstants.UseDestinationMergeInput"><remarks><PARA>Merge the coordinate space tree from the InputImage into that of the DestinationImage.</PARA></remarks><summary>Merge the coordinate space tree from the InputImage into that of the DestinationImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionSpaceTreeModeConstants.CopyInput"><remarks><PARA>Copy the coordinate space tree of the InputImage to the DestinationImage.</PARA></remarks><summary>Copy the coordinate space tree of the InputImage to the DestinationImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionSpaceTreeModeConstants.UseDestination"><remarks><PARA>Leave the coordinate space tree of the DestinationImage unchanged.</PARA></remarks><summary>Leave the coordinate space tree of the DestinationImage unchanged.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants"><summary>Enumeration of available output image types.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.RGB"><summary>If there is no input image, make the output a CogImage24PlanarColor with ColorSpace set to RGB.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Range16"><summary>If there is no input image, make the output a CogImage16Range.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Grey16"><summary>If there is no input image, make the output a CogImage16Grey with Encoding set to Grey16.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Grey14"><summary>If there is no input image, make the output a CogImage16Grey with Encoding set to Grey14.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Grey12"><summary>If there is no input image, make the output a CogImage16Grey with Encoding set to Grey12.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Grey10"><summary>If there is no input image, make the output a CogImage16Grey with Encoding set to Grey10.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Grey8"><summary>If there is no input image, make the output a CogImage16Grey with Encoding set to Grey8.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.HSI"><summary>If there is no input image, make the output a CogImage24PlanarColor with ColorSpace set to HSI.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionOutputImageTypeConstants.Grey"><summary>If there is no input image, make the output a CogImage8Grey.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogCopyRegion Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogcopyregiontool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants.DestinationImage"><summary>Include the destination image in the CurrentRecord.</summary><remarks><PARA>Include the destination image in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants.Region"><remarks><PARA>Include the (interactive) region to be processed on the InputImage in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) region to be processed on the InputImage in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogCopyRegion Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogcopyregiontool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants.DestinationRegion"><summary>Generate a record containing the Region mapped into the output image.</summary><remarks><PARA>Generate a record containing the Region mapped into the output image.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants.OutputImage"><remarks><PARA>Include in the LastRunRecord a reference to the OutputImage.</PARA></remarks><summary>Include in the LastRunRecord a reference to the OutputImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordConstants.None"><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogCopyRegionTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogCopyRegion Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogcopyregiontool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants.Region"><remarks><PARA>Generate a record containing the Region.</PARA></remarks><summary>Generate a record containing the Region.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants.AlignmentPoints"><summary>Generate records containing the input &amp; destination alignment points (only if image alignment is used).</summary><remarks><PARA>Generate records containing the input &amp; destination alignment points (only if image alignment is used).</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogCopyRegionLastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapSamplingModeConstants"><summary>Enumeration of polar unwrap sampling modes.</summary><remarks><PARA>Enumeration of polar unwrap <see cref="u:ImageProcessing.General.Theory.ImageTransformation" cgnxAnchor="sampling_methods">sampling modes</see>.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapSamplingModeConstants.NearestNeighbor"><summary>Use nearest-neighbor sampling.</summary><remarks><PARA>Use <see cref="u:ImageProcessing.General.Theory.ImageTransformation" cgnxAnchor="nearest_neighbor_sampling">nearest neighbor sampling</see> 
	Nearest neighbor sampling uses the value of the pixel closest to the sampling point for the sampled value.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapSamplingModeConstants.BilinearInterpolation"><remarks><PARA>Use <see cref="u:ImageProcessing.General.Theory.ImageTransformation" cgnxAnchor="bilinear_interpolation">bilinear interpolation</see>. 
	Bilinear interpolation computes the distance-weighted average of the values of the four pixels 
	closest to the sampling point.</PARA></remarks><summary>Use bilinear interpolation.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants"><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPolarUnwrap Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpolarunwraptool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants.Region"><summary>Include the (interactive) region to be processed in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) region to be processed in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPolarUnwrap Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpolarunwraptool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordConstants.OutputImage"><summary>Include in the LastRunRecord a reference to the OutputImage.</summary><remarks><PARA>Include in the LastRunRecord a reference to the OutputImage.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPolarUnwrap Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpolarunwraptool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants.Region"><summary>Generate a record containing the Region.</summary><remarks><PARA>Generate a record containing the Region.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogPolarUnwrapLastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants"><summary>Enumeration of affine transform sampling modes.</summary><remarks><PARA>Enumeration of affine transform sampling modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants.BilinearAccurate"><summary>Use bilinear accurate interpolation.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants.HighPrecision"><summary>Use high-precision interpolation.</summary><remarks><PARA>Use high-precision interpolation.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformSamplingModeConstants.BilinearInterpolation"><remarks><PARA>Use bilinear interpolation.</PARA></remarks><summary>Use bilinear interpolation.  NOTE: This affine sampling mode has been deprecated and will be unavailable in future releases.  Please use bilinear accurate mode instead.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants"><summary>Enumeration of affine transform clipping modes. These specify what to do if the affine region is clipped (i.e. not entirely within the input image).</summary><remarks><PARA>Enumeration of affine transform clipping modes. These specify what to do if the affine region is clipped (i.e. not entirely within the input image).</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants.Error"><remarks><PARA>Return an error if the region is clipped.</PARA></remarks><summary>Return an error if the region is clipped.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants.Fill"><summary>Fill all clipped pixels with a constant value specified by the ClipFillValue property.</summary><remarks><PARA>Fill all clipped pixels with a constant value specified by the
	<see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ClipFillValue" /> 
	property.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants.Zeroes"><summary>Fill fully-clipped pixels with zeroes and interpolate pixels near the edge of the image. Faster than the cogAffineTransformClipModeFill option but pixels near the edge of the image may have values in between zero and those of the input image.</summary><remarks><PARA>Fill fully-clipped pixels with zeroes and interpolate pixels near the edge of the image.
Faster than the 
	<see cref="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformClipModeConstants">Fill</see>
option but pixels near the edge of the image may have values in between zero and those of the input image.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants"><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogAffineTransform Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogaffinetransformtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants.Region"><summary>Include the (interactive) region to be processed in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) region to be processed in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants.All"><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogAffineTransform Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogaffinetransformtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants.OutputImageMask"><remarks><PARA>Include in the LastRunRecord a reference to the OutputImageMask.</PARA></remarks><summary>Include in the LastRunRecord a reference to the OutputImageMask.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants.OutputImage"><remarks><PARA>Include in the LastRunRecord a reference to the OutputImage.</PARA></remarks><summary>Include in the LastRunRecord a reference to the OutputImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants.All"><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordConstants.None"><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogAffineTransformTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogAffineTransform Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogaffinetransformtool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants.Region"><summary>Generate a record containing the Region.</summary><remarks><PARA>Generate a record containing the Region.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogAffineTransformLastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants"><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageAverage Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogimageaveragetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants.Region"><summary>Include the (interactive) region to be processed in the CurrentRecord.</summary><remarks><PARA>Include the (interactive) region to be processed in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants.InputImage"><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary><remarks><PARA>Include all possible records in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageCurrentRecordConstants.None"><remarks><PARA>Do not include any records in the CurrentRecord.</PARA></remarks><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageAverage Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogimageaveragetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants.StandardDeviationImage"><remarks><PARA>Include in the LastRunRecord a reference to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.StandardDeviationImage">StandardDeviationImage</see>. 
If no standard deviation image is created, an empty record is created.</PARA></remarks><summary>Include in the LastRunRecord a reference to the StandardDeviationImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants.AverageImage"><remarks><PARA>Include in the LastRunRecord a reference to the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.AverageImage">AverageImage</see>.</PARA></remarks><summary>Include in the LastRunRecord a reference to the AverageImage.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Include all of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordConstants.None"><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary><remarks><PARA>Do not include any of the non-diagnostic data in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageAverage Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogimageaveragetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants.Region"><summary>Generate a record containing the Region.</summary><remarks><PARA>Generate a record containing the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region">Region</see>.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants.All"><remarks><PARA>Include all of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants.TransformedRegionPixels"><remarks><PARA>Generate a record containing the pixels within the <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageAverageTool.Region">Region</see>.</PARA></remarks><summary>Generate a record containing the pixels within the Region.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageAverageLastRunRecordDiagConstants.None"><remarks><PARA>Do not include any of the diagnostic data in the LastRunRecord.</PARA></remarks><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants"><remarks><PARA>Determines how the 
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness">image sharpness</see> calculation will be performed.</PARA></remarks><summary>Enumeration of Image Sharpness Mode modes.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.GradientEnergy"><remarks><PARA><see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="gradient_energy">Gradient energy mode</see> 
			measures sharpness by summing the squares of the differences between adjacent pixel values over an entire image.
			In general, a sharper image will have greater pixel-to-pixel contrast values and generate higher result scores. 
		</PARA><PARA>
			The <see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpness.GradientEnergyLowPassSmoothing" /> property
			lets you specify a smoothing parameter to remove potential high frequency noise from the image.
		</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.BandPass"><remarks><PARA><see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="band_pass_filtering_mode">Band pass filtering mode</see> 
	measures image sharpness by measuring the total energy in the range of image frequency 
	that you specify. This method allows you to tune the tool to the range of feature sizes 
	in your image.
	</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.AbsDiff"><remarks><PARA><see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="image_difference_mode">Absolute difference mode</see> 
	measures image sharpness by computing the absolute difference in pixel values at a specified 
	offset within the image.
	</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessModeConstants.AutoCorrelation"><remarks><PARA><see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="autocorrelation_mode">Auto-correlation mode</see> 
	measures image sharpness by computing the normalized 
	correlation between the image's pixel values and the values in the same image offset by 
	one pixel. The image sharpness is inversely related to the correlation coefficient.
	</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants"><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageSharpness Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogimagesharpnesstool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants.Region"><summary>Include the (interactive) region to be processed in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageSharpness Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogimagesharpnesstool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordConstants.None"><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageProcessing.CogImageSharpnessTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageSharpness Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogimagesharpnesstool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants.Region"><summary>Generate a record containing the Region.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageSharpnessLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants"><summary>Enumeration of the ways that the input image may be processed by the CogImageConvertTool.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.RGB"><summary>If InputImage is an ICogImage24PlanarColor of type HSI then output a computed ICogImage24PlanarColor of type RGB. If InputImage is already an ICogImage24PlanarColor of type RGB then output an ICogImage24PlanarColor that is equivalent to the input image. Throw an exception at run time if InputImage is any other type.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.MaskFromRange"><summary>If InputImage is a CogImage16Range then output a CogImage8Grey corresponding to the mask data.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.PixelFromRange"><summary>If the InputImage is a CogImage16Range then output a CogImage16Grey corresponding to the height data.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.IntensityFromWeightedRGB"><summary>If InputImage is an ICogImage24PlanarColor of type RGB then output a computed ICogImage8Grey that represents the greyscale intensity of this color image using customer provided RGB weighting factors.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.Plane2"><summary>InputImage must be an ICogImage24PlanarColor. Output an ICogImage8Grey that represents plane 2 of the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.Plane1"><summary>InputImage must be an ICogImage24PlanarColor. Output an ICogImage8Grey that represents plane 1 of the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.Plane0"><summary>InputImage must be an ICogImage24PlanarColor. Output an ICogImage8Grey that represents plane 0 of the input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.HSIFromBayer"><summary>InputImage must be an ICogImage8Grey and is assumed to be organized in the Bayer manner. Output a computed ICogImage24PlanarColor of type HSI.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.RGBFromBayer"><summary>InputImage must be an ICogImage8Grey and is assumed to be organized in the Bayer manner. Output a computed ICogImage24PlanarColor of type RGB.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.IntensityFromBayer"><summary>InputImage must be an ICogImage8Grey and is assumed to be organized in the Bayer manner. Output a computed ICogImage8Grey that represents the computed greyscale intensity of this input image.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.HSI"><summary>If InputImage is an ICogImage24PlanarColor of type RGB then output a computed ICogImage24PlanarColor of type HSI. If InputImage is already an ICogImage24PlanarColor of type HSI then output an ICogImage24PlanarColor that is equivalent to the input image. Throw an exception at run time if InputImage is any other type.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertRunModeConstants.Intensity"><summary>If InputImage is an ICogImage24PlanarColor of type RGB then output a computed ICogImage8Grey that represents the greyscale intensity of this color image. If InputImage is an ICogImag24PlanarColor of type HSI then output an ICogImage8Grey that represents its intensity plane. If InputImage is an ICogImage16Grey then right shift each pixel according to the Encoding property to place the 8 most significant active bits in the output image. And if InputImage is already an ICogImage8Grey then output an ICogImage8Grey that is equivalent to the input image.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageConvertCurrentRecordConstants"><summary>Enumeration of data that can be included in the tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertCurrentRecordConstants.Region"><summary>Include the region to be processed in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertCurrentRecordConstants.All"><summary>Include all possible records in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertCurrentRecordConstants.None"><summary>Do not include any records in the CurrentRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be included in the tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordConstants.OutputImage"><summary>Include a reference to the output image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordConstants.All"><summary>Include all of the non-diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordConstants.None"><summary>Do not include any of the non-diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be included in the tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordDiagConstants.Region"><summary>Generate a record containing the Region.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordDiagConstants.All"><summary>Include all of the diagnostic data in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.ImageProcessing.CogImageConvertLastRunRecordDiagConstants.None"><summary>Do not include any of the diagnostic data in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogAffineTransform.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogCopyRegion.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogHistogram.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageAddSubtractConstant.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolve3x3.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageConvolveNxM.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageEqualize.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageExpand.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageFlipRotate.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGaussSampler.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Element.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphology3x3Elements.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageGreyMorphologyNxM.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageHighPassFilter.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedian3x3.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMedianNxM.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMultiplyConstant.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageOperators.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImagePixelMap.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageQuantize.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageSubSampler.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageMissingPixel.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPOneImageSampleConvolve.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageAdd.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageMinMax.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogIPTwoImageSubtract.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageAverage.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogImageSharpness.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogPolarUnwrap.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageProcessing.CogSobelEdge.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>