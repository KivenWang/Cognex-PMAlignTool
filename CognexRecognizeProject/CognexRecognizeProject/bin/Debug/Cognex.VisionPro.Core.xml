<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.Core</name></assembly><members><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcq1394DCAM.CameraBandwidth"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the bandwith value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq1394DCAM_CameraBandwidth--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraBandwidth" /></li></ul></event><summary>Reads or sets the camera bandwidth. Values limited to 0.0 (minimum) and 1.0 (maximum). Default is 1.0.</summary><remarks><PARA>Sets or gets the camera bandwidth. Values range from
	0.0, which directs the camera to consume as little bandwidth as possible,
	 to
	 1.0, which directs the camera not to restrict its use of bandwidth.</PARA><PARA>
This property lets you limit the amount of bandwidth
used by an individual IEEE 1394 DCAM camera.
You can connect more than one IEEE 1394 DCAM to a single IEEE 1394 adapter.
By using this class, you can limit the amount of bandwidth used by individual cameras.
	</PARA><NOTE>Specifying a small (or zero) value for bandwidth may prevent some cameras from acquiring any images and cause the acquisition to return an error.</NOTE><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqBrightness.Brightness"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><summary>Reads or sets the brightness level.</summary><remarks><PARA>Sets or gets the brightness level. This value ranges from 0.0 (darkest) to 1.0 (lightest).</PARA><PARA>Not all FIFOs support this property. Check whether the FIFO supports it, as in the example, before using this property.</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast">contrast</see> and brightness values control how different light levels are mapped to pixel
values. Assume that you are working with an 8-bit image. All the light levels entering the
camera must be mapped to a pixel value from 0 to 255.</PARA><PARA>Brightness determines where the center of the contrast mapping window falls relative to
the range of light levels. Brightness values closer to 0.0 place the center of the mapping
window toward the higher light levels, resulting in a darker image.</PARA><PARA><PICTURE SRC="darker.gif" WIDTH="350" HEIGHT="200" apiSRC="Brightness_darker.gif" /></PARA><PARA>Brightness values
closer to 1.0 place the window toward the lower light levels, resulting in a brighter image.</PARA><PARA><PICTURE SRC="brighter.gif" WIDTH="350" HEIGHT="200" apiSRC="Brightness_brighter.gif" /></PARA><PARA>For multichannel FIFOs, <see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness" /> sets the brightness of all channels to the same value. To set the brightness of individual channels, use <see cref="T:Cognex.VisionPro.ICogAcqBrightnessMultiChannel" />.<see cref="M:Cognex.VisionPro.ICogAcqBrightnessMultiChannel.SetBrightnessMultiChannel(System.Int32,System.Double)" />.</PARA><DEFAULT>CDC-50 camera: 0.58 <BR />
CDC-100 camera: 0.50<BR />
CDC-200 camera: 0.50<BR />
All other cameras: 1.0
</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the brightness is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqBrightness_Brightness--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfBrightness" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqBrightnessMultiChannel.NumBrightnessChannels"><summary>Returns the number of channels available to be set or read.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqCameraCalibration.RowColumnCalibrationEnabled"><remarks><PARA>Sets or gets whether row and column calibration is enabled.</PARA><PARA>When this option is enabled, VisionPro uses the CDC camera's factory settings to reduce the fixed pattern noise that causes pixel value variations from row to row and from column to column when presented with a scene of uniform intensity.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Read or set whether row and column calibration is enabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when row and column calibration is enabled or disabled.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqCameraCalibration_RowColumnCalibrationEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfRowColumnCalibrationEnabled" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqCameraCalibration.OutlierPixelCorrectionEnabled"><remarks><PARA>Sets or gets whether outlier pixel correction is enabled.</PARA><PARA>When this option is enabled, VisionPro uses the CDC camera's factory settings to determine whether a pixel is stuck on or off and corrects it to the average of its neighbors to the right and to the left.
</PARA><PARA>Outlier correction is designed for naturally occurring images. It is not useful for images
with many small features that you care about. For example, when acquiring images of a
printout made with a laser printer or similar device, the
dithering effects of the printer will appear as small features which the outlier correction
would remove. In this case, outlier correction should not be used.
</PARA><DEFAULT>False</DEFAULT></remarks><summary>Read or set whether outlier pixel correction is enabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when outlier pixel correction is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqCameraCalibration_OutlierPixelCorrectionEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOutlierPixelCorrectionEnabled" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqChargeTransferInterval.ChargeTransferInterval"><summary>Reads or sets the charge transfer interval in units of video lines relative to the beginning of the vertical drive signal.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqContrast.Contrast"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>0 <paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><remarks><PARA>Sets or gets the contrast level. This value ranges from 0.0 (least contrast) to 1.0 (most contrast).</PARA><PARA>Not all FIFOs support this property. Check whether the FIFO supports it, as in the example, before using this property.</PARA><PARA>The contrast and <see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness">brightness</see> values control how different light levels are mapped to pixel
values. Assume that you are working with an 8-bit image. All the light levels entering the
camera must be mapped to a pixel value from 0 to 255.</PARA><PARA>Contrast determines how the light levels are mapped to the 256 light levels. A low value
closer to 0.0 maps more light values to the pixel value range.</PARA><PARA><PICTURE SRC="lowcontrast.gif" WIDTH="350" HEIGHT="200" apiSRC="Contrast_lowcontrast.gif" /></PARA><PARA>A high value closer to 1.0 maps fewer light values to the pixel value range. Light values that are below or above
the contrast threshold are mapped to the lowest and highest pixel values, respectively.
</PARA><PARA><PICTURE SRC="highcontrast.gif" WIDTH="350" HEIGHT="200" apiSRC="Contrast_highcontrast.gif" /></PARA><PARA>For multichannel FIFOs, <see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast" /> sets the contrast  of all channels to the same value. To set the contrast of individual channels,
use <see cref="T:Cognex.VisionPro.ICogAcqContrastMultiChannel" />.<see cref="M:Cognex.VisionPro.ICogAcqContrastMultiChannel.SetContrastMultiChannel(System.Int32,System.Double)" />.</PARA><DEFAULT>CDC-50 camera: 0.15 <BR />
CDC-100 camera: 0.66 <BR />
CDC-200 camera: 0.45 <BR />
All other cameras: 0.35
</DEFAULT></remarks><summary>Reads or sets the contrast level. Contrast values are in the range 0-1 inclusive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the contrast is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqContrast_Contrast--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfContrast" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqContrastMultiChannel.NumContrastChannels"><summary>Returns the number of channels available to be set or read.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqDigitalCameraGain.DigitalHighGainSelected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the gain selection changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqDigitalCamera_HighGainSelected--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfDigitalHighGainSelected" /></li></ul></event><remarks><PARA>Sets or gets the camera's analog/digital (A/D) gain setting.</PARA><PARA>Not all FIFOs support this property. Check whether the FIFO supports it, as in the example, before using this property.</PARA><PARA>The gain can be either high (True) or low (False).</PARA><PARA>Some digital cameras provide only manual gain control by means of a physical switch
or a dial in the camera. However, some digital cameras support gain selection by means of a control line.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Reads or sets whether using high A/D gain.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqExposure.MinExposure"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The exposure time is &lt; <see cref="P:Cognex.VisionPro.ICogAcqExposure.MinExposure" />.</para></exception><remarks><PARA>Minimum exposure time in milliseconds.</PARA></remarks><summary>Minimum exposure time in milliseconds.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqExposure.Exposure"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The exposure time is &lt; <see cref="P:Cognex.VisionPro.ICogAcqExposure.MinExposure" />.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the exposure changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqExposure_Exposure--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfExposure" /></li></ul></event><remarks><PARA>Sets or gets the exposure time in milliseconds. The special value zero indicates to use the shortest time that the camera supports.</PARA><PARA>For strobed acquisitions, this value is the duration of the strobe pulse. To find the pulse
duration of your strobe, see the strobe light’s specifications. Note that this function is
used to let the acquisition software know the duration of the strobe pulse, not to set the
duration of the strobe pulse.</PARA><PARA>To determine the exposure time for <see cref="u:Acquisition.CDC_CMOS.Theory.CMOSCams">Cognex CDC cameras</see>, see <see cref="u:Acquisition.CDC_CMOS.Walkthrough.ChooseCDCShutterMode">How to Choose a CDC Shutter Mode</see>.</PARA><PARA>
If you are using a FireWire (IEEE 1394DCAM) camera, the exposure value may be an absolute time in milliseconds or a
a register value. Check with the documentation supplied with your camera to determine whether your camera supports
absolute exposure times. In cases where the register value can be multiplied by a constant to obtain and absolute exposure,
the camera's CCF provides the necessary information to use absolute values. In all other case, you must use the raw register value.
</PARA><PARA>
You can use the <BOLD>DCAM Doctor</BOLD> application included in your VisionPro distribution to learn about the properties
of your FireWire camera. 
</PARA><!--


Step 3
- If absolute control of exposure is not supported, check how the exposure register is implemented in the camera. If the exposure value is of the form

actual_exposure(in secs) = exposure_reg_value * timebase 

then this timebase value can be encoded into the CCF meant for the camera. So if the timebase is part of the CCF, CVL will compute exposure_reg_value given the actual exposure passed in through CVL's exposure property.

E.g for a Basler A102f camera, the timebase value is 20e-6. When a user requests a 80e-6 exposure, this translates into a exposure_reg_value of 4. Note that all Basler and AVT cameras support exposure this way and one of the reasons we added support for this.

Also note that timebase value can only be encoded into CCFs that are meant for this camera. That means it is not part of Generic DCAM CCFs and therefore you will not get get automatic exposure control as you would get from a CCF meant specifically for this camera. This will bring us into Step 4.

Step 4
- For cameras that don't support absolute control and their exposure control doesn't fit into the form outlined above, CVL does not know how to translate the exposure set by the user into a camera exposure register value. In this case, CVL will set the actual value specified by the user into the camera exposure register. So for a camera exposure register that takes values from 0 to 100, the user will need to set values in the exposure to be something like 20.0 seconds to get a register value of 20. 
--><!-- No longer true with the addition of MinExposure.
<DEFAULT>20e-3 milliseconds</DEFAULT>
--></remarks><summary>Reads or sets the exposure time in milliseconds. The special value of zero indicates to use the smallest supported time.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqWhiteBalance.VGain"><remarks>As the V-gain increases, the image becomes more blue. By adjusting the U- and V-gains, you can correct the color balance for different light sources.</remarks><summary>Gets or sets the gain of the V component in the YUV color model.</summary><exception cref="T:System.ArgumentException">Value &lt; 0 or Value &gt; 1.0.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UGain is changed.</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqWhiteBalance.UGain"><summary>Gets or sets the gain of the U component in the YUV color model.</summary><remarks>As the U-gain increases, the image becomes more red. By adjusting the U- and V-gains, you can correct the color balance for different light sources.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UGain is changed.</event><exception cref="T:System.ArgumentException">Value &lt; 0 or Value &gt; 1.0.</exception></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogAcqHardwareImagePool"><remarks><para>
    		This property lets you set the size of the image pool memory
    		for a Cognex MVS-8600 frame grabber.
    		</para><para>
    			Use 
    			<see cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" />
    			to get an
    			<see cref="T:Cognex.VisionPro.ICogAcqHardwareImagePool" />
    			from an
    			<see cref="U:Cognex.VisionPro.ICogAcqFifoMembers" />.
    		</para></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqHardwareImagePool.UseCustomHardwareImagePool"><summary>When True, you can set HardwareImagePool to a specific value.</summary><remarks><para>
    		Sets or gets whether to use a custom image pool size. 
    	</para><para>
    		When this property is False, the size of the image pool is always
    		<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool" />.
    		When True, the size of the image pool is determined by 
    		<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.HardwareImagePool" /></para><para>
    		Typically you would set this property to True and specify a value
    		for <see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.HardwareImagePool" />
		only if you're acquiring very large images and
    		<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool" />
    		would require too much memory.
    	</para><DEFAULT>
    		False
    	</DEFAULT><seealso cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" /></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqHardwareImagePool.RecommendedHardwareImagePool"><summary>Get the recommended number of images in the pool.</summary><remarks><para>
    			Gets  the number of images in the pool.
    			This value may change as the <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see>
    			changes.
    		</para><seealso cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" /></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqHardwareImagePool.HardwareImagePool"><summary>Get or set number of images in the pool.  A larger value provides more reliable acquisition, but uses more memory.</summary><remarks><para>
	    		Sets or gets the number of images in the image pool.
    		</para><para>
    			When 
    			<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.UseCustomHardwareImagePool" />
    			is False, this number is the same as
    			<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool" />.
    			When True, you can set the number images in the pool as appropriate for your application.
    		</para><para>
    			A larger number of images in the pool provides more reliable acquisition, but uses more memory.
    		</para><seealso cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" /></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqHorizontalAdjustment.HorizontalAdjustment"><summary>Reads or sets the horizontal adjustment value in pixels.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.AuxLightBrightFieldPowerRatio"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception><summary>Reads or sets the bright field power ratio on the auxiliary port.</summary><remarks><PARA>Sets or gets the primary light's bright field power ratio which is the fraction of the <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower">light power</see> that is allocated to the bright field. The value ranges from 0.0 (no power to the bright field) to 1.0 (all power to the bright field).</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary power ratio changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightBrightFieldPowerRatio--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightBrightFieldPowerRatio" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.AuxLightPower"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary light power changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightPower--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightPower" /></li></ul></event><summary>Reads or sets the power on the auxiliary port.</summary><remarks><PARA>Sets or gets the auxiliary light's power level. The light power can range from 0.0 (no power) to 1.0 (full power). The light power is split between the light field and the dark field according to the level set by <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightBrightFieldPowerRatio" />.</PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.AuxLightPort"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary light port is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightPower--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightPower" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt;= 0 or <paramref name="val" /> is &gt;= <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" />.</para></exception><summary>Reads or sets the auxiliary port number.</summary><remarks><PARA>Sets or gets the auxiliary light's port number. You can use <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /> to get the total number of camera ports.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.AuxLightEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary light is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightEnabled" /></li></ul></event><remarks><PARA>Sets or gets whether the auxiliary light is enabled.</PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Reads or sets whether the auxiliary light is enabled.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.LightDelay"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light delay changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightDelay--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightDelay" /></li></ul></event><summary>Reads or sets the delay in milliseconds between setting the light power and performing the image capture.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><remarks><PARA>Sets or gets the delay in milliseconds between setting the light power and acquiring an image.</PARA><DEFAULT>30 milliseconds</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.LightBrightFieldPowerRatio"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light power ratio changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightBrightFieldPowerRatio--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightBrightFieldPowerRatio" /></li></ul></event><summary>Reads or sets the bright field power ratio.</summary><remarks><PARA>Sets or gets the primary light's bright field power ratio which is the fraction of the <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower">light power</see> that is allocated to the bright field. The value ranges from 0.0 (no power to the bright field) to 1.0 (all power to the bright field). </PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.LightPower"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light power changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightPower--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightPower" /></li></ul></event><remarks><PARA>Sets or gets the primary light's power level. The light power can range from 0.0 (no power) to 1.0 (full power). The light power is split between the light field and the dark field according to the level set by <see cref="P:Cognex.VisionPro.ICogAcqLight.LightBrightFieldPowerRatio" /></PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>0.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception><summary>Reads or sets the light power.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLight.LightEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightEnabled" /></li></ul></event><summary>Reads or sets whether the light is enabled.</summary><remarks><PARA>Sets or gets whether the primary light is enabled.</PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.MaximumMotionSpeed"><remarks>This value is computed from the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MaximumLineFrequency" /> and the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerLine" /> values.</remarks><value>The maximum motion speed, measured in mm/sec.</value><summary>The maximum speed of motion, in mm/sec, before encoder overrun errors begin to occur.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.MaximumLineFrequency"><summary>The maximum frequency at which lines can be acquired before encoder overrun errors begin to occur.</summary><value>The maximum frequency, measured in camera lines per second.</value><remarks>This value will change with different encoder and camera settings, particularly exposure.  It may also change between camera models and firmware versions.  Finally, it is an approximate limit, and the exact frequency at which overruns occur will vary slightly based on the data content of the image.</remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.LineFrequency"><summary>The frequency at which lines are currently being acquired from the camera.</summary><value>The frequency at which lines are being acquired from the camera, in lines/sec.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.DistancePerLine"><summary>The distance, in mm, between lines acquired from the camera.</summary><value>The distance, in mm, between lines acquired from the camera.</value><remarks><para>This read-only distance is a computed value.  If the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoder</see> or <see cref="T:Cognex.VisionPro.CogMotionInputConstants">SimulatedEncoder</see> the distance is computed using <see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" />, <see cref="P:Cognex.VisionPro.ICogAcqLineScan.EncoderResolution" />, and <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycle" />.</para><para>If the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see> the distance is a copy of <see cref="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedDistancePerLine" />.</para><para>If the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Legacy</see> the distance is undefined.</para><para>For a factory-calibrated DS1000 Series camera this distance is also equal to the <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.YScale" />, the distance between rows of the range image.</para></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.ExpectedDistancePerLine"><summary>The expected distance, in mm, between lines acquired from the camera.</summary><remarks>This distance is used to calculate the frequency of the test encoder when the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see>.</remarks><value>Expected distance, in mm, between lines acquired from the camera.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.ExpectedMotionSpeed"><summary>The user-specified speed that the motion system is expected to operate at.</summary><value>Expected speed of the motion system in mm/sec.</value><remarks>This speed is used to calculate the frequency of the test encoder when the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">SimulatedEncoder</see> or <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see>.  This speed may differ from the actual instantaneous speed of the motion system.</remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.MotionInput"><value>The type of motion input.  The default value for a DS1000 series camera is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see>.  Otherwise, it is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Legacy</see>.</value><exception cref="T:System.ArgumentOutOfRangeException">If you have a DS1000 series camera and the supplied mode is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Legacy</see>.</exception><summary>The motion input for a linescan acquisition.  This value controls whether linescan acquisition is performed using a hardware encoder or the test encoder.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.ProfileCameraAcquireDirection"><value>The default value is <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LensToLaser</see>.</value><summary>The scene motion for the next image acquisition. If you are using a quadrature encoder, only motion in the specified direction will cause image data to be acquired. If you are using the test encoder or a single-channel encoder, then any motion will cause image data to be acquired, and all motion will be treated as if it were in the specified direction.</summary><remarks>This currently only applies to the DS1000 series.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.ProfileCameraPositiveEncoderDirection"><remarks>This currently only applies to the DS1000 series.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The scene motion that causes the encoder to generate positive-direction pulses. Set this value to <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LensToLaser</see> if motion in that direction generates positive encoder pulses; otherwise, set this value to <see cref="F:Cognex.VisionPro.CogProfileCameraDirectionConstants.LaserToLens">LaserToLens</see>.</summary><value>The default value is <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LensToLaser</see>.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.DistancePerCycleMax"><value>The maximum value can be applied to DistancePerCycle.</value><summary>Maximum DistancePerCycle value allowed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.DistancePerCycleMin"><value>The minimum value can be applied to DistancePerCycle.</value><summary>Minimum DistancePerCycle value allowed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.DistancePerCycle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than DistancePerCycleMin or greater than DistancePerCycleMax.</exception><summary>Specifies the distance moved for each cycle of the encoder signal.</summary><value>This currently only applies to the DS1000 series.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.IgnoreTooFastEncoder"><summary>Read or set whether isTooFastEncoder acqfailure can be generated due to a line overrun situation.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.EncoderResolution"><summary>Controls the number of edges required for each encoder count.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.IgnoreBackwardsMotionBetweenAcquires"><summary>When true, any backwards motion after an acquisition will not delay the start of the next acquisition.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.StartAcqOnEncoderCount"><summary>Sets the number of encoder counts to wait before acquisition starts.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.UseSingleChannel"><remarks><PARA>If UseSingleChannel is set to true, it might be  possible to connect only a single encoder channel as encoder input instead of using a quadrature dual channel type encoder. 
						The channel that is used depends upon the setting of <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive" />. 
						If <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive" /> is true, channel A is used. If false, channel B is used.</PARA><PARA>One advantage of using a single channel encoder input is in some cases it might be desirable to acquire without considering the direction of motion of the encoder. </PARA><PARA>This property applies only to the MVS-8600/8600e platform. Only the MVS-8600/8600e platform supports this function.</PARA><DEFAULT>The default value is false indicating both encoder channels A and B are considered for acquisition on platforms supporting this functionality.</DEFAULT></remarks><summary>Reads or sets whether only one channel of the encoder signal is used for acquisition.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.EncoderOffset"><summary>Used to calculate the encoder count at which line zero of the region of interest occurs.</summary><remarks><PARA>Sets or gets the encoder position at which line zero of the region of interest occurs.
This offset is meaningful only for encoder-triggered acquisition.
Out of range values are clipped to the camera format size.</PARA><PARA>To specify the starting encoder count, you must also take into account the
start of the <see cref="T:Cognex.VisionPro.CogAcqROI" />. In the following examples
<CONSOLE>y0</CONSOLE> means the <paramref name="Y" /> parameter returned by <see cref="T:Cognex.VisionPro.CogAcqROI" />.<see cref="M:Cognex.VisionPro.ICogAcqROI.GetROIXYWidthHeight(System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />.</PARA><PARA>For acquisitions in which the encoder count <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive">increases</see>, the starting encoder count is:</PARA><CODE>
startCount = (y0 * <see cref="M:Cognex.VisionPro.ICogAcqLineScan.GetStepsPerLine(System.Int32@,System.Int32@)">stepsPerLine</see>) + encoderOffset
</CODE><PARA>For acquisitions in which the encoder count <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive">decreases</see>, the starting encoder count is:</PARA><CODE>
startCount = (−y0 * <see cref="M:Cognex.VisionPro.ICogAcqLineScan.GetStepsPerLine(System.Int32@,System.Int32@)">stepsPerLine</see>) + encoderOffset
</CODE><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the encoder offset changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_EncoderOffset--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderOffset" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.EncoderPort"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the encoder port changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_EncoderPort--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderPort" /></li></ul></event><remarks><PARA>Sets or gets the encoder port to use with this acquisition FIFO.</PARA><PARA>On some platforms the association between a camera port and an encoder port is
fixed: each encoder can trigger an acquisition to a subset of all the available
camera ports on each frame grabber. This means that the encoder port you specify
must be consistent with the camera port of the FIFO that this property is associated
with. See the documentation for the Cognex Video Module (CVM) that you are using for supported encoder/camera
port settings.</PARA><NOTE>Ignored on MVS-8600. The encoder port is the same as the camera port.</NOTE><DEFAULT>0</DEFAULT></remarks><summary>Port for Encoder.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is less than zero or &gt;= <see cref="P:Cognex.VisionPro.ICogAcqLineScan.NumEncoderPorts" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The specified port is not compatible with the current <see cref="P:Cognex.VisionPro.ICogAcqFifo.CameraPort">camera port</see>.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.NumEncoderPorts"><remarks><PARA>Gets the number of encoder ports available.</PARA></remarks><summary>Number of encoder ports available.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.TriggerFromEncoder"><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para>The trigger model is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when encoder triggering is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_TriggerFromEncoder--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerFromEncoder" /></li></ul></event><remarks><PARA>Sets or gets whether triggering is from an encoder or from an external trigger.
Encoder triggering is only valid for <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Auto</see> and 
<see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Semi</see>.
When the trigger model is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Manual</see>, you can set this property, but it is ignored.
</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqLineScan.ResetCounterOnHardwareTrigger" /> should be True when this property is True.</PARA><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>True</DEFAULT></remarks><summary>Read or set whether triggering is from an encoder or from an external trigger.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.ResetCounterOnHardwareTrigger"><summary>Reads or sets whether encoder counter is reset on a hardware trigger.</summary><remarks><PARA>Reads or sets whether the encoder counter is reset when the FIFO gets a trigger signal from the frame grabber.</PARA><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_ResetCounterOnHardwareTrigger--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfResetCounterOnHardwareTrigger" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.CurrentEncoderCount"><remarks><PARA>The current value of the encoder.</PARA><PARA>
	The Cognex MVS-8600 does not provide an absolute encoder position counter.
	On that platform, this property returns the product of
	the number of the line being acquired and the
	steps per line
	encoder setting.
	This value may not be accurate if the
	encoder travels backwards during acquisition.
	If you are using  the
	<see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled">test encoder</see>
	the steps per line value is ignored, so this property returns the currently acquired line number.
	If there is no acquisition in progress, the value of this property is zero.
</PARA></remarks><summary>Current value of the encoder.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.AcquireDirectionPositive"><summary>Reads or sets whether the Acquire direction is positive.</summary><remarks><PARA>Set/get the current acquire direction. If true, the encoder needs to be travelling in the positive direction (i.e. increasing encoder values) for acquisition to begin.  If false, the encoder needs to be travelling in the negative direction (i.e. decreasing values) for acquisition to begin. Acqusition can be started either by the hardware means determined by <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> or a software command (with manual trigger model).</PARA><PARA>For platforms which support encoder-triggered acquisitions, the specified acquire direction is only enforced when</PARA><PARA>  - <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> is set to true,</PARA><PARA>  - there is a valid setting for <see cref="P:Cognex.VisionPro.ICogAcqLineScan.EncoderOffset" />, and,</PARA><PARA>  - the trigger model is not Manual.</PARA><PARA>Unlike <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderDirectionPositive" />, this method does not dictate whether the encoder count increments or decrements. The encoder's direction of travel determines that.</PARA><DEFAULT>The default value of direction is true.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the direction changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_AcquireDirectionPositive--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAcquireDirectionPositive" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.TestEncoderDirectionPositive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the direction changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_TestEncoderDirectionPositive--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTestEncoderDirectionPositive" /></li></ul></event><remarks><PARA>Sets or gets whether the test encoder values increase (True) or decrease (False) during image acquisition.</PARA><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>True</DEFAULT></remarks><summary>Reads or sets whether the test encoder direction is positive.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.TestEncoderEnabled"><remarks><PARA>Sets or gets whether the test encoder on the CVM is used instead of the external encoder interface.</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderDirectionPositive" /> lets you specify whether the test encoder's counts increase or decrease. 
Use <see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" /> to set the steps per line for the test encoder.</PARA><PARA>
	There is no test encoder availble on Cognex MVS-8600 frame grabbers.
	On those frame grabbers,when the test encoder is enabled,  the hardware runs freely and acquires lines
	as fast as possible without using an encoder input, and the
	<see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" />
	setting is ignored.
	You can use a positive
	<see cref="P:Cognex.VisionPro.ICogAcqTriggerFilter.TriggerDelay" />
	to create a delay between the acquisition of each line.

</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the test encoder is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_TestEncoderEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTestEncoderEnabled" /></li></ul></event><summary>Reads or sets whether the test encoder is used instead of the external encoder interface.  This setting is superceded by the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> setting for hardware that supports MotionInput.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.GetStepsPerLine(System.Int32@,System.Int32@)"><param name="stepsPerLine"><PARA>The number of encoder steps per line.</PARA></param><param name="step16thsPerLine"><PARA>The number fractional steps per line as 1/16th steps that can be
added to <paramref name="stepsPerLine" /> to make up a single line.</PARA></param><summary>Get the number of encoder steps per image line. The number of steps is StepsPerLine + Step16thsPerLine/16.</summary><remarks><PARA>Gets the number of encoder steps per image line. The number of steps is <paramref name="stepsPerLine" /> + <paramref name="step16thsPerLine" />/16.</PARA><NOTE><paramref name="steps16thsPerLine" /> is ignored on MVS-8600.</NOTE><DEFAULT><paramref name="stepsPerLine" />: 3 <HTMLPASS><BR /></HTMLPASS><paramref name="step16thsPerLine" />: 0</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)"><param name="stepsPerLine"><PARA>The number of encoder steps per line.</PARA></param><param name="step16thsPerLine"><PARA>The number fractional steps per line as 1/16th steps that can be
added to <paramref name="stepsPerLine" /> to make up a single line.</PARA></param><summary>Set the number of encoder steps per image line. The number of steps is StepsPerLine + Step16thsPerLine/16.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="stepsPerLine" /> &lt; 1 or <paramref name="stepsPerLine" /> &gt; 4095 or <HTMLPASS><BR /></HTMLPASS><paramref name="step16thsPerLine" /> &lt; 0 or <paramref name="step16thsPerLine" /> &gt; 15
	</para></exception><remarks><PARA>Set the number of encoder steps per image line. The number of steps is <paramref name="stepsPerLine" /> + <paramref name="step16thsPerLine" />/16.</PARA><PARA>
When using the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled">test encoder</see> with the test line
scan camera ("Test LS 2048x2048"), the minimum steps per line you can use
without getting <see cref="T:Cognex.VisionPro.CogErrConstants">e_CogAcq_EncoderOverrun</see> errors is:</PARA><CODE>
minStepsPerLine = (width + xROI) / 64 + 2
</CODE><PARA>Where <CONSOLE>width</CONSOLE> is the width of the <see cref="T:Cognex.VisionPro.CogAcqROI" /> and <CONSOLE>xROI</CONSOLE> is the x-coordinate of the region
of interest. If <CONSOLE>xROI</CONSOLE> is zero, the smallest
value you can use with the test encoder without getting <see cref="T:Cognex.VisionPro.CogErrConstants">e_CogAcq_EncoderOverrun</see> errors
is 34 for 2048-pixel-wide images and 18 for 1024-pixel-wide images.</PARA><PARA>See <see cref="u:Acquisition.LineScan.Walkthrough.SetStepsPerLine">How to Set Steps per Line for Linescan Cameras</see> for additional information about choosing appropriate values.</PARA><NOTE><paramref name="steps16thsPerLine" /> is ignored on MVS-8600.</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the number of steps per line changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_StepsPerLine--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetStepsPerLine" /></li></ul></event></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqLineScan.ResetCounter"><remarks><PARA>Resets the encoder counter.</PARA><PARA>
	The Cognex MVS-8600 does not provide an absolute encoder position counter.
	There is, however, a counter that keeps track of any backward encoder pulses
	that the hardware detects when the encoder is moving opposite to the expected
	acquisition direction. Acquisition will not begin until forward motion resets this counter.
	Calling this method clears the backward encoder pulse counter and causes
	acquisition to begin right away without waiting for compensating forward counts.
	
</PARA></remarks><summary>Reset encoder counter.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqLookupTable.NumLookupTables"><remarks><PARA>Returns the number of lookup tables available to be set or read.</PARA><DEFAULT>Camera dependent</DEFAULT></remarks><summary>Returns the number of lookup tables available to be set or read.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqMasterClockFrequency.MasterClockFrequency"><summary>Reads or sets the master clock frequency.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the clock frequency changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqMasterClockFrequency_MasterClockFrequency--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMasterClockFrequency" /></li></ul></event><remarks><PARA>Sets or gets the master clock frequency in MHz. This is the clock signal sent from the CVM to the camera. This value indirectly controls the acquisition rate.</PARA><DEFAULT>Hardware dependent.</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 5 or &gt; 40.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqOffsetClamp.OffsetClampMode"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the clamping mode changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqOffsetClamp_OffsetClamp--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOffsetClamp" /></li></ul></event><summary>Get or set the mode for clamping and offset.</summary><remarks><PARA>Sets or gets the acquisition FIFO's clamping and offset mode.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogAcqOffsetClampConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is not in <see cref="T:Cognex.VisionPro.CogAcqOffsetClampConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqROI.ROIMode"><summary>Gets or sets the ROIMode.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqROI.GetROIXYWidthHeight(System.Int32@,System.Int32@,System.Int32@,System.Int32@)"><param name="x"><PARA>The x-coordinate of the start of the ROI.</PARA></param><param name="y"><PARA>The y-coordinate of the start of the ROI.</PARA></param><param name="width"><PARA>The width of the ROI</PARA></param><param name="height"><PARA>The height of the ROI.</PARA></param><remarks><PARA>Sets the acquisition region of interest (ROI). The ROI allows a subset of the pixels defined by the video format to be returned by <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.</PARA></remarks><summary>Gets the ROI. The ROI allows a subset of the pixels defined by the video format to be returned by a call to CompleteAcquire.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqROI.SetROIXYWidthHeight(System.Int32,System.Int32,System.Int32,System.Int32)"><param name="x"><PARA>The x-coordinate of the start of the ROI.</PARA></param><param name="y"><PARA>The y-coordinate of the start of the ROI.</PARA></param><param name="width"><PARA>The width of the ROI</PARA></param><param name="height"><PARA>The height of the ROI.</PARA></param><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the ROI is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqROI_ROI--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetROIXYWidthHeight" /></li></ul></event><summary>Sets the ROI.</summary><remarks><PARA>Sets the acquisition region of interest (ROI).</PARA><NOTE>If the ROI specified extends in the positive direction beyond the bounds specified by the video format, it will be silently clipped.</NOTE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>Any parameter is &lt; 0.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqROI.IsROIModeSupported(Cognex.VisionPro.CogAcqROIModeConstants)"><param name="mode"></param><summary>Returns True if the corresponding mode setting is supported.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqReadoutDirection.VerticalReadoutReversed"><summary>Get or set whether vertical readout direction is reversed.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqReadoutDirection_VerticalReversed--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfVerticalReadoutReversed" /></li></ul></event><remarks><PARA>Sets or gets whether the vertical readout direction is reversed. If True, each line will be read from bottom to top instead of from top to bottom.</PARA><NOTE>This property is supported only on CDC-100 cameras.</NOTE><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqReadoutDirection.HorizontalReadoutReversed"><remarks><PARA>Sets or gets whether the horizontal readout direction is reversed. If True, each line will be read from right to left instead of from left to right.</PARA><NOTE>This property is supported only on CDC-100 cameras.</NOTE><DEFAULT>False</DEFAULT></remarks><summary>Get or set whether horizontal readout direction is reversed.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqReadoutDirection_HorizontalReversed--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfHorizontalReadoutReversed" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqSample.SampleValuesLocked"><summary>Returns whether SampleX and SampleY are locked together.If this property is true then setting either SampleX or SampleY will cause the other to be set to the same value.</summary><remarks><PARA>Returns whether <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> and <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> are constrained to the be same value.
If this property is True then, setting either <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> or <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> causes the other value to be set to the same value.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqSample.SampleY"><remarks><PARA>Sets or gets y-sampling. You can use subsampling to reduce the image size and may result in faster acquisitions.
Subsample values specify the ration of full-frame pixels to sampled pixels. For example, setting <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> to 8 specifies an 8:1 reduction in the number of pixels along the y-axis.</PARA><PARA>If <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True, changing this value sets <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> to the same value.</PARA><DEFAULT>1, no subsampling</DEFAULT></remarks><summary>Get or set Y sampling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSample_SampleY--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSampleY" /></li></ul></event><EVENT TYPELIB="." IFACE="ICogAcqFifoEvents" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM><LINK ENUM="CogStateIDs">cogState_MoreThanOneStateIDChanged</LINK></ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK ENUM="CogFAs_AcqFifo">cogFA_AcqFifo_Sampling</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		Fires when the value changes and <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True. 
		(<see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> changed also.)
	</EVENT></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqSample.SampleX"><summary>Get or set X sampling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.</para></exception><remarks><PARA>Sets or gets x-sampling. You can use subsampling to reduce the image size and may result in faster acquisitions.
Subsample values specify the ration of full-frame pixels to sampled pixels. For example, setting <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> to 8 specifies an 8:1 reduction in the number of pixels along the x-axis. </PARA><PARA>If <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True, changing this value sets <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> to the same value.</PARA><DEFAULT>1, no subsampling</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSample_SampleX--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSampleX" /></li></ul></event><EVENT TYPELIB="." IFACE="ICogAcqFifoEvents" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM><LINK ENUM="CogStateIDs">cogState_MoreThanOneStateIDChanged</LINK></ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK ENUM="CogFAs_AcqFifo">cogFA_AcqFifo_Sampling</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		Fires when the value changes and <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True. 
		(<see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> changed also.)
	</EVENT></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqSettlingTime.SettlingTime"><summary>Reads or sets the settling time in milliseconds.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para>The acquisition <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">trigger model</see> is 
<see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the settling time is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSettlingTime_Time--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTime" /></li></ul></event><remarks><PARA>Sets or gets the settling time in milliseconds.</PARA><PARA>In general, you should not need to use this interface, and you should select a video format that supports your application.</PARA><PARA>
This interface allows you to specify the settling time, the time to wait after a trigger before
starting an acquisition. Typically, you would specify a settling time when using a
free-running camera with automatic triggering and ambient illumination to allow a part
to stop moving once it is in position. The settling time should be long enough to ensure
that no portion of the image is in motion during image integration.</PARA><PARA>
To choose an appropriate settling time, you need to consider the characteristics of the
part as well as the latencies of integrating the image. A conservative settling time
depends on whether the camera is a rapid-reset camera or free-running and whether a
strobe is used.
</PARA><PARA>
The following examples illustrate appropriate choices for settling time so that the image
is not blurred. In each example, the grey bars denote frames that were integrated while
the part was still in motion; the solid green bars denote frames that were integrated after
the part stopped moving.
</PARA><PARA>The following figure shows a free-running camera with no strobe in frame integration
mode.</PARA><PICTURE SRC="frame.jpg" HEIGHT="312" WIDTH="662" ALT="Settling time: frame integration" apiSRC="SettlingTime_frame.jpg" /><PARA>The following figure shows a free-running camera with no strobe in field integration
mode.</PARA><PICTURE SRC="field.jpg" HEIGHT="219" WIDTH="369" ALT="Settling time: field integration" apiSRC="SettlingTime_field.jpg" /><PARA>The following figure shows a rapid-reset camera with no strobe.</PARA><PICTURE SRC="rr.jpg" HEIGHT="220" WIDTH="281" ALT="Settling time: rapid reset" apiSRC="SettlingTime_rr.jpg" /><PARA>For a strobed acquisition, the settling time should be zero.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqSimultaneous.Master"><remarks><PARA>Returns the master acquisition FIFO if this is a slave FIFO. Returns null if this is not a slave.</PARA></remarks><summary>Returns the master acquisition fifo if this is a slave. Returns null if this is not a slave.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqStrobe.StrobePulsePolarityHigh"><remarks><PARA>Sets or gets whether the polarity of the strobe pulse is high (True) or low (False).</PARA><NOTE>If you are using  an MVS-8504 frame grabber with the TTL pass-through cable option (P/N 300-0390), the polarity
information is reversed. When this value is True, the active pulse is set to low; when this value is False, the active pulse is set to High.
<!-- CR 31321 --></NOTE><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity selection is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobe_PulsePolarityHigh--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfPulsePolarityHigh" /></li></ul></event><summary>Whether strobe pulse polarity is high (True) or low (False).</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqStrobe.StrobeEnabledSupported"><summary>Indicates whether the StrobeEnabled property is supported.  If StrobeEnabledSupported is false then changing StrobeEnabled has no effect.</summary><remarks><PARA>Indicates whether this FIFO supports the <see cref="P:Cognex.VisionPro.ICogAcqStrobe.StrobeEnabled" /> property. If the 
	value of this property is false, then setting <see cref="P:Cognex.VisionPro.ICogAcqStrobe.StrobeEnabled" /> has no effect.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqStrobe.StrobeEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the strobe is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobe_Enabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEnabled" /></li></ul></event><summary>Whether the strobe is enabled.</summary><remarks><PARA>Sets or gets whether the strobe is enabled. True if the strobe is enabled, false if the acquisition FIFO uses ambient lighting.</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqStrobeDelay.StrobeDelay"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the strobe delay changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobeDelay_StrobeDelay--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStrobeDelay" /></li></ul></event><summary>Get or set strobe delay.</summary><remarks><PARA>Sets or gets the strobe delay in milliseconds. The strobe delay is the delay time between the shutter pulse
and the strobe firing.</PARA><PARA>The strobe delay can be a negative value so that the strobe pulse fires before the shutter pulse. Negative values
are useful when you are using slower strobes such as LED strobes.</PARA><PARA>To determine the delay  time for <see cref="u:Acquisition.CDC_CMOS.Theory.CMOSCams">Cognex CDC cameras</see>, see <see cref="u:Acquisition.CDC_CMOS.Walkthrough.ChooseCDCShutterMode">How to Choose a CDC Shutter Mode</see>.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqStrobePulseDuration.StrobePulseDuration"><summary>Reads or sets the strobe pulse duration. The special value of 0 indicates to use the shortest time supported by the hardware.</summary><remarks><PARA>Sets or gets the duration of the strobe pulse in milliseconds. The special value zero indicates to use the shortest time supported by the hardware.</PARA><DEFAULT>20e-3 milliseconds</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>0 The new value is &lt; 0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the strobe duration changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobe_PulseDuration--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfPulseDuration" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqSync.SyncModel"><remarks><PARA>Sets or gets the camera synchronization model as described by one of the values in  <see cref="T:Cognex.VisionPro.CogAcqSyncModelConstants" /></PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqSync.SyncModel" /> is supported only on the Cognex MVS-8100M.</PARA><PARA>If you are using a <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats">video format</see> that is described by a Camera Configuration File (CCF), <see cref="P:Cognex.VisionPro.ICogAcqSync.SyncModel" /> has no effect. To select a synchronization model for a CCF-based video format, use the CCF that specifies the synchronization your application requires.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the sync model changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSyncModel_SyncModel--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSyncModel" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" />  is not in <see cref="T:Cognex.VisionPro.CogAcqSyncModelConstants" /></para></exception><summary>Reads or sets the camera synchronization model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTrigger.TriggerLowToHigh"><summary>Reads or sets whether triggers are a low to high transition.</summary><remarks><PARA>Sets or gets the trigger line polarity. True means that a trigger signal is an input line transition from low to high. False means that a trigger signal is an input line transition from high to low.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger polarity is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTrigger_LowToHigh--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerLowToHigh" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTrigger.TriggerEnabled"><remarks><PARA>Sets or gets whether triggering is enabled. If triggering is disabled and the trigger model is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Manual</see>, acquisition requests will be queued until triggering is enabled. For other trigger models, transitions on the trigger input line are ignored when triggering is disabled.</PARA><PARA>If you are using a frame grabber that supports CVM11, you can specify
encoder-triggered acquisition which is a special case of hardware triggering
for line scan cameras. To use encoder triggering, set the trigger
model as <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Auto</see> or
<see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Semi</see>
and set the  <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> property.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Reads or sets whether triggers are enabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when triggering is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTrigger_Enabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerEnabled" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTrigger.TriggerModel"><summary>Reads or sets the trigger model.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger model is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTrigger_Model--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerModel" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is not in  <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants" /> or is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNotAllowedForSlaveException" cgnxHRESULT="E_CogAcq_NotAllowedForSlave"><para>The acquisition FIFO is a slave.</para></exception><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">trigger model</see>.</PARA><PARA>Changing the trigger model stops the current acquisition. Before changing the trigger model, use <see cref="M:Cognex.VisionPro.ICogAcqFifo.Flush" /> to flush any pending acquisition requests.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTriggerFilter.IgnoreMissedTrigger"><summary>Get or set whether isMissed acqfailure can be generated due to a missed trigger when performing acquisition using an area scan camera.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTriggerFilter.TriggerDelay"><summary>Get or set period of time in milliseconds between trigger and start of camera integration.</summary><remarks><PARA>Sets or gets the period of time in milliseconds between the trigger and start of camera integration.</PARA><PARA>
	On a Cognex MVS-8600 frame grabber, the delay is rounded to the nearest multiple
	of the horizontal line period. With a linescan camera,
	the delay takes effect for every line instead of every frame.
	You can use this property wth a
	<see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled">test encoder</see>
	to vary the line rate.
</PARA><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger delay changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTriggerFilter_TriggerDelay--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerDelay" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTriggerFilter.MinTriggerPeriod"><summary>Get or set minimum time between triggers in ms.</summary><remarks><PARA>Sets or gets the minimum time between triggers in milliseconds. 
Only the first valid trigger within a period will initiate a camera integration cycle. Other valid triggers in that same period
are missed.
You can use this value to help limit the camera acquisition rate. 

</PARA><PARA>Legal values range from 0 to 65.5. Zero specifies that there is no
period requirement. </PARA><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTriggerFilter_MinTriggerPeriod--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinTriggerPeriod" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqTriggerFilter.MinTriggerWidth"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTriggerFilter_MinTriggerWidth--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinTriggerWidth" /></li></ul></event><summary>Get or set minimum trigger width in ms.</summary><remarks><PARA>Sets or gets the minimum trigger width in milliseconds.  The trigger input signal must be asserted for
at least this amount of time before it is recognized as a valid input trigger. If the trigger does
not meet this width constraint, it is ignored.
</PARA><PARA>The latency between the edge transition of the trigger signal and the start of camera
integration is computed as (<see cref="P:Cognex.VisionPro.ICogAcqTriggerFilter.MinTriggerWidth" /> + <see cref="P:Cognex.VisionPro.ICogAcqTriggerFilter.TriggerDelay" />).</PARA><PARA>The legal values range from 0.003 to 0.258.</PARA><DEFAULT>0.005</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqCustomProperties.CustomPropsAsString"><summary>Read or set custom properties as a string.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqCustomProperties.CustomProps"><summary>Read or set custom properties as a collection.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqGigEVisionTransport.LatencyLevel"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLatencyLevel</event><summary>Reads or sets the latency level of the GigE Vision performance driver. The valid range is 0 (lowest latency) to 3 (lowest CPU). Smaller values reduce acquisition latency and may improve reliability at the expense of higher CPU usage. Default value is 3.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or greater than 3.</exception><value>Changing the acquisition latency level may improve reliability of the acquisition.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqGigEVisionTransport.PacketSizeMax"><value>The maximum value can be applied to PacketSize.</value><summary>Maximum size of image packets transmitted by the camera.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqGigEVisionTransport.PacketSize"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 1 or greater than PacketSizeMax.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfPacketSize</event><summary>Reads or sets the size of image packets transmitted by the camera. The default is the value that was automatically determined, and will vary based on the camera used and network configuration. In most cases, the packetSize value should not be changed from the default. Ideally, the automatically determined value will be 8000 or larger. A smaller value may indicate that jumbo frames are disabled on the network adapter, or that a switch in the network does not support jumbo frames. The packetSize function controls the GevSCPSPacketSize feature of the camera.</summary><value>Impacts the size of image packets transmitted by the camera.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqGigEVisionTransport.TransportTimeout"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfTransportTimeout</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0.</exception><summary>Reads or sets the maximum timeout, in milliseconds, for the camera to transmit an image. Adjust the transport timeout to a larger value to allow successful acquisition from cameras with a long readout time, as may occur with a linescan camera. Default timeout value is 2000 ms.</summary><value>The maximum timeout, in seconds, for the camera to transmit an image.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.TriggerSignal"><value>The default is Opto.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfTriggerSignal</event><summary>Get or set the trigger signal. May be either Opto or Differential.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.PeakDetectionMode"><summary>Reads or sets the selection for laser peak detection.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfPeakDetectionMode</event><value>The default is Max</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.BinarizationThreshold"><value>The default is BinarizationThresholdDefault.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfBinarizationThreshold</event><summary>Reads or sets the Binarization Threshold pixel value when Binary laser detection mode is selected.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.MinimumBinarizationLineWidth"><summary>Reads or sets the Minimum Binarization Linewidth when Binary laser detection mode is selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfMinimumBinarizationLineWidth</event><value>The default is MinimumBinarizationLineWidthDefault.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.LaserDetectionMode"><summary>Determines the tradeoff between maximum speed and accuracy of the laser detection algorithm.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLaserDetectionMode</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.TriggerType"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfTriggerType</event><summary>Selects the triggering behavior of the camera.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.LinkDetectionZones"><summary>When true, the base of Zone 2 is linked to the top of Zone 1, such that changes to Zone 1 will automatically make a corresponding adjustment to Zone 2.  This is useful when adjusting the distance between the camera and the object being imaged, as both zones can adjusted by changing only the Zone 1 base.  Note that as the LinkDetectionZones setting is turned on and off, the value of zDetectionBase2 will automatically toggle between an absolute and relative value.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLinkDetectionZones</event><value>Applies to the area of the sensor used for laser detection.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.BridgeDetectionZones"><summary>When true, the enabled detection zones are combined into a single zone starting at the bottom of the lowest zone and ending at the top of the highest zone.  The ZDetectionSampling setting from Zone 1 is used for the entire combined zone.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfBridgeDetectionZones</event><value>Applies to the area of the sensor used for laser detection.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.HighDynamicRange"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfHighDynamicRange</event><summary>Read or sets high dynamic range operation. When enabled, the camera uses multiple exposures to increase the dynamic range. This is useful when the laser line passes over both dark and highly reflective regions. Enabling high dynamic range will reduce the maximum line rate. Default value is False.</summary><value>Controls the maximum line rate by acquiring images with multiple expsures.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.LaserMode"><summary>Reads or sets the mode of the laser. Default is Strobed. Laser is on when an image is acquired. "On" and "Off" are intended for setup and diagnostic purposes only.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLaserMode</event><value>Determines the state of laser.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.CameraMode"><summary>Reads or sets the operational mode of the camera. The camera mode setting will affect the type of image acquired. Intensity and IntensityWithGraphics images are intended for diagnostic purposes only. Range is for calibrated height profile images. Default mode is IntensityWithGraphics.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfCameraMode</event><value>Determines the acquisition mode of the camera.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.DetectionSensitivityMax"><summary>Defines the maximum threshold used for detecting the laser. Maximum value will vary with camera model and firmware version.</summary><value>The maximum value can be applied to DetectionSensitivity.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.DetectionSensitivity"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or greater than DetectionSensitivityMax.</exception><summary>Reads or sets the sensitivity of the laser detection. A higher value makes the laser easier to find and allows a lower exposure setting, which in turn allows a higher line rate. A lower value will prevent mistaking noise for the laser in areas where the laser is obscured.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfDetectionSensitivity</event><value>Used to detect where the laser is.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionSamplingMax"><summary>Defines the maximum number of rows can be reduced.</summary><value>The maximum value can be applied to ZDetectionSampling.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionSampling2"><summary>Reads or sets the number of rows used for laser finding to be reduced in detection zone 2.  1 processes every row, 2 processes every other row. Increasing ZDetectionSampling increases the maximum line rate when acquiring range images, but reduces the measurement precision. The increase in maximum line rate is in addition to the increase associated with adjusting ZDetectionBase and ZDetectionHeight. Default value is 1.</summary><value>May improve maximum line rate by reducing the number of rows used for laser finding.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionSampling</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 1 or greater than ZDetectionSamplingMax.</exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionSampling"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionSampling</event><summary>Reads or sets the number of rows used for laser finding to be reduced. 1 processes every row, 2 processes every other row. Increasing ZDetectionSampling increases the maximum line rate when acquiring range images, but reduces the measurement precision. The increase in maximum line rate is in addition to the increase associated with adjusting ZDetectionBase and ZDetectionHeight. Default value is 1.</summary><value>May improve maximum line rate by reducing the number of rows used for laser finding.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 1 or greater than ZDetectionSamplingMax.</exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionHeightMax"><summary>Defines the maximum range of heights (in mm) that can be specified via the ZDetection settings.</summary><value>The maximum value applies to the sum of ZDetectionBase and ZDetectionHeight.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionEnable2"><value>True uses zone 2 to detect the laser.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionZoneEnable2</event><summary>Enables or disables the second detection zone.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionEnable"><summary>Enables or disables the first detection zone.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionZoneEnable</event><value>True uses zone 1 to detect the laser.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionHeight2"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionBase is greater than ZDetectionHeightMax.</exception><value>The height, in mm, of the second detection zone.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionHeight</event><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionHeight2 is the height, in mm, of the second detection range starting at ZDetectionBase2. A smaller ZDetectionHeight2 increases the maximum line rate when acquiring range images, but reduces the measurement range. When converting ZDetectionHeight2 to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionHeight"><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionHeight is the height, in mm, of the first detection range stating at ZDetectionBase. A smaller ZDetectionHeight increases the maximum line rate when acquiring range images, but reduces the measurement range. When converting ZDetectionHeight to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionHeight</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionBase2 is greater than ZDetectionHeightMax.</exception><value>Applies to the area of the sensor used for laser detection.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionBase2"><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionBase2 is the distance, in mm, where the detection range begins.  The value is relative to either the top of the first detection zone if LinkDetectionZones is true and the first zone is enabled, or the camera defined origin of the Z axis otherwise. When converting ZDetectionBase2 to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionHeight is greater than ZDetectionHeightMax.</exception><value>Applies to the area of the sensor used for laser detection.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionBase</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.ZDetectionBase"><value>Applies to the area of the sensor used for laser detection.</value><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionBase is the distance, in mm, relative to the camera defined origin of the Z axis, where the first detection range begins. When converting ZDetectionBase to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionBase</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionHeight is greater than ZDetectionHeightMax.</exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqProfileCamera.Set2ZDetectionZones(System.Double,System.Double,System.Double,System.Double)"><param name="base">The bottom of the first zone in mm above the z=0 reference point for the camera.  This argument is ignored if ZDetectionEnable is false.</param><param name="height">The top of the first zone in mm relative to base. This argument is ignored if ZDetectionEnable is false.</param><param name="base2">The bottom of the second zone in mm above either the top of the first zone (if both LinkDetectionZones and the first zone are enabled) or the z=0 reference point otherwise. This argument is ignored if ZDetectionEnable2 is false.</param><param name="height2">The top of the second zone in mm relative to base2. This argument is ignored if ZDetectionEnable2 is false.</param><summary>Sets the dimensions of two detection zones simulataneoulsy.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.CalibratedSpaceName3D"><remarks>This only applies when acquiring a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The name of the calibrated 3D coordinate space.</summary><value>The default value is: Sensor3D.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.SelectCalibratedSpace2D"><remarks>This only applies when acquiring a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</remarks><summary>Whether or not to use the calibrated 2D coordinate space of the range image as its 2D <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" />. If this value is set to false the SelectedSpaceName will be "@". Otherwise it will be the name of the calibrated 2D space.</summary><value>The default value is True.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.CalibratedSpaceName2D"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The name of the calibrated 2D coordinate space. This name will be added to the 2D <see cref="P:Cognex.VisionPro.ICogImage.CoordinateSpaceTree" /> of the acquired range image.</summary><remarks>This only applies when acquiring a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</remarks><value>The default value is: Sensor2D.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.AutoCorrectPixelRowOrder"><summary>Whether or not to automatically set the row-order of the acquired image to match the actual appearance of the scene. If this value is set to false, then images acquired in the <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LaserToLens</see> direction will have an inverted pixel row order (the image will appear mirrored top-to-bottom with respect to the actual appearance of the scene).</summary><remarks>This currently only applies to the profile camera.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The default value is True.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZContinuityThresholdEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Whether or not to enable ZContinuityThreshold.</summary><value>The default value is False.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZContinuityThresholdMax"><value>The maximum value can be applied to ZContinuityThreshold.</value><summary>Maximum ZContinuityThreshold value allowed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZContinuityThresholdMin"><summary>Minimum ZContinuityThreshold value allowed.</summary><value>The minimum value can be applied to ZContinuityThreshold</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZContinuityThreshold"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than ZContinuityThresholdMin or greater than ZContinuityThresholdMax.</exception><value>Specifies a maximum Z difference for interpolating between sensed Z values.</value><summary>Specifies a Z height difference in mm. Used when generating range images with a camera. The range image will not interpolate between sensed Z values which differ by more than the ZContinuityThreshold. Default is equal to the default ZDetectionHeight. The default was picked so that it would not affect generated range images.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZContinuityThreshold</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZOffsetMax"><summary>Maximum ZOffset value allowed.</summary><value>The maximum value can be applied to ZOffset.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZOffsetMin"><summary>Minimum ZOffset value allowed.</summary><value>The minimum value can be applied to ZOffset</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZOffset"><value>Defines a distance, in mm, relative camera defined origin of the Z axis, which corresponds to a pixel value of 0.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZOffset</event><summary>Reads or sets the distance, in mm, relative to the camera defined origin of the Z axis, which corresponds to a pixel value of 0. Used when generating range images. The default is 0.0.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than ZOffsetMin or greater than ZOffsetMax.</exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZScaleMax"><value>The maximum value can be applied to ZScale.</value><summary>Maximum ZScale value allowed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZScaleMin"><summary>Minimum ZScale value allowed.</summary><value>The minimum value can be applied to ZScale.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.ZScale"><summary>Reads or sets the scaling in mm of pixel values. Used when generating range images with a camera. When ZScale is positive, pixel values increase towards the camera. When ZScale is negative, pixel values increase away from the camera. Values near 0.0 will be rounded to 0.00001 or -0.00001. Default is 0.01 mm/pixel value. The default was picked to be a round number which also provides the full accuracy of the camera.</summary><value>Defines a distance between an object of interest and the camera in mm of pixel values.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than ZScaleMin or greater than ZScaleMax.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZScale</event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.YScale"><summary>Reads the dimensions of image pixels in mm in the Y direction. Unlike XScale and ZScale, the YScale setting is not used by the acq system. It is only used to set the Y component of the transform of the acquired image. The default is 1.0.</summary><value>The dimensions of image pixels in mm in the Y direction.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than YScaleMin or greater than YScaleMax.</exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.FirstPixelLocationRange"><value>The range of offset of the output image relative to the center, in mm.</value><summary>Defines the range of offset of the output image relative to the center, in mm. The offset must reside within the range. -FirstPixelLocationRange &lt;= FirstPixelLocation &lt;= FirstPixelLocationRange.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.FirstPixelLocation"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfFirstPixelLocation</event><summary>Reads or sets the offset of the output image relative to the center, in mm. Negative offsets are allowed. The default value corresponds to the leftmost location that can be seen at the furthest distance from the camera. Default value is negative, which indicates the left side of the center line.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than -FirstPixelLocationRange or greater than FirstPixelLocationRange.</exception><value>Offset of the output image relative to the center, in mm.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.XScaleMax"><summary>Maximum X scale value allowed.</summary><value>The maximum value can be applied to XScale.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.XScaleMin"><value>The minimum value can be applied to XScale.</value><summary>Minimum X scale value allowed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqRangeImage.XScale"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfXScale</event><value>The dimensions of image pixels in mm in the X direction.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than XScaleMin or greater than XScaleMax.</exception><summary>Reads or sets the dimensions of image pixels in mm in the X direction. Used when generating range images. Defaults to the scaling of sensor pixels at the closest distance from the camera that can be measured. This ensures no information is lost in range images for objects close to the camera, but it increases the width of the range image.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationZScale"><remarks><para>This value is ignored if either <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.UseFieldCalibration" /> or <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.RemoveSkewFromRangeImage" /> are false.</para><para>The default value is the same as the default for <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.ZScale" />.  The value will be forced to the default if <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.UseDefaultScales" /> is true </para></remarks><value>The number of mm per pixel value.</value><summary>Gets or sets the scaling from pixel values to mm used when field calibration is in effect.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationYScale"><summary>Gets or sets the range image pixel size in the Y direction used when field calibration is in effect.</summary><remarks><para>This value is ignored if either <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.UseFieldCalibration" /> or <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.RemoveSkewFromRangeImage" /> are false.</para><para>The default value is the same as the default for <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.XScale" />.  Note that the X and Y scales default to the same value to produce square pixels in the range image.  The value will be forced to the default if <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.UseDefaultScales" /> is true </para></remarks><value>The size of the range image pixel in the Y direction.</value></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationXScale"><value>The size of the range image pixel in the X direction.</value><remarks><para>This value is ignored if either <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.UseFieldCalibration" /> or <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.RemoveSkewFromRangeImage" /> are false.</para><para>The default value is the same as the default for <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.XScale" />.  The value will be forced to the default if <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.UseDefaultScales" /> is true </para></remarks><summary>Gets or sets the range image pixel size in the X direction used when field calibration is in effect.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.UseDefaultScales"><summary>Gets or sets whether default scaling values or user specified values are used for defining the pixel size of range images.  The default value is true.</summary><remarks><para>When set to true, the values held by <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.FieldCalibrationXScale" />, <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.FieldCalibrationYScale" />, and <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.FieldCalibrationZScale" /> are discarded and replaced with their default values.  If images from multiple sensors are to be stitched together, using the default scaling values is an easy way to guarantee that the range images will be acquired for best stitching performance.</para><para>When set to false, the scaling values can be set as desired.</para></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.AcqFifoSensorIndex"><summary>The index of this fifo's sensor in the field calibration file, or -1 if the sensor was not found.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationSensorCount"><summary>Gets the number of sensors in the field calibration file.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationSpace3DSensorIndex"><value>The index of the sensor whose coordinate space is used when generating the range image.</value><summary>Gets or sets which sensor's coordinate space is used when generating the range image.  The default value is 0.</summary><remarks><para>In a multi-sensor setting with image stitching, the FieldCalibrationSpace3DSensorIndex property specifies which sensor's coordinate space (as specified by the <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.FieldCalibrationSpace3D" /> ) to use when generating the range image. </para><para>In a multi-sensor scenario without image stitching, each sensor should have its own separate field calibration file, so the first sensor in the list is also the only sensor in the file.</para><para>The <see cref="M:Cognex.VisionPro.CogAcqFieldCalibration.GetFieldCalibrationSensorId" /> method can be used to query the corresponding label given to the sensor in the training application.</para><para>An error will be returned if index is greater than or equal to <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.FieldCalibrationSensorCount" />.</para></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationSpace3D"><value>The space to render the range image pixels in.</value><summary>Gets or sets the space to render the range image pixels in.  The default value is Sensor3D.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.RemoveSkewFromRangeImage"><remarks><para>This property specifies how the field calibration data is used during acquisition.</para><para>If true, the field calibration data is used to remove skew from the range image:<list type="bullet"><item><description>The range image will be rendered in an orthogonal coordinate space, which is suitable for use with all vision tools</description></item><item><description>The size of the resulting range image is determined by the acquisition system, and will be large enough to contain all data acquired from the sensor.  Further, the size of the image will vary from system to system based on the amount of skew being removed.</description></item><item><description>This option is generally slower and produces larger range images.</description></item></list></para>If false:<para><list type="bullet"><item><description>The range image will be rendered the same way as it would be without field calibration, in a non-orthogonal coordinate system.  Some vision tools may have difficulty handling the skew.</description></item><item><description>This option is faster and with cropping can produce significantly smaller images.</description></item></list></para></remarks><summary>Enables or disables use of field calibration data to remove skew from range images.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationFileSuccess"><returns>True true if the field calibration file was successfully opened and read. False if there is a problem with the field calibration file, including the case where no file was specified.</returns><summary>Gets the status of the field calibration file</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.FieldCalibrationFile"><value>The path to the field calibration data file.</value><summary>Gets or sets the path to the file containing the field calibration data.</summary><remarks><para>The default value is an empty string.</para><para>The file is read every time the setter is called, even if the file name is the same. The file is read even if the UseFieldCalibration is false.</para><para>Acquisition will fail if field calibration is enabled and either the file cannot be read, or the sensor is not found in the field calibration file.</para><para>If the file can not be read when the path is set, an exception is thrown, but the path will be set.</para></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.UseFieldCalibration"><remarks><para>When enabled and a valid field calibration file has been specified, data from the field calibration file is used when rendering the range image.  The field calibration is used to either remove skew from the rendered data, or adjust the coordinate spaces to account for the measured skew, depending on the <see cref="P:Cognex.VisionPro.CogAcqFieldCalibration.RemoveSkewFromRangeImage" /> setting.</para><para>If disabled, field calibration is not used.</para><para>An acquisition error will occur if field calibration is enabled, but the field calibration file is not specified or cannot be read.</para></remarks><summary>Enables or disables use of field calibration data when acquiring images.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.GetFieldCalibrationSensorId(System.Int32)"><param name="index">n/a</param><summary>Get the identifier provided by the user at train time for the corresponding sensor.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.GetFieldCalibrationSpaceName3D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants)"><param name="space">The coordinate space to get the name of.</param><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys3D", "Sensor3D", "YLockedToMotion3D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName3D" /> is used.</para></remarks><returns>The name of the coordinate space.</returns><summary>Get the name of a 3D coordinate space.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.SetFieldCalibrationSpaceName3D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants,System.String)"><param name="space">The coordinate space which will have its name set.</param><param name="newVal">n/a</param><summary>Set the name of a 3D coordinate space.</summary><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys3D", "Sensor3D", "YLockedToMotion3D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName3D" /> is used.</para></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.GetFieldCalibrationSpaceName2D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants)"><param name="space">The coordinate space to get the name of.</param><summary>Get the name of a 2D coordinate space.</summary><returns>The name of the coordinate space.</returns><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys2D", "Sensor2D", "YLockedToMotion2D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName2D" /> is used.</para></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogAcqFieldCalibration.SetFieldCalibrationSpaceName2D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants,System.String)"><param name="space">The coordinate space which will have its name set.</param><param name="newVal">n/a</param><summary>Set the name of a 2D coordinate space.</summary><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys2D", "Sensor2D", "YLockedToMotion2D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName2D" /> is used.</para></remarks></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.SfPenCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PenCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.SfGetPenKey"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPenKey may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.SfGetPenType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPenType may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.PenCount"><summary>Returns the number of custom pens that have been defined.</summary><remarks><PARA>Returns the number of custom pens that have been defined.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.GetPenKey(System.Int32)"><param name="index"><PARA>The index.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" />  is &lt; 0 or &gt; (<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenCount" />−1).</para></exception><summary>Returns the key for the pen at the given Index. Index must be in the range from 0 to PenCount-1 (inclusive).</summary><remarks><PARA>Returns the key for the pen at the given <paramref name="index" />. Index must be in the range from 0 to <see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenCount" />−1.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.GetPenType(System.Int32)"><param name="key"><PARA>The pen key.</PARA></param><summary>Returns the type (simple or interactive) of the pen with the given Key.</summary><remarks><PARA>Returns the type (<see cref="T:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants">Simple</see> or
<see cref="T:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants">Interactive</see>)
of the pen with the given <paramref name="key" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.AddSimplePen(Cognex.VisionPro.CogColorConstants,System.Int32,Cognex.VisionPro.CogGraphicLineStyleConstants)"><param name="color"><PARA>The pen color.</PARA></param><param name="lineWidth"><PARA>The line width in pixels.</PARA></param><param name="lineStyle"><PARA>The line style.</PARA></param><remarks><PARA>Creates a simple pen with the specified attributes and returns the key.</PARA><NOTE><see cref="M:Cognex.VisionPro.ICogGraphicMultiPen.AddSimplePen(Cognex.VisionPro.CogColorConstants,System.Int32,Cognex.VisionPro.CogGraphicLineStyleConstants)" />
	 never returns the special key value 0 which means to use the default pen properties of the graphic.</NOTE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="lineWidth" /> is &lt; 1, or
		<paramref name="lineStyle" /> is not in <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants" />.</para></exception><summary>Creates a simple pen with the specified attributes and returns the key.</summary><returns><PARA>The returned pen key.</PARA></returns><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is added. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.AddInteractivePen(System.Int32,System.Int32,System.Int32)"><param name="simplePenKeyWhenNormal"><PARA>The pen to use to draw the graphic in its normal state.</PARA></param><param name="simplePenKeyWhenSelected"><PARA>The pen to use when the graphic is selected.</PARA></param><param name="simplePenKeyWhenDragged"><PARA>The pen to use when the graphic is dragged.</PARA></param><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is added. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><returns><PARA>The returned pen key.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The key value for one of the simple pens is unknown, or
		one of the pens is not a
		<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenType">simple pen</see></para></exception><remarks><PARA>Creates an interactive pen based on the specified simple pens and returns the key. The specified simple pen keys must already exist, or
you can specify 0 to use the contour's default for a particular state.</PARA><PARA>For example, the following line uses custom pens for the normal and dragged state and the contour's default <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedColor" />, <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedLineStyle" />, and <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedLineWidthInScreenPixels" /> for the selected state.</PARA><CODE LANGUAGE="VB">
MyInteractivePenKey = Contour.CustomPens.AddInteractivePen(MyNormalPenKey, 0, MyDragPenKey)
</CODE><PARA><see cref="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.AddInteractivePen(System.Int32,System.Int32,System.Int32)" />
	 never returns the special key value 0.
</PARA></remarks><summary>Creates an interactive pen based on the specified simple pens and returns the key.  The specified simple pen keys must already exist, and zero is a valid key meaning 'use the pen properties of the graphic for the given state'.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.RemovePen(System.Int32)"><param name="key"><PARA>The pen key of the pen to remove.</PARA></param><summary>Removes the custom pen with the specified Key. The Key must be an existing simple or interactive pen key that is not in use.</summary><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is removed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><remarks><PARA>Removes the custom pen with the specified <paramref name="key" />. The <paramref name="key" /> must be an existing
		<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenType">simple or interactive</see>
		pen key that is not in use.</PARA><PARA>A pen key is considered in use if either of the following statements is true:</PARA><LIST><ITEM>A simple pen key is referenced by an interactive pen, even if the interactive key is not in use.</ITEM><ITEM>The pen key is referenced in any part of the shape that can hold a pen key.</ITEM></LIST><PARA>
	Specifically, a pen key is in use if it is a segment's 
		<see cref="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.CustomPen" />,
		<see cref="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartAdornmentCustomPen" />,
		<see cref="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndAdornmentCustomPen" />,
	 or 	used by any interactive pen.
</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapePenKeyInUseException" cgnxHRESULT="E_CogShape_PenKeyInUse"><para>The pen with the specified <paramref name="key" /> is in use.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="key" /> is not a known pen key.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.GetSimplePenAttributes(System.Int32,Cognex.VisionPro.CogColorConstants@,System.Int32@,Cognex.VisionPro.CogGraphicLineStyleConstants@)"><param name="simplePenKey"><PARA>The pen key.</PARA></param><param name="color"><PARA>The pen color.</PARA></param><param name="lineWidth"><PARA>The line width.</PARA></param><param name="lineStyle"><PARA>The line style.</PARA></param><remarks><PARA>Returns the attributes of the simple pen with the given <paramref name="simplePenKey" />.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="simplePenKey" /> is not a known simple pen key.</para></exception><summary>Returns the attributes of the simple pen with the given Key.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.SetSimplePenAttributes(System.Int32,Cognex.VisionPro.CogColorConstants,System.Int32,Cognex.VisionPro.CogGraphicLineStyleConstants)"><param name="simplePenKey"><PARA>The pen key.</PARA></param><param name="color"><PARA>The pen color.</PARA></param><param name="lineWidth"><PARA>The line width.</PARA></param><param name="lineStyle"><PARA>The line style.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="simplePenKey" /> is not a known simple pen key.</para></exception><remarks><PARA>Sets the attributes of the simple pen with the given <paramref name="simplePenKey" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Sets the attributes of the simple pen with the given Key.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.GetInteractivePenAttributes(System.Int32,System.Int32@,System.Int32@,System.Int32@)"><param name="interactivePenKey"><PARA>The pen key.</PARA></param><param name="simplePenKeyWhenNormal"><PARA>The pen to use to draw the graphic in its normal state.</PARA></param><param name="simplePenKeyWhenSelected"><PARA>The pen to use when the graphic is selected.</PARA></param><param name="simplePenKeyWhenDragged"><PARA>The pen to use when the graphic is dragged.</PARA></param><remarks><PARA>Returns the attributes of the interactive pen with the given <paramref name="interactivePenKey" />.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="interactivePenKey" /> is not a known interactive pen key.</para></exception><summary>Returns the attributes of the interactive pen with the given Key.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.SetInteractivePenAttributes(System.Int32,System.Int32,System.Int32,System.Int32)"><param name="interactivePenKey"><PARA>The pen key.</PARA></param><param name="simplePenKeyWhenNormal"><PARA>The pen to use to draw the graphic in its normal state.</PARA></param><param name="simplePenKeyWhenSelected"><PARA>The pen to use when the graphic is selected.</PARA></param><param name="simplePenKeyWhenDragged"><PARA>The pen to use when the graphic is dragged.</PARA></param><remarks><PARA>Sets the attributes of the interactive pen with the given <paramref name="interactivePenKey" />.</PARA></remarks><summary>Sets the attributes of the interactive pen with the given Key.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="interactivePenKey" /> is not a known interactive pen key.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The key value for one of the simple pens is unknown, or
		one of the pens is not a 
		<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenType">simple pen</see>.</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.EllipseFraction"><remarks><PARA>Sets or gets the fraction of the ellipse that passes through the start, mid-, and end points.
For slight arcs, using roughly a quarter of the ellipse usually provides good results. This value must be greater than 0 and less than 1.</PARA></remarks><summary>Returns/sets the fraction of the ellipse that passes through the start, mid and end points.  For slight arcs, using roughly a quarter of the ellipse will usually provide good results. This property must be between 0 and 1 (exclusive).</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the fraction changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the fraction changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction is &lt;= 0 or &gt;= 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.MidpointY"><summary>Returns/sets the Y coordinate of the elliptical arc midpoint.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the midpoint changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the midpoint changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the y-coordinate of the elliptical arc midpoint.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.MidpointX"><remarks><PARA>Sets or gets the x-coordinate of the elliptical arc midpoint.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the midpoint changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the midpoint changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the X coordinate of the elliptical arc midpoint.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.SegmentType"><remarks><PARA>Returns the type of this segment of the contour.
You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> to choose the most specific iterator 
(<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" /> 
or
<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />)
to extract all information about the segment.</PARA></remarks><summary>Returns the type of this segment of the contour. The segment type can be used to choose the most specific iterator to extract all information about the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.IsInvalid"><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA></remarks><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.IsEnd"><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.IsFirst"><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.Attributes"><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.Position"><summary>Returns the position of the iterator in the container.</summary><remarks><PARA>Returns the position of the iterator in the container.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to save an iterator's position and then use <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPosition(System.Int32)" /> to move back to it. The position is not the same as the index of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.Container"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.EndAngle"><remarks><PARA>Computes the angle of the tangent to this segment's shape at the end of the segment.
Angles are given in radians and normalized to the range −π to π.
</PARA></remarks><summary>Computes the angle of the tangent to this segment's shape at the end of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.StartAngle"><summary>Computes the angle of the tangent to this segment's shape at the start of the segment.</summary><remarks><PARA>Computes the angle of the tangent to this segment's shape at the start of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.Length"><remarks><PARA>Computes the length of this segment of the contour.</PARA><NOTE>For segments, such as elliptical arcs, the length computation may require additional time.</NOTE></remarks><summary>Computes the length of this segment of the contour.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.EndAdornmentCustomPen"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the end point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><summary>Returns/sets the custom pen used to draw the adornment at the end point of the segment.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.EndFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at end point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at end point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.EndY"><remarks><PARA>Sets or gets the y-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the Y coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.EndX"><summary>Returns/sets the X coordinate of the end point of the segment.</summary><remarks><PARA>Sets or gets the x-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.CustomPen"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><summary>Returns/sets the key that refers to the custom pen properties used for drawing this segment.  A key of 0 (the default) causes the segment to use the pen properties of the contour.</summary><remarks><PARA>Sets or gets the key that refers to the
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens">custom pen</see>
		properties used for drawing this segment.
		Zero means that the segment uses the pen properties of the contour.</PARA><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.StartFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at start point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at start point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.StartAdornmentCustomPen"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the start point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Returns/sets the custom pen used to draw the adornment at the start point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.StartY"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the y-coordinate of the start point of the segment.</PARA></remarks><summary>Returns/sets the Y coordinate of the start point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.StartX"><summary>Returns/sets the X coordinate of the start point of the segment.</summary><remarks><PARA>Sets or gets the x-coordinate of the start point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.MoveToNext"><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> to avoid errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.MoveToPrevious"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary><returns><PARA>The new iterator.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.GetLineSegmentIterator"><remarks><PARA>Gets the iterator interface that provides full access to line segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />
		 does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, 	you will get an error.
</NOTE></remarks><returns><PARA>The returned iterator.</PARA></returns><summary>Gets the iterator interface that provides full access to line segment properties.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.GetEllipticalArcSegmentIterator"><returns><PARA>The returned iterator.</PARA></returns><summary>Gets the iterator interface that provides full access to arc segment properties.</summary><remarks><PARA>Gets the iterator interface that provides full access to elliptical arc segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" />
		does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, such as <see cref="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)" />,
	you will get an error.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.GetStartMidpointEndEllipseFraction(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>X-coordinate of the start point of the arc.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the arc.</PARA></param><param name="midX"><PARA>X-coordinate of the midpoint of the arc.</PARA></param><param name="midY"><PARA>Y-coordinate of the midpoint of the arc.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the arc.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the arc.</PARA></param><param name="ellipseFraction"><PARA>The fraction of the ellipse that passes through the start, mid-, and end points. This value must be &gt; 0 and &lt; 1.</PARA></param><summary>Gets StartX, StartY, MidpointX, MidpointY, EndX, EndY, and EllipseFraction of this elliptical arc.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><remarks><PARA>Gets the start point, midpoint, end point, and ellipse fraction of this elliptical arc.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.SetStartMidpointEndEllipseFraction(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>X-coordinate of the start point of the arc.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the arc.</PARA></param><param name="midX"><PARA>X-coordinate of the midpoint of the arc.</PARA></param><param name="midY"><PARA>Y-coordinate of the midpoint of the arc.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the arc.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the arc.</PARA></param><param name="ellipseFraction"><PARA>The fraction of the ellipse that passes through the start, mid-, and end points. This value must be &gt; 0 and &lt; 1.</PARA></param><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction is &lt;= 0 or &gt;= 1.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateEllipticalArcSegException" cgnxHRESULT="E_CogShape_DegenerateEllipticalArcSeg"><para>Points on the elliptical arc segment are colinear.</para></exception><remarks><PARA>Sets the start point, midpoint, end point, and ellipse fraction of this elliptical arc.</PARA><NOTE>This method also changes the geometry of any connected segments because it changes the start and end of this segment.</NOTE></remarks><summary>Sets StartX, StartY, MidpointX, MidpointY, EndX, EndY, and EllipseFraction of this elliptical arc segment. Note that this method will also change the geometry of any connected segments because it changes the Start and End of this segment.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.CreateEllipticalArc"><returns><PARA>The elliptical arc.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction is &lt;= 0 or &gt;= 1.</para></exception><summary>Creates a new CogEllipticalArc with the same geometric and graphics properties as this segment.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipticalArc" />with the same geometric and graphics properties as this segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)"><param name="ellipticalArc"><PARA>The elliptical arc.</PARA></param><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Sets the arc segment geometry from the specified elliptical arc. Only the geometry is copied, graphics properties are ignored. Note that this method also changes the geometry of any connected segments because it changes both Start and End of this segment.</summary><remarks><PARA>Sets the arc segment geometry from the specified elliptical arc.
Only the geometry is copied; graphics properties are ignored.</PARA><NOTE>This method also changes the geometry of any connected segments because it changes the start and end of this segment.</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction computed from the arc's <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" />  is &lt;= 0 or &gt;= 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipticalArc" /> is Nothing.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.SegmentType"><summary>Returns the type of this segment of the contour. The segment type can be used to choose the most specific iterator to extract all information about the segment.</summary><remarks><PARA>Returns the type of this segment of the contour.
You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> to choose the most specific iterator 
(<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" /> 
or
<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />)
to extract all information about the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.IsInvalid"><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA></remarks><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.IsEnd"><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.IsFirst"><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.Attributes"><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.Position"><remarks><PARA>Returns the position of the iterator in the container.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to save an iterator's position and then use <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPosition(System.Int32)" /> to move back to it. The position is not the same as the index of the segment.</PARA></remarks><summary>Returns the position of the iterator in the container.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.Container"><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.EndAngle"><summary>Computes the angle of the tangent to this segment's shape at the end of the segment.</summary><remarks><PARA>Computes the angle of the tangent to this segment's shape at the end of the segment.
Angles are given in radians and normalized to the range −π to π.
</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.StartAngle"><summary>Computes the angle of the tangent to this segment's shape at the start of the segment.</summary><remarks><PARA>Computes the angle of the tangent to this segment's shape at the start of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.Length"><remarks><PARA>Computes the length of this segment of the contour.</PARA><NOTE>For segments, such as elliptical arcs, the length computation may require additional time.</NOTE></remarks><summary>Computes the length of this segment of the contour.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.EndAdornmentCustomPen"><summary>Returns/sets the custom pen used to draw the adornment at the end point of the segment.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the end point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.EndFlags"><summary>Returns the flags describing the contour's behavior at end point of the segment.</summary><remarks><PARA>Returns the flags that describe  the contour's behavior at end point of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.EndY"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the Y coordinate of the end point of the segment.</summary><remarks><PARA>Sets or gets the y-coordinate of the end point of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.EndX"><remarks><PARA>Sets or gets the x-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the X coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.CustomPen"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><summary>Returns/sets the key that refers to the custom pen properties used for drawing this segment.  A key of 0 (the default) causes the segment to use the pen properties of the contour.</summary><remarks><PARA>Sets or gets the key that refers to the
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens">custom pen</see>
		properties used for drawing this segment.
		Zero means that the segment uses the pen properties of the contour.</PARA><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.StartFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at start point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at start point of the segment.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.StartAdornmentCustomPen"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the start point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><summary>Returns/sets the custom pen used to draw the adornment at the start point of the segment.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.StartY"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the Y coordinate of the start point of the segment.</summary><remarks><PARA>Sets or gets the y-coordinate of the start point of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.StartX"><summary>Returns/sets the X coordinate of the start point of the segment.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the x-coordinate of the start point of the segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.MoveToNext"><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> to avoid errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.MoveToPrevious"><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks><returns><PARA>The new iterator.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.GetLineSegmentIterator"><summary>Gets the iterator interface that provides full access to line segment properties.</summary><remarks><PARA>Gets the iterator interface that provides full access to line segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />
		 does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, 	you will get an error.
</NOTE></remarks><returns><PARA>The returned iterator.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.GetEllipticalArcSegmentIterator"><remarks><PARA>Gets the iterator interface that provides full access to elliptical arc segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" />
		does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, such as <see cref="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)" />,
	you will get an error.
</NOTE></remarks><returns><PARA>The returned iterator.</PARA></returns><summary>Gets the iterator interface that provides full access to arc segment properties.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>X-coordinate of the start point of the segment.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment.</PARA></param><summary>Returns the start and end coordinates for the line segment.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><remarks><PARA>Returns the start and end coordinates for the line segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.SetStartEnd(System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>X-coordinate of the start point of the segment.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment.</PARA></param><remarks><PARA>Sets the start and end coordinates for the line segment. Note that this may change the start or end coordinates of any segments connected to this one.</PARA></remarks><summary>Sets the start and end coordinates for the line segment. Note that this may change the start or end coordinates of any segments connected to this one.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>
		Points in the new segment are coincident.
	</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.CreateLineSegment"><summary>Creates a new CogLineSegment with the same geometric and graphics properties as this segment.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><returns><PARA>The line segment.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLineSegment" /> with the same geometric and graphics properties as this segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogGeneralContourLineSegmentIterator.SetFromLineSegment(Cognex.VisionPro.CogLineSegment)"><param name="lineSegment"><PARA>The line segment.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><summary>Sets the line segment geometry from the given LineSegment. Only the geometry is copied, graphics properties are ignored. Note that this method also changes the geometry of any connected segments because it changes both Start and End of this segment.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets the line segment geometry from the given <see cref="T:Cognex.VisionPro.CogLineSegment" />.
Only the geometry is copied; graphics properties are ignored.</PARA><NOTE>This method also changes the geometry of any connected segments because it changes the start and end of this segment.</NOTE></remarks></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory"><remarks><PARA>Interface to an object that provides direct pointer access to 8-bit image pixel memory.
	Use <see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" /> to get an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object.
	</PARA><PARA><see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> objects are intended for temporary use within functions that read or write pixel
		data. Caching an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object for long periods of time could lead to memory congestion.
		You must call <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" /> when you are finished using the object to release any resources
		that it uses. After you do so, any pointer that <see cref="P:Cognex.VisionPro.ICogImage8PixelMemory.Scan0" /> returned becomes invalid.
	</PARA><PARA>If you request <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">read/write</see> or <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">write-only</see>
	access to the pixel memory when you call <see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" />,
	the pixel memory may be copied internally.
	Any changes that you make to the pixel may not be written back to the image until
	you call <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />. Your application should assume that no changes
	to the image take place until then.
	</PARA></remarks><summary>Virtual (noncreatable) class for accessing the interface that provides direct pointer access to 8-bit image pixels.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.Stride"><remarks><PARA>Returns the offset in pixels from one row to the next. May be positive or negative.</PARA></remarks><summary>Returns the offset in pixels from one row to the next. May be positive or negative.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.Scan0"><remarks><PARA>Returns the address of the upper-left pixel.</PARA><PARA>The value that <see cref="P:Cognex.VisionPro.ICogImage8PixelMemory.Scan0" /> returns becomes invalid after you call <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />.</PARA></remarks><summary>Returns the address of the upper-left pixel.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.Height"><summary>Returns the height of the pixel data.</summary><remarks><PARA>Returns the height of the pixel data.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.Width"><summary>Returns the width of the pixel data.</summary><remarks><PARA>Returns the width of the pixel data.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogImage8PixelMemory.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory"><summary>Virtual (noncreatable) class for accessing the interface that provides direct pointer access to 16-bit image pixels.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.Stride"><summary>Returns the offset in pixels from one row to the next. May be positive or negative.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.Scan0"><summary>Returns the address of the upper-left pixel.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.Height"><summary>Returns the height of the pixel data.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.Width"><summary>Returns the width of the pixel data.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogImage16PixelMemory.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC"><remarks><PARA><see cref="T:Cognex.VisionPro.ICogModelFeatureIterator" />
		iterates over all the features in a shape model and allows setting and getting the
			<see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />
		and
			<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
		properties.</PARA></remarks><summary>This shape model iterator object can only be created using the CreateSubFeatureIterator method of a CogGeneralContour shape model.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Polarity"><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Weight"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.ParentFeature"><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.IsInvalid"><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA><NOTE>An iterator will become invalid if you remove the model feature that it refers to.</NOTE></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.IsEnd"><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.IsFirst"><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> returns an error.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Attributes"><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsInvalid" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Position"><summary>Returns the position of the iterator in the container.</summary><remarks><PARA>Returns the position of the iterator in the container.
You can use <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPosition(System.Int32)" /> to return to this position later.
</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Container"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA><NOTE>In most cases this will be either Nothing or a <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</NOTE></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Container" />.</para></exception><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.MoveToNext"><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> to avoid errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Container" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.MoveToPrevious"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Container" />.</para></exception><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><returns><PARA>The new iterator.</PARA></returns><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.GetEffectiveWeight"><returns><PARA>The effective weight.</PARA></returns><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.GetEffectivePolarity"><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective polarity.</PARA></returns><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle"><summary>This shape model object can only be created using the MakeShapeModel method of CogCircle.</summary><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfRadius"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Radius may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.GraphicDOFEnableBase"><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DragLineWidthInScreenPixels"><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DragLineStyle"><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Visible"><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Polarity"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Weight"><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.ParentFeature"><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><returns><PARA>The iterator.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.GetEffectiveWeight"><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective weight.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.GetEffectivePolarity"><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><returns><PARA>The effective polarity.</PARA></returns><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse"><summary>This shape model object can only be created using the MakeShapeModel method of CogEllipse.</summary><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfRadiusX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfRadiusY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfXDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfYDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SelectedLineStyle"><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Selected"><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.TipText"><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Interactive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Polarity"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Weight"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.ParentFeature"><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><returns><PARA>The iterator.</PARA></returns><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.GetEffectiveWeight"><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective weight.</PARA></returns><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.GetEffectivePolarity"><returns><PARA>The effective polarity.</PARA></returns><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc"><summary>This shape model object can only be created using the MakeShapeModel method of CogEllipticalArc.</summary><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfRadiusX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfRadiusY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfAngleStart"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleStart may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfAngleSpan"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleSpan may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfArcLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ArcLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfStartX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfStartY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfEndX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfEndY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfStartPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SelectedLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SelectedLineStyle"><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SelectedColor"><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Selected"><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.LineWidthInScreenPixels"><summary>Line width (in screen pixels) of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Color"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Polarity"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Weight"><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.ParentFeature"><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><returns><PARA>The iterator.</PARA></returns><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.GetEffectiveWeight"><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective weight.</PARA></returns><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.GetEffectivePolarity"><returns><PARA>The effective polarity.</PARA></returns><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><summary>Shortest distance from this shape to the given point.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour"><summary>This shape model object can only be created using the MakeShapeModel method of CogGeneralContour.</summary><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSegmentCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SegmentCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfVertexAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VertexAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Length may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfClosed"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Closed may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfHighlightColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfHighlightIndex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightIndex may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfHighlightRequested"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightRequested may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfPenCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PenCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfGetPenKey"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPenKey may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SfGetPenType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPenType may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.GraphicDOFEnableBase"><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DragLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SelectedLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.LineStyle"><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Visible"><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Polarity"><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Weight"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.ParentFeature"><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><returns><PARA>The iterator.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.GetEffectiveWeight"><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective weight.</PARA></returns><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.GetEffectivePolarity"><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><returns><PARA>The effective polarity.</PARA></returns><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><summary>Shortest distance from this shape to the given point.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine"><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks><summary>This shape model object can only be created using the MakeShapeModel method of CogLine.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelLine)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by X may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Y may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Adornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Shape"><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DragColor"><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SelectedColor"><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Polarity"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Weight"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.ParentFeature"><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><returns><PARA>The iterator.</PARA></returns><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.GetEffectiveWeight"><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><returns><PARA>The effective weight.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.GetEffectivePolarity"><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective polarity.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from this shape to the given point.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment"><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks><summary>This shape model object can only be created using the MakeShapeModel method of CogLineSegment.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfCreateLine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateLine may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfStartX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfStartY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfEndX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfEndY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfStartPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Length may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfMidpointX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MidpointX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfMidpointY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MidpointY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Shape"><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SelectedLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><summary>Line width of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SelectedColor"><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Selected"><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.TipText"><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.LineStyle"><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Visible property of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Polarity"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Weight"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.ParentFeature"><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><returns><PARA>The iterator.</PARA></returns><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.GetEffectiveWeight"><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><returns><PARA>The effective weight.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.GetEffectivePolarity"><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><returns><PARA>The effective polarity.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><summary>Shortest distance from this shape to the given point.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon"><summary>This shape model object can only be created using the MakeShapeModel method of CogPolygon.</summary><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfNumVertices"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumVertices may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfVertexCapacity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VertexCapacity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfGetVertexX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetVertexX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfGetVertexY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetVertexY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfVertexAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VertexAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfGetVertexAdornmentColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetVertexAdornmentColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfComplex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Complex may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfFillMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillMode may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfConvex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Convex may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfHighlightColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfHighlightIndex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightIndex may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfHighlightRequested"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightRequested may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DragLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DragLineStyle"><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DragColor"><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.TipText"><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Polarity"><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Weight"><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.ParentFeature"><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><returns><PARA>The iterator.</PARA></returns><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.GetEffectiveWeight"><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><returns><PARA>The effective weight.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.GetEffectivePolarity"><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><returns><PARA>The effective polarity.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection"><remarks><PARA>Interface for a collection of <see cref="T:Cognex.VisionPro.CogShapeModel" /> objects.</PARA></remarks><summary>A collection of CogShapeModel objects.  This collection propagates change events from the contained shape model objects using the ICogEventInfo interface.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.IndexOf(Cognex.VisionPro.ICogShapeModel)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Insert(Cognex.VisionPro.ICogShapeModel,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Add(Cognex.VisionPro.ICogShapeModel)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine"><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks><summary>This shape model object can only be created using the MakeShapeModel method of CogRectangleAffine.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.#ctor(Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerOriginX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOriginX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerOriginY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOriginY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerXX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerXX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerXY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerXY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerYX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerYX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerYY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerYY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerOppositeX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOppositeX may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCornerOppositeY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOppositeY may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSideXLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SideXLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSideYLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SideYLength may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfXDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfYDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSkew"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Skew may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfPolarityAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PolarityAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSubFeatureCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SubFeatureCount may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="F:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DragLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SelectedLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when selected.</summary><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SelectedLineStyle"><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.TipText"><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Line width (in screen pixels) of this graphic.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Color"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Visible property of this graphic.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Polarity"><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Weight"><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary></member><member name="P:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.ParentFeature"><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks><returns><PARA>The iterator.</PARA></returns><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.GetEffectiveWeight"><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><returns><PARA>The effective weight.</PARA></returns><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.GetEffectivePolarity"><returns><PARA>The effective polarity.</PARA></returns><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><returns><PARA>The returned rectangle.</PARA></returns><summary>Minimum enclosing rectangle of this shape.</summary><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogRunStatusInternal.#ctor(Cognex.VisionPro.Implementation.Internal.CogRunStatusInternal)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogRunStatusInternal.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogRunStatusInternal.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogRunStatusInternal.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogRunStatusInternal.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogCollectionSerializationSurrogate.#ctor(Cognex.VisionPro.Implementation.Internal.CogCollectionSerializationSurrogate)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogCollectionSerializationSurrogate.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogCollectionSerializationSurrogate.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogCollectionSerializationSurrogate.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogCollectionSerializationSurrogate.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogConvertXform"><summary>This static class includes methods to convert ICogTransform2D to CogTransform2DLinear.</summary></member><member name="M:Cognex.VisionPro.Implementation.Internal.CogConvertXform.MakeCogTransform2DLinear(Cognex.VisionPro.ICogTransform2D)"><param name="vpXform">A ICogTransform2D object.</param><returns>A CogTransform2DLinear object.</returns><summary>This static method converts ICogTransform2D to CogTransform2DLinear.</summary></member><member name="T:Cognex.VisionPro.Implementation.CogToolUtility"><summary>This class provides utility functions for implementing VisionPro tools.</summary></member><member name="M:Cognex.VisionPro.Implementation.CogToolUtility.CloneRegionForInspectionRecord(Cognex.VisionPro.ICogRegion,Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogColorConstants)"><param name="region">The region to be cloned.</param><param name="imageForResolvingSpaceName">This image will be used to ensure that the SelectedSpaceName of the cloned region is not a partially-qualified name.  (Graphics with partially-qualified names are typically not used in inspection records because their location may be misleading on some images.)  Note that the SelectedSpaceName of the cloned region will be exactly the same as the SelectedSpaceName of the original region if (1) the name is not partially-qualified, or (2) this image is null.</param><param name="newColor">The color of the cloned region.  If set to CogColorConstants.None, the clone will retain the color of the original region.</param><summary>Clone a tool's Region shape for use in a LastRun inspection record.  If the region is an interactive graphic the clone will adjusted so that it's Interactive and Selected properties are both set to false.</summary><returns>The cloned region, as an ICogRegion interface.</returns></member><member name="T:Cognex.VisionPro.Exceptions.CogFitInsufficientPointsException"><summary>The exception that is thrown when there are too few points to fit the chosen shape.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogFitAmbiguousDataException"><summary>The exception that is thrown when a shape cannot be fit to the supplied set of points.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogDataAnalysisNoSamplesException"><summary>The exception that is thrown when you attempt to access certain properties of <see cref="T:Cognex.VisionPro.CogStatistics" /> while <see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> is 0.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogDataAnalysisAllInvalidValuesException"><summary>The exception that is thrown when you attempt to access certain properties of <see cref="T:Cognex.VisionPro.CogStatistics" /> while all of the buffered values within the supplied range are invalid.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogMaximizerCancelledException"><summary>The exception that is thrown when the <see cref="E:Cognex.VisionPro.CogMaximizer.Evaluate" /> event handler did not set <see cref="P:Cognex.VisionPro.CogMaximizerEvaluateEventArgs.ContinueRunning" /> to true.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogShapeExtractNoProximityShapeException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.CogShapeExtract.RankMode" /> is set to 'Proximity' but <see cref="P:Cognex.VisionPro.CogShapeExtract.ProximityShape" /> is null.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogShapeExtractNoOpenShapesException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.CogShapeExtract.Closure" /> is set to either 'Open' or 'DontCare' but <see cref="P:Cognex.VisionPro.CogShapeExtract.Vocabulary" /> specifies no open shapes.</summary></member><member name="T:Cognex.VisionPro.CogCompleteEventArgs"><summary>This class provides data for the Complete event of <see cref="T:Cognex.VisionPro.ICogAcqFifo" />.</summary></member><member name="M:Cognex.VisionPro.CogCompleteEventArgs.#ctor(System.Int32,System.Int32)"><param name="ticket">n/a</param><param name="triggerNumber">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.CogCompleteEventArgs.TriggerNumber"><summary>The trigger sequence number of the completed acquisition.</summary></member><member name="P:Cognex.VisionPro.CogCompleteEventArgs.Ticket"><summary>The ticket returned by StartAcquire.  You can use this value to determine which acquisition request fired this event. If this acquisition was automatically triggered (not by StartAcquire), then the value of Ticket is undefined.</summary></member><member name="T:Cognex.VisionPro.CogMovePartEventArgs"><summary>This class provides data for the MovePart event of <see cref="T:Cognex.VisionPro.ICogAcqFifo" />.</summary></member><member name="M:Cognex.VisionPro.CogMovePartEventArgs.#ctor(System.Int32,System.Int32)"><param name="ticket">n/a</param><param name="triggerNumber">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.CogMovePartEventArgs.TriggerNumber"><summary>The trigger sequence number of the acquisition.</summary></member><member name="P:Cognex.VisionPro.CogMovePartEventArgs.Ticket"><summary>The ticket returned by StartAcquire.  You can use this value to determine which acquisition request fired this event. If this acquisition was automatically triggered (not by StartAcquire), then the value of Ticket is undefined.</summary></member><member name="T:Cognex.VisionPro.CogOverrunEventArgs"><summary>This class provides data for the Overrun event of <see cref="T:Cognex.VisionPro.ICogAcqFifo" />.</summary></member><member name="M:Cognex.VisionPro.CogOverrunEventArgs.#ctor(System.Int32,System.Int32)"><param name="ticket">n/a</param><param name="triggerNumber">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.CogOverrunEventArgs.TriggerNumber"><summary>The trigger sequence number of the acquisition.</summary></member><member name="P:Cognex.VisionPro.CogOverrunEventArgs.Ticket"><summary>If the event fired because of a missed trigger, this value will be zero.  If the event fired because of a Fifo overrun, this value will be the nonzero ticket returned by StartAcquire.  You can use this value to determine which acquisition request fired this event. If this acquisition was automatically triggered (not by StartAcquire), then the value of Ticket is undefined.</summary><remarks><para>
    			If this event fired because of a FIFO overrun, this value is the non-zero ticket
    			that 
    			<see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />
    			returns.
    			You can use this value to determine which acquisition request fired this event.
    		</para><para>
	    		If the event fired because of a missed trigger, this value is zero.
	    		However,
	    		although you can create an <see cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun" /> event handler,
	    		not every Cognex frame grabber provides the
    			hardware necessary to detect a missed trigger. In particular, following frame grabbers cannot detect missed triggers:
    			<ul><li>MVS-8100L</li><li>MVS-8100M</li><li>MVS-8600</li><li>1394DCAM Cameras</li></ul></para><para>
	    		If this acquisition was automatically triggered,
	    		and not initiated with
	    		<see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />,
			then the value of <see cref="P:Cognex.VisionPro.CogOverrunEventArgs.Ticket" />  is undefined.
    		</para></remarks></member><member name="T:Cognex.VisionPro.CogSegmentsChangedEventArgs"><summary>This class holds data provided by the SegmentsChanged event. The SegmentsChanged event fires just prior to and in addition to the standard Changed event after any geometric property of one, or possibly several segments change.</summary></member><member name="M:Cognex.VisionPro.CogSegmentsChangedEventArgs.#ctor(System.Int32,System.Int32)"><param name="startIndex">The index of the first changed segment.</param><param name="endIndex">The index of the last changed segment.</param><summary>Construct the CogSegmentsChangedEventArgs object with the supplied start index and end index.</summary></member><member name="P:Cognex.VisionPro.CogSegmentsChangedEventArgs.endIndex"><summary>The index of the last changed segment. In the range zero to one less than the number of segments in the CogGeneralContour.</summary></member><member name="P:Cognex.VisionPro.CogSegmentsChangedEventArgs.startIndex"><summary>The index of the first changed segment. In the range zero to one less than the number of segments in the CogGeneralContour.</summary></member><member name="T:Cognex.VisionPro.CogSegmentAddedEventArgs"><summary>This class holds data provided by the SegmentAdded event. The SegmentAdded event fires just prior to and in addition to the standard Changed event after a segment is added to the CogGeneralContour.</summary></member><member name="M:Cognex.VisionPro.CogSegmentAddedEventArgs.#ctor(System.Int32)"><param name="index">The index of the added segment.</param><summary>Construct the CogSegmentAddedEventArgs object with the supplied index.</summary></member><member name="P:Cognex.VisionPro.CogSegmentAddedEventArgs.index"><summary>The index of the added segment.</summary></member><member name="T:Cognex.VisionPro.CogSegmentsRemovedEventArgs"><summary>This class holds data provided by the SegmentsRemoved event. The SegmentsRemoved event fires just prior to and in addition to the standard Changed event after one, or possibly several segments are deleted from the CogGeneralContour.</summary></member><member name="M:Cognex.VisionPro.CogSegmentsRemovedEventArgs.#ctor(System.Int32,System.Int32)"><param name="startIndex">The index of the first removed segment.</param><param name="endIndex">The index of the last removed segment.</param><summary>Construct the CogSegmentsRemovedEventArgs object with the supplied start index and end index.</summary></member><member name="P:Cognex.VisionPro.CogSegmentsRemovedEventArgs.endIndex"><summary>The index of the last removed segment.</summary></member><member name="P:Cognex.VisionPro.CogSegmentsRemovedEventArgs.startIndex"><summary>The index of the first removed segment.</summary></member><member name="T:Cognex.VisionPro.CogDraggingEventArgs"><summary>This class provides data for the Dragging and DraggingStopped events of graphic shapes.</summary></member><member name="M:Cognex.VisionPro.CogDraggingEventArgs.#ctor(Cognex.VisionPro.ICogGraphicInteractive)"><param name="dragGraphic">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.CogDraggingEventArgs.DragGraphic"><summary>The graphic, as moved to the current drag location.  Your handler is permitted to modify this graphic.</summary></member><member name="T:Cognex.VisionPro.CogInputLineEventArgs"><summary>This class provides data for the LowToHigh and HighToLow events of <see cref="T:Cognex.VisionPro.CogInputLine" />.</summary></member><member name="M:Cognex.VisionPro.CogInputLineEventArgs.#ctor(System.Int32)"><param name="overlap">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.CogInputLineEventArgs.Overlap"><summary>Currently, always returns 0.</summary></member><member name="T:Cognex.VisionPro.CogMaximizerEvaluateEventArgs"><summary>This class provides data for the Evaluate event of <see cref="T:Cognex.VisionPro.CogMaximizer" />.</summary></member><member name="M:Cognex.VisionPro.CogMaximizerEvaluateEventArgs.#ctor(System.Int32,System.Int32,System.Boolean)"><param name="position">n/a</param><param name="fitness">n/a</param><param name="continueRunning">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.CogMaximizerEvaluateEventArgs.ContinueRunning"><summary>Your handler should set a value of true to continue the maximization, or false to terminate it.  If you specify a value of false, the Execute function throws a CogMaximizerCancelledException.</summary></member><member name="P:Cognex.VisionPro.CogMaximizerEvaluateEventArgs.Fitness"><summary>This value, which your event handler sets, is the output value that corresponds to the supplied Position value.</summary></member><member name="P:Cognex.VisionPro.CogMaximizerEvaluateEventArgs.Position"><summary>The input value for the handler to evaluate.  This value is guaranteed to be in the range of values specified in the call to Execute.</summary></member><member name="T:Cognex.VisionPro.CogVertexChangedEventArgs"><summary>This class holds data provided by the VertexChanged event. The VertexChanged event fires in addition to the standard Changed event after the x-coordinate, y-coordinate, or both have changed for a single vertex.  The change may occur as a result of calling a Polygon's SetVertexX(), SetVertexY(), or SetVertex() methods.  It also may occur if the vertex position is manipulated interactively in a display.</summary></member><member name="M:Cognex.VisionPro.CogVertexChangedEventArgs.#ctor(System.Int32,System.Double,System.Double)"><param name="index">The index of the changed vertex. In the range of zero to one less than the number of vertices in the CogPolygon.</param><param name="newX">The new x-coordinate.</param><param name="newY">The new y-coordinate.</param><summary>Construct the CogVertexChangedEventArgs object with the supplied index, x-coordinate, and y-coordinate. The x-coordinate and y-coordinate values reflect those of the specified vertex after the change has been made.</summary></member><member name="P:Cognex.VisionPro.CogVertexChangedEventArgs.NewY"><summary>The new y-coordinate.</summary></member><member name="P:Cognex.VisionPro.CogVertexChangedEventArgs.NewX"><summary>The new x-coordinate.</summary></member><member name="P:Cognex.VisionPro.CogVertexChangedEventArgs.Index"><summary>The index of the changed vertex. In the range of zero to one less than the number of vertices in the CogPolygon.</summary></member><member name="T:Cognex.VisionPro.CogVertexAddedEventArgs"><summary>This class holds data provided by the VertexAdded event. The VertexAdded event fires after one, or possibly several vertices are added to the CogPolygon as a result of calling AddVertex() or NumVertices().</summary></member><member name="M:Cognex.VisionPro.CogVertexAddedEventArgs.#ctor(System.Int32,System.Double,System.Double,System.Int32)"><param name="index">The index of the added vertex. -1 means that new vertices were added at the end until the number of vertices equaled newNumVertices.</param><param name="newX">X-coordinate of the new vertex.</param><param name="newY">Y-coordinate of the new vertex.</param><param name="newNumVertices">The new number of vertices in the CogPolygon.</param><summary>Construct the CogVertexAddedEventArgs object with the supplied index, x-coordinate, y-coordinate, and new number of vertices. When the VertexAdded event has been caused by calling NumVertices() with an argument greater than the existing number of vertices, the index will be -1 (i.e. added to the end of the list of vertices) and the x-coordinate and y-coordinate will both be zero.</summary></member><member name="P:Cognex.VisionPro.CogVertexAddedEventArgs.NewNumVertices"><summary>The new number of vertices in the CogPolygon.</summary></member><member name="P:Cognex.VisionPro.CogVertexAddedEventArgs.NewY"><summary>Y-coordinate of the new vertex.</summary></member><member name="P:Cognex.VisionPro.CogVertexAddedEventArgs.NewX"><summary>X-coordinate of the new vertex.</summary></member><member name="P:Cognex.VisionPro.CogVertexAddedEventArgs.Index"><summary>The index of the added vertex. -1 means that new vertices were added at the end until the number of vertices equaled newNumVertices.</summary></member><member name="T:Cognex.VisionPro.CogVertexRemovedEventArgs"><summary>This class holds data provided by the VertexRemoved event. The VertexRemoved event fires after one, or possibly several vertices are removed from the CogPolygon as a result of calling RemoveVertex() or NumVertices().</summary></member><member name="M:Cognex.VisionPro.CogVertexRemovedEventArgs.#ctor(System.Int32,System.Int32)"><param name="index">The index of the removed vertex. -1 means that vertices were removed at the end until the number of vertices equaled newNumVertices.</param><param name="newNumVertices">The new number of vertices in the CogPolygon.</param><summary>Construct the CogVertexRemovedEventArgs object with the supplied index and new number of vertices. When the VertexRemoved event has been caused by calling NumVertices() with an argument less than the existing number of vertices, the index will be -1 (i.e. removed from the end of the list of vertices).</summary></member><member name="P:Cognex.VisionPro.CogVertexRemovedEventArgs.NewNumVertices"><summary>The new number of vertices in the CogPolygon.</summary></member><member name="P:Cognex.VisionPro.CogVertexRemovedEventArgs.Index"><summary>The index of the removed vertex. -1 means that vertices were removed at the end until the number of vertices equaled newNumVertices.</summary></member><member name="T:Cognex.VisionPro.CogBulkChangedEventArgs"><summary>This class holds data provided by the BulkChanged event. The BulkChanged event fires after a bulk change to the CogPolygon, such as a call to SetVertices() or loading from an archived polygon. Since the amount of changed data could be quite large, the BulkChanged event only reports the new number of vertices after the change.</summary></member><member name="M:Cognex.VisionPro.CogBulkChangedEventArgs.#ctor(System.Int32)"><param name="newNumVertices">The new number of vertices in the CogPolygon.</param><summary>Construct the CogBulkChangedEventArgs object with the specified new number of vertices.</summary></member><member name="P:Cognex.VisionPro.CogBulkChangedEventArgs.NewNumVertices"><summary>The new number of vertices in the CogPolygon.</summary></member><member name="T:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs"><summary>This class provides data for the BusConfigurationChanged event of 1394DCAM frame grabbers.</summary><remarks><para>
    		In general, the only appropriate
    		action for your application to take in reponse to
    		a
    		<see cref="E:Cognex.VisionPro.ICog1394DCAMAccess.BusConfigurationChanged" />
		event is to exit  the application gracefully. Once this
    		event fires, the acquisition hardware and software may no longer be consistent, and the only way to fix that 
    		is to restart the application.
    	</para></remarks></member><member name="M:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)"><param name="unplugged">n/a</param><param name="busReset">n/a</param><param name="busResetInitiator">n/a</param><param name="busResetInitiatorNodeNumber">n/a</param><param name="nodeNumberChanged">n/a</param><param name="hostNodeNumber">n/a</param><param name="nodeCount">n/a</param><param name="busGenerationCount">n/a</param><summary>Constructor for these EventArgs.  You typically will not need to use this method.</summary></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusGenerationCount"><summary>The IEEE 1394 bus generation count at the time of the bus reset. Will be in the range [0, 255]. This value rolls over, that is, the next value after 255 is 0. Valid only if BusReset is true.</summary><remarks><para>
    		This property is meaningful only when <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is True.
    	</para><para>
		Every time the IEEE1394 bus is reset, this value increases by 1. When the count reaches 255, it rolls over to 0.
	</para><para>
    		If <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False,
    		this property is -1.
	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.NodeCount"><summary>The number of nodes on the IEEE 1394 bus. Will be in the range [2, 64]. Valid only if BusReset is true.</summary><remarks><para>
    		This property is meaningful only when <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is True.
    	</para><para>
		Returns the number of nodes on this bus after the bus reset. This value will be in the range 2 to 64.
		<note>Node 0 is the host (the IEEE 1394 adapter) and this camera.</note></para><para>
    		If <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False,
    		this property is 0.
	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.HostNodeNumber"><summary>The node number of the host device on the IEEE 1394 bus. Will be in the range [0, 63]. Valid only BusReset is true.</summary><remarks><para>
    		This property is meaningful only when <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is True.
    	</para><para>
		This property returns the identifying node number (in the range 0 to 63) of the host on the IEEE1394 bus after reset
		This is typically the highest node number on the bus. This value changes if a node has been removed.
	</para><para>
    		If <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False,
    		this property is -1.
	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.NodeNumberChanged"><summary>True if the node number of this camera changed as a result of the bus reset. Valid only if BusReset is true.</summary><remarks><para>
    		This property is meaningful only when <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is True.
    	</para><para>
		If True, this device's node number changed as a result of the bus reset.
	</para><para>
    		If <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False,
    		this property is also False.
	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusResetInitiatorNodeNumber"><summary>The node number of the device on the IEEE 1394 bus that was reported to have initiated the bus reset. Valid only if BusReset is true.</summary><remarks><para>
    		This property is meaningful only when <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is True.
    	</para><para>
		This property returns the node number of the device that initiated the bus reset. This is the number after any node renumbering has taken place due to a change in topology.
	</para><para>
    		If <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False,
    		this property is -1.
	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusResetInitiator"><summary>True if the camera initiated the bus reset. Valid only if BusReset is true.</summary><remarks><para>
    		This property is meaningful only when <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is True.
    	</para><para>
    		When this property is True, 
    		this device initiated the bus reset.
    		If this property is False,
    		another device on the IEE1394 bus initiated the reset.
    	</para><para>
    		If <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False,
    		this property is also False.
	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset"><summary>True if the BusConfigurationChanged event is the result of an IEEE 1394 bus reset.</summary><remarks><para>
		This property is True  if the event fired as a result of a camera or another device connected to this IEEE1394 bus
		initiating the bus reset. If this property is True, <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.Unplugged" />
		is False.
	</para><para>
    		If this property is True, then <see cref="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.BusReset" /> is False.
    	</para></remarks></member><member name="P:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventArgs.Unplugged"><summary>True if the BusConfigurationChanged event is the result of the camera being unplugged.</summary><remarks><para>
    		If True, this camera has been unplugged from the IEEE1394 bus. No other information is available about this device.
    	</para></remarks></member><member name="T:Cognex.VisionPro.CogAcqInfo"><summary>Provides information about a completed acquisition.</summary></member><member name="P:Cognex.VisionPro.CogAcqInfo.TimeStamp"><remarks>In case of GigE camera the Timestamp is generated in the camera when an acquire occurs. This is the most precise, but requires synchronization with the PC timer. In case of 8500 the Timestamp is generated when the driver reads the PC timer. Interrupt latencies may cause some minor errors in the timestamp. On all other platforms the Timestamp is generated when the acquisition code reads the PC timer. Windows latencies may cause significant errors in the timestamp.</remarks><summary>The timestamp associated with the acquired image.</summary></member><member name="P:Cognex.VisionPro.CogAcqInfo.TriggerNumber"><summary>The trigger sequence number of the completed acquisition.</summary></member><member name="P:Cognex.VisionPro.CogAcqInfo.Ticket"><summary>The actual ticket of the completed acquisition.</summary></member><member name="P:Cognex.VisionPro.CogAcqInfo.RequestedTicket"><summary>The ticket of an outstanding acquisition.</summary></member><member name="T:Cognex.VisionPro.CogAcqFifoStateFlags"><summary>Class that defines the state flags for the ICogAcqFifo interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogAcqFifo.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCoordinateSpaceTree"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoordinateSpaceTree may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTimeoutEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TimeoutEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Timeout may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraPort"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CameraPort may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAutoPrepareEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AutoPrepareEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightPower"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightPower may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightBrightFieldPowerRatio"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightBrightFieldPowerRatio may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightDelay"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LightDelay may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightPort"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightPort may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightPower"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightPower may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightBrightFieldPowerRatio"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AuxLightBrightFieldPowerRatio may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfBrightness"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Brightness may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfContrast"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Contrast may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTestEncoderEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TestEncoderEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTestEncoderDirectionPositive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TestEncoderDirectionPositive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetStepsPerLine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetStepsPerLine may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderPort"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EncoderPort may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfNumEncoderPorts"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumEncoderPorts may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAcquireDirectionPositive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AcquireDirectionPositive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCurrentEncoderCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentEncoderCount may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfResetCounterOnHardwareTrigger"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ResetCounterOnHardwareTrigger may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerFromEncoder"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerFromEncoder may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderOffset"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EncoderOffset may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfUseSingleChannel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by UseSingleChannel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStartAcqOnEncoderCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartAcqOnEncoderCount may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfIgnoreBackwardsMotionBetweenAcquires"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnoreBackwardsMotionBetweenAcquires may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderResolution"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EncoderResolution may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfHorizontalAdjustment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HorizontalAdjustment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSyncModel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SyncModel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfChargeTransferInterval"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ChargeTransferInterval may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetLookupTable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetLookupTable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfExposure"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Exposure may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStrobeEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobeEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStrobePulseDuration"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobePulseDuration may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStrobePulsePolarityHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobePulsePolarityHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerModel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerModel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerLowToHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerLowToHigh may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSettlingTime"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SettlingTime may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfDigitalHighGainSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DigitalHighGainSelected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMasterClockFrequency"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MasterClockFrequency may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetROIXYWidthHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetROIXYWidthHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMaster"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Master may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetSlaves"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetSlaves may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOffsetClampMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetClampMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSampleX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSampleY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SampleY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfHorizontalReadoutReversed"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HorizontalReadoutReversed may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfVerticalReadoutReversed"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VerticalReadoutReversed may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinTriggerWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MinTriggerWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinTriggerPeriod"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MinTriggerPeriod may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerDelay"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerDelay may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStrobeDelay"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StrobeDelay may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOutlierPixelCorrectionEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutlierPixelCorrectionEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfRowColumnCalibrationEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RowColumnCalibrationEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetBrightnessMultiChannel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetBrightnessMultiChannel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetContrastMultiChannel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetContrastMultiChannel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraBandwidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CameraBandwidth may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfUGain"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by UGain may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfVGain"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VGain may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOutputPixelFormat"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputPixelFormat may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfHardwareImagePool"><summary>This bit will be set in the EventArgs of a Changed event every time the HardwareImagePool setting has changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfRecommendedHardwareImagePool"><summary>This bit will be set in the EventArgs of a Changed event every time the RecommendedHardwareImagePool setting has changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfUseCustomHardwareImagePool"><summary>This bit will be set in the EventArgs of a Changed event every time the UseCustomHardwareImagePool setting has changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCustomProps"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CustomProperties may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfIgnoreMissedTrigger"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnoreMissedTrigger may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfIgnoreTooFastEncoder"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnoreTooFastEncoder may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfROIMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ROIMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfDistancePerCycle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DistancePerCycle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfProfileCameraPositiveEncoderDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProfileCameraPositiveEncoderDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfProfileCameraAcquireDirection"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProfileCameraAcquireDirection may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTransportTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TransportTimeout may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfDetectionSensitivity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DetectionSensitivity may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfPacketSize"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PacketSize may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLatencyLevel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LatencyLevel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionHeight may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionSampling"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionSampling may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Mode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLaserMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LaserMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfHighDynamicRange"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighDynamicRange may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionBase2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionBase2 may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionHeight2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionExcludeHeight2 may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionSampling2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionSampling2 may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZDetectionEnable2"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZDetectionEnable2 may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLinkDetectionZones"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinkDetectionZones may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfBridgeDetectionZones"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BridgeDetectionZones may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerType may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLaserDetectionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LaserDetectionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfXScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XScale may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfFirstPixelLocation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FirstPixelLocation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZScale may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZOffset"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZOffset may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZContinuityThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZContinuityThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfZContinuityThresholdEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZContinuityThresholdEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfPeakDetectionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PeakDetectionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinimumBinarizationLineWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MinimumBinarizationLineWidth may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfBinarizationThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BinarizationThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAutoCorrectPixelRowOrder"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AutoCorrectPixelRowOrder may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCalibratedSpaceName2D"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CalibratedSpaceName2D may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSelectCalibratedSpace2D"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectCalibratedSpace2D may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCalibratedSpaceName3D"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CalibratedSpaceName3D may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerSignal"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerSignal may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicStateFlags"><summary>Class that defines the state flags for the ICogGraphic interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogGraphic.</summary></member><member name="F:Cognex.VisionPro.CogGraphicStateFlags.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicStateFlags.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicStateFlags.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicStateFlags.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicStateFlags.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveStateFlags"><summary>Class that defines the state flags for the ICogGraphicInteractive interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogGraphicInteractive.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicParentChildStateFlags"><summary>Class that defines the state flags for the ICogGraphicParentChild interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogGraphicParentChild.</summary></member><member name="F:Cognex.VisionPro.CogGraphicParentChildStateFlags.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicParentChildStateFlags.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImageStateFlags"><summary>Class that defines the state flags for the ICogImage interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogImage.</summary></member><member name="F:Cognex.VisionPro.CogImageStateFlags.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImageStateFlags.SfCoordinateSpaceTree"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoordinateSpaceTree may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImageStateFlags.SfPixelFromRootTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PixelFromRootTransform may have changed.</summary></member><member name="T:Cognex.VisionPro.CogModelFeatureStateFlags"><summary>Class that defines the state flags for the ICogModelFeature interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogModelFeature.</summary></member><member name="F:Cognex.VisionPro.CogModelFeatureStateFlags.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.CogModelFeatureStateFlags.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="T:Cognex.VisionPro.CogModelFeatureIteratorStateFlags"><summary>Class that defines the state flags for the ICogModelFeatureIterator interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogModelFeatureIterator.</summary></member><member name="F:Cognex.VisionPro.CogModelFeatureIteratorStateFlags.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.CogModelFeatureIteratorStateFlags.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="T:Cognex.VisionPro.CogRegionStateFlags"><summary>Class that defines the state flags for the ICogRegion interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogRegion.</summary></member><member name="F:Cognex.VisionPro.CogRegionStateFlags.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRegionStateFlags.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="T:Cognex.VisionPro.CogShapeStateFlags"><summary>Class that defines the state flags for the ICogShape interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogShape.</summary></member><member name="F:Cognex.VisionPro.CogShapeStateFlags.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelStateFlags"><summary>Class that defines the state flags for the ICogShapeModel interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogShapeModel.</summary></member><member name="F:Cognex.VisionPro.CogShapeModelStateFlags.SfWeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Weight may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeModelStateFlags.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DStateFlags"><summary>Class that defines the state flags for the ICogTransform2D interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogTransform2D.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DStateFlags.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree"><summary>Tree of user coordinate spaces and the mappings between them.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />, the primary interface for a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> object, implements functionality related to the <see cref="u:Framework.Coordinates.Theory.SpaceTrees">coordinate space tree</see> associated with each VisionPro image.</PARA><PARA>In VisionPro, you can define and name your own coordinate spaces. Each time you calibrate an image or create a fixture, VisionPro creates a new, named <see cref="u:Framework.Coordinates.Theory.CoordSpaces" cgnxAnchor="user_space">user space</see>. Each user space is defined, relative to an existing space, by a two-dimensional transform. The coordinate space tree contains a node for each coordinate space associated with an image, and maintains information about the transform that produced it. VisionPro also maintains a <see cref="u:Framework.Coordinates.Theory.CoordSpaces" cgnxAnchor="root_space">root space</see> based on the pixels in the acquired image.</PARA><PARA>The methods and properties in this interface let you obtain the <see cref="u:Framework.Coordinates.Theory.Transformations">transformations</see> that map points between any pair of coordinate spaces in the space tree. They also allow you to examine, add to, or rearrange the space tree.</PARA><PARA>Many of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> methods use a client-specified coordinate space name to find a coordinate space within the tree. You can supply any valid <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="nonqualified_nq_space_names">nonqualified (NQ)</see> or <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="fullyqualified_fq_space_names">fully-qualified (FQ)</see> pathname. If you supply a NQ name, the method searches the coordinate space tree for instances of that name. The NQ name must occur exactly once within the tree.</PARA><PARA>In addition, several methods return one or more coordinate space names. You can control the format (nonqualified, partially-qualified, or fully-qualified) of the returned names by supplying a <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value. If a partially-qualified (PQ) name is returned, it begins with either "." or "..", and specifies a space relative to the given space name.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.#ctor(Cognex.VisionPro.CogCoordinateSpaceTree)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateSpaceTree.RootName"><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>The new name is not a valid root space name.</para></exception><summary>Returns/sets the name of the root coordinate space in this tree.</summary><remarks><PARA>Returns or sets the root coordinate space name for this tree. The new space name must meet the syntactic requirements of a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">nonqualified coordinate space name</see>, with the exception that you may begin the name with any non-slash punctuation character.</PARA><NOTE>Do <BOLD>not</BOLD> change the root name of a tree attached to an image. Any tree that is or will be attached to an image must have a <see cref="P:Cognex.VisionPro.CogCoordinateSpaceTree.RootName" /> value of "@" for VisionPro to function properly.</NOTE><DEFAULT>@ (root space)</DEFAULT></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="NameChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>OldSpaceName</ACTUAL_PARAM><ACTUAL_PARAM>NewSpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the root name changes. 
</EVENT></member><member name="P:Cognex.VisionPro.CogCoordinateSpaceTree.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateSpaceTree.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.ResolvePartialName(System.String,System.String)"><param name="startingSpaceName"><PARA>The starting space name used to resolve <paramref name="nameToResolve" />, if it is a partially-qualified coordinate space name.</PARA></param><param name="nameToResolve"><PARA>The coordinate space name to resolve. If <paramref name="." /> is a partially-qualified name,
	<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.ResolvePartialName(System.String,System.String)" />
	resolves it by using the <paramref name="startingSpaceName" /> value. Otherwise,
	<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.ResolvePartialName(System.String,System.String)" />
ignores <paramref name="startingSpaceName" />

and returns a copy of the original name.</PARA></param><summary>Use the given StartingSpaceName to resolve any ambiguity in NameToResolve, and return a name suitable for lookup in this tree.  Note that a partial name, like ".", is ambiguous without a specified starting space.</summary><returns><PARA><paramref name="nameToResolve" /> as a nonqualified or fully-qualified pathname.</PARA></returns><CONTENT>Note that <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> may return a nonunique space name or one that may not exist in this space tree, even though it throws no error.</CONTENT><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="startingSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="startingSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><remarks><PARA>Uses the given <paramref name="startingSpaceName" /> to resolve any ambiguity in <paramref name="nameToResolve" />, and returns a name suitable for lookup in this tree. Note that a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="partiallyqualified_pq_space_names">partial name</see>, such as ".", is ambiguous without a specified starting space name. This is the only method that can accept partially-qualified space names.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to find in this coordinate space tree.</PARA></param><param name="pathnameFormat"><PARA>A <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value that indicates how the returned name should be formatted.</PARA></param><returns><PARA>The formatted space name.</PARA></returns><summary>Look up the given SpaceName in this tree and, if found, returns an appropriately formatted copy of the name.</summary><remarks><PARA>Looks up the given coordinate space name in this tree and, if found, returns an appropriately formatted copy of the name. You can use <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)" /> to verify that a given space name is valid and exists in the tree. This method is similar to <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.FindNames(System.String)" />, except that it requires that only one instance of the name exist in the tree.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="pathnameFormat" /> value is not a member of <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para><paramref name="spaceName" /> does not exist in this tree.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.ParentName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to find in this coordinate space tree.</PARA></param><param name="pathnameFormat"><PARA>A <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value that indicates how the returned name should be formatted.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="pathnameFormat" /> value is not a member of <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><returns><PARA>The parent space name.</PARA></returns><remarks><PARA>Returns the name of the given space's parent. Because the root space has no parent, its parent space name is the empty name string "". </PARA></remarks><summary>Returns the name of the given space's parent.  The parent name for the root space is the empty name ("") because the root space has no parent.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.ChildNames(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to find in this coordinate space tree.</PARA></param><param name="pathnameFormat"><PARA>A <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value that indicates how the returned name should be formatted.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="pathnameFormat" /> value is not a member of <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><remarks><PARA>Returns a collection of names containing the given space's immediate children. If no children exist, the collection will hold zero items.</PARA></remarks><summary>Returns a collection of names containing the given space's immediate children.  If there are no children, the collection will hold zero items.</summary><returns><PARA>A collection of child space names, or an empty collection if no child spaces exist for the given coordinate space name.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.AllChildNames(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.Boolean)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to find in this coordinate space tree.</PARA></param><param name="pathnameFormat"><PARA>A <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value that indicates how the returned name should be formatted.</PARA></param><param name="childrenOnly"><PARA>If False, the supplied space name is included as a separate item in the returned collection of space names. If True, does not appear as a collection item. </PARA></param><remarks><PARA>Returns a collection of names that includes all the descendants of the given space. If no children exist and <paramref name="childrenOnly" /> is true,  the collection has no items.</PARA></remarks><returns><PARA>A collection that contains a recursive listing of the child coordinate space names of the given space name. If no children exist, the collection has no items.</PARA></returns><summary>Returns a collection of names that recursively includes all the children, grandchildren, great-grandchildren, etc. of the given space.  If there are no children, the collection will hold zero items.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="pathnameFormat" /> value is not a member of <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.FindNames(System.String)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to find.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><remarks><PARA>Finds the given coordinate space name in this tree and returns a collection containing zero or more fully-qualified pathnames that are found. The returned collection contains more than one space name only if the given <paramref name="spaceName" /> is nonqualified and exists at multiple locations within the coordinate space tree.</PARA><PARA>You can use <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.FindNames(System.String)" /> to determine if a space name is valid and exists in this tree, or to convert a nonqualified space name to one or more fully-qualified space names. <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.FindNames(System.String)" /> is similar to <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)" />, but it does not generate an error if the given space name exists more than once in the tree or does not exist.</PARA></remarks><returns><PARA>A collection of space names; or an empty collection if the given name does not exist in the tree.</PARA></returns><summary>Find the given SpaceName in this tree and return a collection containing the fully-qualified pathname(s) that are found.  The collection may contain zero, one, or more items.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.VerifyName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.String@)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to find in this coordinate space tree.</PARA></param><param name="pathnameFormat"><PARA>A <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value that indicates how the returned name should be formatted.</PARA></param><param name="foundName"><PARA>An optional parameter through which you can obtain the space name, formatted according to the <paramref name="pathnameFormat" /> setting. If 
<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.VerifyName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.String@)" />
 returns False, <paramref name="foundName" /> contains "".</PARA></param><summary>Return true if the given SpaceName is a unique name in this tree.  Return false if SpaceName cannot be found.  The formatted name, or "", can be obtained through the optional FoundName argument.</summary><remarks><PARA>You can use <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.VerifyName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.String@)" /> to verify that a given space name is legal and exists in the coordinate space tree. It returns true if the given <paramref name="spaceName" /> is a unique name in this tree; false if <paramref name="spaceName" /> cannot be found.</PARA><PARA><see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.VerifyName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.String@)" /> is similar to <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.LookUpName(System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants)" />, however it does not generate an error if the specified <paramref name="spaceName" /> does not exist in the tree.</PARA></remarks><returns><PARA>True if the given <paramref name="spaceName" /> is unique. False if the name is not found in the tree.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="pathnameFormat" /> value is not a member of <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.VerifyChild(System.String,System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.Boolean,System.String@)"><param name="parentSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">name</see> that indicates the parent space.</PARA></param><param name="childSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">name</see> that indicates the child space to verify.</PARA></param><param name="pathnameFormat"><PARA>A <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" /> value that indicates how the returned name should be formatted.</PARA></param><param name="childrenOnly"><PARA>If False, the parent space is considered a valid descendant of itself, which allows you to find space names that are at or descended from the given parent space name. If True, the parent space is not a valid descendant of itself. </PARA></param><param name="foundChildName"><PARA>If 
	<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.VerifyChild(System.String,System.String,Cognex.VisionPro.CogSpaceTreePathnameConstants,System.Boolean,System.String@)" />
 returns True, <paramref name="foundChildName" /> contains the formatted child space name. Otherwise, it contains "".</PARA></param><returns><PARA>True if the given <paramref name="childSpaceName" /> is a descendant of <paramref name="parentSpaceName" />; otherwise, False.</PARA></returns><summary>Return true if the given ChildSpaceName is a direct or indirect child of ParentSpaceName.  Otherwise, return false.  The formatted child name, or "", can be obtained through the optional FoundChildName argument.</summary><remarks><PARA>Returns True if the given <paramref name="childSpaceName" /> is a descendant of <paramref name="parentSpaceName" />. Otherwise, returns False. Both spaces must exist in the tree.</PARA><PARA>By default, a coordinate space is considered to be a child only if it is a descendant of the given parent space. In some applications, however, you may need to test whether a space is a descendant of the given parent <ITALIC>or</ITALIC> is the parent space itself. To do this, set the optional <paramref name="childrenOnly" /> parameter to False.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="pathnameFormat" /> value is not a member of <see cref="T:Cognex.VisionPro.CogSpaceTreePathnameConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="parentSpaceName" /> or <paramref name="childSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="parentSpaceName" /> or <paramref name="childSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.VisionPro.ICogTransform2D,System.Boolean,Cognex.VisionPro.CogAddSpaceConstants)"><param name="parentSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the parent space.</PARA></param><param name="newSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> for the user coordinate space to add.</PARA></param><param name="parentFromNew"><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that transforms points from the space you are adding to the parent user space.</PARA></param><param name="copyTransform"><PARA> If True, <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> adds a copy of the transform to the tree; if False, a reference to the transform is added. <paramref name="." /> defaults to True.</PARA></param><param name="duplicateHandling"><PARA>A <see cref="T:Cognex.VisionPro.CogAddSpaceConstants" /> value that specifies what do if the parent coordinate space already contains an immediate child with the same name as <paramref name="newSpaceName" />. The options are to return an error, replace the transform of the named child, or do nothing. <paramref name="." /> defaults to <see cref="T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError</see>: it treats a duplicate as an error.</PARA></param><summary>Add a new coordinate space, with the given name and transform, to this tree.  Attach it to the specified pre-existing parent space.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="SpaceAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>NewSpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when a space is added to this tree. 
</EVENT><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="newSpaceName" /> is not a valid nonqualified name.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="parentFromNew" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="duplicateHandling" /> value is not a member of <see cref="T:Cognex.VisionPro.CogAddSpaceConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException" cgnxHRESULT="E_CogSpaceTree_DuplicateChildName"><para>
		Both <paramref name="newSpaceName" /> is a child of the parent space and 
		<paramref name="duplicateHandling" /> is set to <see cref="T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="parentSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNameNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="parentSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><remarks><PARA>Adds a new user coordinate space to a <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> object. You must specify the name of the parent space for the newly added space, and supply a transformation that defines the relationship between the parent space and the new space.</PARA><PARA>To indicate that the parent space is the root space, use the name syntax "@"; to indicate that the current selected space is the parent space, use "." as the name syntax.</PARA><PARA>By default, <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.AddSpace(System.String,System.String,Cognex.VisionPro.ICogTransform2D,System.Boolean,Cognex.VisionPro.CogAddSpaceConstants)" /> saves a copy of the supplied transform. You can also add the transform by-reference. Although this is more efficient, it may result in errors for users who unknowingly continue to modify the original transform object.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro.CogCoordinateSpaceTree,Cognex.VisionPro.ICogTransform2D,System.Boolean,Cognex.VisionPro.CogAddSpaceConstants)"><param name="parentSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the parent space.</PARA></param><param name="treeToAdd"><PARA>The coordinate space tree to add to the given <paramref name="parentSpaceName" />.</PARA></param><param name="parentFromTreeRoot"><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that transforms points from the root of the space tree you are adding to the parent space.</PARA></param><param name="copyTransform"><PARA> If True, <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> adds a copy of the transform to the tree; if False, a reference to the transform is added. <paramref name="." /> defaults to True.</PARA></param><param name="duplicateHandling"><PARA>A <see cref="T:Cognex.VisionPro.CogAddSpaceConstants" /> value that specifies what do if the parent coordinate space already contains an immediate child with the same name as the root of <paramref name="treeToAdd" />. The options are to return an error, replace the named child with the given tree, or do nothing.<paramref name="." /> defaults to <see cref="T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError</see>: it  treats a duplicate as an error.</PARA></param><remarks><PARA>Adds a tree of coordinate spaces to the given parent space name of this tree. You must also supply a transformation that defines the relationship between the parent space and the root of the new spaces.</PARA><PARA>By default, <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro.CogCoordinateSpaceTree,Cognex.VisionPro.ICogTransform2D,System.Boolean,Cognex.VisionPro.CogAddSpaceConstants)" /> saves a copy of the supplied transform. You can also add the transform by-reference. Although this is more efficient, it may result in errors for users who unknowingly continue to modify the original transform object.</PARA><PARA>Trees are added by-reference. If you copy the parent tree, the copy contains an additional reference to the supplied tree. You must avoid creating new trees that contain circular references to other coordinate space trees.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="treeToAdd" /> or <paramref name="parentFromTreeRoot" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="duplicateHandling" /> value is not a member of <see cref="T:Cognex.VisionPro.CogAddSpaceConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException" cgnxHRESULT="E_CogSpaceTree_DuplicateChildName"><para><paramref name="NewSpaceName" /> is a child of the parent space <BOLD>and</BOLD><paramref name="duplicateHandling" /> is set to <see cref="T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="parentSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="parentSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><summary>Add a tree of coordinate spaces to the given ParentSpaceName of this tree using the supplied ParentFromTreeRoot transform.  The tree is added by reference, so any changes to it will be visible to clients of both trees.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="TreeAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>NewSpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when a tree is added to this tree. 
</EVENT></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.GetTransform(System.String,System.String)"><param name="toSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the coordinate space to which to map points.</PARA></param><param name="fromSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see>. This name indicates the coordinate space from which to map points into the <paramref name="toSpaceName" />.</PARA></param><summary>Return a composed transform which can map points from the 'From' coordinate space to the 'To' space.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="toSpaceName" /> or <paramref name="fromSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="toSpaceName" /> or <paramref name="fromSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>The space name does not exist in this tree.</para></exception><remarks><PARA>Returns a composed <see cref="T:Cognex.VisionPro.CogTransform2D" /> that maps points from one coordinate space to another.</PARA></remarks><returns><PARA>The resulting <see cref="T:Cognex.VisionPro.CogTransform2D" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.ChangeName(System.String,System.String)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> to change. This space must exist in this <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />.</PARA></param><param name="newSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> for the new coordinate space.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="newSpaceName" /> or <paramref name="spaceName" /> is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">valid space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException" cgnxHRESULT="E_CogSpaceTree_DuplicateChildName"><para><paramref name="newSpaceName" /> is already the name of a child of <paramref name="spaceName" />'s parent space.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><summary>Change the given space name to NewSpaceName.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="NameChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>OldSpaceName</ACTUAL_PARAM><ACTUAL_PARAM>NewSpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the name changes. 
</EVENT><remarks><PARA>Change the <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">name</see> of a space in this tree. If the given space name is a fully-qualified pathname, <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.ChangeName(System.String,System.String)" /> modifies only the trailing nonqualified name. The new space name must meet the syntactical requirements of nonqualified or fully-qualified space names.</PARA><NOTE>If you want to modify the root name, the <see cref="P:Cognex.VisionPro.CogCoordinateSpaceTree.RootName" /> property permits less restrictive space names.</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.ChangeTransform(System.String,Cognex.VisionPro.ICogTransform2D,System.Boolean)"><param name="childSpaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the coordinate space to modify.</PARA></param><param name="newParentFromChild"><PARA>An <see cref="T:Cognex.VisionPro.ICogTransform2D" /> that maps points from the space you are changing  to its parent user space.</PARA></param><param name="copyTransform"><PARA>If True, <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.ChangeTransform(System.String,Cognex.VisionPro.ICogTransform2D,System.Boolean)" /> saves a copy of the supplied transform. Otherwise, the transform is added by-reference.</PARA></param><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="TransformChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>SpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the transform changes. 
</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newParentFromChild" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="childSpaceName" /> is the root space.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="childSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="childSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><summary>Change the transform which maps points from the given child space into its parent space.  The new transform is given by NewParentFromChild.</summary><remarks><PARA>Changes the transform that maps points from the given child space name into its parent space.</PARA><PARA>By default, <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.ChangeTransform(System.String,Cognex.VisionPro.ICogTransform2D,System.Boolean)" /> saves a copy of the supplied transform. You can also add the transform by-reference. Although this is more efficient, it may result in errors for users who unknowingly continue to modify the original transform object.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.DeleteSubtree(System.String)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the root space of the tree to delete.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="spaceName" /> cannot be the root space.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="SubtreeDeleted"><ACTUAL_PARAMS><ACTUAL_PARAM>OldSpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when a subtree is deleted. 
</EVENT><summary>Delete the subtree rooted at SpaceName.  SpaceName and all of its children will be recursively removed from tree.</summary><remarks><PARA>Deletes the subtree rooted at the given space name. All children of the space are recursively removed from the tree.</PARA><PARA>If <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.DeleteSubtree(System.String)" /> encounters the root node of a tree embedded using the <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro.CogCoordinateSpaceTree,Cognex.VisionPro.ICogTransform2D,System.Boolean,Cognex.VisionPro.CogAddSpaceConstants)" /> method, it unlinks the embedded tree, and other clients of that tree can continue to use it.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.CopySubtree(System.String)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the root space of the subtree to copy.</PARA></param><summary>Return a copy of the subtree rooted at SpaceName.</summary><returns><PARA>The copied coordinate space subtree.</PARA></returns><remarks><PARA>Returns a copy of the subtree rooted at the given space name. <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.CopySubtree(System.String)" /> does not perform a deep copy of trees embedded using the <see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.AddTree(System.String,Cognex.VisionPro.CogCoordinateSpaceTree,Cognex.VisionPro.ICogTransform2D,System.Boolean,Cognex.VisionPro.CogAddSpaceConstants)" /> method. Instead, it creates an additional reference. 

<!-- WNOTE>In which tree is the additional reference created? Copy, original...?</WNOTE --></PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateSpaceTree.MoveSubtree(System.String,System.String,Cognex.VisionPro.CogAddSpaceConstants)"><param name="spaceName"><PARA>A valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">space name</see> that indicates the root space of the subtree to move.</PARA></param><param name="newParentSpaceName"><PARA>The valid nonqualified or fully-qualified <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">name</see> of the parent space to which to append the subtree.</PARA></param><param name="duplicateHandling"><PARA>A <see cref="T:Cognex.VisionPro.CogAddSpaceConstants" /> value that specifies what do if the parent coordinate space contains an immediate child with the same name as <paramref name="spaceName" />. The options are to return an error, replace the named child with the copied subtree, or do nothing. <paramref name="duplicateHandling" /> defaults to <see cref="T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError</see>: it  treats a duplicate as an error.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="spaceName" /> cannot be the root space. <paramref name="NewSpaceName" /> cannot be a descendant of <paramref name="spaceName" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The <paramref name="duplicateHandling" /> value is not a member of <see cref="T:Cognex.VisionPro.CogAddSpaceConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeDuplicateChildNameException" cgnxHRESULT="E_CogSpaceTree_DuplicateChildName"><para><paramref name="spaceName" /> is already a child of the <paramref name="NewParentSpace" /><BOLD>and</BOLD>  the <paramref name="duplicateHandling" /> argument is <see cref="T:Cognex.VisionPro.CogAddSpaceConstants">DuplicateIsError</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="spaceName" /> or <paramref name="NewSpaceName" /> value is not a <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para><paramref name="spaceName" /> or <paramref name="NewSpaceName" /> is a nonqualified space name and more than one instance of it exists in this tree.</para></exception><remarks><PARA>Moves the subtree rooted at the given space name to the new parent space name. Attaches the given space name using its existing parent transform.</PARA></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogCoordinateSpaceTreeEvents" FUNC="SubtreeMoved"><ACTUAL_PARAMS><ACTUAL_PARAM>OldSpaceName</ACTUAL_PARAM><ACTUAL_PARAM>NewSpaceName</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when a subtree is moved. 
</EVENT><summary>Move the subtree rooted at SpaceName and attach it to the NewParentSpaceName, using SpaceName's existing parent transform.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.SubtreeMoved"><summary>Occurs after a subtree is moved within this tree.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.SubtreeDeleted"><summary>Occurs after a subtree is deleted from this tree.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.TransformChanged"><summary>Occurs after a transform is changed in this tree.  Note that the meaning of any spaces descending from the changed transform will also be altered.  This event can be fired in a variety of ways.  For example: (1) by a call to the ChangeTransform method, (2) by call to the AddSpace method that replaces an existing transform, (3) by modifying a transform that was added to the tree by reference (not copied).</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.NameChanged"><summary>Occurs after a space name is changed in this tree.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.TreeAdded"><summary>Occurs after a new tree is added to this tree.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.SpaceAdded"><summary>Occurs after a new space is added to this tree.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateSpaceTree.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren"><remarks><PARA>Interface of a collection of child graphics.</PARA></remarks><summary>Collection of child graphics.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.#ctor(Cognex.VisionPro.CogGraphicChildren)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.Item(System.String)"><param name="key">n/a</param><summary>Gets or sets the item with the specified index or key.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.Item(System.Int32)"><param name="index">n/a</param><summary>Gets or sets the item with the specified index or key.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogGraphicChildren.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Remove(System.String)"><param name="key">The key of the item to remove.</param><summary>Removes the item with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Insert(Cognex.VisionPro.ICogGraphicParentChild,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Insert(Cognex.VisionPro.ICogGraphicParentChild,System.String,System.Int32)"><param name="value">The item to be inserted.</param><param name="key">The key of the inserted item.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index, with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Add(Cognex.VisionPro.ICogGraphicParentChild)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.Add(Cognex.VisionPro.ICogGraphicParentChild,System.String)"><param name="value">The item to be added.</param><param name="key">The key of the added item.</param><summary>Adds the given item to the end of this collection, with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.IndexOf(Cognex.VisionPro.ICogGraphicParentChild)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.IndexOfKey(System.String)"><param name="key">The key whose index is desired.</param><summary>Gets the index of the item with the specified key.  If the key cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.GetKey(System.Int32)"><param name="index">The index of the item whose key is desired.</param><summary>Gets the key of the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogGraphicChildren.SetKey(System.Int32,System.String)"><param name="index">The index of the item whose key will be set.</param><param name="key">The key to set.</param><summary>Sets the key of the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.KeyChanged"><summary>Occurs after an item's key is changed.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.KeyChanging"><summary>Occurs before an item's key is changed.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.CogGraphicChildren.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection"><remarks><PARA>Interface of a collection of graphics.</PARA></remarks><summary>Collection of graphics.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.#ctor(Cognex.VisionPro.CogGraphicCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogGraphicCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogGraphicCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogGraphicCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.IndexOf(Cognex.VisionPro.ICogGraphic)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.Insert(Cognex.VisionPro.ICogGraphic,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.Add(Cognex.VisionPro.ICogGraphic)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.CogGraphicCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogAcqCustomProperty"><summary>Global class which represents a single custom property.</summary></member><member name="M:Cognex.VisionPro.CogAcqCustomProperty.#ctor(System.String,System.String,Cognex.VisionPro.CogCustomPropertyTypeConstants)"><param name="name">n/a</param><param name="value">n/a</param><param name="type">n/a</param><summary>Constructs a custom property.</summary></member><member name="P:Cognex.VisionPro.CogAcqCustomProperty.Type"><summary>The type of the feature associated with  this property.</summary></member><member name="P:Cognex.VisionPro.CogAcqCustomProperty.Value"><summary>The value to be written to feature associated with  this property.</summary></member><member name="P:Cognex.VisionPro.CogAcqCustomProperty.Name"><summary>The name of the feature associated with  this property.</summary></member><member name="T:Cognex.VisionPro.CogAcqFifoTool"><remarks><PARA>Tool which acquires images using an acquisition FIFO on a frame grabber.</PARA></remarks><summary>Tool which acquires images using an acquisition fifo on a frame grabber.</summary></member><member name="M:Cognex.VisionPro.CogAcqFifoTool.#ctor(Cognex.VisionPro.CogAcqFifoTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogAcqFifoTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogAcqFifoTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoTool.SfOperator"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Operator may have changed.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoTool.SfInvokeStartInSemiMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InvokeStartInSemiMode may have changed.</summary></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.GarbageCollectionFrequency"><value>An integer greater than zero, specifying the number of times the tool can run before explicit garbage collection.</value><exception cref="T:System.ArugmentOutOfRangeException">If you attempt to set this value less than one.</exception><summary>If GarbageCollectionEnabled is true, this property specifies the number of times that the tool can be run before the tool will make an explicit call to the garbage collector.  This property is ignored if GarbageCollectionEnabled is false.</summary></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.GarbageCollectionEnabled"><summary>If true, this tool will call garbage collection (i.e. System.GC.Collect()) after it has been run a specified number of times.  If false, garbage collection will never be called explicitly by this tool.  The GarbageCollectionFrequency property specifies the number of times that the tool can be run before garbage collection will occur.</summary><value>A boolean specifying whether this tool will periodically make an explicit call to the garbage collector.</value></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.InvokeStartInSemiMode"><summary>If true, the Run method will invoke StartAcquire and CompleteAcquire on the operator in semi trigger mode. If false, only CompleteAcquire will be invoked.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqFifoTool_InvokeStartInSemiMode--><ul /></event><remarks><PARA>If true, the Run method will invoke StartAcquire and CompleteAcquire on the operator in semi trigger mode. If false, only CompleteAcquire will be invoked.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.Operator"><remarks><PARA>Reads or sets the acquisition FIFO object.</PARA></remarks><summary>Reads or sets the acquisition fifo object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqFifoTool_Operator--><ul /></event></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.OutputImage"><remarks><PARA>Returns the output image.</PARA></remarks><summary>Returns the output image.</summary></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.CurrentRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqFifoTool_CurrentRecordEnable--><ul /></event><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqFifoTool_LastRunRecordDiagEnable--><ul /></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqFifoTool_LastRunRecordEnable--><ul /></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.CogAcqFifoTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.CogAcqFifoTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.CogAcqFifoTool.Run"><summary>Runs the tool using the current parameter settings.</summary><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
		
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.CogAcqFifoTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.CogAcqFifoTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Performs the tool's primary function.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogAcqFifoTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.CogCADFile"><summary>Class that reads a CAD file to obtain collections of shapes by using the GetShape... methods, which optionally can connect open shapes into longer contours. A file must be open before using these methods. All splines will be approximated.</summary><remarks><PARA>Primary interface of CogCADFile.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCADFile.#ctor(Cognex.VisionPro.CogCADFile)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogCADFile.SfConnectEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConnectEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCADFile.SfConnectTolerance"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConnectTolerance may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCADFile.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCADFile.SfSplineApproximationTolerance"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SplineApproximationTolerance may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCADFile.SfSplineApproximationSpacing"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SplineApproximationSpacing may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCADFile.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="P:Cognex.VisionPro.CogCADFile.FileName"><remarks><PARA>Name of the current open file. If there is no open file, it will return an empty string.</PARA><DEFAULT>Empty</DEFAULT></remarks><summary>Name of the current open file. If there is no open file, it will return an empty string.</summary></member><member name="P:Cognex.VisionPro.CogCADFile.SplineApproximationSpacing"><event cref="E:Cognex.VisionPro.CogCADFile.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCADFile_SplineApproximationSpacing--><ul /></event><summary>All splines in the CAD file will be approximated. Sample points are computed along the spline such that the arc lengths between adjacent sample points do not exceed this spacing. This spacing value is in the the same units as the CAD file.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>A value less than or equal to 0 was supplied.</para></exception><remarks><PARA>All splines in the CAD file will be approximated. Sample points are computed along the spline such that the arc lengths between adjacent sample points do not exceed this spacing. This value is specified in the units of the CAD file's coordinate system.</PARA><DEFAULT>1.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCADFile.SplineApproximationTolerance"><remarks><PARA>All splines in the CAD file will be approximated. Sample points along the spline are guaranteed to be no further than this tolerance from the actual shape. This value is specified in the units of the CAD file's coordinate system.</PARA><DEFAULT>1.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCADFile.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCADFile_SplineApproximationTolerance--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>A value less than or equal to 0 was supplied.</para></exception><summary>All splines in the CAD file will be approximated. Sample points along the spline are guaranteed to be no further than this tolerance from the actual shape. This tolerance value is in the same units as the CAD file.</summary></member><member name="P:Cognex.VisionPro.CogCADFile.SelectedSpaceName"><event cref="E:Cognex.VisionPro.CogCADFile.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCADFile_SelectedSpaceName--><ul /></event><summary>Returns/sets the name of the coordinate space for this class, which will be applied to the shapes extracted from the CAD file. The SelectedSpaceName of each extracted shape will be copied from this property.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>An invalid selected space name was supplied.</para></exception><remarks><PARA>Returns/sets the name of the coordinate space for this class, which will be applied to the shapes extracted from the CAD file. The SelectedSpaceName of each extracted shape will be set to the value of this property.</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCADFile.ConnectTolerance"><remarks><PARA>Two open contour shapes are 
	<see cref="u:Search.PMAlign.Theory.ImportingShapes" cgnxAnchor="connectivity_and_tolerance_settings">connected</see> if the distance between two of their endpoints is less than this tolerance. Only used if <see cref="P:Cognex.VisionPro.CogCADFile.ConnectEnabled" /> is True. This value is specified in the units of the CAD file's coordinate system.</PARA><DEFAULT>1.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>A value less than or equal to zero was supplied.</para></exception><summary>Two open contour shapes are connectable if the distance between two of their endpoints is less than this tolerance. Only used if ConnectEnabled is True. This tolerance value is in the same units as the CAD file.</summary></member><member name="P:Cognex.VisionPro.CogCADFile.ConnectEnabled"><summary>If true, it will try to connect open shapes into longer contours which are better for synthetic PatMax. Shapes are connected when the user calls the GetShape... methods. ConnectTolerance is used to control how near shapes must be to be connected.</summary><remarks><PARA>If true, it will try to 
	<see cref="u:Search.PMAlign.Theory.ImportingShapes" cgnxAnchor="connectivity_and_tolerance_settings">connect</see> 
	open shapes into longer contours which are better for synthetic PatMax. Shapes are connected when the user calls the <see cref="M:Cognex.VisionPro.CogCADFile.GetShapes" />  methods. <see cref="P:Cognex.VisionPro.CogCADFile.ConnectTolerance" /> is used to control how near shapes must be to each other to be connected.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCADFile.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogCADFile.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCADFile.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.Open(System.String)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><summary>Opens a CAD file. Currently only a subset of Autodesk's standard DXF file format is supported. If a file is already open, it will close the file and open a new file or reopen the same file.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>The file could not be opened.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileFormatException" cgnxHRESULT="E_Cog_BadFileFormat"><para>The file is invalid.</para></exception><remarks><PARA>Opens a CAD file. Currently only a 
	<see cref="u:Search.PMAlign.Theory.ImportingShapes" cgnxAnchor="dxf_entities">subset</see> of Autodesk's standard DXF file format is supported. If a file is already open, it will close the file and open a new file or reopen the same file.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCADFile.Changed" cgnxEvent="multiState"><para>
		
		Fires when this function is called. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogCADFile.Close"><remarks><PARA>Closes the currently open CAD file if there is one. There is no error if no file is open. This sets 
	<see cref="P:Cognex.VisionPro.CogCADFile.FileName" />  to empty string.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCADFile.Changed" cgnxEvent="multiState"><para>
		
		Fires when this function is called. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Closes the currently open CAD file if there is one. There is no error if no file is open. This sets FileName to empty string.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.GetLayers"><returns><PARA>The returned layer names.</PARA></returns><summary>Returns a collection containing the names of all the layers in the currently open CAD file. DXF files are usually constructed with named layers.</summary><remarks><PARA>Returns a collection containing the names of all the layers in the currently open CAD file. DXF files are usually constructed with named layers.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception></member><member name="M:Cognex.VisionPro.CogCADFile.GetGroups"><remarks><PARA>Returns a collection containing the names of all the groups in the currently open CAD file. Not all DXF files contain groups.</PARA></remarks><returns><PARA>The returned group names.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><summary>Returns a collection containing the names of all the groups in the currently open CAD file. DXF files sometimes contain named groups of shapes.</summary></member><member name="M:Cognex.VisionPro.CogCADFile.GetShapes"><summary>Gets all shapes from the currently open CAD file. Returns a newly created CogGraphicCollection.</summary><remarks><PARA>Gets all shapes from the currently open CAD file. Returns a newly created <see cref="T:Cognex.VisionPro.CogGraphicCollection" />.</PARA></remarks><returns><PARA>The shapes.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception></member><member name="M:Cognex.VisionPro.CogCADFile.GetShapesFromALayer(System.String)"><param name="layerName"><PARA>The layer from which to get the shapes.</PARA></param><returns><PARA>The shapes.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="layerName" /> does not exist..</para></exception><summary>Gets all shapes in the specified layer from the currently open CAD file. Returns a newly created CogGraphicCollection.</summary><remarks><PARA>Gets all shapes in the specified layer from the currently open CAD file. Returns a newly created <see cref="T:Cognex.VisionPro.CogGraphicCollection" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCADFile.GetShapesFromAGroup(System.String)"><param name="groupName"><PARA>The group from which to get the shapes.</PARA></param><remarks><PARA>Gets all shapes in the specified group from the currently open CAD file. Returns a newly created <see cref="T:Cognex.VisionPro.CogGraphicCollection" />.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="groupName" /> does not exist..</para></exception><summary>Gets all shapes in the specified group from the currently open CAD file. Returns a newly created CogGraphicCollection.</summary><returns><PARA>The shapes.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCADFile.GetShapeModels"><remarks><PARA>
	Gets all shape models from the currently open CAD file. Returns a newly created 
	<see cref="T:Cognex.VisionPro.CogShapeModelCollection" />. All models have a 
	<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="how_weights_are_used">weight</see> 
	of 1.0 and an undefined 
	<see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see>. These properties are required for training synthetic PatMax.
	</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><summary>Gets all shape models from the currently open CAD file. Returns a newly created CogShapeModelCollection. All models have a weight of 1.0 and an undefined polarity. These properties are required for training synthetic PatMax.</summary><returns><PARA>The shape model collection.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCADFile.GetShapeModelsFromALayer(System.String)"><param name="layerName"><PARA>The layer from which to get the shapes.</PARA></param><remarks><PARA>Gets all shape models in the specified layer from the currently open CAD file. Returns a newly created 
	<see cref="T:Cognex.VisionPro.CogShapeModelCollection" />. All models have a 
	<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="how_weights_are_used">weight</see> 
	of 1.0 and an undefined 
	<see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see>. These properties are required for training synthetic PatMax.
</PARA></remarks><returns><PARA>The shape model collection.</PARA></returns><summary>Gets all shape models in the specified layer from the currently open CAD file. Returns a newly created CogShapeModelCollection. All models have a weight of 1.0 and an undefined polarity. These properties are required for training synthetic PatMax.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="layerName" /> does not exist..</para></exception></member><member name="M:Cognex.VisionPro.CogCADFile.GetShapeModelsFromAGroup(System.String)"><param name="groupName"><PARA>The group from which to get the shapes.</PARA></param><summary>Gets all shape models in the specified group from the currently open CAD file. Returns a newly created CogShapeModelCollection. All models have a weight of 1.0 and an undefined polarity. These properties are required for training synthetic PatMax.</summary><remarks><PARA>Gets all shape models in the specified group from the currently open CAD file.  Returns a newly created 
	<see cref="T:Cognex.VisionPro.CogShapeModelCollection" />. All models have a 
	<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="how_weights_are_used">weight</see> 
	of 1.0 and an undefined 
	<see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see>. These properties are required for training synthetic PatMax.
</PARA></remarks><returns><PARA>The shape model collection.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="groupName" /> does not exist..</para></exception></member><member name="E:Cognex.VisionPro.CogCADFile.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCircle"><remarks><PARA>Interface describing a circle shape.</PARA></remarks><summary>Class that represents a circle.</summary></member><member name="M:Cognex.VisionPro.CogCircle.#ctor(Cognex.VisionPro.CogCircle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCircle.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCircle.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfRadius"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Radius may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircle.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogCircle.Perimeter"><remarks><PARA>Returns the perimeter of this <see cref="T:Cognex.VisionPro.CogCircle" /> in units specified by the <see cref="P:Cognex.VisionPro.CogCircle.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks><summary>Perimeter length of this Circle.</summary></member><member name="P:Cognex.VisionPro.CogCircle.Area"><summary>Area of this CogCircle.</summary><remarks><PARA>Returns the area of this <see cref="T:Cognex.VisionPro.CogCircle" /> in units specified by the <see cref="P:Cognex.VisionPro.CogCircle.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircle.Radius"><event cref="E:Cognex.VisionPro.CogCircle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new radius is &lt;=0.</para></exception><summary>Radius of this circle.</summary><remarks><PARA>Radius of this circle.</PARA><DEFAULT>50</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircle.CenterY"><summary>Y coordinate of the center of this circle.</summary><remarks><PARA>Y-coordinate of the center of this circle.</PARA><DEFAULT>70</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCircle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCircle.CenterX"><remarks><PARA>X-coordinate of the center of this circle.</PARA><DEFAULT>70</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCircle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>X coordinate of the center of this circle.</summary></member><member name="P:Cognex.VisionPro.CogCircle.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><event cref="E:Cognex.VisionPro.CogCircle.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogCircleDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircle.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCircle.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircle.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.CogCircle.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogCircle.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircle.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogCircle.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCircle.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCircle.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircle.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogCircle.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.CogCircle.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.CogCircle.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.CogCircle.LineWidthInScreenPixels"><summary>Line width (in screen pixels) of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircle.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCircle.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircle.Visible"><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircle.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogCircle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogCircle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCircle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCircle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCircle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCircle.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.CogCircle.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircle.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.CogCircle.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogCircle.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><returns><PARA>The returned rectangle.</PARA></returns><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogCircle.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks><summary>Create an RLE representation of this Region.</summary><returns><PARA>The RLE representation of this region.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircle.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary></member><member name="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogCircle" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><returns><PARA>The returned shape model.</PARA></returns><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary></member><member name="M:Cognex.VisionPro.CogCircle.SetCenterRadius(System.Double,System.Double,System.Double)"><param name="centerX"><PARA>X-coordinate of the center of the circle.</PARA></param><param name="centerY"><PARA>Y-coordinate of the center of the circle</PARA></param><param name="radius"><PARA>Radius of the circle.</PARA></param><event cref="E:Cognex.VisionPro.CogCircle.Changed" cgnxEvent="multiState"><para>
        
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Sets CenterX, CenterY, Radius of the circle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new radius is &lt;=0.</para></exception><remarks><PARA>Sets the <see cref="P:Cognex.VisionPro.CogCircle.CenterX" />, <see cref="P:Cognex.VisionPro.CogCircle.CenterY" />, and <see cref="P:Cognex.VisionPro.CogCircle.Radius" /> of the circle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircle.GetCenterRadius(System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>X-coordinate of the center of the circle.</PARA></param><param name="centerY"><PARA>Y-coordinate of the center of the circle</PARA></param><param name="radius"><PARA>Radius of the circle.</PARA></param><summary>Retrieve CenterX, CenterY, Radius of the circle.</summary><remarks><PARA>Retrieve CenterX, CenterY, Radius of the circle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircle.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Creates a new ellipse by mapping this circle through a linear transform.</summary><remarks><PARA>Creates a new circle by mapping this circle through a linear transform.</PARA></remarks><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircle.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogCircle" /></PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCircle" /> that copies the specified attributes from this <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></remarks><summary>Create a new shape that copies specified parameters.</summary></member><member name="E:Cognex.VisionPro.CogCircle.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogCircle.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogCircle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSection"><summary>A circular annulus section is a four-sided shape bounded by two circular arcs and two radial lines.  The arcs are scaled copies of each other.  You specify the 'start' arc and then provide a RadialScale that defines the 'end' arc.</summary><remarks><PARA>A circular annulus section is a four-sided shape bounded by two circular arcs and two radial lines.  The arcs are scaled copies of each other, and the radial lines connect the endpoints of the arcs.</PARA><PARA>You specify the (<see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterX" />,<see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterY" />), <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.Radius" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> which define the start arc and then provide a <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> that defines the end arc. If the <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> is less than 1, the start arc is the outer arc.</PARA><PARA>The following picture shows the parts of the circular annulus section and the interactive handles available when <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.GraphicDOFEnable" /> is set to <see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants">All</see>. The handle names are in <ITALIC>italics</ITALIC>.</PARA><PARA><PICTURE SRC="circann.gif" WIDTH="459" HEIGHT="244" apiSRC="ICogCircularAnnulusSection_circann.gif" /></PARA><TABLE><ROW><TH><tab-head>Interactive Handle</tab-head></TH><TH><tab-head>Description</tab-head></TH></ROW><ROW><CELL><PARA>Section span</PARA></CELL><CELL><PARA>Lets you change the length of the arc along the underlying circle. The center and radius do not change.</PARA></CELL></ROW><ROW><CELL><PARA>Endpoint</PARA></CELL><CELL><PARA>Lets you change location of either endpoint. Changing an endpoint can cause changes to all of the other circular annulus section parameters except the other endpoint.</PARA></CELL></ROW><ROW><CELL><PARA>Radii</PARA></CELL><CELL><PARA>Lets you change the radii of either the inner or outer arc. Changing the radii also changes the <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> but not the center, start angle, or span. If you move the outer arc inside the inner arc or vice versa, the radial direction changes.</PARA></CELL></ROW><ROW><CELL><PARA>Bend</PARA></CELL><CELL><PARA>Lets you  change the curvature of the circular annulus section. Changing the curvature can change all of the other circular annulus section parameters except the endpoints.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.#ctor(Cognex.VisionPro.CogCircularAnnulusSection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfRadius"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Radius may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfAngleStart"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleStart may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfAngleSpan"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleSpan may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfRadialScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadialScale may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfArcDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ArcDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfRadialDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadialDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfCenterArcAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterArcAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfManipArcFraction"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ManipArcFraction may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSection.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.ManipArcFraction"><summary>Returns/sets the fractional distance (between the start and end arcs) where the manipulation arc is drawn.  During interactive manipulation, the shape usually resets this fraction to 0.5 but users may reset it sooner if they desire.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Perimeter"><remarks><PARA>Returns the perimeter length of this circular annulus section.
As <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> becomes greater than 2π, the length continues to increase. This value is always positive.
</PARA></remarks><summary>Returns the perimeter length of this circular annulus section.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Area"><remarks><PARA>Returns the area enclosed by this circular annulus section.</PARA><PARA>If <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> is greater than 2π, the area is the same as if were only 2π. This value is always positive.</PARA></remarks><summary>Returns the area enclosed by this circular annulus section.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterArcAdornment"><summary>Returns/sets the center arc adornment of this annulus section.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionCenterArcAdornmentConstants" />.</para></exception><remarks><PARA>Sets or gets the center arc adornment of this annulus section. This property specifies whether and how the center arc is drawn.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionCenterArcAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularAnnulusSection_CenterArcAdornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialDirectionAdornment"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularAnnulusSection_RadialDirectionAdornment--><ul /></event><summary>Returns/sets the radial direction adornment of this annulus section.</summary><remarks><PARA>Sets or gets the <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale">radial direction</see> adornment of this annulus section.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.ArcDirectionAdornment"><summary>Returns/sets the arc direction adornment of this annulus section.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularAnnulusSection_ArcDirectionAdornment--><ul /></event><remarks><PARA>Sets or gets the arc direction adornment of this circular annulus section.  The adornment indicates the direction from the start points of the arcs to the end points.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale"><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the radial scale of this annular section. Note that this can be less than or greater than 1 (but not equal to 1, and not &lt;=0) and therefore implies a radial direction.</summary><remarks><PARA>Sets of gets the radial scale of this annulus section.</PARA><PARA>The radial scale determines the relative sizes of the two arcs that make up the annulus section. The two arcs are scaled copies of each other. The start arc is specified by setting the <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> properties. The end arc is specified by applying a radial scale to the start arc.</PARA><PARA><see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> determines which arc is the inner arc and which arc   is the outer arc. It also implies a radial direction as shown in the following table.</PARA><TABLE><CAPTION><tab-capt>Effect of RadialScale values</tab-capt></CAPTION><ROW><TH><tab-head /></TH><TH><tab-head><see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> &lt; 1</tab-head></TH><TH><tab-head><see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> &gt; 1</tab-head></TH></ROW><ROW><CELL><BOLD>Start Arc</BOLD></CELL><CELL>Outer</CELL><CELL>Inner</CELL></ROW><ROW><CELL><BOLD>End  Arc</BOLD></CELL><CELL>Inner</CELL><CELL>Outer</CELL></ROW><ROW><CELL><BOLD>Radial Direction</BOLD></CELL><CELL>Toward the center</CELL><CELL>Away from the center</CELL></ROW></TABLE><PARA><see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> cannot be exactly 1.0, nor can it be less than or equal to zero.</PARA><DEFAULT>0.5</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0 or <paramref name="Value" /> = 1.0</para></exception></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is zero.</para></exception><summary>Returns/sets the angle span (in radians) of this annulus section. Note that this can be positive or negative, and implies arc direction.</summary><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the angle span of the start arc of this circular annulus section in radians.
The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc.</PARA><PARA>If the absolute value of the  angle span is greater than 2π,
the arc wraps around on itself. It is not normalized to the range −2π to 2π</PARA><PARA>For example, an <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> of +π is an arc that describes half of a full circle, and a span of −π describes the other half in the opposite direction.</PARA><PARA>To simply reverse the direction of an arc, you can use the following:</PARA><CODE>
AngleStart = AngleStart + AngleSpan
AngleSpan = −AngleSpan
</CODE><DEFAULT>π/2</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart"><remarks><PARA>Sets or gets the start angle of this annulus section. The angle is measured in radians from the x-axis.</PARA><PARA><see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" /> is normalized to a value between +π and −π.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the starting angle (in radians) of this annulus section.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Radius"><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the radius of the start arc of this annulus section. If <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> is less than 1, the radius is from the center to the outer arc; if it is greater than 1, the radius is from the center to the inner arc.
</PARA><DEFAULT>50</DEFAULT></remarks><summary>Returns/sets the Radius of the start arc of this annulus section. Note this could be either the inner arc or the outer arc depending on whether RadialScale is greater than or less than 1.0.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterY"><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the Y coordinate of the center of the circle defined by this circular annulus section.</summary><remarks><PARA>Sets or gets the y-coordinate of the center of the underlying circle.</PARA><DEFAULT>70</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterX"><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the x-coordinate of the center of the underlying circle.</PARA><DEFAULT>70</DEFAULT></remarks><summary>Returns/sets the X coordinate of the center of the circle defined by this circular annulus section.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.GraphicDOFEnable"><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" />.</PARA></remarks><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.DragLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.DragColor"><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.SelectedLineStyle"><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.SelectedColor"><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Selected"><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.Visible"><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><summary>Coordinate space in which this shape is to be interpreted.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogCircularAnnulusSection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><summary>Create an RLE representation of this Region.</summary><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks><returns><PARA>The RLE representation of this region.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.SetCenterRadiusAngleStartAngleSpanRadialScale(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the center of this circular annulus section.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of this circular annulus section.</PARA></param><param name="radius"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.Radius" /> of the annular section.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" />.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" />. (The default value for this parameter is actually π/2.)</PARA></param><param name="radialScale"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> of the annular section.</PARA></param><event cref="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Sets CenterX, CenterY, Radius, AngleStart (in radians), AngleSpan (in radians) and RadialScale of the circular annulus section.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radius" /> &lt;= 0.0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="angleSpan" /> = 0.0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radialScale" /> &lt;= 0.0 or <paramref name="radialScale" /> = 1.0</para></exception><remarks><PARA>Sets <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterX" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterY" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.Radius" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> and <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> of the circular annulus section.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.GetCenterRadiusAngleStartAngleSpanRadialScale(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center of this circular annulus section.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of this circular annulus section.</PARA></param><param name="radius"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.Radius" /> of the annular section.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" />.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" />.</PARA></param><param name="radialScale"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> of the annular section.</PARA></param><remarks><PARA>Gets <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterX" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.CenterY" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.Radius" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" />, <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" /> and <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> of the circular annulus section.</PARA></remarks><summary>Gets CenterX, CenterY, Radius, AngleStart (in radians), AngleSpan (in radians) and RadialScale of the circular annulus section.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Creates a new elliptical annulus section (copying the specified parameters) by mapping this circular annulus section through the given linear transform.</summary><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" />.</PARA></returns><remarks><PARA>Creates a new elliptical annulus section by mapping this circular annulus section through a linear transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /> that copies the specified attributes from this <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" />.</PARA></remarks><summary>Creates a new circular annulus section, copying the specified parameters.</summary></member><member name="M:Cognex.VisionPro.CogCircularAnnulusSection.CreateCircularArc(System.Double,Cognex.VisionPro.CogCopyShapeConstants)"><param name="radialFraction"><PARA>Specifies the arc in relation to the section. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc, or other values for intermediate arcs.
</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>(1 + <paramref name="radialFraction" />*(<see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.RadialScale" /> − 1)) &lt;= 0.0</para></exception><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCircularArc" /> based on this circular annulus section as defined by the radial fraction between the start and end arcs. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc.  <paramref name="copyFlags" /> specifies which aspects of the arc are copied to the new shape.
</PARA><PARA>Although you can specify <paramref name="radialFraction" /> values less than zero or greater than 1, this function will return an error if the resulting radius  would be less than or equal to zero.</PARA></remarks><summary>Creates a new circular arc (copying the specified parameters) defined by this circular annulus section at the given radial fraction between the start and end arcs. For example, specify 0 for the start arc, 0.5 for the center arc, and 1 for the end arc.</summary><returns><PARA>The new circular arc.</PARA></returns></member><member name="E:Cognex.VisionPro.CogCircularAnnulusSection.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogCircularAnnulusSection.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogCircularAnnulusSection.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCircularArc"><remarks><PARA>A circular arc is a portion of a circle.
You specify this shape using the usual circle parameters and two additional ones: <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" />, the angle at which the arc begins, and <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" />, the angular extent of the arc.</PARA><PARA>The following picture shows the parts of the circular arc  and the interactive handles available when <see cref="P:Cognex.VisionPro.CogCircularArc.GraphicDOFEnable" /> is set to <see cref="T:Cognex.VisionPro.CogCircularArcDOFConstants">All</see>.
The handle names are in <ITALIC>italics</ITALIC>.</PARA><PARA><PICTURE SRC="circarc.gif" WIDTH="410" HEIGHT="182" apiSRC="ICogCircularArc_circarc.gif" /></PARA><TABLE><ROW><TH><tab-head>Interactive Handle</tab-head></TH><TH><tab-head>Description</tab-head></TH></ROW><ROW><CELL><PARA>Arc span</PARA></CELL><CELL><PARA>Lets you change the length of the arc along the underlying circle. The center and radius do not change.</PARA></CELL></ROW><ROW><CELL><PARA>Endpoint</PARA></CELL><CELL><PARA>Lets you change location of either endpoint. Changing an endpoint can cause changes to all of the other circular arc parameters except the other endpoint.</PARA></CELL></ROW><ROW><CELL><PARA>Bend</PARA></CELL><CELL><PARA>Lets you  change the curvature of the circular arc. Changing the curvature can change all of the other circular arc parameters except the endpoints.</PARA></CELL></ROW></TABLE></remarks><summary>A circular arc is a portion of a circle.  You specify this shape using the usual circle parameters and two more: AngleStart and AngleSpan.  AngleStart defines the angle at which the arc begins and AngleSpan defines the angular extent of the arc.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.#ctor(Cognex.VisionPro.CogCircularArc)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfRadius"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Radius may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfAngleStart"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleStart may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfAngleSpan"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleSpan may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfArcLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ArcLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfStartX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfStartY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfEndX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfEndY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfMidpointX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MidpointX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfMidpointY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MidpointY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfStartPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfDisplayMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfDisplayedRadiusInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayedRadiusInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCircularArc.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.DisplayedRadiusInScreenPixels"><remarks><PARA>Sets or gets the radius in screen pixels that the arc is drawn with when <see cref="P:Cognex.VisionPro.CogCircularArc.DisplayMode" /> is <see cref="T:Cognex.VisionPro.CogCircularArcDisplayModeConstants">Screen</see></PARA><PARA>All of the geometric functions in <see cref="T:Cognex.VisionPro.CogCircularArc" /> use only <see cref="P:Cognex.VisionPro.CogCircularArc.Radius" /> to compute their results. This property only affects how the shape is rendered.</PARA><DEFAULT>15</DEFAULT></remarks><summary>Returns/sets the screen radius the arc will be drawn with if DisplayMode is cogCircularArcDisplayModeScreen.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularArc_DisplayedRadiusInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularArc.DisplayMode"><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularArc_DisplayMode--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularArcDisplayModeConstants" />.</para></exception><summary>Returns/sets the mode in which the arc will be displayed, either with the screen radius (DisplayedRadiusInScreenPixels) or the normal geometric radius (Radius).</summary><remarks><PARA>Sets or gets whether the arc is drawn using the geometric radius or constant screen pixels.
</PARA><PARA>When <see cref="P:Cognex.VisionPro.CogCircularArc.DisplayMode" /> is <see cref="T:Cognex.VisionPro.CogCircularArcDisplayModeConstants">Mathematical</see>, VisionPro draws the arc as a geometric shape with the radius <see cref="P:Cognex.VisionPro.CogCircularArc.Radius" />.</PARA><PARA>When <see cref="P:Cognex.VisionPro.CogCircularArc.DisplayMode" /> is <see cref="T:Cognex.VisionPro.CogCircularArcDisplayModeConstants">Screen</see>, VisionPro uses the radius <see cref="P:Cognex.VisionPro.CogCircularArc.DisplayedRadiusInScreenPixels" /> to draw the arc. In this mode, the displayed size of the arc is constant regardless of the zoom level set in the <see cref="T:Cognex.VisionPro.Display.Controls.CogCircularArc" />.
</PARA><PARA>The mode affects only the way that the arc is displayed. Changing the mode does not change any of the geometric properties of the arc such as its <see cref="P:Cognex.VisionPro.CogCircularArc.ArcLength" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularArcDisplayModeConstants">Mathematical</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.DirectionAdornment"><summary>Returns/sets the arc direction adornment of this circular arc.</summary><remarks><PARA>Sets or gets the direction adornment of this circular arc which indicates the direction from the start point to the end point.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularArcDirectionAdornmentConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularArcDirectionAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularArc_DirectionAdornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularArc.EndPointAdornment"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularArcAdornmentConstants" />.</para></exception><remarks><PARA>Sets or gets the endpoint adornment of this circular arc.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularArcAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularArc_EndPointAdornment--><ul /></event><summary>Returns/sets the end point adornment of this circular arc.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.StartPointAdornment"><remarks><PARA>Sets or gets the start point adornment of this circular arc.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCircularArcAdornmentConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogCircularArcAdornmentConstants" />.</para></exception><summary>Returns/sets the start point adornment of this circular arc.</summary><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCircularArc_StartPointAdornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularArc.MidpointY"><remarks><PARA>Returns the y-coordinate of the midpoint of the arc. This is the point on the arc halfway between (<see cref="P:Cognex.VisionPro.CogCircularArc.StartX" />,<see cref="P:Cognex.VisionPro.CogCircularArc.StartY" />) and (<see cref="P:Cognex.VisionPro.CogCircularArc.EndX" />,<see cref="P:Cognex.VisionPro.CogCircularArc.EndY" />).
</PARA></remarks><summary>Returns the y coordinate of the arc mid-point.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.MidpointX"><summary>Returns the x coordinate of the arc mid-point (the point on the arc halfway between 'start' and 'end').</summary><remarks><PARA>Returns the x-coordinate of the midpoint of the arc. This is the point on the arc halfway between (<see cref="P:Cognex.VisionPro.CogCircularArc.StartX" />,<see cref="P:Cognex.VisionPro.CogCircularArc.StartY" />) and (<see cref="P:Cognex.VisionPro.CogCircularArc.EndX" />,<see cref="P:Cognex.VisionPro.CogCircularArc.EndY" />).
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.EndY"><summary>Returns the y coordinate of the arc end point (the point at the AngleStart + AngleSpan end of the arc).</summary><remarks><PARA>Returns the y-coordinate of the arc end point.
This is the point at the <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" />+<see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> end of the arc.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.EndX"><summary>Returns the x coordinate of the arc end point (the point at the AngleStart + AngleSpan end of the arc).</summary><remarks><PARA>Returns the x-coordinate of the arc end point.
This is the point at the <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" />+<see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> end of the arc.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.StartY"><summary>Returns the y coordinate of the arc start point (the point at the AngleStart end of the arc).</summary><remarks><PARA>The y-coordinate of the start point of the arc. This is the point at the <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> end of the arc.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.StartX"><remarks><PARA>The x-coordinate of the start point of the arc. This is the point at the <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> end of the arc.</PARA></remarks><summary>Returns the x coordinate of the arc start point (the point at the AngleStart end of the arc).</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.ArcLength"><summary>Returns the length of this circular arc.</summary><remarks><PARA>Returns the length of this circular arc.

As <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> becomes greater than 2π, the length continues to increase. This value is always positive.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.AngleSpan"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is zero.</para></exception><summary>Returns/sets the angle span (in radians) of this circular arc. Note that this can be positive or negative (but not exactly 0), and implies an arc direction.</summary><remarks><PARA>Sets or gets the angle span of this circular arc in radians.
The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc.</PARA><PARA>If the absolute value of the  angle span is greater than 2π,
the arc wraps around on itself. It is not normalized to the range −2π to 2π</PARA><PARA>For example, an <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> of +π is an arc that describes half of a full circle, and a span of −π describes the other half in the opposite direction.</PARA><PARA>To simply reverse the direction of an arc, you can use the following:</PARA><CODE>
AngleStart = AngleStart + AngleSpan
AngleSpan = −AngleSpan
</CODE><DEFAULT>π/2</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCircularArc.AngleStart"><remarks><PARA>Sets or gets the start angle of this circular arc. The angle is measured in radians from the x-axis.</PARA><PARA><see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> is normalized to a value between +π and −π.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Returns/sets the start angle (in radians) of this circular arc.</summary><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCircularArc.Radius"><remarks><PARA>Radius of this circular arc.</PARA><DEFAULT>50</DEFAULT></remarks><summary>Returns/sets the radius of the circle.</summary><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception></member><member name="P:Cognex.VisionPro.CogCircularArc.CenterY"><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the Y coordinate of the center of the circle.</summary><remarks><PARA>Sets or gets the y-coordinate of the center of the underlying circle.</PARA><DEFAULT>70</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.CenterX"><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the X coordinate of the center of the circle.</summary><remarks><PARA>Sets or gets the x-coordinate of the center of the underlying circle.</PARA><DEFAULT>70</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.GraphicDOFEnable"><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogCircularArcDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogCircularArc" />.</PARA></remarks><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.GraphicDOFEnableBase"><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCircularArc.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogCircularArc.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.SelectedColor"><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogCircularArc.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularArc.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogCircularArc.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCircularArc.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogCircularArc.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><summary>Shortest distance from this shape to the given point.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircularArc.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularArc.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.CogCircularArc.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogCircularArc.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCircularArc.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularArc.SetCenterRadiusAngleStartAngleSpan(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the center of the arc.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the arc.</PARA></param><param name="radius"><PARA>The radius of the arc.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> of the arc.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> of the arc. (The default value for this parameter is actually π/2.)</PARA></param><summary>Sets CenterX, CenterY, Radius, AngleStart (in radians) and AngleSpan (in radians) of this circular arc.</summary><remarks><PARA>Sets the <see cref="P:Cognex.VisionPro.CogCircularArc.CenterX" />, <see cref="P:Cognex.VisionPro.CogCircularArc.CenterY" />, <see cref="P:Cognex.VisionPro.CogCircularArc.Radius" />, <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> of this circular arc.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCircularArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radius" /> &lt;= 0.0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="angleSpan" /> = 0.0</para></exception></member><member name="M:Cognex.VisionPro.CogCircularArc.GetCenterRadiusAngleStartAngleSpan(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center of the arc.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the arc.</PARA></param><param name="radius"><PARA>The radius of the arc.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> of the arc.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> of the arc.</PARA></param><summary>Gets CenterX, CenterY, Radius, AngleStart, and AngleSpan of this circular arc.</summary><remarks><PARA>Gets the <see cref="P:Cognex.VisionPro.CogCircularArc.CenterX" />, <see cref="P:Cognex.VisionPro.CogCircularArc.CenterY" />, <see cref="P:Cognex.VisionPro.CogCircularArc.Radius" />, <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" />, and <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" /> of this circular arc.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularArc.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>The x-coordinate of the start point.</PARA></param><param name="startY"><PARA>The y-coordinate of the start point.</PARA></param><param name="endX"><PARA>The x-coordinate of the endpoint.</PARA></param><param name="endY"><PARA>The y-coordinate of the endpoint.</PARA></param><remarks><PARA>Gets the coordinates of the start and endpoints of the circular arc.</PARA></remarks><summary>Gets start and end point coordinates of the circular arc.</summary></member><member name="M:Cognex.VisionPro.CogCircularArc.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogCircularArc" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new elliptical arc by mapping this circular arc through a linear transform.</PARA></remarks><summary>Creates a new elliptical arc (copying the specified parameters) by mapping this circular arc through the given linear transform.</summary><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogCircularArc" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogCircularArc.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Creates and returns a new circular arc, copying the specified parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogCircularArc" /></PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCircularArc" /> that copies the specified attributes from this <see cref="T:Cognex.VisionPro.CogCircularArc" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCircularArc.CreateCircle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Creates and returns a new circle shape, copying the specified parameters, that is the full circle defined by this circular arc.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCircle" /> based on the <see cref="P:Cognex.VisionPro.CogCircularArc.CenterX" />, <see cref="P:Cognex.VisionPro.CogCircularArc.CenterY" />, and <see cref="P:Cognex.VisionPro.CogCircularArc.Radius" /> properties of the arc. <paramref name="copyFlags" /> specifies which aspects of the arc are copied to the circle.</PARA></remarks><returns><PARA>The circle.</PARA></returns></member><member name="E:Cognex.VisionPro.CogCircularArc.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogCircularArc.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogCircularArc.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCompositeShape"><summary>Class that represents a composite shape : a shape made up of many child shapes.</summary><remarks><PARA>Interface that describes a composite shape. A composite shape is a made up of one or more shapes that can behave as a single graphic entity.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCompositeShape.#ctor(Cognex.VisionPro.CogCompositeShape)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfShapes"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Shapes may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfParentFromChildTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ParentFromChildTransform may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfID"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ID may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfPaddingInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PaddingInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfCompositionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CompositionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectionGraphicColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectionGraphicColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectionGraphicLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectionGraphicLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectionGraphicLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectionGraphicLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectionGraphicMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectionGraphicMouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfXDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfYDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShape.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.YDirectionAdornment"><summary>The Y direction adornment of this composite shape.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_YDirectionAdornment--><ul /></event><remarks><PARA>The y-direction <see cref="T:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants">adornment</see> of this composite shape, an arrow in the positive y-direction of the bounding rectangle of the shape.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.XDirectionAdornment"><remarks><PARA>The x-direction <see cref="T:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants">adornment</see> of this composite shape, an arrow in the positive x-direction of the bounding rectangle of the shape.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_XDirectionAdornment--><ul /></event><summary>The X direction adornment of this composite shape.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectionGraphicMouseCursor"><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selection mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_SelectionGraphicMouseCursor--><ul /></event><remarks><PARA>Sets or gets the mouse cursor used with the selection rectangle that encloses the composite shape.</PARA></remarks><summary>Controls mouse cursor of selection graphic.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectionGraphicLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selection line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_SelectionGraphicLineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Controls line width of selection graphic when it appears.</summary><remarks><PARA>Sets or gets the width of the line used to draw the selection rectangle that encloses the composite shape.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectionGraphicLineStyle"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants" />.</para></exception><summary>Controls line style of selection graphic when it appears.</summary><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selection line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_SelectionGraphicLineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of the selection rectangle that encloses the composite shape when it is visible.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectionGraphicColor"><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selection color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_SelectionGraphicColor--><ul /></event><summary>Controls color of selection graphic when it appears.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of the selection rectangle that encloses the composite shape when it is visible.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.CompositionMode"><summary>Controls how this shape composes itself from its sub-shapes.  Uniform mode propagates all composite graphic properties to sub shapes, making them act as if they were all one graphic. Freeform mode does not.</summary><remarks><PARA>Controls how this shape composes itself from its child shapes.
<see cref="T:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants">Uniform
</see> propagates all of the composite shape's graphic properties to the child shapes so that they behave as if they were a single graphic. <see cref="T:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants">Freeform
</see> allows each shape in the composite shape to be manipulated according to its own graphic properties.</PARA><PARA>
The <see cref="P:Cognex.VisionPro.ICogGraphic.SelectedSpaceName" /> and <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> properties are never propagated from the composite shape to the child shapes.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants">Uniform</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the composition mode changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_CompositionMode--><ul /></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.PaddingInScreenPixels"><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the padding changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_PaddingInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the amount of padding, in pixels, between the child shapes and the selection rectangle of the composite shape.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Selection rectangle padding around child shapes.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.ID"><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the ID changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_ID--><ul /></event><summary>Property for identifying this graphic.</summary><remarks><PARA>Sets or gets an ID that identifies this composite shape. VisionPro uses the ID in result graphics to correlate a result graphic with a particular result, which also has an ID. </PARA><DEFAULT>-1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.ParentFromChildTransform"><summary>Transform from the child shape space to this shape's SelectedSpaceName.</summary><remarks><PARA>Sets or gets the transform used to map from the child shape space to this composite shape's <see cref="P:Cognex.VisionPro.CogCompositeShape.SelectedSpaceName" />.</PARA><DEFAULT>The identity transform</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the transform changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_ParentFromChildTransform--><ul /></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.Shapes"><summary>Child shapes that make up this composite shape.</summary><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the shapes collection changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_Shapes--><ul /></event><remarks><PARA>The collection of child shapes that make up this composite shape.</PARA><PARA>The child shapes are specified in the parent graphic's coordinate space and must have
a <see cref="P:Cognex.VisionPro.CogCompositeShape.SelectedSpaceName" /> of <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">$</see>. You can set the children's coordinate space with <see cref="P:Cognex.VisionPro.CogCompositeShape.ParentFromChildTransform" />.</PARA><NOTE>This collection contains only the shapes that you add. It does not contain, for instance, handle shapes that appear in the <see cref="P:Cognex.VisionPro.ICogGraphicParentChild.Children" /> collection.</NOTE><DEFAULT>Empty</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogCompositeShapeDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCompositeShape.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogCompositeShape_GraphicDOFEnable--><ul /></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.GraphicDOFEnableBase"><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogCompositeShape.DragLineStyle"><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.TipText"><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.LineStyle"><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogCompositeShape.Color"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCompositeShape.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><summary>Coordinate space in which this shape is to be interpreted.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogCompositeShape.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.CogCompositeShape.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCompositeShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.CogCompositeShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogCompositeShape.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><returns><PARA>The returned rectangle.</PARA></returns><summary>Minimum enclosing rectangle of this shape.</summary><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception></member><member name="M:Cognex.VisionPro.CogCompositeShape.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><summary>Create an RLE representation of this Region.</summary><returns><PARA>The RLE representation of this region.</PARA></returns><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks></member><member name="M:Cognex.VisionPro.CogCompositeShape.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCompositeShape.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Maps the composite shape through a linear transform. This function does not map each of the children; it simply composes <paramref name="transform" /> into the composite shape's <see cref="P:Cognex.VisionPro.CogCompositeShape.ParentFromChildTransform" />.</PARA></remarks><summary>Map through a linear transform.</summary><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCompositeShape.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCompositeShape" /> that copies the specified attributes from this <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogCompositeShape" /></PARA></returns><summary>Create a new shape that copies specified parameters.</summary></member><member name="E:Cognex.VisionPro.CogCompositeShape.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogCompositeShape.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogCompositeShape.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxes"><remarks><PARA>The interface describing a coordinate axis.</PARA></remarks><summary>Class that represents a pair of coordinate axes.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.#ctor(Cognex.VisionPro.CogCoordinateAxes)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfOriginX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OriginX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfOriginY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OriginY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfXAxisLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XAxisLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfAspect"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Aspect may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfSkew"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Skew may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfXAxisLabel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XAxisLabel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfYAxisLabel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YAxisLabel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDisplayMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDisplayedScaleFactorX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayedScaleFactorX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDisplayedScaleFactorY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayedScaleFactorY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDisplayedXAxisLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayedXAxisLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDisplayedAspect"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DisplayedAspect may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfXAxisEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XAxisEndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfYAxisEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YAxisEndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Transform may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxes.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Transform"><remarks><PARA>Sets or gets a transformation object that correspond with this <see cref="T:Cognex.VisionPro.CogCoordinateAxes" />. If getting a transformation object, the transformation object returned corresponds to the current state of the coordinate axes. If setting a  transformation object, the coordinate axes change to reflect the transformation object.</PARA></remarks><summary>The CogCoordinateAxes will modify this transform to reflect its internal properties.</summary><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.YAxisEndPointAdornment"><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCoordinateAxes_YAxisEndPointAdornment--><ul /></event><summary>The end point adornment for the Y axis.</summary><remarks><PARA>The end point adornment for the y-axis.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants">Arrow</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.XAxisEndPointAdornment"><remarks><PARA>The end point adornment for the x-axis.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants">Arrow</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogCoordinateAxes_XAxisEndPointAdornment--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants" />.</para></exception><summary>The end point adornment for the X axis.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedAspect"><remarks><PARA>When <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayMode" /> is <see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Screen</see> this is the aspect ratio of the displayed length of y-axis to the <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedXAxisLength">displayed length of the x-axis</see>.</PARA><DEFAULT>1</DEFAULT></remarks><summary>When DisplayMode is cogCoordinateAxesModeScreen, this is the ratio of the displayed length of Y-axis to DisplayedXAxisLength.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedXAxisLength"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The is the length of the X axis (in screen pixels) when DisplayMode is cogCoordinateAxesModeScreen.</summary><remarks><PARA>The length of the x-axis in screen pixels when <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayMode" /> is <see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Screen</see>.</PARA><DEFAULT>20</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorY"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception><remarks><PARA>Multiplier for graphic's displayed y-axis length when <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayMode" /> is
<see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Mathematical</see> or <see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Scale</see>.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Multiplier applied to the Y axis length when the DisplayMode property is either cogCoordinateAxesModeMathematical or cogCoordinateAxesModeScale.</summary><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorX"><summary>Multiplier applied to the X axis length when the DisplayMode property is either cogCoordinateAxesModeMathematical or cogCoordinateAxesModeScale.</summary><remarks><PARA>Multiplier for graphic's <see cref="P:Cognex.VisionPro.CogCoordinateAxes.XAxisLength" /> when <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayMode" /> is
<see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Mathematical</see> or <see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Scale</see>.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DisplayMode"><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants" />.</para></exception><remarks><PARA>Controls which properties are used to draw the coordinate axes and how interactive manipulation of the coordinate axes modify those properties.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogCoordinateAxesModeConstants">Screen</see></DEFAULT></remarks><summary>Controls which properties are used to draw the CogCoordinateAxes and how those properties are modified when the user modifies the graphic interactively.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.YAxisLabel"><remarks><PARA>The text label for the y-axis.</PARA><DEFAULT>"Y"</DEFAULT></remarks><summary>The text label for the Y-axis.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.XAxisLabel"><remarks><PARA>The text label for the x-axis.</PARA><DEFAULT>"X"</DEFAULT></remarks><summary>The text label for the X-axis.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Skew"><remarks><PARA>The skew of this coordinate axis in radians.  <see cref="P:Cognex.VisionPro.CogCoordinateAxes.Skew" />=0 means a right angle between the x- and y-axis.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The skew of this coordinate axis in radian units.  Skew=0 means a right angle between the X and Y axes.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Rotation"><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The rotation of the X-axis in radian units.  Setting Rotation does not change Skew.</summary><remarks><PARA>The rotation of the x-axis in radians.  Setting <see cref="P:Cognex.VisionPro.CogCoordinateAxes.Rotation" /> does not change <see cref="P:Cognex.VisionPro.CogCoordinateAxes.Skew" />.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Aspect"><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The aspect ratio of the length of Y-axis to X-axis.</summary><remarks><PARA>The aspect ratio of the length of y-axis to x-axis.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.XAxisLength"><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception><summary>The length in the selected coordinate space of the x-axis of this shape.</summary><remarks><PARA>The length in the selected coordinate space of the x-axis of this shape.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.OriginY"><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Y-coordinate of the origin.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Y coordinate of the origin.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.OriginX"><summary>X coordinate of the origin.</summary><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>X-coordinate of the origin.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.GraphicDOFEnable"><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogCoordinateAxesDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogCoordinateAxes" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DragLineStyle"><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.SelectedLineStyle"><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.SelectedColor"><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Interactive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogCoordinateAxes.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><summary>Shortest distance from this shape to the given point.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.SetOriginLengthAspectRotationSkew(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="originX"><PARA>The x-coordinate of the origin point (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of the origin point (Po).</PARA></param><param name="xAxisLength"><PARA>The length of the x-axis.</PARA></param><param name="aspect"><PARA>The aspect ratio of the length of y-axis to x-axis.</PARA></param><param name="rotation"><PARA>The rotation angle in radians.</PARA></param><param name="skew"><PARA>The skew angle in radians.</PARA></param><remarks><PARA>Sets the geometric properties of this coordinate axis.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xAxisLength" /> is &lt;= 0 or <paramref name="aspect" /> is &lt;= 0..</para></exception><summary>Sets the geometric properties of this coordinate axis.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.GetOriginLengthAspectRotationSkew(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="originX"><PARA>The x-coordinate of the origin point (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of the origin point (Po).</PARA></param><param name="xAxisLength"><PARA>The length of the x-axis.</PARA></param><param name="aspect"><PARA>The aspect ratio of the length of y-axis to x-axis.</PARA></param><param name="rotation"><PARA>The rotation angle in radians.</PARA></param><param name="skew"><PARA>The skew angle in radians.</PARA></param><summary>Gets the geometric properties of this coordinate axis.</summary><remarks><PARA>Gets the geometric properties of this coordinate axis.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="originX"><PARA>The x-coordinate of corner point origin (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of corner point origin (Po).</PARA></param><param name="cornerXX"><PARA>The x-coordinate of corner point x (Px).</PARA></param><param name="cornerXY"><PARA>The y-coordinate of corner point x (Px).</PARA></param><param name="cornerYX"><PARA>The x-coordinate of corner point y (Py).</PARA></param><param name="cornerYY"><PARA>The y-coordinate of corner point y (Py).</PARA></param><remarks><PARA>Sets the three-point parameterization (see <see cref="T:Cognex.VisionPro.CogRectangleAffine" />) of this coordinate axis.</PARA></remarks><event cref="E:Cognex.VisionPro.CogCoordinateAxes.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Sets the 3 point parameterization (OriginX, OriginY, CornerX_X, CornerX_Y, CornerY_X and CornerY_Y) of this coordinate axis.</summary></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.GetOriginCornerXCornerY(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="originX"><PARA>The x-coordinate of corner point origin (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of corner point origin (Po).</PARA></param><param name="cornerXX"><PARA>The x-coordinate of corner point x (Px).</PARA></param><param name="cornerXY"><PARA>The y-coordinate of corner point x (Px).</PARA></param><param name="cornerYX"><PARA>The x-coordinate of corner point y (Py).</PARA></param><param name="cornerYY"><PARA>The y-coordinate of corner point y (Py).</PARA></param><summary>Gets the 3 point parameterization (OriginX, OriginY, CornerX_X, CornerX_Y, CornerY_X and CornerY_Y) of this coordinate axis.</summary><remarks><PARA>Gets the three-point parameterization (see <see cref="T:Cognex.VisionPro.CogRectangleAffine" />) of this coordinate axis.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transform used to map this <see cref="T:Cognex.VisionPro.CogCoordinateAxes" /> object.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Creates a new CogCoordinateAxes by mapping this CogCoordinateAxes through a linear transform.</summary><returns><PARA>The new coordinate axes.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCoordinateAxes" /> by mapping this coordinate axes through a linear transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogCoordinateAxes.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Create a new CogCoordinateAxes that copies specified parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogCoordinateAxes" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogCoordinateAxes" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogCoordinateAxes" />.</PARA></remarks></member><member name="E:Cognex.VisionPro.CogCoordinateAxes.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateAxes.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogCoordinateAxes.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogStatistics"><remarks><PARA>
	This interface provides functions and properties that let you 
	compute statistical measures of a set of data, where the individual 
	data values are supplied in sequence.
	</PARA><PARA>
	This interface is very similar to <see cref="T:Cognex.VisionPro.CogStatistics" />. Unlike that interface, which can only 
be used as part of a CogDataAnalysis tool, <see cref="T:Cognex.VisionPro.CogStatistics" /> is 
intended for stand-alone use.
	</PARA></remarks><summary>The object that buffers consecutive values in order to compute statistics and produce a tolerance result. It is meant to be used stand-alone and not in conjunction with the CogDataAnalysisTool.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.#ctor(Cognex.VisionPro.CogStatistics)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRunningNumSamples"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunningNumSamples may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRunningMean"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunningMean may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRunningStandardDeviation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunningStandardDeviation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRunningMinValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunningMinValue may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRunningMaxValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunningMaxValue may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfDescription"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Description may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfNominalValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NominalValue may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfWarnLowLimitEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by WarnLowLimitEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfWarnHighLimitEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by WarnHighLimitEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRejectLowLimitEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RejectLowLimitEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRejectHighLimitEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RejectHighLimitEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfWarnLowLimit"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by WarnLowLimit may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfWarnHighLimit"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by WarnHighLimit may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRejectLowLimit"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RejectLowLimit may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfRejectHighLimit"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RejectHighLimit may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfBufferLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BufferLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfNumBufferedValues"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumBufferedValues may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Name may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfCurrentValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentValue may have changed.</summary></member><member name="F:Cognex.VisionPro.CogStatistics.SfCurrentValueIsInvalid"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentValueIsInvalid may have changed.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.CurrentValueIsInvalid"><summary>Returns the flag that specifies whether or not the CurrentValue has been used by Execute. If true, the status for the channel will be set to cogDataAnalysisToleranceStatusInvalidValue.</summary><remarks><PARA>
	If <see cref="M:Cognex.VisionPro.CogDataAnalysis.Execute" /> has been called 
	since the value of <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" /> was last changed, then 
	this property is true (<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" /> is invalid).
	Invoking 
	<see cref="M:Cognex.VisionPro.CogDataAnalysis.Execute" />
	when this property is true will set the 
	<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> 
to 
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">InvalidValue</see>.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.CurrentValue"><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValueIsInvalid" /> is true and the value of this 
property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_NewValue--></ul></event><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValueIsInvalid" /> is true but the value of
this property did not change. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogDataAnalysisChannel_CurrentValueIsInvalid--><ul /></event><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValueIsInvalid" /> is already false
and the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogDataAnalysisChannel_CurrentValue--><ul /></event><remarks><PARA>
		The value that will be used by <see cref="M:Cognex.VisionPro.CogDataAnalysis.Execute" /> 
	to compute the tolerance status for this channel. 
	If the value is invalid (it has not been updated since the last call to 
	<see cref="M:Cognex.VisionPro.CogDataAnalysis.Execute" /> , the 
	<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> 
	will be set to 
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">InvalidValue</see>.
	</PARA></remarks><summary>Returns/sets the value that will be used by Execute to compute the tolerance status for this channel. If the value is invalid (it hasn't been updated since the last call to Execute), the status will be set to cogDataAnalysisToleranceStatusInvalidValue.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.Name"><remarks><PARA>
	Returns the name of the channel. This is the same as the 
	<paramref name="Key" /> value that you supplied when you created the channel
	by calling <see cref="M:Cognex.VisionPro.CogDataAnalysis.AddNew(System.String,System.Int32)" />.
	</PARA></remarks><summary>Returns the name of the channel. This is the same as the Key that was used when the channel was created via AddNew.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.NumBufferedValues"><remarks><PARA>The number of values that are currently held in the buffer. Entries that are marked with No Value (those added by
calling <see cref="M:Cognex.VisionPro.CogStatistics.AddEmptyValue" />) will be included in this count. This count will not exceed <see cref="P:Cognex.VisionPro.CogStatistics.BufferLength" />.</PARA></remarks><summary>Returns the number of values that are currently held in the buffer. Entries that are marked with No Value (by calling AddEmptyValue) will be included in this count. This count will not exceed BufferLength.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.BufferLength"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than 1.
	</para></exception><summary>Returns/sets the number of values to buffer.</summary><remarks><PARA>The number of data values to buffer within this object.</PARA></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_BufferLength--><ul /></event></member><member name="P:Cognex.VisionPro.CogStatistics.RejectHighLimit"><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this limit changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_RejectHighLimit--><ul /></event><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when this limit changes along with at least one other limit. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_Limits--></ul></event><summary>Returns/sets the tolerance limit that triggers a reject-high status, if enabled and the value exceeds it. Setting may cause the other limit values to be adjusted so that the RejectHighLimit remains the highest limit.</summary><remarks><PARA>
	If 
	<see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimitEnabled" /> is true and the 
	value you supply to <see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> exceeds this limit,
	<see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> returns	
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">RejectHigh</see>.
	</PARA><PARA>Setting may cause the other limit values to be adjusted so that 
	<see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" /> remains the highest limit.
	</PARA><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.RejectLowLimit"><summary>Returns/sets the tolerance limit that triggers a reject-low status, if enabled and the value falls below it. Setting may cause the other limit values to be adjusted so that the RejectLowLimit remains the lowest limit.</summary><remarks><PARA>
	If 
	<see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimitEnabled" /> is true and the 
	value you supply to <see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> is below this limit,
	<see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> returns	
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">RejectLow</see>.
	</PARA><PARA>Setting may cause the other limit values to be adjusted so that 
	<see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" /> remains the lowest limit.
	</PARA><DEFAULT>0.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this limit changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_RejectLowLimit--><ul /></event><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when this limit changes along with at least one other limit. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_Limits--></ul></event></member><member name="P:Cognex.VisionPro.CogStatistics.WarnHighLimit"><remarks><PARA>
	If 
	<see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimitEnabled" /> is true and the 
	value you supply to <see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> exceeds this limit,
	but does not exceed the 
	<see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" />, then
	<see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> returns	
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">WarnHigh</see>.
	</PARA><PARA>Setting may cause the other limit values to be adjusted so that 
	<see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimit" /> remains consistent with the other limit values.
	</PARA><DEFAULT>0.0</DEFAULT></remarks><summary>Returns/sets the tolerance limit that triggers a warn-high status, if enabled and the value exceeds it but does not exceed the RejectHighLimit. Setting may cause the other limit values to be adjusted so that the limit values remain consistent.</summary><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this limit changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_WarnHighLimit--><ul /></event><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when this limit changes along with at least one other limit. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_Limits--></ul></event></member><member name="P:Cognex.VisionPro.CogStatistics.WarnLowLimit"><summary>Returns/sets the tolerance limit that triggers a warn-low status, if enabled and the value falls below it but does not fall below the RejectLowLimit. Setting may cause the other limit values to be adjusted so that the limit values remain consistent.</summary><remarks><PARA>
	If 
	<see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimitEnabled" /> is true and the 
	value you supply to <see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> is less than this limit,
	but is not less than the 
	<see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" />, then
	<see cref="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)" /> returns	
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">WarnLow</see>.
	</PARA><PARA>Setting may cause the other limit values to be adjusted so that 
	<see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimit" /> remains consistent with the other limit values.
	</PARA><DEFAULT>0.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this limit changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_WarnLowLimit--><ul /></event><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when this limit changes along with at least one other limit. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_Limits--></ul></event></member><member name="P:Cognex.VisionPro.CogStatistics.RejectHighLimitEnabled"><summary>Returns/sets the use of the RejectHighLimit to generate a tolerance status.</summary><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_RejectHighLimitEnabled--><ul /></event><remarks><PARA>
	If true, values are toleranced using the <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" />.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.RejectLowLimitEnabled"><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_RejectLowLimitEnabled--><ul /></event><remarks><PARA>
	If true, values are toleranced using the <see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" />.
	</PARA></remarks><summary>Returns/sets the use of the RejectLowLimit to generate a tolerance status.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.WarnHighLimitEnabled"><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_WarnHighLimitEnabled--><ul /></event><summary>Returns/sets the use of the WarnHighLimit to generate a tolerance status.</summary><remarks><PARA>
	If true, values are toleranced using the <see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimit" />.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.WarnLowLimitEnabled"><remarks><PARA>
	If true, values are toleranced using the <see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimit" />.
	</PARA></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_WarnLowLimitEnabled--><ul /></event><summary>Returns/sets the use of the WarnLowLimit to generate a tolerance status.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.NominalValue"><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_NominalValue--><ul /></event><summary>Returns/sets the nominal or expected value of the current value. This value is not used to produce the tolerance result, but is merely provided as a reference for the expected value.</summary><remarks><PARA>The nominal or expected value of the current value. This value is not used to produce the tolerance result, but is merely provided as a reference for the expected value.</PARA><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.Description"><remarks><PARA>
	A text string that describes this object. You can specify any descriptive 
	value for this property.
	</PARA><DEFAULT>""</DEFAULT></remarks><summary>Returns/sets a description string for the object. The Description may be optionally set to store a readable description of the use of the channel.</summary><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_Description--><ul /></event></member><member name="P:Cognex.VisionPro.CogStatistics.RunningMaxValue"><summary>Returns the maximum value sampled since last reset. Calling ResetRunningStatistics() will restart this calculation.</summary><remarks><PARA>
	Returns the maximum value sampled since 
	the last call to 
	<see cref="M:Cognex.VisionPro.CogStatistics.ResetRunningStatistics" />.
	</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisNoSamplesException" cgnxHRESULT="E_CogDataAnalysis_NoSamples"><para><see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> is 0.
	</para></exception></member><member name="P:Cognex.VisionPro.CogStatistics.RunningMinValue"><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisNoSamplesException" cgnxHRESULT="E_CogDataAnalysis_NoSamples"><para><see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> is 0.
	</para></exception><remarks><PARA>
	Returns the minimum value sampled since 
	the last call to 
	<see cref="M:Cognex.VisionPro.CogStatistics.ResetRunningStatistics" />.
	</PARA></remarks><summary>Returns the minimum value sampled since last reset. Calling ResetRunningStatistics() will restart this calculation.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.RunningStandardDeviation"><summary>Returns the standard deviation value generated from sampled data since last reset.  Calling ResetRunningStatistics() will restart this calculation.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisNoSamplesException" cgnxHRESULT="E_CogDataAnalysis_NoSamples"><para><see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> is 0.
	</para></exception><remarks><PARA>
	Returns the standard deviation of the values sampled since 
	the last call to 
	<see cref="M:Cognex.VisionPro.CogStatistics.ResetRunningStatistics" />.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.RunningMean"><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisNoSamplesException" cgnxHRESULT="E_CogDataAnalysis_NoSamples"><para><see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> is 0.
	</para></exception><summary>Returns the mean (average) value generated from sampled data since last reset. Calling ResetRunningStatistics() will restart this calculation.</summary><remarks><PARA>
	Returns the mean (average) value sampled since 
	the last call to 
	<see cref="M:Cognex.VisionPro.CogStatistics.ResetRunningStatistics" />.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.RunningNumSamples"><summary>Returns the number of samples (valid values) used to compute the running statistics. Running statistics are not affected by the buffer size; they are calculated from all samples since last reset. Calling ResetRunningStatistics() will set this to zero.</summary><remarks><PARA>Returns the number of samples (valid values) used to compute the running statistics. Running statistics are not affected by the buffer size; they are calculated from all samples since last reset. Calling <see cref="M:Cognex.VisionPro.CogStatistics.ResetRunningStatistics" /> will set this to zero.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStatistics.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogStatistics.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogStatistics.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogStatistics.GetBufferedNumSamples(System.Int32,System.Int32)"><param name="startIndex"><PARA>The 0-based index of the first buffered value to consider.</PARA></param><param name="endIndex"><PARA>The 0-based index of the last buffered value to consider.</PARA></param><summary>The number of samples over the specified range of buffered values. Invalid values will not be included in the value returned. Index 0 represents the oldest value. Index NumBufferedValues-1 represents the most recent value.</summary><returns><PARA>The number of valid samples.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startIndex" /> is less than 0 or 
		<paramref name="startIndex" /> is greater than or equal to 
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="endIndex" /> is not <see cref="T:Cognex.VisionPro.constants">cogNoIndex</see> and
		<paramref name="endIndex" /> is less than 
		<paramref name="startIndex" /> or <paramref name="endIndex" /> is greater than or equal to  
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><remarks><PARA>
			The number of valid samples within the specified range of buffered values. An index of 
	0 represents the oldest value; an index of 
	<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> - 1 
	 represents the most recent value.
</PARA><NOTE>
This total does not include invalid values.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.GetBufferedMean(System.Int32,System.Int32)"><param name="startIndex"><PARA>The 0-based index of the first buffered value to consider.</PARA></param><param name="endIndex"><PARA>The 0-based index of the last buffered value to consider.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startIndex" /> is less than 0 or 
		<paramref name="startIndex" /> is greater than or equal to 
		<see cref="P:Cognex.VisionPro.CogDataAnalysis.NumBufferedValues" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="endIndex" /> is not <see cref="T:Cognex.VisionPro.constants">cogNoIndex</see> and
		<paramref name="endIndex" /> is less than 
		<paramref name="startIndex" /> or <paramref name="endIndex" /> is greater than or equal to  
		<see cref="P:Cognex.VisionPro.CogDataAnalysis.NumBufferedValues" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisAllInvalidValuesException" cgnxHRESULT="E_CogDataAnalysis_AllInvalidValues"><para>
		All of the values within the supplied range are invalid.
	</para></exception><returns><PARA>The returned mean value.</PARA></returns><summary>The mean (average) value generated over the specified range of buffered values. Index 0 represents the oldest value. Index NumBufferedValues-1 represents the most recent value.</summary><remarks><PARA>
	The mean (average) of the values within the specified range of buffered values. An index of 
	0 represents the oldest value; an index of 
	<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> - 1 
	 represents the most recent value.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.GetBufferedStandardDeviation(System.Int32,System.Int32)"><param name="startIndex"><PARA>The 0-based index of the first buffered value to consider.</PARA></param><param name="endIndex"><PARA>The 0-based index of the last buffered value to consider.</PARA></param><returns><PARA>The returned standard deviation.</PARA></returns><remarks><PARA>			The standard deviation of the specified range of buffered values. An index of 
	0 represents the oldest value; an index of 
	<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> - 1 
	 represents the most recent value.
</PARA></remarks><summary>The standard deviation value generated over the specified range of buffered values. Index 0 represents the oldest value. Index NumBufferedValues-1 represents the most recent value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startIndex" /> is less than 0 or 
		<paramref name="startIndex" /> is greater than or equal to 
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="endIndex" /> is not <see cref="T:Cognex.VisionPro.constants">cogNoIndex</see> and
		<paramref name="endIndex" /> is less than 
		<paramref name="startIndex" /> or <paramref name="endIndex" /> is greater than or equal to  
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisAllInvalidValuesException" cgnxHRESULT="E_CogDataAnalysis_AllInvalidValues"><para>
		All of the values within the supplied range are invalid.
	</para></exception></member><member name="M:Cognex.VisionPro.CogStatistics.GetBufferedMinValue(System.Int32,System.Int32)"><param name="startIndex"><PARA>The 0-based index of the first buffered value to consider.</PARA></param><param name="endIndex"><PARA>The 0-based index of the last buffered value to consider.</PARA></param><summary>The minimum value sampled over the specified range of buffered values. Index 0 represents the oldest value. Index NumBufferedValues-1 represents the most recent value.</summary><returns><PARA>The returned minimum value.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startIndex" /> is less than 0 or 
		<paramref name="startIndex" /> is greater than or equal to 
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="endIndex" /> is not <see cref="T:Cognex.VisionPro.constants">cogNoIndex</see> and
		<paramref name="endIndex" /> is less than 
		<paramref name="startIndex" /> or <paramref name="endIndex" /> is greater than or equal to  
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisAllInvalidValuesException" cgnxHRESULT="E_CogDataAnalysis_AllInvalidValues"><para>
		All of the values within the supplied range are invalid.
	</para></exception><remarks><PARA>
			The minimum value within the specified range of buffered values. An index of 
	0 represents the oldest value; an index of 
	<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> - 1 
	 represents the most recent value.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.GetBufferedMaxValue(System.Int32,System.Int32)"><param name="startIndex"><PARA>The 0-based index of the first buffered value to consider.</PARA></param><param name="endIndex"><PARA>The 0-based index of the last buffered value to consider.</PARA></param><remarks><PARA>
	The maximum value within the specified range of buffered values. An index of 
	0 represents the oldest value; an index of 
	<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> - 1 
	represents the most recent value.
	</PARA></remarks><returns><PARA>The returned maximum value.</PARA></returns><summary>The maximum value sampled over the specified range of buffered values. Index 0 represents the oldest value. Index NumBufferedValues-1 represents the most recent value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startIndex" /> is less than 0 or 
		<paramref name="startIndex" /> is greater than or equal to 
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="endIndex" /> is not <see cref="T:Cognex.VisionPro.constants">cogNoIndex</see> and
		<paramref name="endIndex" /> is less than 
		<paramref name="startIndex" /> or <paramref name="endIndex" /> is greater than or equal to  
		<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogDataAnalysisAllInvalidValuesException" cgnxHRESULT="E_CogDataAnalysis_AllInvalidValues"><para>
		All of the values within the supplied range are invalid.
	</para></exception></member><member name="M:Cognex.VisionPro.CogStatistics.GetBufferedValues(System.Double,System.Double[]@,System.Boolean[]@)"><param name="invalidDataValue"><PARA>Values in <paramref name="bufferedValues" /> that are invalid are 
	replaced with this value.</PARA></param><param name="bufferedValues"><PARA>An array containing the buffered values.</PARA></param><param name="valueIsInvalid"><PARA>An array of Boolean values. Values that correspond to valid buffered 
	values are set to true while values that correspond to invalid buffered 
	values are set to false.</PARA></param><summary>Get the values buffered. BufferedValues may include entries that were invalid. These entries will be substituted with InvalidDataValue. Returned value Index 0 represents the oldest value. Index NumBufferedValues-1 represents the most recent value.</summary><remarks><PARA>
	Gets the buffered values. The returned array of values 
	(<paramref name="bufferedValues" /> may include entries that
	were invalid. The values of those entries are replaced with the 
	<paramref name="invalidDataValue" /> that you supply. In addition,
	the returned <paramref name="valueIsInvalid" /> array of Boolean 
	values indicates which values in <paramref name="bufferedValues" /> 
	are invalid.
	</PARA><PARA>
	The array element with index 0 is the oldest buffered value while 
	the element with index 
	<see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> - 1 
	is the newest.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.SetLimits(System.Double,System.Double,System.Double,System.Double)"><param name="warnLowLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimit" />.</PARA></param><param name="warnHighLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimit" />.</PARA></param><param name="rejectLowLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" />.</PARA></param><param name="rejectHighLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" />.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rejectHighLimit" /> must be greater than or equal to 
	<paramref name="warnHighLimit" />, which must be greater than or equal to 
	<paramref name="warnLowLimit" />, which must be greater than or equal to 
	<paramref name="rejectLowLimit" />.
	</para></exception><summary>Set all of the tolerance limit values.</summary><remarks><PARA>Sets all of the tolerance limit values.</PARA></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when more than one limit changes. If a single limit changes, then an event 
naming that limit fires. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogStatistics.GetLimits(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="warnLowLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimit" />.</PARA></param><param name="warnHighLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimit" />.</PARA></param><param name="rejectLowLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" />.</PARA></param><param name="rejectHighLimit"><PARA>The <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" />.</PARA></param><summary>Get one or more of the tolerance limit values.</summary><remarks><PARA>Obtain the values of one or more of the tolerance limit values. 
	(This is a convenience function.)</PARA><NOTE>Passing in a null value is not an error; null values are ignored.</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.SetLimitEnables(System.Boolean,System.Boolean,System.Boolean,System.Boolean)"><param name="warnLowLimitEnabled"><PARA>New value for <see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimitEnabled" />.</PARA></param><param name="warnHighLimitEnabled"><PARA>New value for <see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimitEnabled" />.</PARA></param><param name="rejectLowLimitEnabled"><PARA>New value for <see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimitEnabled" />.</PARA></param><param name="rejectHighLimitEnabled"><PARA>New value for <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimitEnabled" />.</PARA></param><remarks><PARA>Set all of the tolerance limit enable flags.</PARA></remarks><summary>Set all of the tolerance limit enable flags.</summary><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when more than one limit changes. If a single limit changes, then an event 
naming that limit fires. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogStatistics.GetLimitEnables(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"><param name="warnLowLimitEnabled"><PARA>Set to true if <see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimitEnabled" /> is true.</PARA></param><param name="warnHighLimitEnabled"><PARA>Set to true if <see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimitEnabled" /> is true.</PARA></param><param name="rejectLowLimitEnabled"><PARA>Set to true if <see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimitEnabled" /> is true.</PARA></param><param name="rejectHighLimitEnabled"><PARA>Set to true if <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimitEnabled" /> is true.</PARA></param><summary>Get one or more of the tolerance limit enable flags.</summary><remarks><PARA>Obtain the values of one or more of the tolerance limit enable flags. 
	(This is a convenience function.)</PARA><NOTE>Passing in a null value is not an error; null values are ignored.</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.AddValue(System.Double)"><param name="newValue"><PARA>The value to add.</PARA></param><summary>Adds a value to the buffer and generates a tolerance status according to the specified limits.</summary><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants">tolerance status</see>.</PARA></returns><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_DataBuffer--><!--FA:cogFA_DataAnalysisChannel_Statistics--></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><remarks><PARA>Adds a value to the buffer and generates a tolerance status according to the specified limits.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.AddEmptyValue"><summary>Adds an empty entry to the buffer. The entry will be marked in the buffer as an invalid data value.  When GetBufferedValues is called these entries can be substituted by any appropriate value for display.</summary><remarks><PARA>Adds an empty entry to the buffer. The entry will be marked in the buffer as an invalid data value.  
</PARA><PARA>
When you call <see cref="M:Cognex.VisionPro.CogStatistics.GetBufferedValues(System.Double,System.Double[]@,System.Boolean[]@)" />, you can select a 
different value for these empty values for display.
</PARA></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_DataBuffer--></ul></event></member><member name="M:Cognex.VisionPro.CogStatistics.ResetRunningStatistics"><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_Statistics--></ul></event><summary>Resets the running statistics. Sets RunningNumSamples to zero.</summary><remarks><PARA>Resets the running statistics. Sets 
	<see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> to zero.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStatistics.ResetBufferedValues"><summary>Clears the buffered values. Sets NumBufferedValues to zero.</summary><remarks><PARA>Clears the buffered values. Sets <see cref="P:Cognex.VisionPro.CogStatistics.NumBufferedValues" /> to zero.</PARA></remarks><event cref="E:Cognex.VisionPro.CogStatistics.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogStatistics_NumBufferedValues--><ul /></event></member><member name="E:Cognex.VisionPro.CogStatistics.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis"><remarks><PARA>Primary interface for CogDataAnalysis objects.  Each CogDataAnalysis object holds a collection of <see cref="T:Cognex.VisionPro.CogStatistics" />s.  Tolerance results are generated across the set of channels via the <see cref="M:Cognex.VisionPro.CogDataAnalysis.Execute" /> method.</PARA></remarks><summary>The object that performs tolerancing, statistical analysis, and buffering of data values over a set of data analysis channels.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.#ctor(Cognex.VisionPro.CogDataAnalysis)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysis.SfChannelBufferLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ChannelBufferLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysis.SfNumBufferedValues"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumBufferedValues may have changed.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysis.SfRejectOnInvalidData"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RejectOnInvalidData may have changed.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysis.SfIndividualResultsEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IndividualResultsEnabled may have changed.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.IndividualResultsEnabled"><remarks><PARA>
	If true, then an <see cref="T:Cognex.VisionPro.CogDataAnalysisResult" /> item is generated for each channel
as part of the results collection. If false, only the aggregate value (Pass, Warn, or Fail) is stored. 
	</PARA></remarks><summary>Returns/sets the flag that controls whether individual result objects are added to the Results collection by Execute. If set to false, the Results collection will only hold the aggregate results.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.RejectOnInvalidData"><summary>Returns/sets a flag that causes any invalid data values to produce a reject AggregateToleranceStatus if set to true.  If set to false, this designates that those channels will not be used to compute the aggregate tolerance status.</summary><remarks><PARA>
		If true, then if any channels have not been updated with new data 
	since the tool's last run, the tool will produce a Reject value for
	the 
	<see cref="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateToleranceStatus" />. If false, 
	then channels with invalid data will not be used to compute the aggregate
	tolerance status.
	</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogDataAnalysis.Changed" cgnxEvent="singleState"><para>
		
Fires when this function is called. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogDataAnalysis_RejectOnInvalidData--><ul /></event></member><member name="P:Cognex.VisionPro.CogDataAnalysis.NumBufferedValues"><summary>Returns the number of values stored in the buffer for each ICogDataAnalysisChannel item. This includes any invalid values that may have been buffered. NumBufferedValues will always be less than or equal to the ChannelBufferLength.</summary><remarks><PARA>Returns the number of values stored in the buffer for each <see cref="T:Cognex.VisionPro.CogStatistics" /> item. This includes any invalid values that 
may have been buffered. <see cref="P:Cognex.VisionPro.CogDataAnalysis.NumBufferedValues" /> will always be less than or
equal to <see cref="P:Cognex.VisionPro.CogDataAnalysis.ChannelBufferLength" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysis.ChannelBufferLength"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 1.</para></exception><remarks><PARA>
	The number of values to buffer for each data analysis channel.  
	The <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />
	 of each object will be buffered for each call to 
	 <see cref="M:Cognex.VisionPro.CogDataAnalysisTool.Run" /> or 
	 <see cref="M:Cognex.VisionPro.CogDataAnalysis.Execute" />.
	</PARA><PARA>
	Defining a buffer length lets you compute statistics for a specific number of
	samples (the buffer length) and for all of the samples. 
	</PARA><DEFAULT>10</DEFAULT></remarks><summary>Returns/sets the number of values to buffer for each ICogDataAnalysisChannel item. The CurrentValue of each object will be buffered for each call to Run or Execute.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.Item(System.String)"><param name="key">n/a</param><summary>Gets or sets the item with the specified index or key.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.Item(System.Int32)"><param name="index">n/a</param><summary>Gets or sets the item with the specified index or key.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysis.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.Remove(System.String)"><param name="key">The key of the item to remove.</param><summary>Removes the item with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.IndexOf(Cognex.VisionPro.CogStatistics)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.IndexOfKey(System.String)"><param name="key">The key whose index is desired.</param><summary>Gets the index of the item with the specified key.  If the key cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.GetKey(System.Int32)"><param name="index">The index of the item whose key is desired.</param><summary>Gets the key of the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.SetKey(System.Int32,System.String)"><param name="index">The index of the item whose key will be set.</param><param name="key">The key to set.</param><summary>Sets the key of the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysis.AddNew(System.String,System.Int32)"><param name="key"><PARA>The channel key. You can use this value to refer to the channel.</PARA></param><param name="index"><PARA>The 0-based index at which to add the new channel.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogCollectionInvalidIndexException" cgnxHRESULT="E_CogCollection_InvalidIndex"><para><paramref name="index" /> is less than 0 or greater than <see cref="P:Cognex.VisionPro.CogDataAnalysis.Count" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCollectionDuplicateKeyException" cgnxHRESULT="E_CogCollection_DuplicateKey"><para><paramref name="key" /> already exists.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogCollectionDuplicateItemException" cgnxHRESULT="E_CogCollection_DuplicateItem"><para>
	The item already exists.
	</para></exception><summary>Creates a new channel that may be used to set tolerance limits, compute statistics, and buffer data values. If NumBufferedValues is greater than zero, the channel will be initialized with that number of invalid values.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogCollectionEvents" FUNC="ItemAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when this function is called. 
</EVENT><returns><PARA>The newly added <see cref="T:Cognex.VisionPro.CogStatistics" />.</PARA></returns><remarks><PARA>Creates a new channel that may be used to set tolerance limits, compute statistics, and buffer data values. If 
<see cref="P:Cognex.VisionPro.CogDataAnalysis.NumBufferedValues" /> is greater than zero, the channel will be initialized with that number of invalid values.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogDataAnalysis.GetAggregateToleranceStatuses"><summary>Gets the history of aggregate tolerance statuses produced. Each status reflects the results of the corresponding historical call to execute. Index 0 represents the oldest status. Index NumBufferedValues-1 represents the most recent status.</summary><remarks><PARA>
	Returns an array containing the 
	aggregate tolerance status (Pass, Warn, or Reject) for each of the buffered 
	values in this channel. The first element of this array represents the oldest 
	datum in this channel while an index of <see cref="P:Cognex.VisionPro.CogDataAnalysis.NumBufferedValues" /> - 1 
	represents the newest.
	</PARA></remarks><returns><PARA>The returned aggregate statuses.</PARA></returns></member><member name="M:Cognex.VisionPro.CogDataAnalysis.ResetRunningStatistics"><summary>Resets the running statistics for all of the associated channel items. Each channel's RunningNumSamples will be zero after invoking this method.</summary><remarks><PARA>Resets the running statistics for all of the associated channel items. Each channel's 
<see cref="P:Cognex.VisionPro.CogStatistics.RunningNumSamples" /> will be zero after invoking this method.</PARA></remarks><event cref="E:Cognex.VisionPro.CogDataAnalysis.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_Statistics--></ul></event></member><member name="M:Cognex.VisionPro.CogDataAnalysis.ResetBufferedValues"><summary>Clears the buffered values for all of the associated channel items. Each channel will have no buffered values after invoking this method.</summary><event cref="E:Cognex.VisionPro.CogDataAnalysis.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_DataBuffer--></ul></event><remarks><PARA>Clears the buffered values for all of the associated channel items. Each channel will have no buffered values after invoking this method.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogDataAnalysis.Execute"><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><remarks><PARA>Generate data analysis results by taking the 
	<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" /> from each 
	channel, buffering it, and comparing it to the specified limits.</PARA><PARA>
	Calling this function sets 
	<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValueIsInvalid" /> to true.
	</PARA></remarks><summary>Generate data analysis results by taking each CurrentValue, buffering it, and comparing it to the specified limits.</summary><returns><PARA>An <see cref="T:Cognex.VisionPro.CogDataAnalysisResults" /> containing the results.</PARA></returns><event cref="E:Cognex.VisionPro.CogDataAnalysis.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_DataAnalysisChannel_DataBuffer--><!--FA:cogFA_DataAnalysisChannel_Statistics--></ul></event></member><member name="E:Cognex.VisionPro.CogDataAnalysis.KeyChanged"><summary>Occurs after an item's key is changed.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.KeyChanging"><summary>Occurs before an item's key is changed.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.CogDataAnalysis.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysisResult"><remarks><PARA>Primary interface for <see cref="T:Cognex.VisionPro.CogDataAnalysisResult" /> objects.  Each result reflects the status of a individual value compared to its associated limits.</PARA></remarks><summary>The object that holds a single tolerance result.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResult.#ctor(Cognex.VisionPro.CogDataAnalysisResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.RejectHigh"><summary>Returns TRUE if the ToleranceStatus rejected high.</summary><remarks><PARA>
True if the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">RejectHigh</see>, false otherwise.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.RejectLow"><summary>Returns TRUE if the ToleranceStatus rejected low.</summary><remarks><PARA>
True if the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">RejectLow</see>, false otherwise.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.WarnHigh"><remarks><PARA>
True if the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">WarnHigh</see>, false otherwise.
</PARA></remarks><summary>Returns TRUE if the ToleranceStatus warned high.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.WarnLow"><remarks><PARA>
True if the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">WarnLow</see>, false otherwise.
</PARA></remarks><summary>Returns TRUE if the ToleranceStatus warned low.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.Pass"><summary>Returns TRUE if the ToleranceStatus passed.</summary><remarks><PARA>
True if the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">Pass</see>, false otherwise.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.CurrentValueIsInvalid"><summary>Returns TRUE if the ToleranceStatus was cogDataAnalysisToleranceStatusInvalidValue.</summary><remarks><PARA>
True if the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">InvalidValue</see>, false otherwise.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.CurrentValue"><remarks><PARA>
		Returns the 
	<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />
	 used to generate the 
	<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus" /> if it is not invalid.
	</PARA></remarks><summary>Returns the CurrentValue used to generate the ToleranceStatus if it is not invalid.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResult.ToleranceStatus"><remarks><PARA>
The result of applying this 
<see cref="T:Cognex.VisionPro.CogStatistics" /> limits to the 
supplied <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />.
If this property is <see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">InvalidValue</see>, then the 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResult.CurrentValue" /> was invalid before this result was 
generated.
</PARA></remarks><summary>Returns the result of the individual limits applied to the CurrentValue if value was not invalid.  If the status is cogDataAnalysisToleranceStatusInvalidValue, this implies the CurrentValue was invalid prior to the generation of this result.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysisResults"><remarks><PARA>
	This interface provides access to the individual 
	<see cref="T:Cognex.VisionPro.CogDataAnalysisResult" /> for each 
	<see cref="T:Cognex.VisionPro.CogStatistics" /> defined for this 
	<see cref="T:Cognex.VisionPro.CogDataAnalysis" /> object as well as an aggregate
	tolerance status for the object as a whole.
</PARA></remarks><summary>The object that provides access to the aggregate tolerance status as well as the individual tolerance results.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.#ctor(Cognex.VisionPro.CogDataAnalysisResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.NumInvalidValues"><remarks><PARA>Returns the number of individual invalid value tolerance results where the result is <see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">InvalidValue</see>.</PARA></remarks><summary>Returns the number of individual invalid value tolerance results where the result is cogDataAnalysisToleranceStatusInvalidValue.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.NumRejectValues"><summary>Returns the number of individual reject-level tolerance results.</summary><remarks><PARA>Returns the number of individual reject-level tolerance results.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.NumWarnValues"><remarks><PARA>Returns the number of individual warn-level tolerance results.</PARA></remarks><summary>Returns the number of individual warn-level tolerance results.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.NumPassValues"><remarks><PARA>Returns the number of individual passing tolerance results.</PARA></remarks><summary>Returns the number of individual passing tolerance results.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateReject"><summary>Returns TRUE if the AggregateToleranceStatus rejected.</summary><remarks><PARA>
True if 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants">Reject</see>, false otherwise.
When this property is true, one or more of the  
<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />s are outside the
reject tolerances specified in their <see cref="T:Cognex.VisionPro.CogStatistics" />s (or one ore more
values are invalid and <see cref="P:Cognex.VisionPro.CogDataAnalysis.RejectOnInvalidData" /> is set 
to true).
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateWarn"><remarks><PARA>
True if 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants">Warn</see>, false otherwise.
When this property is true, one or more of the  
<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />s are outside the
warning tolerances specified in their <see cref="T:Cognex.VisionPro.CogStatistics" />s 
but none of them are outside of the reject tolerances.
</PARA></remarks><summary>Returns TRUE if the AggregateToleranceStatus warned.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.AggregatePass"><summary>Returns TRUE if the AggregateToleranceStatus passed.</summary><remarks><PARA>
True if 
<see cref="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateToleranceStatus" /> is
<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">Pass</see>, false otherwise.
When this property is true, if all of the 
<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />s are within the
tolerances specified in their <see cref="T:Cognex.VisionPro.CogStatistics" />s.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.AggregateToleranceStatus"><remarks><PARA>
	The tolerance status 
	computed by aggregating the individual statuses of all the 
	<see cref="T:Cognex.VisionPro.CogStatistics" />s defined for this 
	<see cref="T:Cognex.VisionPro.CogDataAnalysis" /> object.
	</PARA><PARA>
	If this value is
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">Pass</see>, then 
	all the values are within tolerance limits; 
	if this value is
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">Warn</see>, then 
	one or more values are outside of their warning limits but no values are outside of the reject limit; and
	if this value is
	<see cref="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants">Reject</see>, then 
	one or more values are outside of their reject limits or one or more
	values are invalid and 
	<see cref="P:Cognex.VisionPro.CogDataAnalysis.RejectOnInvalidData" /> is set to true.
	 
	</PARA></remarks><summary>Returns the result of the specified tolerance limits applied across all ICogDataAnalysisChannel items.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.Item(System.String)"><param name="key">n/a</param><summary>Gets or sets the item with the specified index or key.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.Item(System.Int32)"><param name="index">n/a</param><summary>Gets or sets the item with the specified index or key.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisResults.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.IndexOf(Cognex.VisionPro.CogDataAnalysisResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.IndexOfKey(System.String)"><param name="key">The key whose index is desired.</param><summary>Gets the index of the item with the specified key.  If the key cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisResults.GetKey(System.Int32)"><param name="index">The index of the item whose key is desired.</param><summary>Gets the key of the item at the specified index.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysisTool"><summary>The CogDataAnalysisTool encapsulates all of the objects required to perform tolerancing, statistical analysis, and buffering of data over a set of data analysis channels.</summary><remarks><PARA>Primary interface of the CogDataAnalysisTool.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogDataAnalysisTool.#ctor(Cognex.VisionPro.CogDataAnalysisTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysisTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysisTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisTool.Results"><summary>Results from the last invocation of Run.</summary><remarks><PARA>Results from the last invocation of Run.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogDataAnalysisTool.RunParams"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogDataAnalysisTool_RunParams--><ul /></event><remarks><PARA>The run parameters for this Data Analysis tool.</PARA></remarks><summary>The parameters used to run the data analysis.  Holds a collection of channel items that will be used to produce individual tolerance results and an aggregate result status.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.CogDataAnalysisTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.CogDataAnalysisTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--></ul></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
		Fires on an unsuccessful run where no events are generated.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogTool_RunStatus--><ul /></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>
	Computes individual <see cref="T:Cognex.VisionPro.CogDataAnalysisResult" />s for each 
	defined channel as well as the aggregate
	<see cref="T:Cognex.VisionPro.CogDataAnalysisResults" />.
	</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.CogDataAnalysisTool.RunParams" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception></member><member name="M:Cognex.VisionPro.CogDataAnalysisTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.CogEllipse"><summary>Class that represents an ellipse.</summary><remarks><PARA>Interface that describes an ellipse shape. You specify an ellipse with a center point, a <see cref="P:Cognex.VisionPro.CogEllipse.Rotation">rotation</see>  from the shape's x-axis that establishes the ellipse's x- and y-axes, a <see cref="P:Cognex.VisionPro.CogEllipse.RadiusX">radius along the x-axis</see>,
and a <see cref="P:Cognex.VisionPro.CogEllipse.RadiusY">radius along the y-axis</see>.
</PARA><PARA>The following picture shows the parts of the ellipse and the interactive handles available when <see cref="P:Cognex.VisionPro.CogEllipse.GraphicDOFEnable" /> is set to <see cref="T:Cognex.VisionPro.CogEllipseDOFConstants">All</see>.</PARA><PARA><PICTURE SRC="ellipse.gif" WIDTH="398" HEIGHT="201" apiSRC="ICogEllipse_ellipse.gif" /></PARA><TABLE><ROW><TH><tab-head>Interactive Handle</tab-head></TH><TH><tab-head>Description</tab-head></TH></ROW><ROW><CELL><PARA>Radii</PARA></CELL><CELL><PARA>Let you change the x- and y-radii.</PARA></CELL></ROW><ROW><CELL><PARA>Rotation</PARA></CELL><CELL><PARA>Lets you change the rotation of the ellipse which is used to establish the shape's x- and y-axes.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogEllipse.#ctor(Cognex.VisionPro.CogEllipse)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfRadiusX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfRadiusY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfXDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfYDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipse.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.YDirectionAdornment"><summary>The Y direction adornment of this ellipse.</summary><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipse_YDirectionAdornment--><ul /></event><remarks><PARA>The y-direction adornment of this ellipse.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipse.XDirectionAdornment"><remarks><PARA>The x-direction adornment of this ellipse.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipse_XDirectionAdornment--><ul /></event><summary>The X direction adornment of this ellipse.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.Perimeter"><summary>Perimeter length of this ellipse.</summary><remarks><PARA>Returns the perimeter of this <see cref="T:Cognex.VisionPro.CogEllipse" /> in units specified by the <see cref="P:Cognex.VisionPro.CogEllipse.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.Area"><summary>Area of this ellipse.</summary><remarks><PARA>Returns the area of this <see cref="T:Cognex.VisionPro.CogEllipse" /> in units specified by the <see cref="P:Cognex.VisionPro.CogEllipse.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.Rotation"><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the rotation angle, in radians, of this ellipse. The angle is measured from the x-axis of the <see cref="P:Cognex.VisionPro.CogEllipse.SelectedSpaceName">selected coordinate space</see> to the rotated x-axis of the ellipse. To find the rotation from the x-axis of the selected space name to the y-axis of the ellipse, add π/2 to this property.</PARA><PARA>Rotation values are normalized to be between −π and +π.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Returns/sets the rotation angle (in radians) from the x-axis of the selected coordinate space to the rotated x-axis of the ellipse.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.RadiusY"><summary>Returns/sets the distance from the center of the ellipse to its boundary (measured along the rotated y-axis).</summary><remarks><PARA>Sets or gets the distance from the center of this ellipse to its boundary along the y-axis. The y-axis may be <see cref="P:Cognex.VisionPro.CogEllipse.Rotation">rotated</see>.</PARA><DEFAULT>50</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new radius is &lt;=0.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipse.RadiusX"><summary>Returns/sets the distance from the center of the ellipse to its boundary (measured along the rotated x-axis).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new radius is &lt;=0.</para></exception><remarks><PARA>Sets or gets the distance from the center of this ellipse to its boundary along the x-axis. The x-axis may be <see cref="P:Cognex.VisionPro.CogEllipse.Rotation">rotated</see>.</PARA><DEFAULT>50</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogEllipse.CenterY"><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the y-coordinate of the center of this ellipse.</PARA><DEFAULT>70</DEFAULT></remarks><summary>Returns/sets the y coordinate of the ellipse center.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.CenterX"><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the x coordinate of the ellipse center.</summary><remarks><PARA>Sets or gets the x-coordinate of the center of this ellipse.</PARA><DEFAULT>70</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogEllipseDOFConstants">interactive degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.GraphicDOFEnableBase"><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipse.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.DragLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipse.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipse.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.Selected"><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipse.TipText"><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipse.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipse.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipse.LineStyle"><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipse.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipse.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogEllipse.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogEllipse.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Maps this shape through the given transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipse.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogEllipse.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipse.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks><returns><PARA>The RLE representation of this region.</PARA></returns><summary>Create an RLE representation of this Region.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogEllipse" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></param><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><returns><PARA>The returned shape model.</PARA></returns><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipse.GetBoundingRectangleAffine(System.Boolean)"><param name="deSkew"><PARA>Set to True to return a rectangle with no skew. Set to False to return a rectangle that may contain skew.</PARA></param><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></returns><summary>Extracts an affine rectangle which bounds this ellipse.  If DeSkew is TRUE, the rectangle will have zero skew and will be aligned with the principal axes of the ellipse.  If DeSkew is false, the rectangle may contain skew.</summary><remarks><PARA>Returns an <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> that bounds this ellipse.  If <paramref name="deSkew" /> is True, the rectangle will have zero skew and will be aligned with the principal axes of the ellipse.  If <paramref name="deSkew" /> is False, the rectangle may contain skew.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipse.SetFromBoundingRectangleAffine(Cognex.VisionPro.CogRectangleAffine)"><param name="newBoundingRect"><PARA>The bounding <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></param><remarks><PARA>Sets the properties of this ellipse from the given bounding <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Sets the properties of this ellipse from the given bounding affine rectangle.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.GetCenterXYRadiusXYRotation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center of this ellipse.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of this ellipse.</PARA></param><param name="radiusX"><PARA>The x-radius of this ellipse.</PARA></param><param name="radiusY"><PARA>The x-radius of this ellipse.</PARA></param><param name="rotation"><PARA>The rotation angle of this ellipse.</PARA></param><remarks><PARA>Returns the x- and y-coordinates of the center, the x- and y-radii, and the rotation of this ellipse.</PARA></remarks><summary>Gets the named properties in a single method call.</summary></member><member name="M:Cognex.VisionPro.CogEllipse.SetCenterXYRadiusXYRotation(System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the ellipse.</PARA></param><param name="centerY"><PARA>The y-coordinate of the ellipse</PARA></param><param name="radiusX"><PARA>The x-radius of this ellipse</PARA></param><param name="radiusY"><PARA>The y-radius of this ellipse</PARA></param><param name="rotation"><PARA>The rotation angle of this ellipse.</PARA></param><remarks><PARA>Sets the x- and y-coordinates of the center, the x- and y-radii, and the rotation of this ellipse.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radiusX" /> is &lt;= 0 or <paramref name="radiusY" /> is &lt;= 0.</para></exception><summary>Sets the named properties in a single method call.</summary><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="M:Cognex.VisionPro.CogEllipse.GetUnitCircleTransform"><summary>Get a linear transform that maps the unit circle to this ellipse.  The unit circle is a circle centered at (0,0) with a radius of one.</summary><remarks><PARA>Gets a linear transform that maps the unit circle to this ellipse.
The unit circle is a circle centered at (0,0) with a radius of one.</PARA><PARA>The unit circle space is a child space of this shape.</PARA><PARA>You can map positions in child space to the parent space using the returned  transform. You can map from parent space to child space using the inverse transform.</PARA></remarks><returns><PARA>The transform that maps the unit circle arc to this ellipse.</PARA></returns></member><member name="M:Cognex.VisionPro.CogEllipse.SetFromUnitCircleTransform(Cognex.VisionPro.CogTransform2DLinear)"><param name="ellipseFromUnitCircle"><PARA>The transform that maps the unit circle arc to this ellipse.</PARA></param><summary>Set the geometry of this ellipse from the given linear transform that maps the unit circle to an ellipse.  The unit circle is a circle centered at (0,0) with a radius of one.</summary><remarks><PARA>Sets the geometry of this ellipse from the given linear transform that maps the unit circle to an ellipse.
The unit circle is a circle centered at (0,0) with a radius of one.</PARA><PARA>The unit circle space is a child space of this shape.</PARA><PARA>You can map positions in child space to the parent space using the <paramref name="ellipseFromUnitCircle" /> transform. You can map from parent space to child space using the inverse transform.</PARA></remarks><event cref="E:Cognex.VisionPro.CogEllipse.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipseFromUnitCircle" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogEllipse.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Create a new ellipse that is the result of mapping this ellipse using a linear transformation.</PARA></remarks><summary>Create a new ellipse by mapping this one through the given linear transform.</summary><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogEllipse.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipse" /> that copies the specified parameters from this <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogEllipse" /> object.</PARA></returns><summary>Create a new shape that copies specified parameters.</summary></member><member name="E:Cognex.VisionPro.CogEllipse.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogEllipse.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogEllipse.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSection"><remarks><PARA>An elliptical annulus section is a four-sided shape bounded by two elliptical arcs and two straight lines.  The arcs are scaled copies of each other, and the radial lines connect the endpoints of the arcs. 
You specify the (<see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterX" />,<see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterY" />), <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusX" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusY" />,  <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" /> which define the start arc and then provide a <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> that defines the end arc. If the <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> is less than 1, the start arc is the outer arc.</PARA><PARA>The following picture shows the parts of the elliptical annulus section and the interactive handles available when <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.GraphicDOFEnable" /> is set to <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants">All</see>.
The handle names are in <ITALIC>italics</ITALIC>.
</PARA><PARA><PICTURE SRC="ellipseann.gif" WIDTH="536" HEIGHT="262" apiSRC="ICogEllipticalAnnulusSection_ellipseann.gif" /></PARA><TABLE><ROW><TH><tab-head>Interactive Handle</tab-head></TH><TH><tab-head>Description</tab-head></TH></ROW><ROW><CELL><PARA>Section span</PARA></CELL><CELL><PARA>Lets you change the length of the arc along the underlying ellipse. The center, radii, and rotation do not change.</PARA></CELL></ROW><ROW><CELL><PARA>Endpoint</PARA></CELL><CELL><PARA>Lets you change location of either endpoint. Changing an endpoint can cause changes to all of the other elliptical annulus section parameters except the other endpoint.</PARA></CELL></ROW><ROW><CELL><PARA>Radii</PARA></CELL><CELL><PARA>Lets you change the radii of either the inner or outer arc. Changing the radii also changes the <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> but not the center, rotation, start angle, or span. If you move the outer arc inside the inner arc or vice versa, the radial direction changes.</PARA></CELL></ROW><ROW><CELL><PARA>Bend</PARA></CELL><CELL><PARA>Lets you  change the curvature of the elliptical annulus section. Changing the curvature can change all of the other elliptical annulus section parameters except the endpoints.</PARA></CELL></ROW><ROW><CELL><PARA>Constrained span</PARA></CELL><CELL><PARA>Lets you change the curvature of the elliptical annulus section by holding the endpoints and the Bend handle constant. As this handle rotates around the Bend handle, the underlying ellipse changes so that the annulus section spans a fraction of the ellipse.</PARA><PARA>When this handle is 0° relative to the Bend handle (directly to the right in the default coordinate system) the underlying ellipse grows quite large and flat so that the annulus section spans about 10% of the ellipse. When the handle is 180° from the Bend handle (directly to its left in the default coordinate system), the underlying ellipse becomes smaller so that the annulus section spans 50% of the ellipse.</PARA></CELL></ROW></TABLE></remarks><summary>An elliptical annulus section is a four-sided shape bounded by two elliptical arcs and two straight lines.  The arcs are scaled copies of each other.  You specify the 'start' arc and then provide a RadialScale that defines the 'end' arc.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.#ctor(Cognex.VisionPro.CogEllipticalAnnulusSection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfRadiusX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfRadiusY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfAngleStart"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleStart may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfAngleSpan"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleSpan may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfRadialScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadialScale may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfArcDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ArcDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfRadialDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadialDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfCenterArcAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterArcAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfManipArcFraction"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ManipArcFraction may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSection.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.ManipArcFraction"><summary>Returns/sets the fractional distance (between the start and end arcs) where the manipulation arc is drawn.  During interactive manipulation, the shape usually resets this fraction to 0.5 but users may reset it sooner if they desire.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterArcAdornment"><summary>Returns/sets the center arc adornment of this elliptical annulus section.</summary><remarks><PARA>Sets or gets the center arc adornment of this elliptical annulus section. This property specifies whether and how the center arc is drawn.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionCenterArcAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipticalAnnulusSection_CenterArcAdornment--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionCenterArcAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialDirectionAdornment"><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipticalAnnulusSection_RadialDirectionAdornment--><ul /></event><remarks><PARA>Sets or gets the <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale">radial direction</see> adornment of this elliptical annulus section.  This adornment indicates the direction from the start arc to the end arc.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants" />.</para></exception><summary>Returns/sets the radial direction adornment of this elliptical annulus section.  These adornments indicate the direction from the start arc to the end arc.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.ArcDirectionAdornment"><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipticalAnnulusSection_ArcDirectionAdornment--><ul /></event><remarks><PARA>Sets or gets the arc direction adornment of this elliptical annulus section.  The adornment indicates the direction from the start points of the arcs to the end points.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants">None</see></DEFAULT></remarks><summary>Returns/sets the arc direction adornment of this elliptical annulus section.  These adornments indicate the direction from the start point of the arc to the end point.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Perimeter"><summary>Returns the total perimeter length of this elliptical annulus section.</summary><remarks><PARA>Returns the total perimeter length of this elliptical annulus section.
As <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" /> becomes greater than 2π, the length continues to increase. This value is always positive.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Area"><remarks><PARA>Returns the area enclosed by this elliptical annulus section.</PARA><PARA>If <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" /> is greater than 2π, the area is the same as if were only 2π. This value is always positive.</PARA></remarks><summary>Returns the area enclosed by this elliptical annulus section.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale"><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the radial scaling factor.  The elliptical annulus section contains a 'start' arc, and an 'end' arc that is a scaled copy of it.  If RadialScale is greater than 1 the end arc will be larger than the start arc, otherwise it will be smaller.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0 or <paramref name="Value" /> = 1.0</para></exception><remarks><PARA>Sets of gets the radial scale of this annulus section.</PARA><PARA>The radial scale determines the relative sizes of the two arcs that make up the annulus section. The two arcs are scaled copies of each other. The start arc is specified by setting the <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" /> properties. The end arc is specified by applying a radial scale to the start arc.</PARA><PARA><see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> determines which arc is the inner arc and which arc   is the outer arc. It also implies a radial direction as shown in the following table.</PARA><TABLE><CAPTION><tab-capt>Effect of RadialScale values</tab-capt></CAPTION><ROW><TH><tab-head /></TH><TH><tab-head><see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> &lt; 1</tab-head></TH><TH><tab-head><see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> &gt; 1</tab-head></TH></ROW><ROW><CELL><BOLD>Start Arc</BOLD></CELL><CELL>Outer</CELL><CELL>Inner</CELL></ROW><ROW><CELL><BOLD>End  Arc</BOLD></CELL><CELL>Inner</CELL><CELL>Outer</CELL></ROW><ROW><CELL><BOLD>Radial Direction</BOLD></CELL><CELL>Toward the center</CELL><CELL>Away from the center</CELL></ROW></TABLE><PARA><see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> cannot be exactly 1.0, nor can it be less than or equal to zero.</PARA><DEFAULT>0.5</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is zero.</para></exception><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the angular extent (in radians) and direction of the annulus section.  For example, a value of Pi specifies a section that is one half of the full annulus.  A value of -Pi specifies the other half.</summary><remarks><PARA>Sets or gets the angle span of the start arc of this elliptical annulus section in radians.
The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc.</PARA><PARA>If the absolute value of the  angle span is greater than 2π,
the arc wraps around on itself. It is not normalized to the range −2π to 2π</PARA><PARA>For example, an <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" /> of +π is an arc that describes half of a full ellipse, and a span of −π describes the other half in the opposite direction.</PARA><PARA>To simply reverse the direction of an arc, you can use the following:</PARA><CODE>
AngleStart = AngleStart + AngleSpan
AngleSpan = −AngleSpan
</CODE><DEFAULT>π/2</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart"><remarks><PARA>Sets or gets the start angle of the annulus section.  The angle is measured in radians from the x-axis of the underlying ellipse.</PARA><PARA><see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> is normalized to a value between +π and −π.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the angle (in radians) that specifies the start end of the annulus section.  It is measured from the x-axis of the underlying ellipse.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation"><remarks><PARA>Sets or gets the rotation angle, in radians, of the underlying ellipse. The angle is measured from the x-axis of the <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.SelectedSpaceName">selected coordinate space</see> to the rotated x-axis of the ellipse. To find the rotation from the x-axis of the selected space name to the y-axis of the ellipse, add π/2 to this property.</PARA><PARA>Rotation values are normalized to be between −π and +π.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the rotation angle (in radians) from the x-axis of the selected coordinate space to the x-axis of the ellipse.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusY"><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception><summary>Returns/sets the distance from the center of the start ellipse to its boundary (along the ellipse's y-axis).  Note that the start ellipse will be the inner ellipse if RadialScale is greater than one, otherwise it will be the outer one.</summary><remarks><PARA>Sets or gets the distance from the center of the underlying start ellipse to its boundary along the ellipse's y-axis. If <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> is  greater than 1, the start ellipse is the inner ellipse, otherwise it is the outer ellipse.</PARA><PARA>The y-axis may be <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation">rotated</see>.</PARA><DEFAULT>50</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusX"><summary>Returns/sets the distance from the center of the start ellipse to its boundary (along the ellipse's x-axis).  Note that the start ellipse will be the inner ellipse if RadialScale is greater than one, otherwise it will be the outer one.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception><remarks><PARA>Sets or gets the distance from the center of the underlying start ellipse to its boundary along the ellipse's x-axis. If <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> is  greater than 1, the start ellipse is the inner ellipse, otherwise it is the outer ellipse.</PARA><PARA>The x-axis may be <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation">rotated</see>.</PARA><DEFAULT>50</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterY"><remarks><PARA>Sets or gets the y-coordinate of the center of the underlying ellipse.</PARA><DEFAULT>70</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the y coordinate of the ellipse center.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterX"><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the x-coordinate of the center of the underlying ellipse.</PARA><DEFAULT>70</DEFAULT></remarks><summary>Returns/sets the x coordinate of the ellipse center.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.GraphicDOFEnable"><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.DragLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.DragColor"><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.SelectedColor"><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.TipText"><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Line width (in screen pixels) of this graphic.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalAnnulusSection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><returns><PARA>The returned rectangle.</PARA></returns><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><summary>Create an RLE representation of this Region.</summary><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks><returns><PARA>The RLE representation of this region.</PARA></returns></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.GetCenterRadiusXYRotationAngleStartAngleSpanRadialScale(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center of the underlying ellipse.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the underlying ellipse.</PARA></param><param name="radiusX"><PARA>The distance from the center of the underlying start ellipse to its boundary along the its x-axis</PARA></param><param name="radiusY"><PARA>The distance from the center of the underlying start ellipse to its boundary along the its y-axis</PARA></param><param name="rotation"><PARA>The rotation angle of the underlying ellipse.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" />.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" />.</PARA></param><param name="radialScale"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> of the elliptical annular section.</PARA></param><summary>Gets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, AngleSpan, and RadialScale of this elliptical annulus section.</summary><remarks><PARA>Gets <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterX" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterY" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusX" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusY" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" />, and <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> of this elliptical annulus section.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.SetCenterRadiusXYRotationAngleStartAngleSpanRadialScale(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the center of the underlying ellipse.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the underlying ellipse.</PARA></param><param name="radiusX"><PARA>The distance from the center of the underlying start ellipse to its boundary along the its x-axis</PARA></param><param name="radiusY"><PARA>The distance from the center of the underlying start ellipse to its boundary along the its y-axis</PARA></param><param name="rotation"><PARA>The rotation angle of the underlying ellipse.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" />.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" />. (The default value for this parameter is actually π/2.)</PARA></param><param name="radialScale"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> of the elliptical annular section.</PARA></param><summary>Sets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, AngleSpan, and RadialScale of this elliptical annulus section.  All angles are in radians.</summary><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radiusX" /> &lt;= 0.0 or <paramref name="radiusY" /> &lt;= 0.0 </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="angleSpan" /> = 0.0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radialScale" /> &lt;= 0.0 or <paramref name="radialScale" /> = 1.0</para></exception><remarks><PARA>Sets <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterX" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.CenterY" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusX" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadiusY" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" />, <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" />, and <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> of this elliptical annulus section.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.GetUnitCircleParams(System.Double@,System.Double@,System.Double@,Cognex.VisionPro.CogTransform2DLinear@)"><param name="unitCircleAngleStart"><PARA>The start angle of the unit circle arc in radians.</PARA></param><param name="unitCircleAngleSpan"><PARA>The span of the unit circle arc in radians.</PARA></param><param name="radialScale"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> of the unit circle's circular  annulus section.</PARA></param><param name="ellipseFromUnitCircle"><PARA>The transform that maps the unit circle circular annulus section  to this elliptical annulus section.</PARA></param><summary>Get a description of this annulus section as a unit circular arc, a linear transform that maps it to an elliptical arc, and RadialScale.  The unit circle arc is centered at (0,0), has a radius of one, and has the given start angle and span (in radians).</summary><remarks><PARA>Gets a description of this elliptical annulus section as a unit circular arc, a linear transform that maps it to an elliptical arc, and a radial scale.
The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span measured in radians.</PARA><PARA>Typically, the <paramref name="unitCircleAngleStart" /> value is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" />, and the <paramref name="unitCircleAngleSpan" /> is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" />. The returned <paramref name="unitCircleAngleStart" /> is normalized to be between +π and −π, but <paramref name="unitCircleAngleSpan" /> is not. </PARA><PARA>The child space of this shape is unit
circle space. In the unit circle child space, you can pick (x,y) positions along the start arc using standard parametric equations for x and y:</PARA><PARA>
x = cos(t) and y = sin(t)
</PARA><PARA>where the angle <ITALIC>t</ITALIC> varies from <paramref name="unitCircleAngleStart" /> and (<paramref name="unitCircleAngleStart" /> + <paramref name="unitCircleAngleSpan" />). To get points along the end arc, scale by <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" />.</PARA><PARA>You can map positions and angles in child space to the parent space using the <paramref name="ellipseFromUnitCircle" /> transform. You can map from parent space to child space using the inverse transform.</PARA><PARA>Remember that <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation" /> to <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> to get the correct angle in parent space.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.SetFromUnitCircleParams(System.Double,System.Double,System.Double,Cognex.VisionPro.CogTransform2DLinear)"><param name="unitCircleAngleStart"><PARA>The start angle of the unit circle arc in radians.</PARA></param><param name="unitCircleAngleSpan"><PARA>The span of unit circle arc in radians.</PARA></param><param name="radialScale"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> of the unit circle's circular  annulus section.</PARA></param><param name="ellipseFromUnitCircle"><PARA>The transform that maps the unit circle circular annulus section  to this elliptical annulus section.</PARA></param><summary>Set the geometry of this annulus section from the given unit circular arc, the linear transform that maps it to an elliptical arc, and RadialScale.  The unit circle arc is centered at (0,0), has a radius of one, and has the given start angle (in radians) and span (in radians).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="unitCircleAngleSpan" /> = 0.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radialScale" /> &lt;= 0.0 or <paramref name="radialScale" /> = 1.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipseFromUnitCircle" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets the geometry of this elliptical annulus section from a unit circular arc, a linear transform that maps it to an elliptical arc, and a radial scale. The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span measured in radians.</PARA><PARA>Typically, the <paramref name="unitCircleAngleStart" /> value is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" />, and the <paramref name="unitCircleAngleSpan" /> is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleSpan" />. The returned <paramref name="unitCircleAngleStart" /> is normalized to be between +π and −π, but <paramref name="unitCircleAngleSpan" /> is not. </PARA><PARA>The child space of this shape is unit
circle space. In the unit circle child space, you can pick (x,y) positions along the arc using standard parametric equations for x and y:</PARA><PARA>
x = cos(t) and y = sin(t)
</PARA><PARA>where the angle <ITALIC>t</ITALIC> varies from <paramref name="unitCircleAngleStart" /> and (<paramref name="unitCircleAngleStart" /> + <paramref name="unitCircleAngleSpan" />).</PARA><PARA>You can map positions and angles in child space to the parent space using the <paramref name="ellipseFromUnitCircle" /> transform. You can map from parent space to child space using the inverse transform.</PARA><PARA>Remember that <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.Rotation" /> to <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.AngleStart" /> to get the correct angle in parent space.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new elliptical annulus section by mapping this elliptical annulus section through a linear transform.</PARA></remarks><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Create a new elliptical annulus section by mapping this one through the given linear transform.  Use the CopyFlags to specify what other parts of this shape should be copied into the new one.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.CreateEllipticalArc(System.Double,Cognex.VisionPro.CogCopyShapeConstants)"><param name="radialFraction"><PARA>Specifies the arc in relation to the section. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc, or other values for intermediate arcs.
</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The new elliptical arc.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipticalArc" /> based on this elliptical annulus section as defined by the radial fraction between the start and end arcs. Specify zero for the start arc, 0.5 for the center arc, and 1.0 for the end arc.  <paramref name="copyFlags" /> specifies which aspects of the arc are copied to the new shape.</PARA><PARA>Although you can specify <paramref name="radialFraction" /> values less than zero or greater than 1, this function will return an error if the resulting radii  would be less than or equal to zero.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>(1 + <paramref name="radialFraction" />  * (<see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.RadialScale" /> − 1)) &lt;= 0
</para></exception><summary>Create a new elliptical arc (copying the specified parameters) from this annulus section.  The arc is specified as a radial fraction between the start and end arcs.  For example, specify 0 for the start arc, 0.5 for the center arc, and 1 for the end arc.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalAnnulusSection.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /> that copies the specified attributes from this <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />.</PARA></remarks><summary>Create a new elliptical annulus section, copying the specified parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></returns></member><member name="E:Cognex.VisionPro.CogEllipticalAnnulusSection.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogEllipticalAnnulusSection.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalArc"><summary>An elliptical arc is a portion of an ellipse.  You specify this shape using the usual ellipse parameters and two more: AngleStart and AngleSpan.  AngleStart defines the angle at which the arc begins and AngleSpan defines the angular extent of the arc.</summary><remarks><PARA>An elliptical arc is a portion of an ellipse. You specify this shape using the usual ellipse parameters and two more: <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />, the angle at which the arc begins, and <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" />, the angular extent of the arc.</PARA><PARA>The following picture shows the parts of the elliptical arc  and the interactive handles available when <see cref="P:Cognex.VisionPro.CogEllipticalArc.GraphicDOFEnable" /> is set to <see cref="T:Cognex.VisionPro.CogEllipticalArcDOFConstants">All</see>.
The handle names are in <ITALIC>italics</ITALIC>.</PARA><PARA><PICTURE SRC="ellipsearc.gif" WIDTH="462" HEIGHT="178" apiSRC="ICogEllipticalArc_ellipsearc.gif" /></PARA><TABLE><ROW><TH><tab-head>Interactive Handle</tab-head></TH><TH><tab-head>Description</tab-head></TH></ROW><ROW><CELL><PARA>Arc span</PARA></CELL><CELL><PARA>Lets you change the length of the arc along the underlying ellipse. The center, radii, and rotation do not change.</PARA></CELL></ROW><ROW><CELL><PARA>Endpoint</PARA></CELL><CELL><PARA>Lets you change location of either endpoint. Changing an endpoint can cause changes to all of the other elliptical arc parameters except the other endpoint.</PARA></CELL></ROW><ROW><CELL><PARA>Bend</PARA></CELL><CELL><PARA>Lets you  change the curvature of the elliptical arc. Changing the curvature can change all of the other elliptical arc parameters except the endpoints.</PARA></CELL></ROW><ROW><CELL><PARA>Constrained span</PARA></CELL><CELL><PARA>Lets you change the curvature of the elliptical arc by holding the endpoints and the Bend handle constant. As this handle rotates around the Bend handle, the underlying ellipse changes so that the arc spans a fraction of the ellipse.</PARA><PARA>When this handle is 0° relative to the Bend handle (directly to the right in the default coordinate system) the underlying ellipse grows quite large and flat so that the arc spans about 10% of the ellipse. When the handle is 180° from the Bend handle (directly to its left in the default coordinate system), the underlying ellipse becomes smaller so that the arc spans 50% of the ellipse.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalArc.#ctor(Cognex.VisionPro.CogEllipticalArc)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfRadiusX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfRadiusY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfAngleStart"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleStart may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfAngleSpan"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AngleSpan may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfArcLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ArcLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfStartX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfStartY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfEndX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfEndY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfStartPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArc.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.DirectionAdornment"><summary>Returns/sets the direction adornment of this elliptical arc.  These adornments indicate the direction from the start point to the end point.</summary><remarks><PARA>Sets or gets the direction adornment of this elliptical arc which indicates the direction from the start point to the end point.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipticalArcDirectionAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipticalArc_DirectionAdornment--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogEllipticalArcDirectionAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipticalArc.EndPointAdornment"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogEllipticalArcAdornmentConstants" />.</para></exception><remarks><PARA>Sets or gets the endpoint adornment of this elliptical arc.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipticalArcAdornmentConstants">None</see></DEFAULT></remarks><summary>Returns/sets the end point adornment of this elliptical arc.  The end point occurs at the angle given by AngleStart + AngleSpan.</summary><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipticalArc_EndPointAdornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.StartPointAdornment"><remarks><PARA>Sets or gets the start point adornment of this elliptical arc.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogEllipticalArcAdornmentConstants">None</see></DEFAULT></remarks><summary>Returns/sets the start point adornment of this elliptical arc.  The start point occurs at the angle given by AngleStart.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogEllipticalArcAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogEllipticalArc_StartPointAdornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.EndY"><summary>Returns the y coordinate of the arc's end point.  The end point occurs at the angle given by AngleStart + AngleSpan.</summary><remarks><PARA>Returns the y-coordinate of the arc end point.  This is the point at the <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />+<see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> end of the arc.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.EndX"><remarks><PARA>Returns the x-coordinate of the arc end point.  This is the point at the <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />+<see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> end of the arc.</PARA></remarks><summary>Returns the x coordinate of the arc's end point.  The end point occurs at the angle given by AngleStart + AngleSpan.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.StartY"><summary>Returns the y coordinate of the arc's start point.  The start point occurs at the angle given by AngleStart.</summary><remarks><PARA>Returns the y-coordinate of the arc start point.  The start point occurs at the angle given by <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.StartX"><remarks><PARA>Returns the x-coordinate of the arc start point.  The start point occurs at the angle given by <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />.</PARA></remarks><summary>Returns the x coordinate of the arc's start point.  The start point occurs at the angle given by AngleStart.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.ArcLength"><summary>Returns the total length of this arc.</summary><remarks><PARA>Returns the length of this arc.

As <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> becomes greater than 2π, the length continues to increase. This value is always positive.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is zero.</para></exception><summary>Returns/sets the angular extent (in radians) and direction of the arc.  For example, a value of Pi specifies an arc that is one half of the full ellipse.  A value of -Pi specifies the other half.</summary><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the angle span of this elliptical arc in radians.
The angle can be any positive or negative value, but not exactly 0; the sign determines the direction of the arc.</PARA><PARA>If the absolute value of the  angle span is greater than 2π,
the arc wraps around on itself. It is not normalized to the range −2π to 2π</PARA><PARA>For example, an <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> of +π is an arc that describes half of a full ellipse, and a span of −π describes the other half in the opposite direction.</PARA><PARA>To simply reverse the direction of an arc, you can use the following:</PARA><CODE>
AngleStart = AngleStart + AngleSpan
AngleSpan = −AngleSpan
</CODE><DEFAULT>π/2</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.AngleStart"><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the start angle of the arc. The angle is measured in radians from the x-axis of the underlying ellipse.</PARA><PARA><see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> is normalized to a value between +π and −π.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Returns/sets the angle (in radians) that specifies the start of the arc.  It is measured from the x-axis of the underlying ellipse.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Rotation"><summary>Returns/sets the rotation angle (in radians) from the x-axis of the selected coordinate space to the x-axis of the ellipse.</summary><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the rotation angle, in radians, of the underlying ellipse. The angle is measured from the x-axis of the <see cref="P:Cognex.VisionPro.CogEllipticalArc.SelectedSpaceName">selected coordinate space</see> to the rotated x-axis of the ellipse. To find the rotation from the x-axis of the selected space name to the y-axis of the ellipse, add π/2 to this property.</PARA><PARA>Rotation values are normalized to be between −π and +π.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.RadiusY"><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the distance from the center of the underlying ellipse to its boundary along the y-axis. The y-axis may be <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation">rotated</see>.</PARA><DEFAULT>50</DEFAULT></remarks><summary>Returns/sets the distance from the center of the ellipse to its boundary (along the ellipse's y-axis).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception></member><member name="P:Cognex.VisionPro.CogEllipticalArc.RadiusX"><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the distance from the center of the ellipse to its boundary (along the ellipse's x-axis).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> &lt;= 0.0</para></exception><remarks><PARA>Sets or gets the distance from the center of the underlying ellipse to its boundary along the x-axis. The x-axis may be <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation">rotated</see>.</PARA><DEFAULT>50</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.CenterY"><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Returns/sets the y coordinate of the ellipse center.</summary><remarks><PARA>Sets or gets the y-coordinate of the center of the underlying ellipse.</PARA><DEFAULT>70</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.CenterX"><remarks><PARA>Sets or gets the x-coordinate of the center of the underlying ellipse.</PARA><DEFAULT>70</DEFAULT></remarks><summary>Returns/sets the x coordinate of the ellipse center.</summary><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogEllipticalArcDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogEllipticalArc" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.DragLineWidthInScreenPixels"><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.SelectedLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogEllipticalArc.LineStyle"><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.Visible"><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogEllipticalArc.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogEllipticalArc.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogEllipticalArc.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><summary>Shortest distance from this shape to the given point.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><returns><PARA>The returned rectangle.</PARA></returns><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogEllipticalArc" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogEllipticalArc" />.</PARA></param><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks><returns><PARA>The returned shape model.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.GetCenterRadiusXYRotationAngleStartAngleSpan(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center of the arc.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the arc.</PARA></param><param name="radiusX"><PARA>The distance from the center of the underlying ellipse to its boundary along the x-axis.</PARA></param><param name="radiusY"><PARA>The distance from the center of the underlying ellipse to its boundary along the y-axis.</PARA></param><param name="rotation"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" /> of the arc.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> of the arc.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> of the arc.</PARA></param><remarks><PARA>Gets the <see cref="P:Cognex.VisionPro.CogEllipticalArc.CenterX" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.CenterY" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.RadiusX" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.RadiusY" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />, and <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> of this elliptical arc.</PARA></remarks><summary>Gets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, and AngleSpan of this elliptical arc.  All angles are in radians.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.SetCenterRadiusXYRotationAngleStartAngleSpan(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the center of the arc.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the arc.</PARA></param><param name="radiusX"><PARA>The distance from the center of the underlying ellipse to its boundary along the x-axis.</PARA></param><param name="radiusY"><PARA>The distance from the center of the underlying ellipse to its boundary along the y-axis.</PARA></param><param name="rotation"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" /> of the arc.</PARA></param><param name="angleStart"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> of the arc.</PARA></param><param name="angleSpan"><PARA>The <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> of the arc. (The default value for this parameter is actually π/2.)</PARA></param><summary>Sets CenterX, CenterY, RadiusX, RadiusY, Rotation, AngleStart, and AngleSpan of this elliptical arc.  All angles are in radians.</summary><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets <see cref="P:Cognex.VisionPro.CogEllipticalArc.CenterX" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.CenterY" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.RadiusX" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.RadiusY" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />, and <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" /> of this elliptical arc.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="radiusX" /> &lt;= 0.0 or <paramref name="radiusY" /> &lt;= 0.0 </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="angleSpan" /> = 0.0</para></exception></member><member name="M:Cognex.VisionPro.CogEllipticalArc.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>The x-coordinate of the start point.</PARA></param><param name="startY"><PARA>The y-coordinate of the start point.</PARA></param><param name="endX"><PARA>The x-coordinate of the endpoint.</PARA></param><param name="endY"><PARA>The y-coordinate of the endpoint.</PARA></param><remarks><PARA>Gets the coordinates of the start and endpoints of the elliptical arc.</PARA></remarks><summary>Gets the start and end point coordinates of this elliptical arc.  The start point occurs at the angle given by AngleStart.  The end point occurs at the angle given by AngleStart + AngleSpan.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.GetUnitCircleParams(System.Double@,System.Double@,Cognex.VisionPro.CogTransform2DLinear@)"><param name="unitCircleAngleStart"><PARA>The start angle of the unit circle arc in radians.</PARA></param><param name="unitCircleAngleSpan"><PARA>The span of the unit circle arc in radians.</PARA></param><param name="ellipseFromUnitCircle"><PARA>The transform that maps the unit circle arc to this elliptical arc.</PARA></param><remarks><PARA>Gets a description of this elliptical arc as a unit circular arc
and a linear transform that maps it to an elliptical arc.
The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span measured in radians.</PARA><PARA>Typically, the <paramref name="unitCircleAngleStart" /> value is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />, and the <paramref name="unitCircleAngleSpan" /> is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" />. The returned <paramref name="unitCircleAngleStart" /> is normalized to be between +π and −π, but <paramref name="unitCircleAngleSpan" /> is not. </PARA><PARA>The child space of this shape is unit
circle space. In the unit circle child space, you can pick (x,y) positions along the arc using standard parametric equations for x and y:</PARA><PARA>
x = cos(t) and y = sin(t)
</PARA><PARA>where the angle <ITALIC>t</ITALIC> varies from <paramref name="unitCircleAngleStart" /> and (<paramref name="unitCircleAngleStart" /> + <paramref name="unitCircleAngleSpan" />).</PARA><PARA>You can map positions and angles in child space to the parent space using the <paramref name="ellipseFromUnitCircle" /> transform. You can map from parent space to child space using the inverse transform.</PARA><PARA>Remember that <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" /> to <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> to get the correct angle in parent space.</PARA></remarks><summary>Get a description of this elliptical arc as a unit circular arc and a linear transform that maps it to an elliptical arc.  The unit circle arc is centered at (0,0), has a radius of one, and has the provided start angle and span (in radians).</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.SetFromUnitCircleParams(System.Double,System.Double,Cognex.VisionPro.CogTransform2DLinear)"><param name="unitCircleAngleStart"><PARA>The start angle of the unit circle arc in radians.</PARA></param><param name="unitCircleAngleSpan"><PARA>The span of the unit circle arc in radians.</PARA></param><param name="ellipseFromUnitCircle"><PARA>The transform that maps the unit circle arc to this elliptical arc.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="unitCircleAngleSpan" /> = 0.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="RadialScale" /> &lt;= 0.0 or <paramref name="RadialScale" /> = 1.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipseFromUnitCircle" /> is NULL.</para></exception><summary>Set the geometry of this elliptical arc from the given description of a unit circular arc and the linear transform that maps it to an elliptical arc. The unit circle arc is centered at (0,0), has a radius of one, and has the given start angle (in radians) and span (in radians).</summary><remarks><PARA>Sets the geometry of this elliptical arc from the given description of a unit circular arc and the linear transform that maps it to an elliptical arc.  The unit circle arc is centered at (0,0), has a radius of one, and has the specified start angle and span measured in radians.</PARA><PARA>Typically, the <paramref name="unitCircleAngleStart" /> value is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" />, and the <paramref name="unitCircleAngleSpan" /> is not the same as <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" />. The returned <paramref name="unitCircleAngleStart" /> is normalized to be between +π and −π, but <paramref name="unitCircleAngleSpan" /> is not. </PARA><PARA>The child space of this shape is unit
circle space. In the unit circle child space, you can pick (x,y) positions along the arc using standard parametric equations for x and y:</PARA><PARA>
x = cos(t) and y = sin(t)
</PARA><PARA>where the angle <ITALIC>t</ITALIC> varies from <paramref name="unitCircleAngleStart" /> and (<paramref name="unitCircleAngleStart" /> + <paramref name="unitCircleAngleSpan" />).</PARA><PARA>You can map positions and angles in child space to the parent space using the <paramref name="ellipseFromUnitCircle" /> transform. You can map from parent space to child space using the inverse transform.</PARA><PARA>Remember that <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> is measured from the x-axis of the ellipse. You must add <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" /> to <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleStart" /> to get the correct angle in parent space.</PARA></remarks><event cref="E:Cognex.VisionPro.CogEllipticalArc.Changed" cgnxEvent="multiState"><para>
		
Fires when the shape changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="M:Cognex.VisionPro.CogEllipticalArc.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogEllipticalArc" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new elliptical arc by mapping this elliptical arc through a linear transform.</PARA></remarks><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogEllipticalArc" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Create a new elliptical arc by mapping this one through the given linear transform.  Use the CopyFlags to specify what other parts of this shape should be copied into the new one.</summary></member><member name="M:Cognex.VisionPro.CogEllipticalArc.CreateEllipse(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Create a new ellipse shape.  The returned ellipse will have the same center, radii, rotation, and unit circle transform as this elliptical arc.  Use the CopyFlags to specify what other parts of this shape should be copied into the new one.</summary><returns><PARA>The new ellipse.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipse" /> based on the underlying ellipse of this arc.
The new ellipse has the same <see cref="P:Cognex.VisionPro.CogEllipticalArc.CenterX" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.CenterY" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.RadiusX" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.RadiusY" />, <see cref="P:Cognex.VisionPro.CogEllipticalArc.Rotation" />, and <see cref="M:Cognex.VisionPro.CogEllipticalArc.GetUnitCircleParams(System.Double@,System.Double@,Cognex.VisionPro.CogTransform2DLinear@)">unit circle transform</see> as this elliptical arc.
<paramref name="copyFlags" /> specifies which aspects of the arc are copied to the ellipse.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogEllipticalArc.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipticalArc" /> that copies the specified attributes from this <see cref="T:Cognex.VisionPro.CogEllipticalArc" />.</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogEllipticalArc" /></PARA></returns><summary>Create a new elliptical arc, copying the specified parameters.</summary></member><member name="E:Cognex.VisionPro.CogEllipticalArc.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogEllipticalArc.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogEllipticalArc.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitCircle"><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitCircle" />.</PARA></remarks><summary>Class for fitting an circle to a set of points.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.#ctor(Cognex.VisionPro.CogFitCircle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogFitCircle.SfNumPoints"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumPoints may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircle.SfGetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircle.SfGetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircle.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircle.SfRadiusConstraintEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusConstraintEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircle.SfRadiusConstraint"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadiusConstraint may have changed.</summary></member><member name="P:Cognex.VisionPro.CogFitCircle.RadiusConstraint"><remarks><PARA>If <see cref="P:Cognex.VisionPro.CogFitCircle.RadiusConstraintEnabled" /> is true, then the radius of the 
	circle being fit 
	will be constrained to the value of this property. The radius is expressed in the selected 
	space supplied to the <see cref="M:Cognex.VisionPro.CogFitCircle.Execute(System.String)" /> command.</PARA></remarks><summary>The value that the radius of the circle will be constrained to if radius is constrained.</summary><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_RadiusConstraint--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfRadiusConstraint" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to 0.</para></exception></member><member name="P:Cognex.VisionPro.CogFitCircle.RadiusConstraintEnabled"><summary>Whether radius will be constrained for the fit.</summary><remarks><PARA>
	If this property is true, the radius of the circle being fit will have 
	its radius constrained to <see cref="P:Cognex.VisionPro.CogFitCircle.RadiusConstraint" />.
	</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_RadiusConstraintEnabled--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfRadiusConstraintEnabled" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogFitCircle.NumToIgnore"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception><summary>The number of points that will be ignored in the fitting operation.</summary><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_NumToIgnore--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfNumToIgnore" /></li></ul></event><remarks><PARA>The number of points that will be ignored in the fitting operation.
	The fitting tool considers each possible combination of <see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" /> minus 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumToIgnore" /> points. If you specify large values for both the number of points to 
	consider and the number of points to ignore, the fitting operation can take a great deal of time 
	to complete.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitCircle.NumPoints"><remarks><PARA>The number of points that will be considered for the fit. If you increase the value of  
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />, the newly added points are set to (0, 0) and placed at the end of the list. If 
	you decrease the value of <see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />, points are removed from the end of the list.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfNumPoints" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception><summary>The number of points that will be considered for the fit.</summary></member><member name="P:Cognex.VisionPro.CogFitCircle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogFitCircle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.GetX(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><summary>The X coordinate of the given point.</summary><remarks><PARA>The X coordinate of the given point.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_X--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetX" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitCircle.SetX(System.Int32,System.Double)"><param name="index"><PARA>The index of the point.</PARA></param><param name="value"></param><summary>The X coordinate of the given point.</summary><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_X--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetX" /></li></ul></event><remarks><PARA>The X coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitCircle.GetY(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><summary>The Y coordinate of the given point.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_Y--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetX" /></li></ul></event><remarks><PARA>The Y coordinate of the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircle.SetY(System.Int32,System.Double)"><param name="index"><PARA>The index of the point.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircle_Y--><ul><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetX" /></li></ul></event><remarks><PARA>The Y coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><summary>The Y coordinate of the given point.</summary></member><member name="M:Cognex.VisionPro.CogFitCircle.AddPoint(System.Double,System.Double)"><param name="x"><PARA>The X-coordinate of the point to add.</PARA></param><param name="y"><PARA>The Y-coordinate of the point to add.</PARA></param><summary>Add a new point to the end of the list of points.</summary><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="multiState"><para>
		
Fires when a point is added. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfNumPoints" /></li><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetX" /></li><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetY" /></li></ul></event><remarks><PARA>Add a new point to the end of the list of points.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircle.SetPoint(System.Int32,System.Double,System.Double)"><param name="index"><PARA>The index (0-based) of the point to change.</PARA></param><param name="x"><PARA>The new X-coordinate of the point.</PARA></param><param name="y"><PARA>The new Y-coordinate of the point.</PARA></param><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfNumPoints" /></li><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetX" /></li><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfGetY" /></li></ul></event><summary>Set the given point to the new values.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><remarks><PARA>Set the given point to the new values. This function lets you change the X- and 
	Y-coordinate of a previously added point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircle.DeletePoint(System.Int32)"><param name="index"><PARA>The index (0-based) of the point to delete.</PARA></param><summary>Delete the given point.</summary><remarks><PARA>Delete the given point.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitCircle.Changed" cgnxEvent="multiState"><para>
		
Fires when a point is deleted. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.CogFitCircle.SfNumPoints" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitCircle.GetPoint(System.Int32,System.Double@,System.Double@)"><param name="index"><PARA>The index (0-based) of the point to get.</PARA></param><param name="x"><PARA>A variable into which is placed the X-coordinate of the specified point.</PARA></param><param name="y"><PARA>A variable into which is placed the Y-coordinate of the specified point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><summary>Get the given point.</summary><remarks><PARA>Gets the X- and Y-coordinates of the point with the supplied index.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircle.Execute(System.String)"><param name="selectedSpaceName"><PARA>The selected space name.</PARA></param><summary>Fit the current set of points. The supplied selected space name will be the selected space of the circle in the result.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogFitInsufficientPointsException" cgnxHRESULT="E_CogFit_InsufficientPoints"><para><see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" /> minus 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumToIgnore" /> is less than 3.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFitAmbiguousDataException" cgnxHRESULT="E_CogFit_AmbiguousData"><para>
	No circle can be fitted to the supplied set of points.
	</para></exception><returns><PARA>An <see cref="T:Cognex.VisionPro.CogFitCircleResult" /> containing the result of the fitting operation.</PARA></returns><remarks><PARA>Fit the current set of points. The supplied selected space name will be the selected space of the circle in the result.</PARA></remarks></member><member name="E:Cognex.VisionPro.CogFitCircle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitCircleResult"><summary>The result from fitting a circle to a set of points.</summary><remarks><PARA>This interface provides access to the results of a fitting operation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircleResult.#ctor(Cognex.VisionPro.CogFitCircleResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogFitCircleResult.RMSError"><summary>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</summary><remarks><PARA>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitCircleResult.NumPoints"><summary>The number of points supplied to the fit.</summary><remarks><PARA>The number of points supplied to the fit.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircleResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.GetX(System.Int32)"><param name="index"><PARA>The index of the point</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><remarks><PARA>The X coordinate of the given point.</PARA></remarks><summary>The X coordinate of the given point.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.GetY(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><remarks><PARA>The Y coordinate of the given point.</PARA></remarks><summary>The Y coordinate of the given point.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.GetUsed(System.Int32)"><param name="index"><PARA>The index (0-based) of the point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception><remarks><PARA>Whether the given point was used in the fitting operation.</PARA></remarks><summary>Whether the given point was used in the fitting operation.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.GetDistance(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><summary>Returns the minimum distance from the data point to the fitted Circle.  This measurement is available regardless of whether or not the data point was used for the fit.</summary><remarks><PARA>Returns the minimum distance from the data point to the fitted <see cref="T:Cognex.VisionPro.CogCircle" />.  This measurement is available regardless of whether or not the data point was used for the fit.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than
	or equal to <see cref="P:Cognex.VisionPro.CogFitCircleResult.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitCircleResult.GetXYUsedDistance(System.Int32,System.Double@,System.Double@,System.Boolean@,System.Double@)"><param name="index"><PARA>The index of the point.</PARA></param><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="used"><PARA>True if the point was used in the fit, false otherwise.</PARA></param><param name="distance"><PARA>The distance from the point to the fitted shape.</PARA></param><remarks><PARA>Returns the location of the given point, whether it was used in the fit, and the distance to the fitted <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></remarks><summary>Returns X and Y for the given point, whether it was used, and the distance to the fitted Circle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than
	or equal to <see cref="P:Cognex.VisionPro.CogFitCircleResult.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitCircleResult.GetCircle"><remarks><PARA>Returns a copy of the <see cref="T:Cognex.VisionPro.CogCircle" /> resulting from the fit.</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogCircle" />.</PARA></returns><summary>Returns a copy of the shape resulting from the fit.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleResult.CreateResultGraphics(Cognex.VisionPro.CogFitCircleResultGraphicConstants)"><param name="graphicOptions"><PARA>A bitwise combination of 
	<see cref="T:Cognex.VisionPro.CogFitCircleResultGraphicConstants" /> specifying which graphics to create.</PARA></param><returns><PARA>The returned graphics.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="graphicOptions" /> is not formed by ORing together 
	values from <see cref="T:Cognex.VisionPro.CogFitCircleResultGraphicConstants" />.
	</para></exception><summary>Returns graphics that represent the results of the last run. The GraphicOptions parameter is a bitwise combination of CogFitCircleResultGraphicConstants and specifies what to put in the Children collection of the returned CogCompositeShape.</summary><remarks><PARA>Returns graphics that represent the results of the last run. 
	The <paramref name="graphicOptions" /> parameter is a bitwise combination of 
	<see cref="T:Cognex.VisionPro.CogFitCircleResultGraphicConstants" /> and specifies what to put in the 
	Children collection of the returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitCircleTool"><summary>A tool for fitting a circle to a set of points.</summary><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitCircleTool" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitCircleTool.#ctor(Cognex.VisionPro.CogFitCircleTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.CogFitCircleTool.Result"><summary>Result from the last invocation of the Run method.  A new CogFitCircleResult is factoried for each inspection.  Previous results will be released prior to the new inspection.</summary><remarks><PARA>
	Result from the last invocation of the 
	<see cref="M:Cognex.VisionPro.CogFitCircleTool.Run" /> method.  A new <see cref="T:Cognex.VisionPro.CogFitCircleResult" /> 
	is factoried for each inspection.  
	Previous results will be released prior to the new invocation.
</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_Result--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitCircleTool.RunParams"><summary>Returns or sets the run parameters.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_RunParams--><ul /></event><remarks><PARA>An <see cref="T:Cognex.VisionPro.CogFitCircle" /> defining the points and 
	point fitting parameters.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitCircleTool.InputImage"><summary>Returns or sets the image that graphics will be displayed on in the inspection record.</summary><remarks><PARA>Returns or sets the image that graphics will be displayed on in the inspection record.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_InputImage--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitCircleTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_CurrentRecordEnable--><ul /></event><remarks><PARA>
			Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.CogFitCircleCurrentRecordConstants" /> constants.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitCircleTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_LastRunRecordDiagEnable--><ul /></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.CogFitCircleLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitCircleTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_LastRunRecordEnable--><ul /></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.CogFitCircleLastRunRecordConstants" />.</PARA></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.CogFitCircleTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.CogFitCircleTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.CogFitCircleTool.Run"><summary>Runs the tool using the current parameter settings.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.CogFitCircleTool.InputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.CogFitCircleTool.RunParams" /> is NULL.</para></exception><remarks><PARA>
		Fits the points defined in <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunParams" /> and returns the 
		result of the fit operation in <see cref="P:Cognex.VisionPro.CogFitCircleTool.Result" />.
	</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.CogFitCircleTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
		Fires on an unsuccessful run. No results are generated and no previous results exist.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitCircleTool_RunStatus--><ul /></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event></member><member name="M:Cognex.VisionPro.CogFitCircleTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.CogFitEllipse"><summary>Class for fitting an ellipse to a set of points.</summary><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitEllipse" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipse.#ctor(Cognex.VisionPro.CogFitEllipse)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipse.SfNumPoints"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumPoints may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipse.SfGetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipse.SfGetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipse.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipse.SfRotationConstraintEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RotationConstraintEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipse.SfRotationConstraint"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RotationConstraint may have changed.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipse.RotationConstraint"><remarks><PARA>If <see cref="P:Cognex.VisionPro.CogFitEllipse.RotationConstraintEnabled" /> is true, then the rotation of the 
	ellipse being fit 
	will be constrained to the value of this property. The constraint value is the rotation in radians from the
	X-axis of the selected 
	space supplied to the <see cref="M:Cognex.VisionPro.CogFitEllipse.Execute(System.String)" /> command to the ellipse's 
	major axis.</PARA></remarks><summary>The value in radians that the x axis of the ellipse will be constrained to if Rotation is constrained.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to 0.</para></exception><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_RotationConstraint--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitEllipse.RotationConstraintEnabled"><remarks><PARA>
	If this property is true, the rotation of the ellipse being fit will be constrained to <see cref="P:Cognex.VisionPro.CogFitEllipse.RotationConstraint" />.
	</PARA></remarks><summary>Whether Rotation will be constrained for the fit.</summary><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_RotationConstraintEnabled--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitEllipse.NumToIgnore"><remarks><PARA>The number of points that will be ignored in the fitting operation.
	The fitting tool considers each possible combination of <see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" /> minus 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumToIgnore" /> points. If you specify large values for both the number of points to 
	consider and the number of points to ignore, the fitting operation can take a great deal of time 
	to complete.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_NumToIgnore--><ul /></event><summary>The number of points that will be ignored in the fitting operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception></member><member name="P:Cognex.VisionPro.CogFitEllipse.NumPoints"><remarks><PARA>The number of points that will be considered for the fit. If you increase the value of  
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />, the newly added points are set to (0, 0) and placed at the end of the list. If 
	you decrease the value of <see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />, points are removed from the end of the list.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>The number of points that will be considered for the fit.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception></member><member name="P:Cognex.VisionPro.CogFitEllipse.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipse.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.GetX(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_X--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception><remarks><PARA>The X coordinate of the given point.</PARA></remarks><summary>The X coordinate of the given point.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipse.SetX(System.Int32,System.Double)"><param name="index"><PARA>The index of the point.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_X--><ul /></event><summary>The X coordinate of the given point.</summary><remarks><PARA>The X coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitEllipse.GetY(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_Y--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception><summary>The Y coordinate of the given point.</summary><remarks><PARA>The Y coordinate of the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipse.SetY(System.Int32,System.Double)"><param name="index"><PARA>The index of the point.</PARA></param><param name="value"></param><summary>The Y coordinate of the given point.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipse_Y--><ul /></event><remarks><PARA>The Y coordinate of the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipse.AddPoint(System.Double,System.Double)"><param name="x"><PARA>The X-coordinate of the point to add.</PARA></param><param name="y"><PARA>The Y-coordinate of the point to add.</PARA></param><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Add a new point to the end of the list of points.</summary><remarks><PARA>Add a new point to the end of the list of points.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipse.SetPoint(System.Int32,System.Double,System.Double)"><param name="index"><PARA>The index (0-based) of the point to change.</PARA></param><param name="x"><PARA>The new X-coordinate of the point.</PARA></param><param name="y"><PARA>The new Y-coordinate of the point.</PARA></param><summary>Set the given point to the new values.</summary><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception><remarks><PARA>Set the given point to the new values. This function lets you change the X- and 
	Y-coordinate of a previously added point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipse.DeletePoint(System.Int32)"><param name="index"><PARA>The index (0-based) of the point to delete.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception><summary>Delete the given point.</summary><remarks><PARA>Delete the given point.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitEllipse.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogFitEllipse.GetPoint(System.Int32,System.Double@,System.Double@)"><param name="index"><PARA>The index (0-based) of the point to get.</PARA></param><param name="x"><PARA>A variable into which is placed the X-coordinate of the specified point.</PARA></param><param name="y"><PARA>A variable into which is placed the Y-coordinate of the specified point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception><summary>Get the given point.</summary><remarks><PARA>Gets the X- and Y-coordinates of the point with the supplied index.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipse.Execute(System.String)"><param name="selectedSpaceName"><PARA>The selected space name.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogFitEllipseResult" /> containing the result of the fitting operation.</PARA></returns><summary>Fit the current set of points. The supplied selected space name will be the selected space of the ellipse in the result.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogFitInsufficientPointsException" cgnxHRESULT="E_CogFit_InsufficientPoints"><para><see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" /> minus 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumToIgnore" /> is less than 3.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFitAmbiguousDataException" cgnxHRESULT="E_CogFit_AmbiguousData"><para>
	No ellipse can be fitted to the supplied set of points.
	</para></exception><remarks><PARA>Fit the current set of points. The supplied selected space name will be the selected space of the ellipse in the result.</PARA></remarks></member><member name="E:Cognex.VisionPro.CogFitEllipse.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitEllipseResult"><summary>The result from fitting an ellipse to a set of points.</summary><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitEllipseResult" />. This interface 
	provides access to the results of a fitting operation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.#ctor(Cognex.VisionPro.CogFitEllipseResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipseResult.RMSError"><remarks><PARA>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</PARA></remarks><summary>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipseResult.NumPoints"><remarks><PARA>The number of points supplied to the fit.</PARA></remarks><summary>The number of points supplied to the fit.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.GetX(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><remarks><PARA>The X coordinate of the given point.</PARA></remarks><summary>The X coordinate of the given point.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.GetY(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><summary>The Y coordinate of the given point.</summary><remarks><PARA>The Y coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitEllipse.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.GetUsed(System.Int32)"><param name="index"><PARA>The index (0-based) of the point.</PARA></param><remarks><PARA>Whether the given point was used in the fitting operation.</PARA></remarks><summary>Whether the given point was used in the fitting operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitCircle.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.GetDistance(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than
	or equal to <see cref="P:Cognex.VisionPro.CogFitEllipseResult.NumPoints" />.
	</para></exception><summary>Returns the minimum distance from the data point to the fitted Ellipse.  This measurement is available regardless of whether or not the data point was used for the fit.</summary><remarks><PARA>Returns the minimum distance from the data point to the fitted <see cref="T:Cognex.VisionPro.CogEllipse" />.  This measurement is available regardless of whether or not the data point was used for the fit.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.GetXYUsedDistance(System.Int32,System.Double@,System.Double@,System.Boolean@,System.Double@)"><param name="index"><PARA>The index of the point.</PARA></param><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="used"><PARA>True if the point was used in the fit, false otherwise.</PARA></param><param name="distance"><PARA>The distance from the point to the fitted shape.</PARA></param><remarks><PARA>Returns the location of the given point, whether it was used in the fit, and the distance to the fitted <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></remarks><summary>Returns X and Y for the given point, whether it was used, and the distance to the fitted Ellipse.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than
	or equal to <see cref="P:Cognex.VisionPro.CogFitEllipseResult.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.GetEllipse"><summary>Returns a copy of the shape resulting from the fit.</summary><remarks><PARA>Returns a copy of the <see cref="T:Cognex.VisionPro.CogEllipse" /> resulting from the fit.</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogEllipse" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogFitEllipseResult.CreateResultGraphics(Cognex.VisionPro.CogFitEllipseResultGraphicConstants)"><param name="graphicOptions"><PARA>A bitwise combination of 
	<see cref="T:Cognex.VisionPro.CogFitEllipseResultGraphicConstants" /> specifying which graphics to create.</PARA></param><returns><PARA>The returned graphics.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="graphicOptions" /> is not formed by ORing together 
	values from <see cref="T:Cognex.VisionPro.CogFitEllipseResultGraphicConstants" />.
	</para></exception><summary>Returns graphics that represent the results of the last run. The GraphicOptions parameter is a bitwise combination of CogFitEllipseResultGraphicConstants and specifies what to put in the Children collection of the returned CogCompositeShape.</summary><remarks><PARA>Returns graphics that represent the results of the last run. 
	The <paramref name="graphicOptions" /> parameter is a bitwise combination of 
	<see cref="T:Cognex.VisionPro.CogFitEllipseResultGraphicConstants" /> and specifies what to put in the 
	Children collection of the returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitEllipseTool"><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitEllipseTool" />.</PARA></remarks><summary>A tool for fitting an ellipse to a set of points.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseTool.#ctor(Cognex.VisionPro.CogFitEllipseTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.Result"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_Result--><ul /></event><summary>Result from the last invocation of the Run method.  A new CogFitEllipseResult is factoried for each inspection.  Previous results will be released prior to the new inspection.</summary><remarks><PARA>
	Result from the last invocation of the 
	<see cref="M:Cognex.VisionPro.CogFitEllipseTool.Run" /> method.  A new <see cref="T:Cognex.VisionPro.CogFitEllipseResult" /> 
	is factoried for each inspection.  
	Previous results will be released prior to the new invocation.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.RunParams"><summary>Returns or sets the run parameters.</summary><remarks><PARA>An <see cref="T:Cognex.VisionPro.CogFitEllipse" /> defining the points and 
	point fitting parameters.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_RunParams--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.InputImage"><summary>Returns or sets the image that graphics will be displayed on in the inspection record.</summary><remarks><PARA>Returns or sets the image that graphics will be displayed on in the inspection record.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_InputImage--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>
			Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.CogFitEllipseCurrentRecordConstants" /> constants.
	</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_CurrentRecordEnable--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.LastRunRecordDiagEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.CogFitEllipseLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_LastRunRecordDiagEnable--><ul /></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_LastRunRecordEnable--><ul /></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.CogFitEllipseTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseTool.Run"><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.CogFitEllipseTool.InputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.CogFitEllipseTool.RunParams" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.CogFitEllipseTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.CogFitEllipseTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event  handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
		Fires on an unsuccessful run. No results are generated and no previous results exist.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitEllipseTool_RunStatus--><ul /></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><remarks><PARA>Fits the points defined in <see cref="P:Cognex.VisionPro.CogFitEllipseTool.RunParams" /> and returns the 
	result of the fit operation in <see cref="P:Cognex.VisionPro.CogFitEllipseTool.Result" />.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><summary>Runs the tool using the current parameter settings.</summary></member><member name="M:Cognex.VisionPro.CogFitEllipseTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.CogFitLine"><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitLine" />.</PARA></remarks><summary>Class for fitting a line to a set of points.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.#ctor(Cognex.VisionPro.CogFitLine)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogFitLine.SfNumPoints"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumPoints may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLine.SfGetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLine.SfGetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLine.SfNumToIgnore"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumToIgnore may have changed.</summary></member><member name="P:Cognex.VisionPro.CogFitLine.NumToIgnore"><summary>The number of points that will be ignored in the fitting operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception><remarks><PARA>The number of points that will be ignored in the fitting operation.
	The fitting tool considers each possible combination of <see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" /> minus 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumToIgnore" /> points. If you specify large values for both the number of points to 
	consider and the number of points to ignore, the fitting operation can take a great deal of time 
	to complete.</PARA></remarks><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLine_NumToIgnore--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitLine.NumPoints"><remarks><PARA>The number of points that will be considered for the fit. If you increase the value of  
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />, the newly added points are set to (0, 0) and placed at the end of the list. If 
	you decrease the value of <see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />, points are removed from the end of the list.</PARA></remarks><summary>The number of points that will be considered for the fit.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogFitLine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogFitLine.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogFitLine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.GetX(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLine_X--><ul /></event><remarks><PARA>The X coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><summary>The X coordinate of the given point.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.SetX(System.Int32,System.Double)"><param name="index"><PARA>The index of the point.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLine_X--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><summary>The X coordinate of the given point.</summary><remarks><PARA>The X coordinate of the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLine.GetY(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><summary>The Y coordinate of the given point.</summary><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLine_Y--><ul /></event><remarks><PARA>The Y coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitLine.SetY(System.Int32,System.Double)"><param name="index"><PARA>The index of the point.</PARA></param><param name="value"></param><summary>The Y coordinate of the given point.</summary><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="singleState"><para>
		
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLine_Y--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than zero or greater than or equal to
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><remarks><PARA>The Y coordinate of the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLine.AddPoint(System.Double,System.Double)"><param name="x"><PARA>The X-coordinate of the point to add.</PARA></param><param name="y"><PARA>The Y-coordinate of the point to add.</PARA></param><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Add a new point to the end of the list of points.</summary><remarks><PARA>Add a new point to the end of the list of points.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLine.SetPoint(System.Int32,System.Double,System.Double)"><param name="index"><PARA>The index (0-based) of the point to change.</PARA></param><param name="x"><PARA>The new X-coordinate of the point.</PARA></param><param name="y"><PARA>The new Y-coordinate of the point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Set the given point to the new values. This function lets you change the X- and 
	Y-coordinate of a previously added point.</PARA></remarks><summary>Set the given point to the new values.</summary></member><member name="M:Cognex.VisionPro.CogFitLine.DeletePoint(System.Int32)"><param name="index"><PARA>The index (0-based) of the point to delete.</PARA></param><event cref="E:Cognex.VisionPro.CogFitLine.Changed" cgnxEvent="multiState"><para>
		
Fires when this function is called. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Delete the given point.</PARA></remarks><summary>Delete the given point.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitLine.GetPoint(System.Int32,System.Double@,System.Double@)"><param name="index"><PARA>The index (0-based) of the point to get.</PARA></param><param name="x"><PARA>A variable into which is placed the X-coordinate of the specified point.</PARA></param><param name="y"><PARA>A variable into which is placed the Y-coordinate of the specified point.</PARA></param><summary>Get the given point.</summary><remarks><PARA>Gets the X- and Y-coordinates of the point with the supplied index.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitLine.Execute(System.String)"><param name="selectedSpaceName"><PARA>The selected space name.</PARA></param><remarks><PARA>Fit the current set of points. The supplied selected space name will be the selected space of the line in the result.</PARA></remarks><summary>Fit the current set of points. The supplied selected space name will be the selected space of the line in the result.</summary><returns><PARA>An <see cref="T:Cognex.VisionPro.CogFitLineResult" /> containing the result of the fitting operation.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogFitInsufficientPointsException" cgnxHRESULT="E_CogFit_InsufficientPoints"><para><see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" /> minus 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumToIgnore" /> is less than 2.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFitAmbiguousDataException" cgnxHRESULT="E_CogFit_AmbiguousData"><para>
	No line can be fitted to the supplied set of points.
	</para></exception></member><member name="E:Cognex.VisionPro.CogFitLine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitLineResult"><summary>The result from fitting a line to a set of points.</summary><remarks><PARA>This interface provides access to the results of a fitting operation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLineResult.#ctor(Cognex.VisionPro.CogFitLineResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitLineResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitLineResult.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogFitLineResult.RMSError"><summary>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</summary><remarks><PARA>Root mean square error for the fitting operation. It is computed by taking the square root of the mean of the squares of the individual errors.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitLineResult.NumPoints"><summary>The number of points supplied to the fit.</summary><remarks><PARA>The number of points supplied to the fit.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLineResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFitLineResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogFitLineResult.GetX(System.Int32)"><param name="index"><PARA>The index of the point</PARA></param><remarks><PARA>The X coordinate of the given point.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><summary>The X coordinate of the given point.</summary></member><member name="M:Cognex.VisionPro.CogFitLineResult.GetY(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><summary>The Y coordinate of the given point.</summary><remarks><PARA>The Y coordinate of the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLineResult.GetUsed(System.Int32)"><param name="index"><PARA>The index (0-based) of the point.</PARA></param><summary>Whether the given point was used in the fitting operation.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than or equal to 
	<see cref="P:Cognex.VisionPro.CogFitLine.NumPoints" />.
	</para></exception><remarks><PARA>Whether the given point was used in the fitting operation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogFitLineResult.GetDistance(System.Int32)"><param name="index"><PARA>The index of the point.</PARA></param><summary>Returns the minimum distance from the data point to the fitted Line.  This measurement is available regardless of whether or not the data point was used for the fit.</summary><remarks><PARA>Returns the minimum distance from the data point to the fitted <see cref="T:Cognex.VisionPro.CogLine" />.  This measurement is available regardless of whether or not the data point was used for the fit.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than
	or equal to <see cref="P:Cognex.VisionPro.CogFitLineResult.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitLineResult.GetXYUsedDistance(System.Int32,System.Double@,System.Double@,System.Boolean@,System.Double@)"><param name="index"><PARA>The index of the point.</PARA></param><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="used"><PARA>True if the point was used in the fit, false otherwise.</PARA></param><param name="distance"><PARA>The distance from the point to the fitted shape.</PARA></param><summary>Returns X and Y for the given point, whether it was used, and the distance to the fitted Line.</summary><remarks><PARA>Returns the location of the given point, whether it was used in the fit, and the distance to the fitted <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is less than 0 or greater than
	or equal to <see cref="P:Cognex.VisionPro.CogFitLineResult.NumPoints" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogFitLineResult.GetLine"><summary>Returns a copy of the shape resulting from the fit.</summary><remarks><PARA>Returns a copy of the <see cref="T:Cognex.VisionPro.CogLine" /> to which the supplied points were fit.</PARA></remarks><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogFitLineResult.CreateResultGraphics(Cognex.VisionPro.CogFitLineResultGraphicConstants)"><param name="graphicOptions"><PARA>A bitwise combination of 
	<see cref="T:Cognex.VisionPro.CogFitLineResultGraphicConstants" /> specifying which graphics to create.</PARA></param><remarks><PARA>Returns graphics that represent the results of the last run. 
	The <paramref name="graphicOptions" /> parameter is a bitwise combination of 
	<see cref="T:Cognex.VisionPro.CogFitLineResultGraphicConstants" /> and specifies what to put in the 
	Children collection of the returned <see cref="T:Cognex.VisionPro.CogCompositeShape" />.</PARA></remarks><returns><PARA>The returned graphics.</PARA></returns><summary>Returns graphics that represent the results of the last run. The GraphicOptions parameter is a bitwise combination of CogFitLineResultGraphicConstants and specifies what to put in the Children collection of the returned CogCompositeShape.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="graphicOptions" /> is not formed by ORing together 
	values from <see cref="T:Cognex.VisionPro.CogFitLineResultGraphicConstants" />.
	</para></exception></member><member name="T:Cognex.VisionPro.CogFitLineTool"><remarks><PARA>Primary interface of <see cref="T:Cognex.VisionPro.CogFitLineTool" />.</PARA></remarks><summary>A tool for fitting a line to a set of points.</summary></member><member name="M:Cognex.VisionPro.CogFitLineTool.#ctor(Cognex.VisionPro.CogFitLineTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogFitLineTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFitLineTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogFitLineTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLineTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLineTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLineTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLineTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.CogFitLineTool.SfResult"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Result may have changed.</summary></member><member name="P:Cognex.VisionPro.CogFitLineTool.Result"><summary>Result from the last invocation of the Run method.  A new CogFitLineResult is factoried for each inspection.  Previous results will be released prior to the new inspection.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_Result--><ul /></event><remarks><PARA>
	Result from the last invocation of the 
	<see cref="M:Cognex.VisionPro.CogFitLineTool.Run" /> method.  A new <see cref="T:Cognex.VisionPro.CogFitLineResult" /> 
	is factoried for each inspection.  
	Previous results will be released prior to the new invocation.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitLineTool.RunParams"><summary>Returns or sets the run parameters.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_RunParams--><ul /></event><remarks><PARA>An <see cref="T:Cognex.VisionPro.CogFitLine" /> defining the points and 
	point fitting parameters.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitLineTool.InputImage"><summary>Returns or sets the image that graphics will be displayed on in the inspection record.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_InputImage--><ul /></event><remarks><PARA>Returns or sets the image that graphics will be displayed on in the inspection record.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitLineTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>
			Enable the 
	<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord">creation</see> of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.CogFitLineCurrentRecordConstants" /> constants.
	</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_CurrentRecordEnable--><ul /></event></member><member name="P:Cognex.VisionPro.CogFitLineTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_LastRunRecordDiagEnable--><ul /></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.CogFitLineLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitLineTool.LastRunRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_LastRunRecordEnable--><ul /></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate 
	<see cref="T:Cognex.VisionPro.CogFitLineLastRunRecordConstants" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogFitLineTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.CogFitLineTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.CogFitLineTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.CogFitLineTool.Run"><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>Fits the points defined in <see cref="P:Cognex.VisionPro.CogFitLineTool.RunParams" /> and returns the 
	result of the fit operation in <see cref="P:Cognex.VisionPro.CogFitLineTool.Result" />.</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.CogFitLineTool.InputImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.CogFitLineTool.RunParams" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.CogFitLineTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.CogFitLineTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
	
		Fires on an unsuccessful run. No results are generated and no previous results exist.
</para><para>The following state flag may be affected:</para><!--STATEID:cogFitLineTool_RunStatus--><ul /></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event></member><member name="M:Cognex.VisionPro.CogFitLineTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.CogFrameGrabbers"><remarks><PARA>A collection that contains the frame grabbers installed on your system..</PARA></remarks><summary>Class that identifies installed frame grabbers.</summary></member><member name="M:Cognex.VisionPro.CogFrameGrabbers.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogFrameGrabbers.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogFrameGrabbers.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogFrameGrabbers.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogFrameGrabbers.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogFrameGrabbers.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.CogFrameGrabbers.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogFrameGrabbers.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogFrameGrabbers.IndexOf(Cognex.VisionPro.ICogFrameGrabber)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogFrameGrabbers.Refresh"><remarks><para>Checks for newly added hardware so that the next time a CogFrameGrabbers object is constructed it will contain the hardware.  At this time, only GigE Vision cameras are capable of detected after the application has started.</para></remarks><summary>Check for newly added hardware and append it to the list of devices.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour"><summary>A general contour is a shape made up of a series of directed line and arc segments followed in order to go from 'start' to 'end' of the contour.  You build the shape by adding segments, giving the geometry and start/end connectivity of each one.</summary><remarks><PARA>A general contour is a shape made up of a series of directed line and arc segments followed in order to go from the start to the end of the contour. You build the shape by adding segments, giving the geometry and start point and end point connectivity of each one.</PARA><PARA>For information about manipulating a general contour interactively, see the discussion of
	<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Search.PMAlign.Walkthrough.ContourShapes">general contour shape models</see>.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.#ctor(Cognex.VisionPro.CogGeneralContour)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfSegmentCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SegmentCount may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfVertexAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VertexAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Length may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfClosed"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Closed may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfHighlightColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfHighlightIndex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightIndex may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfHighlightRequested"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightRequested may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfPenCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PenCount may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfGetPenKey"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPenKey may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfGetPenType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPenType may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContour.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens"><remarks><PARA>Returns the set of <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen">pens</see> used when drawing this contour.</PARA></remarks><summary>Gets the set of custom pens used when drawing this contour.  The pens are owned by this contour object, but are conveniently grouped together inside the returned interface.</summary><value>An interface containing the custom pens for this contour.</value></member><member name="P:Cognex.VisionPro.CogGeneralContour.HighlightIndex"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Get or set the index of the segment to be highlighted. If set to -1, no segment highlighting will occur.</summary><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set HighlightIndex to a value less than -1.</exception><value>The index of the segment to be highlighted.</value></member><member name="P:Cognex.VisionPro.CogGeneralContour.HighlightColor"><summary>Get or set the color of the segment highlight.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The color of the segment highlight. If set to CogColorConstants.None, no segment highlighting will occur.</value><exception cref="T:System.ArgumentException">If you attempt to set HighlightColor to a an unknown value.</exception></member><member name="P:Cognex.VisionPro.CogGeneralContour.HighlightRequested"><summary>If greater than zero, segment highlighting is enabled.</summary><value>The number of outstanding requests for segment highlighting.</value></member><member name="P:Cognex.VisionPro.CogGeneralContour.Closed"><remarks><PARA>Returns True if the contour contains a single, connected, closed chain of segments.
If the contour has no segments, or if the contour is not closed, <see cref="P:Cognex.VisionPro.CogGeneralContour.Closed" /> returns False.
</PARA></remarks><summary>True if the contour contains a single connected chain of segments that is closed, otherwise False.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.Length"><remarks><PARA>Computes the sum of the lengths of all segments of the contour. If there are no segments in the contour, 
<see cref="P:Cognex.VisionPro.CogGeneralContour.Length" /> returns zero.</PARA></remarks><summary>Computes the sum of the lengths of all segments of the contour.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.DirectionAdornment"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not in <see cref="T:Cognex.VisionPro.CogGeneralContourDirectionAdornmentConstants" />.</para></exception><summary>Returns/sets the adornment used to indicate the direction of the contour.</summary><remarks><PARA>Sets or gets the adornment used to indicate the direction of the contour.</PARA><PARA>
For very small segments (less than 16 display pixels), the  direction adornment is not drawn even if enabled.
For small  segments (less than 32 screen pixels), the direction adornment  appears near the midpoint of the segment.
For all other segments, direction adornments appear near the  25% and 75% fraction of the segment.

</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGeneralContourDirectionAdornmentConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.VertexAdornment"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not in <see cref="T:Cognex.VisionPro.CogGeneralContourVertexAdornmentConstants" />.</para></exception><remarks><PARA>Sets or gets the adornment drawn at the vertices of the contour.</PARA><PARA>You can set the color of each vertex adornment by defining a
	<see cref="T:Cognex.VisionPro.CogGeneralContour" /> and then using
	the <see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.StartAdornmentCustomPen" /> and <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.EndAdornmentCustomPen" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGeneralContourVertexAdornmentConstants">None</see></DEFAULT></remarks><summary>Returns/sets the adornment drawn at the vertices of the contour.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.SegmentCount"><remarks><PARA>Returns the number of segments in this contour.</PARA></remarks><summary>Returns the number of segments in this contour.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.GraphicDOFEnable"><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogGeneralContourDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGeneralContour_GraphicDOFEnable--><ul /></event><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.SelectedLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.SelectedColor"><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogGeneralContour.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogGeneralContour.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.LineStyle"><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogGeneralContour.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.Visible"><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContour.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogGeneralContour.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContour.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from this shape to the given point.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.CogGeneralContour.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><returns><PARA>The returned rectangle.</PARA></returns><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogGeneralContour.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogGeneralContour" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></param><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks><returns><PARA>The returned shape model.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeAlreadyAShapeModelException" cgnxHRESULT="E_CogShape_AlreadyAShapeModel"><para>This shape is a
		<see cref="T:Cognex.VisionPro.CogGeneralContour" />, <paramref name="copyShape" /> is False, and this shape already referenced by an existing shape model.
	</para></exception></member><member name="M:Cognex.VisionPro.CogGeneralContour.CreateSegmentIterator(System.Int32)"><param name="initialSegmentIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last segment.</PARA></param><returns><PARA>The iterator.</PARA></returns><remarks><PARA>Creates an <see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> to iterate over the segments in the contour. 
The iterator is positioned at the segment specified by <paramref name="InitialSegment" />. A value of −1 creates an iterator that is positioned just after the last segment.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="initialSegmentIndex" /> &gt; <see cref="P:Cognex.VisionPro.CogGeneralContour.SegmentCount" /> or &lt; 0. (−1 is a special case.)  </para></exception><summary>Creates an iterator to iterate over the segments in the contour. InitialSegmentIndex is the index of the segment pointed at by the iterator on return.  A value of -1 is interpreted as SegmentCount, and will return the 'End' iterator.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.AddLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)"><param name="nextSegment"><PARA>The segment that follows the new segment. If this value is Nothing, the new segment is added at the end of the contour shape.</PARA></param><param name="startFlags"><PARA>Flags that specify how the start  point is treated with respect to the other segments in the contour shape.</PARA></param><param name="startX"><PARA>X-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="endFlags"><PARA>Flags that specify how the end point is treated with respect to the other segments in the contour shape.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the segment is added. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment is added. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Adds a new line segment with the specified start and end points before <paramref name="nextSegment" />. The <paramref name="startFlags" /> and <paramref name="endFlags" /> specify how the end points of the line segment are connected to the rest of the contour shape.
After adding the new line segment, all <see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> positioned at or after <paramref name="nextSegment" /> are updated so that they continue to refer to the same segment as before calling <see cref="M:Cognex.VisionPro.CogGeneralContour.AddLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)" />.</PARA><PARA>
If <paramref name="nextSegment" /> is Nothing, the new segment is added at the end of the contour, so <paramref name="endFlags" /> cannot include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
If <paramref name="nextSegment" /> is the first segment, the new segment is added at the beginning of the contour, so <paramref name="startFlags" /> cannot include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see></PARA><PARA> If <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="startX" /> and <paramref name="startY" /> are ignored.
Similarly, if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="endX" /> and <paramref name="endY" /> are ignored.</PARA><NOTE><see cref="M:Cognex.VisionPro.CogGeneralContour.AddLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)" /> never breaks connections or closure, and it never modifies the coordinates of segments that exist before the call.
In particular, this means that new segments cannot be added between two segments that are already connected.</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeAddWontBreakContourException" cgnxHRESULT="E_CogShape_AddWontBreakContour"><para><paramref name="nextSegment" /> is already connected at <paramref name="Start" />
		or <paramref name="nextSegment" /> is closed at <paramref name="Start" /> and 
		<paramref name="endFlags" /> indicates that the new segment should be connected there.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegConnException" cgnxHRESULT="E_CogShape_BadContourSegConn"><para><paramref name="nextSegment" />  is the first segment
		and <paramref name="startFlags" />  includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>
		 or <paramref name="nextSegment" />  is the end
		segment (or Nothing) and <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startFlags" /> or <paramref name="endFlags" /> include bits that are not defined in 
		<see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>
		Points in the new segment are coincident.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="nextSegment" /> is not Nothing,  not a <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid iterator</see>, and is 		not the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd">end iterator</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourChainClosureException" cgnxHRESULT="E_CogShape_BadContourChainClosure"><para><paramref name="endFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="startFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see> ;
		or <paramref name="startFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="endFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
		This error may also occur if the <paramref name="startFlags" /> and <paramref name="endFlags" /> are set properly but
		closing the chain would create a contour that consists of two line segments.
	</para></exception><summary>Adds a new line segment before NextSegment. If NextSegment is Nothing, the new segment is added at the end of the contour. If StartFlags has the 'connected' bit set, then StartX and StartY are ignored. This also applies to EndFlags.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.AddEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)"><param name="nextSegment"><PARA>The segment that follows the new segment. If this value is Nothing, the new segment is added at the end of the contour shape.</PARA></param><param name="startFlags"><PARA>Flags that specify how the start  point is treated with respect to the other segments in the contour shape.</PARA></param><param name="startX"><PARA>X-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="midpointX"><PARA>X-coordinate of the midpoint of the elliptical arc segment.</PARA></param><param name="midpointY"><PARA>Y-coordinate of the midpoint of the elliptical arc segment.</PARA></param><param name="endFlags"><PARA>Flags that specify how the end point is treated with respect to the other segments in the contour shape.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="ellipseFraction"><PARA>The fraction of the ellipse that passes through the start, mid-, and end points. For slight arcs, using roughly a quarter of the ellipse usually provides good results. This value must be greater than 0 and less than 1</PARA></param><remarks><PARA>Adds a new elliptical arc segment with the specified start and end points before <paramref name="nextSegment" />. The <paramref name="startFlags" /> and <paramref name="endFlags" /> specify how the end points of the elliptical arc segment are connected to the rest of the contour shape. After adding the new elliptical arc segment, all <see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> positioned at or after <paramref name="nextSegment" /> are updated so that they continue to refer to the same segment as before calling <see cref="M:Cognex.VisionPro.CogGeneralContour.AddEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)" />.</PARA><PARA>
If <paramref name="nextSegment" /> is Nothing, the new segment is added at the end of the contour, so <paramref name="endFlags" /> cannot include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
If <paramref name="nextSegment" /> is the first segment, the new segment is added at the beginning of the contour, so <paramref name="startFlags" /> cannot include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see></PARA><PARA> If <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="startX" /> and <paramref name="startY" /> are ignored.
Similarly, if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="endX" /> and <paramref name="endY" /> are ignored.</PARA><NOTE><see cref="M:Cognex.VisionPro.CogGeneralContour.AddEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)" /> never breaks connections or closure, and it never modifies the coordinates of segments that exist before the call.</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeAddWontBreakContourException" cgnxHRESULT="E_CogShape_AddWontBreakContour"><para><paramref name="nextSegment" /> is already connected at <paramref name="Start" />
		or <paramref name="nextSegment" /> is closed at <paramref name="Start" /> and 
		<paramref name="endFlags" /> indicates that the new segment should be connected there.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegConnException" cgnxHRESULT="E_CogShape_BadContourSegConn"><para><paramref name="nextSegment" />  is the first segment
		and <paramref name="startFlags" />  includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>
		 or <paramref name="nextSegment" />  is the end
		segment (or Nothing) and <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startFlags" /> or <paramref name="endFlags" /> include bits that are not defined in 
		<see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="EllipseFraction " /> is &lt; 0 or &gt; 1.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>
		Points in the new segment are coincident.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="nextSegment" /> is not Nothing,  not a <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid iterator</see>, and is 		not the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd">end iterator</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourChainClosureException" cgnxHRESULT="E_CogShape_BadContourChainClosure"><para><paramref name="endFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="startFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see> ;
		or <paramref name="startFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="endFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateEllipticalArcSegException" cgnxHRESULT="E_CogShape_DegenerateEllipticalArcSeg"><para>Points on the elliptical arc segment are colinear.</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment is added. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment is added. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Adds an elliptical arc segment before NextSegment. If NextSegment is Nothing, the new segment is added at the end of the contour. If StartFlags has the 'connected' bit set, then StartX and StartY are ignored. This also applies to EndFlags.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.ReplaceSegmentWithLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)"><param name="replaceSegment"><PARA>The segment to be replaced.</PARA></param><param name="startFlags"><PARA>Flags that specify how the start  point is treated with respect to the other segments in the contour shape.</PARA></param><param name="startX"><PARA>X-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="endFlags"><PARA>Flags that specify how the end point is treated with respect to the other segments in the contour shape.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><summary>Replaces ReplaceSegment with a new line segment. If StartFlags has the 'connected' bit set, then StartX and StartY are ignored. This also applies to EndFlags.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegConnException" cgnxHRESULT="E_CogShape_BadContourSegConn"><para><paramref name="replaceSegment" />  is the first segment
		and <paramref name="startFlags" />  includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>
		 or <paramref name="replaceSegment" />  is the end
		segment and <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startFlags" /> or <paramref name="endFlags" /> include bits that are not defined in 
		<see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>
		Points in the new segment are coincident.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="replaceSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>
		and not the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd">end iterator</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourChainClosureException" cgnxHRESULT="E_CogShape_BadContourChainClosure"><para><paramref name="endFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="startFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see> ;
		or <paramref name="startFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="endFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
		This error may also occur if the <paramref name="startFlags" /> and <paramref name="endFlags" /> are set properly but
		closing the chain would create a contour with only two segments.
	</para></exception><returns><PARA>A new iterator positioned at the new segment.</PARA></returns><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment is replaced. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment is replaced. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Replaces <paramref name="replaceSegment" /> with a new line segment and returns a new iterator positioned at the new segment. </PARA><PARA>If <paramref name="replaceSegment" /> is Nothing or if <paramref name="replaceSegment" />.<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True, <see cref="M:Cognex.VisionPro.CogGeneralContour.ReplaceSegmentWithLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)" /> behaves exactly as if <see cref="M:Cognex.VisionPro.CogGeneralContour.AddLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)" /> were called with <paramref name="NextSegment" /> set to Nothing.</PARA><PARA> If <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="startX" /> and <paramref name="startY" /> are ignored.
Similarly, if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="endX" /> and <paramref name="endY" /> are ignored.</PARA><NOTE><see cref="M:Cognex.VisionPro.CogGeneralContour.ReplaceSegmentWithLineSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double)" />  can break connections and undo closed contour chains. Any 
<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> positioned at the replaced
segment (including <paramref name="replaceSegment" />) become <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
Other iterators are unchanged.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.ReplaceSegmentWithEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)"><param name="replaceSegment"><PARA>The segment to be replaced.</PARA></param><param name="startFlags"><PARA>Flags that specify how the start  point is treated with respect to the other segments in the contour shape.</PARA></param><param name="startX"><PARA>X-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment. Ignored if <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="midpointX"><PARA>X-coordinate of the midpoint of the elliptical arc segment.</PARA></param><param name="midpointY"><PARA>Y-coordinate of the midpoint of the elliptical arc segment.</PARA></param><param name="endFlags"><PARA>Flags that specify how the end point is treated with respect to the other segments in the contour shape.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment. Ignored if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.</PARA></param><param name="ellipseFraction"><PARA>The fraction of the ellipse that passes through the start, mid-, and end points. For slight arcs, using roughly a quarter of the ellipse usually provides good results. This value must be greater than 0 and less than 1</PARA></param><returns><PARA>A new iterator positioned at the new segment.</PARA></returns><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment is replaced. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment is replaced. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegConnException" cgnxHRESULT="E_CogShape_BadContourSegConn"><para><paramref name="replaceSegment" />  is the first segment
		and <paramref name="startFlags" />  includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>
		 or <paramref name="replaceSegment" />  is the end
		segment and <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startFlags" /> or <paramref name="endFlags" /> include bits that are not defined in 
		<see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="EllipseFraction " /> is &lt; 0 or &gt; 1.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>
		Points in the new segment are coincident.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="replaceSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>
		and not the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd">end iterator</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourChainClosureException" cgnxHRESULT="E_CogShape_BadContourChainClosure"><para><paramref name="endFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="startFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see> ;
		or <paramref name="startFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="endFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
		This error may also occur if the <paramref name="startFlags" /> and <paramref name="endFlags" /> are set properly but
		closing the chain would create a contour with only two segments.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateEllipticalArcSegException" cgnxHRESULT="E_CogShape_DegenerateEllipticalArcSeg"><para>Points on the elliptical arc segment are colinear.</para></exception><summary>Replaces ReplaceSegment with a new elliptical arc segment. If StartFlags has the 'connected' bit set, then StartX and StartY are ignored. This also applies to EndFlags.</summary><remarks><PARA>Replaces <paramref name="replaceSegment" /> with a new elliptical arc segment and returns a new iterator positioned at the new segment.</PARA><PARA>If <paramref name="replaceSegment" /> is Nothing or if <paramref name="replaceSegment" />.<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True, <see cref="M:Cognex.VisionPro.CogGeneralContour.ReplaceSegmentWithEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)" /> behaves exactly as if <see cref="M:Cognex.VisionPro.CogGeneralContour.AddEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)" /> were called with <paramref name="NextSegment" /> set to Nothing.</PARA><PARA> If <paramref name="startFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="startX" /> and <paramref name="startY" /> are ignored.
Similarly, if  <paramref name="endFlags" /> includes <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>, then <paramref name="endX" /> and <paramref name="endY" /> are ignored.</PARA><NOTE><see cref="M:Cognex.VisionPro.CogGeneralContour.ReplaceSegmentWithEllipticalArcSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double,System.Double,Cognex.VisionPro.CogGeneralContourVertexConstants,System.Double,System.Double,System.Double)" />  can break connections and undo closed contour chains. Any 
<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> positioned at the replaced
segment (including <paramref name="replaceSegment" />) become <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
Other iterators are unchanged.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.RemoveSegment(Cognex.VisionPro.CogGeneralContourSegmentIterator)"><param name="contourSegment"><PARA>The segment to remove.</PARA></param><remarks><PARA>Removes <paramref name="contourSegment" />, disconnecting any neighboring segments it may be connected to
and returns a new iterator positioned at the following segment.</PARA><NOTE>Any 
<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> positioned at <paramref name="contourSegment" /> become <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
Other iterators are unchanged.</NOTE></remarks><summary>Remove the given ContourSegment, disconnecting any neighboring segments it may be connected to.  Returns a new iterator positioned at the segment immediately following the removed one (ContourSegment).</summary><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment is removed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsRemoved"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>EndIndex</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment is removed. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="contourSegment" /> is Nothing.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="contourSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
	</para></exception><returns><PARA>A new iterator positioned after <paramref name="contourSegment" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogGeneralContour.RemoveSegments(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourSegmentIterator)"><param name="startSegment"><PARA>The first segment to remove.</PARA></param><param name="endSegment"><PARA>The ending segment. This segment is not removed. If this value is Nothing, all segments from <paramref name="startSegment" /> to the end are removed.</PARA></param><remarks><PARA>Removes all segments from <paramref name="startSegment" /> up to, but not including <paramref name="endSegment" />.
<see cref="M:Cognex.VisionPro.CogGeneralContour.RemoveSegments(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourSegmentIterator)" /> may disconnect the contour at <paramref name="startSegment" />'s or <paramref name="endSegment" />'s start point.
If <paramref name="endSegment" /> is Nothing, all of the segments from <paramref name="startSegment" /> to the end of the contour shape are removed.</PARA><NOTE>Any 
<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentIterator" /> positioned at <paramref name="startSegment" />  through the segment before <paramref name="endSegment" /> become <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
Other iterators are unchanged.</NOTE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startSegment" /> is Nothing.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="startSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegmentSetException" cgnxHRESULT="E_CogShape_BadContourSegmentSet"><para><paramref name="startSegment" /> is positioned after <paramref name="endSegment" />.
	</para></exception><summary>Removes all segments from StartSegment up to, but not including EndSegment, possibly disconnecting at StartSegment's start point, and/or EndSegment's start point. If EndSegment is Nothing, segments are removed from StartSegment to the end.</summary><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segments are removed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsRemoved"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segments are removed. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="M:Cognex.VisionPro.CogGeneralContour.CreateContourFromSegments(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogCopyShapeConstants)"><param name="startSegment"><PARA>The first segment to copy.</PARA></param><param name="endSegment"><PARA>The ending segment. This segment is not copied.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the contour to copy to the new contour.</PARA></param><remarks><PARA>Returns a new contour, copying segments from <paramref name="startSegment" /> up to, but not including, <paramref name="endSegment" />, into it. If <paramref name="endSegment" /> is Nothing, segments are copied from <paramref name="startSegment" /> to the end of this contour.</PARA></remarks><returns><PARA>The new contour.</PARA></returns><summary>Returns a new contour, copying segments from StartSegment up to, but not including, EndSegment, into it.  If EndSegment is Nothing, segments are copied from StartSegment to the end of this contour.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startSegment" /> is Nothing.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="startSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
		<paramref name="endSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see> and not
		the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd">end segment</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegmentSetException" cgnxHRESULT="E_CogShape_BadContourSegmentSet"><para><paramref name="startSegment" /> is positioned after <paramref name="endSegment" />.
	</para></exception></member><member name="M:Cognex.VisionPro.CogGeneralContour.CreateContourFromConnectedSegments(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogCopyShapeConstants)"><param name="contourSegment"><PARA>A segment contained in the chain of segments to copy.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the contour to copy to the new contour.</PARA></param><summary>Returns a new contour, copying all segments in the connected segment chain that includes ContourSegment, into it.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="StartSegment" /> is Nothing.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="contourSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see>.
	</para></exception><remarks><PARA>Returns a new contour, copying all segments in the connected segment chain that includes <paramref name="contourSegment" />, into it.</PARA></remarks><returns><PARA>The new contour.</PARA></returns></member><member name="M:Cognex.VisionPro.CogGeneralContour.MergeContours(Cognex.VisionPro.CogGeneralContourSegmentIterator,Cognex.VisionPro.CogGeneralContour,Cognex.VisionPro.CogGeneralContourVertexConstants,Cognex.VisionPro.CogGeneralContourVertexConstants,Cognex.VisionPro.CogCopyShapeConstants)"><param name="nextSegment"><PARA>The segment before which <paramref name="otherContour" /> is merged into this contour.</PARA></param><param name="otherContour"><PARA>The contour to merge into this contour.</PARA></param><param name="startFlags"><PARA>Flags that specify how the <paramref name="otherContour" />'s start point is treated with respect to the segments in this contour.</PARA></param><param name="endFlags"><PARA>Flags that specify how the <paramref name="otherContour" />'s end point is treated with respect to the segments in this contour.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the contour to copy to the new contour.</PARA></param><remarks><PARA>Returns a new contour that is the result of merging <paramref name="otherContour" /> into this contour before <paramref name="nextSegment" />.  If <paramref name="nextSegment" /> is Nothing, the segments from <paramref name="otherContour" /> are copied onto the end of this contour.

<paramref name="startFlags" /> and <paramref name="endFlags" /> control how <paramref name="otherContour" />'s start and end segments connect to this contour's segments in the merged contour.</PARA></remarks><summary>Returns a new contour that is the result of merging OtherContour into this before NextSegment.  StartFlags and EndFlags control how OtherContour's start and end segments connect to this contour's segments in the merged contour.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="otherContour" /> is Nothing.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para><paramref name="nextSegment" /> is <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">invalid</see> and not
		the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd">end segment</see>.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="startFlags" /> or <paramref name="endFlags" /> include bits that are not defined in 
		<see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourChainClosureException" cgnxHRESULT="E_CogShape_BadContourChainClosure"><para><paramref name="endFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="startFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see> ;
		or <paramref name="startFlags" /> include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Closed</see> but
		<paramref name="endFlags" /> do not include <see cref="T:Cognex.VisionPro.CogGeneralContourVertexConstants">Connected</see>.
		This error may also occur if the <paramref name="startFlags" /> and <paramref name="endFlags" /> are set properly but
		closing the chain would create a contour with only two segments.
	</para></exception><returns><PARA>The new contour.</PARA></returns></member><member name="M:Cognex.VisionPro.CogGeneralContour.PathLengthCenterOfMass(System.Double@,System.Double@)"><param name="x"><PARA>X-coordinate of the center of mass.</PARA></param><param name="y"><PARA>Y-coordinate of the center of mass.</PARA></param><remarks><PARA>Computes the center of mass of the contour as if the mass were uniformly distributed along the segments.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateContourException" cgnxHRESULT="E_CogShape_DegenerateContour"><para>The contour contains no segments.</para></exception><summary>Computes the center of mass of the contour as if the mass were uniformly distributed along the segments.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.NearestSegment(System.Double,System.Double)"><param name="x"><PARA>X-coordinate of the specified point.</PARA></param><param name="y"><PARA>Y-coordinate of the specified point.</PARA></param><remarks><PARA>Returns the segment closest to the point (<paramref name="x" />, <paramref name="y" />). The point is specified in the <see cref="P:Cognex.VisionPro.CogGeneralContour.SelectedSpaceName">selected space</see> of the contour.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateContourException" cgnxHRESULT="E_CogShape_DegenerateContour"><para>The contour contains no segments.</para></exception><summary>Returns the segment closest to the given point.</summary><returns><PARA>The returned nearest segment.</PARA></returns></member><member name="M:Cognex.VisionPro.CogGeneralContour.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGeneralContour" /> object.</PARA></returns><summary>Creates and returns a new general contour, copying the specified parameters of this one.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGeneralContour" /> that copies the specified parameters from this <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Creates a new CogGeneralContour (copying the specified parameters) by mapping this one through the given linear transform.</summary><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Create a new contour that is the result of mapping this contour using a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContour.HighlightRequest"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires to indicate that HighlightRequested has changed.</event><summary>Enables segment highlighting by incrementing HighlightRequested.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContour.HighlightRelinquish"><summary>Decrement the HighlightRequested reference count, unless it is already zero. If HighlightRequested reaches zero, segment highlighting is disabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires to indicate that HighlightRequested has changed.</event></member><member name="E:Cognex.VisionPro.CogGeneralContour.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogGeneralContour.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogGeneralContour.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="E:Cognex.VisionPro.CogGeneralContour.SegmentsRemoved"><summary>Occurs after one or more segments are deleted from the general contour.</summary></member><member name="E:Cognex.VisionPro.CogGeneralContour.SegmentAdded"><summary>Occurs after a segment is added to the general contour.</summary></member><member name="E:Cognex.VisionPro.CogGeneralContour.SegmentsChanged"><summary>Occurs after a geometric property of one or more segments is changed in the general contour.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContourSegmentIterator"><remarks><PARA>The general contour segment iterator iterates all the segments in a CogGeneralContour, and allows reading and writing of the segment's common properties.</PARA></remarks><summary>A general contour segment iterator object provides access to all the segment data in the contour.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator"><remarks><PARA>Gets the iterator interface that provides full access to elliptical arc segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" />
		does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, such as <see cref="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)" />,
	you will get an error.
</NOTE></remarks><summary>Gets the full set of elliptical arc segment parameters for this iterator.  The parameters are owned by this iterator object, but are conveniently grouped together inside the returned interface.</summary><value>An interface containing all the elliptical arc segment parameters for this contour.</value></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator"><value>An interface containing all the line segment parameters for this contour.</value><remarks><PARA>Gets the iterator interface that provides full access to line segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />
		 does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, 	you will get an error.
</NOTE></remarks><summary>Gets the full set of line segment parameters for this iterator.  The parameters are owned by this iterator object, but are conveniently grouped together inside the returned interface.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType"><summary>Returns the type of this segment of the contour. The segment type can be used to choose the most specific iterator to extract all information about the segment.</summary><remarks><PARA>Returns the type of this segment of the contour.
You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> to choose the most specific iterator 
(<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" /> 
or
<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />)
to extract all information about the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid"><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA></remarks><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd"><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst"><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error.</PARA></remarks><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Attributes"><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid" />.</PARA></remarks><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position"><remarks><PARA>Returns the position of the iterator in the container.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to save an iterator's position and then use <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPosition(System.Int32)" /> to move back to it. The position is not the same as the index of the segment.</PARA></remarks><summary>Returns the position of the iterator in the container.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container"><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.EndAngle"><summary>Computes the angle (in radians) of the tangent to this segment's shape at the end of the segment.</summary><remarks><PARA>Computes the angle of the tangent to this segment's shape at the end of the segment.
Angles are given in radians and normalized to the range −π to π.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.StartAngle"><remarks><PARA>Computes the angle of the tangent to this segment's shape at the start of the segment.</PARA></remarks><summary>Computes the angle (in radians) of the tangent to this segment's shape at the start of the segment.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Length"><summary>Computes the length of this segment of the contour.</summary><remarks><PARA>Computes the length of this segment of the contour.</PARA><NOTE>For segments, such as elliptical arcs, the length computation may require additional time.</NOTE></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.EndAdornmentCustomPen"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the end point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><summary>Returns/sets the custom pen used to draw the adornment at the end point of the segment.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.EndFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at end point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at end point of the segment.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.EndY"><remarks><PARA>Sets or gets the y-coordinate of the end point of the segment.</PARA></remarks><summary>Returns/sets the Y coordinate of the end point of the segment.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.EndX"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the x-coordinate of the end point of the segment.</PARA></remarks><summary>Returns/sets the X coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.CustomPen"><remarks><PARA>Sets or gets the key that refers to the
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens">custom pen</see>
		properties used for drawing this segment.
		Zero means that the segment uses the pen properties of the contour.</PARA><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Returns/sets the key that refers to the custom pen properties used for drawing this segment.  A key of 0 (the default) causes the segment to use the pen properties of the contour.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.StartFlags"><summary>Returns the flags describing the contour's behavior at start point of the segment.</summary><remarks><PARA>Returns the flags that describe  the contour's behavior at start point of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.StartAdornmentCustomPen"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Returns/sets the custom pen used to draw the adornment at the start point of the segment.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the start point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.StartY"><remarks><PARA>Sets or gets the y-coordinate of the start point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the Y coordinate of the start point of the segment.</summary></member><member name="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.StartX"><remarks><PARA>Sets or gets the x-coordinate of the start point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the X coordinate of the start point of the segment.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> to avoid errors.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks><returns><PARA>The new iterator.</PARA></returns><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection"><remarks><PARA>Interface of a collection of interactive graphics.</PARA></remarks><summary>Collection of interactive graphics.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.#ctor(Cognex.VisionPro.CogGraphicInteractiveCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogGraphicInteractiveCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicInteractiveCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicInteractiveCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogGraphicInteractiveCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.CogGraphicInteractiveCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogGraphicInteractiveCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.IndexOf(Cognex.VisionPro.ICogGraphicInteractive)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.Insert(Cognex.VisionPro.ICogGraphicInteractive,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.Add(Cognex.VisionPro.ICogGraphicInteractive)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.CogGraphicInteractiveCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.CogGraphicInteractiveCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicLabel"><summary>Class that represents a graphical text label.</summary><remarks><PARA>Interface describing non-scaling Text Label graphic.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogGraphicLabel.#ctor(Cognex.VisionPro.CogGraphicLabel)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by X may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Y may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Text may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfAlignment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Alignment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfFont"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Font may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfSelectedBackgroundColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedBackgroundColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfDragBackgroundColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragBackgroundColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfBackgroundColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by BackgroundColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfOffset"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Offset may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfOffsetSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfOffsetAngle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetAngle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfOffsetAngleSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetAngleSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabel.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.OffsetAngleSpaceName"><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicLabel_OffsetAngleSpaceName--><ul /></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> in which this shape's <see cref="P:Cognex.VisionPro.CogGraphicLabel.OffsetAngle" /> property is to be interpreted.</PARA><DEFAULT><see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">*</see></DEFAULT></remarks><summary>Coordinate space in which this shape's OffsetAngle property is to be interpreted.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.OffsetAngle"><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The angle (in radians) as measured in OffsetAngleSpaceName coordinates to use to adjust the label position.</summary><remarks><PARA>The angle (in radians) as measured in <see cref="P:Cognex.VisionPro.CogGraphicLabel.OffsetAngleSpaceName" /> coordinates to use to adjust the label position.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGraphicLabel.OffsetSpaceName"><remarks><PARA><see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> in which this shape's <see cref="P:Cognex.VisionPro.CogGraphicLabel.Offset" /> property is to be interpreted.</PARA><DEFAULT><see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">*</see></DEFAULT></remarks><summary>Coordinate space in which this shape's Offset property is to be interpreted.</summary><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicLabel_OffsetSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Offset"><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>The distance from X,Y, as measured in <see cref="P:Cognex.VisionPro.CogGraphicLabel.OffsetSpaceName" /> coordinates, to use to adjust the label position.</PARA><DEFAULT>0</DEFAULT></remarks><summary>The distance from X,Y, as measured in OffsetSpaceName coordinates,to use to adjust the label position.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.BackgroundColor"><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicLabel_BackgroundColor--><ul /></event><remarks><PARA>Sets or gets the background <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> for text. Use <see cref="T:Cognex.VisionPro.CogColorConstants">None</see> for transparent.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">None</see></DEFAULT></remarks><summary>Controls the background color for text. Use cogColorNone for transparent.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.DragBackgroundColor"><remarks><PARA>Controls the background color for text when the label is being dragged. Use <see cref="T:Cognex.VisionPro.CogColorConstants">None</see> for transparent.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicLabel_DragBackgroundColor--><ul /></event><summary>Controls the background color for text when the label is being dragged. Use cogColorNone for transparent.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.SelectedBackgroundColor"><remarks><PARA>Controls the background color for text when the label is selected. Use <see cref="T:Cognex.VisionPro.CogColorConstants">None</see> for transparent.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicLabel_SelectedBackgroundColor--><ul /></event><summary>Controls the background color for text when the label is selected. Use cogColorNone for transparent.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Alignment"><summary>Controls how the text is aligned with respect to the X,Y position.</summary><remarks><PARA>Controls how the text is <see cref="T:Cognex.VisionPro.CogGraphicLabelAlignmentConstants">aligned</see> with respect to the X, Y position.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLabelAlignmentConstants">BaselineCenter</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Rotation"><summary>The angle (in radians, from the x-axis) of the text label.</summary><remarks><PARA>The angle (in radians, from the x-axis) of the text label.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Text"><summary>Text for this label.</summary><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Text for this label.</PARA><DEFAULT>Text</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Y"><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Y coordinate of the text.</summary><remarks><PARA>The y-coordinate of the text.</PARA><DEFAULT>10</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogGraphicLabel.X"><remarks><PARA>The x-coordinate of the text.</PARA><DEFAULT>10</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>X coordinate of the text.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicLabelDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogGraphicLabel" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.GraphicDOFEnableBase"><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGraphicLabel.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.SelectedLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogGraphicLabel.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Selected"><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.TipText"><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Interactive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.LineStyle"><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Color"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogGraphicLabel.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogGraphicLabel.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.CogGraphicLabel.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.SetXYText(System.Double,System.Double,System.String)"><param name="x"><PARA>The x-coordinate of the label.</PARA></param><param name="y"><PARA>The y-coordinate of the label.</PARA></param><param name="text"><PARA>The text of the label.</PARA></param><remarks><PARA>Initialize this graphic label from the X, Y, and Text.</PARA></remarks><summary>Initialize this graphic label from the X, Y, and Text.</summary><event cref="E:Cognex.VisionPro.CogGraphicLabel.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="M:Cognex.VisionPro.CogGraphicLabel.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogGraphicLabel" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogGraphicLabel" />.</PARA></returns><remarks><PARA>Map through a linear transform.</PARA></remarks><summary>Map through a linear transform.</summary></member><member name="M:Cognex.VisionPro.CogGraphicLabel.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphicLabel" /> object.</PARA></returns><summary>Create a new shape that copies specified parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphicLabel" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphicLabel" />.</PARA></remarks></member><member name="E:Cognex.VisionPro.CogGraphicLabel.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogGraphicLabel.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogGraphicLabel.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage24PlanarColor"><summary>Object that describes three coincident rectangular arrays, or planes, of 8-bit pixels.</summary><remarks><PARA>Interface that describes three coincident rectangular arrays, or planes, of 8-bit pixels.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.#ctor(System.Drawing.Bitmap)"><param name="bitmap">The Windows bitmap from which to copy pixel values.</param><summary>Constructs a CogImage24PlanarColor, copying the pixels from the given bitmap.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.#ctor(System.Int32,System.Int32)"><param name="width">The width of the new image.</param><param name="height">The height of the new image.</param><summary>Constructs a CogImage24PlanarColor, allocating image memory with the given width and height.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.#ctor(Cognex.VisionPro.CogImage24PlanarColor)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogImage24PlanarColor.SfColorSpace"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ColorSpace may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage24PlanarColor.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage24PlanarColor.SfCoordinateSpaceTree"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoordinateSpaceTree may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage24PlanarColor.SfPixelFromRootTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PixelFromRootTransform may have changed.</summary></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace"><remarks><PARA>This image's 
	<see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">color space</see>. Note that changing this value will not affect any pixel value.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">RGB</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogImage24PlanarColor.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value of this property changes. 
	</para><para>The following state flag may be affected:</para><ul><li><see cref="F:Cognex.VisionPro.CogImage24PlanarColor.SfColorSpace" /></li></ul></event><summary>Color space. Note that changing this value will NOT affect any pixel value.</summary></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.PixelFromRootTransform"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The transform is NULL.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the transform changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_PixelFromRootTransform--><ul /></event><summary>Transformation that maps points into pixel space ("#") from the root space ("@").</summary><remarks><PARA>Returns the transformation that maps points into pixel space ("#") from the root space ("@").</PARA></remarks></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.CoordinateSpaceTree"><remarks><PARA>Returns or sets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> for a particular  image. You can use this tree to create a transform that maps points between coordinate spaces.</PARA><PARA>To ensure that all acquired images have the same coordinate space tree, use <see cref="T:Cognex.VisionPro.CogAcqFifo" />.<see cref="P:Cognex.VisionPro.ICogAcqFifo.CoordinateSpaceTree" /> instead.	</PARA></remarks><summary>Returns/sets the tree of all named coordinate spaces for this image.  The tree provides advanced functions for managing coordinate spaces.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the coordinate space tree changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_CoordinateSpaceTree--><ul /></event></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.SelectedSpaceName"><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="val" /> is not a valid space name.</para></exception><summary>Returns/sets the name of the coordinate space to be used by tools which process this image.</summary><remarks><PARA>Returns or sets the name of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> to be used by tools that process this image. 
VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.Height"><remarks><PARA>Returns the height of the image.</PARA></remarks><summary>Height of the image.</summary></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.Width"><remarks><PARA>Returns the width of the image.</PARA></remarks><summary>Width of the image.</summary></member><member name="P:Cognex.VisionPro.CogImage24PlanarColor.Allocated"><remarks><PARA>Returns True if pixel data is associated with this image.</PARA></remarks><summary>Whether there is pixel data associated with this image.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.Allocate(System.Int32,System.Int32)"><param name="width"><PARA>The width of the image in pixels.</PARA></param><param name="height"><PARA>The height of the image in pixels.</PARA></param><summary>Initialize the image with (undefined) pixel data of the given width and height. This method may not be called more than once.</summary><remarks><PARA>Initialize the image of the given height and width with undefined pixel data. You can call <see cref="M:Cognex.VisionPro.ICogImage.Allocate(System.Int32,System.Int32)" /> only once for an image. The allocated pixel space may not be resized.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocateSizeException" cgnxHRESULT="E_CogImage_AllocateSize"><para>The image is already allocated to a different size.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> &lt;= 0.</para></exception></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.CopyBase(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"><PARA>The <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">copy mode</see>.</PARA></param><remarks><PARA>Creates a copy of this image in a new image. Pixels may be shared between images by specifying 
	<see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">SharePixels</see> as the copy mode.</PARA></remarks><returns><PARA>The new image.</PARA></returns><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.GetTransform(System.String,System.String)"><param name="toSpaceName"><PARA>The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><param name="fromSpaceName"><PARA>The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><summary>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the SelectedSpaceName of this image.</summary><remarks><PARA>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></remarks><returns><PARA>The transform that maps a point from the <paramref name="fromSpaceName" /> to the <paramref name="toSpaceName" />.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>The coordinate space tree is missing.</para></exception><PARA>Also see the errors for <DISPLAY IFACE="ICogCoordinateSpaceTree" />.<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.GetTransform(System.String,System.String)" />.</PARA></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.Get24PlanarColorPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@)"><param name="dataMode"><PARA>Specifies whether the pixel data are read, write, or read/write. </PARA></param><param name="x"><PARA>The x-coordinate of the portion of the image to get.</PARA></param><param name="y"><PARA>The y-coordinate of the portion of the image to get.</PARA></param><param name="width"><PARA>The width of the image to get.</PARA></param><param name="height"><PARA>The height of the image to get.</PARA></param><param name="pixelMemory0"><PARA>An object that represents the pixel data for the first plane.</PARA></param><param name="pixelMemory1"><PARA>An object that represents the pixel data for the second plane.</PARA></param><param name="pixelMemory2"><PARA>An object that represents the pixel data for the third plane.</PARA></param><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="pixelMemory0" />,
		<paramref name="pixelMemory1" />, or
	<paramref name="pixelMemory2" /> is NULL. (C++ only)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException" cgnxHRESULT="E_CogImage_BadCoord"><para><paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	describe a region  that is not entirely within the image.</para></exception><summary>Get objects that can be used to directly access each plane of pixel memory. The caller MUST call Dispose on each of these objects when finished with them.</summary><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object for each plane of this image. 
	The returned objects can be used to access pixel memory directly.
	You <BOLD>must</BOLD> call each object's
	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />
	method  when you are finished with it.</PARA><PARA>The <paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	parameters let you specify the portion of the image to get. To access the pixel memory for the entire image, specify zero for
	these parameters.
</PARA><PARA>If you request <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">read/write</see> or <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">write-only</see>
	access to the pixel memory when you call <see cref="M:Cognex.VisionPro.CogImage24PlanarColor.Get24PlanarColorPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@)" />,
	the pixel memory may be copied internally.
	Any changes that you make to the pixel may not be written back to the image until
	you call 	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />.
	Your application should assume that no changes
	to the image take place until then.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.GetPixel(System.Int32,System.Int32,System.Byte@,System.Byte@,System.Byte@)"><param name="x"><PARA>The pixel's x-coordinate.</PARA></param><param name="y"><PARA>The pixel's y-coordinate.</PARA></param><param name="valPlane0"><PARA>The pixel value in the first plane.</PARA></param><param name="valPlane1"><PARA>The pixel value in the second plane.</PARA></param><param name="valPlane2"><PARA>The pixel value in the third plane.</PARA></param><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="valPlane0" />, 
			<paramref name="valPlane1" />, or 
			<paramref name="valPlane2" /> is NULL. (C++ only)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="M:Cognex.VisionPro.CogImage24PlanarColor.Allocate(System.Int32,System.Int32)" /> has not yet been called.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException" cgnxHRESULT="E_CogImage_BadCoord"><para><paramref name="x" /> or <paramref name="y" /> is less than 0, 
   	   <paramref name="x" /> is greater than or equal to <paramref name="Width" />, or 
 	    <paramref name="y" /> is greater than or equal to <paramref name="Height" />.
     </para></exception><summary>Read the pixel values at the given location.</summary><remarks><PARA>Read the pixel values at the given location. 
	The <see cref="T:Cognex.VisionPro.CogImagePlaneConstants" /> enumeration provides the plane identities in the 
	supported color spaces.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.SetPixel(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)"><param name="x"><PARA>The pixel's x-coordinate.</PARA></param><param name="y"><PARA>The pixel's y-coordinate.</PARA></param><param name="valuePlane0"><PARA>The pixel value for the first plane.</PARA></param><param name="valuePlane1"><PARA>The pixel value for the second plane.</PARA></param><param name="valuePlane2"><PARA>The pixel value for the third plane.</PARA></param><remarks><PARA>Write the pixel values at the given location. 
	The <see cref="T:Cognex.VisionPro.CogImagePlaneConstants" /> enumeration provides the plane identities in the 
	supported color spaces.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="M:Cognex.VisionPro.CogImage24PlanarColor.Allocate(System.Int32,System.Int32)" /> has not yet been called.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException" cgnxHRESULT="E_CogImage_BadCoord"><para><paramref name="x" /> or <paramref name="y" /> is less than 0, 
   	   <paramref name="x" /> is greater than or equal to <paramref name="Width" />, or 
 	    <paramref name="y" /> is greater than or equal to <paramref name="Height" />.
     </para></exception><summary>Write the pixel values at the given location.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.Copy(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"><PARA>The <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">copy mode</see>.</PARA></param><returns><PARA>The new image.</PARA></returns><remarks><PARA>Create a copy of this image in a new image. Pixels may be shared between images by specifying <paramref name="copyMode" /> as <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">SharePixels</see>.</PARA></remarks><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.SetRoots(Cognex.VisionPro.ICogImage8Root,Cognex.VisionPro.ICogImage8Root,Cognex.VisionPro.ICogImage8Root)"><param name="root0"><PARA>The first root.</PARA></param><param name="root1"><PARA>The second root.</PARA></param><param name="root2"><PARA>The third root.</PARA></param><summary>Set all three root image objects containing the raw pixel data.</summary><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para>One or two of the supplied arguments are NULL. (C++ only)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The widths or heights of the supplied roots are not the same.</para></exception><remarks><PARA>Set all three root image objects containing the raw pixel data. You can specify null for all three root objects 
	to disconnect this image from its pixel storage.</PARA><NOTE>This function is intended for Cognex internal use.</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.GetRoots(Cognex.VisionPro.ICogImage8Root@,Cognex.VisionPro.ICogImage8Root@,Cognex.VisionPro.ICogImage8Root@)"><param name="root0"><PARA>The first root.</PARA></param><param name="root1"><PARA>The second root.</PARA></param><param name="root2"><PARA>The third root.</PARA></param><summary>Gets all three root image objects containing the raw pixel data.</summary><remarks><PARA>Gets all three root image objects containing the raw pixel data.</PARA><NOTE>This function is intended for Cognex internal use. Use <see cref="M:Cognex.VisionPro.CogImage24PlanarColor.GetPlane(Cognex.VisionPro.CogImagePlaneConstants)" /> to obtain an individual 
	plane image.</NOTE></remarks><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para>Any of the supplied arguments are NULL. (C++ only)</para></exception></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.GetPlane(Cognex.VisionPro.CogImagePlaneConstants)"><param name="whichPlane"><PARA>A <see cref="T:Cognex.VisionPro.CogImagePlaneConstants" /> specifying which plane to get.</PARA></param><remarks><PARA>Convenience method that returns a <see cref="T:Cognex.VisionPro.CogImage8Grey" /> 
	corresponding to the specified plane of this image.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="whichPlane" /> is not a member of <see cref="T:Cognex.VisionPro.CogImagePlaneConstants" />.</para></exception><summary>Convenience method that returns a CogImage8Grey corresponding to the specified plane of this image.</summary><returns><PARA>The new image.</PARA></returns></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.ToBitmap"><summary>Creates a 24-bit RGB Windows bitmap from this image.</summary><returns>The 24-bit RGB Windows bitmap.</returns></member><member name="M:Cognex.VisionPro.CogImage24PlanarColor.ScaleImage(System.Int32,System.Int32)"><param name="width">Width in pixels of the desired output image.</param><param name="height">Height in pixels of the desired output image.</param><returns>The scaled image.</returns><summary>Creates a scaled version of this image. The dimensions of the returned image (in pixels) are specified by the width and height arguments. The scaling is performed using bilinear interpolation.</summary></member><member name="E:Cognex.VisionPro.CogImage24PlanarColor.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage8Grey"><summary>Object that describes a rectangular array of 8 bit grey scale pixels.</summary><remarks><PARA>Interface that describes a rectangular array of 8 bit grey scale pixels.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.#ctor(System.Drawing.Bitmap)"><param name="bitmap">The Windows bitmap from which to copy or compute pixel values.</param><summary>Constructs a CogImage8Grey, copying or computing the pixels from the given bitmap.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.#ctor(System.Int32,System.Int32)"><param name="width">The width of the new image.</param><param name="height">The height of the new image.</param><summary>Constructs a CogImage8Grey, allocating image memory with the given width and height.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.#ctor(Cognex.VisionPro.CogImage8Grey)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogImage8Grey.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage8Grey.SfCoordinateSpaceTree"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoordinateSpaceTree may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage8Grey.SfPixelFromRootTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PixelFromRootTransform may have changed.</summary></member><member name="P:Cognex.VisionPro.CogImage8Grey.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogImage8Grey.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogImage8Grey.PixelFromRootTransform"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the transform changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_PixelFromRootTransform--><ul /></event><remarks><PARA>Returns the transformation that maps points into pixel space ("#") from the root space ("@").</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The transform is NULL.</para></exception><summary>Transformation that maps points into pixel space ("#") from the root space ("@").</summary></member><member name="P:Cognex.VisionPro.CogImage8Grey.CoordinateSpaceTree"><remarks><PARA>Returns or sets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> for a particular  image. You can use this tree to create a transform that maps points between coordinate spaces.</PARA><PARA>To ensure that all acquired images have the same coordinate space tree, use <see cref="T:Cognex.VisionPro.CogAcqFifo" />.<see cref="P:Cognex.VisionPro.ICogAcqFifo.CoordinateSpaceTree" /> instead.	</PARA></remarks><summary>Returns/sets the tree of all named coordinate spaces for this image.  The tree provides advanced functions for managing coordinate spaces.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the coordinate space tree changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_CoordinateSpaceTree--><ul /></event></member><member name="P:Cognex.VisionPro.CogImage8Grey.SelectedSpaceName"><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="val" /> is not a valid space name.</para></exception><remarks><PARA>Returns or sets the name of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> to be used by tools that process this image. 
VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_SelectedSpaceName--><ul /></event><summary>Returns/sets the name of the coordinate space to be used by tools which process this image.</summary></member><member name="P:Cognex.VisionPro.CogImage8Grey.Height"><remarks><PARA>Returns the height of the image.</PARA></remarks><summary>Height of the image.</summary></member><member name="P:Cognex.VisionPro.CogImage8Grey.Width"><summary>Width of the image.</summary><remarks><PARA>Returns the width of the image.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogImage8Grey.Allocated"><summary>Whether there is pixel data associated with this image.</summary><remarks><PARA>Returns True if pixel data is associated with this image.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.Allocate(System.Int32,System.Int32)"><param name="width"><PARA>The width of the image in pixels.</PARA></param><param name="height"><PARA>The height of the image in pixels.</PARA></param><remarks><PARA>Initialize the image of the given height and width with undefined pixel data. You can call <see cref="M:Cognex.VisionPro.ICogImage.Allocate(System.Int32,System.Int32)" /> only once for an image. The allocated pixel space may not be resized.</PARA></remarks><summary>Initialize the image with (undefined) pixel data of the given width and height. This method may not be called more than once.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocateSizeException" cgnxHRESULT="E_CogImage_AllocateSize"><para>The image is already allocated to a different size.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> &lt;= 0.</para></exception></member><member name="M:Cognex.VisionPro.CogImage8Grey.CopyBase(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"><PARA>The <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">copy mode</see>.</PARA></param><returns><PARA>The new image.</PARA></returns><remarks><PARA>Creates a copy of this image in a new image. Pixels may be shared between images by specifying 
	<see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">SharePixels</see> as the copy mode.</PARA></remarks><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.GetTransform(System.String,System.String)"><param name="toSpaceName"><PARA>The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><param name="fromSpaceName"><PARA>The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>The coordinate space tree is missing.</para></exception><PARA>Also see the errors for <DISPLAY IFACE="ICogCoordinateSpaceTree" />.<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.GetTransform(System.String,System.String)" />.</PARA><remarks><PARA>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></remarks><summary>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the SelectedSpaceName of this image.</summary><returns><PARA>The transform that maps a point from the <paramref name="fromSpaceName" /> to the <paramref name="toSpaceName" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="dataMode"><PARA>Specifies whether the pixel data are read, write, or read/write. </PARA></param><param name="x"><PARA>The x-coordinate of the portion of the image to get.</PARA></param><param name="y"><PARA>The y-coordinate of the portion of the image to get.</PARA></param><param name="width"><PARA>The width of the image to get.</PARA></param><param name="height"><PARA>The height of the image to get.</PARA></param><summary>Gets an object that can be used to directly access pixel memory. The caller MUST call Dispose on this object when finished with it.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException" cgnxHRESULT="E_CogImage_BadCoord"><para><paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	describe a region  that is not entirely within the image.</para></exception><returns><PARA>An object that represents the pixel data.</PARA></returns><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object that can be used to access pixel memory directly.
	You <BOLD>must</BOLD> call this object's
	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />
	method  when you are finished with it.</PARA><PARA>The <paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	parameters let you specify the portion of the image to get. To access the pixel memory for the entire image, specify zero for
	these parameters.
</PARA><PARA>If you request <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">read/write</see> or <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">write-only</see>
	access to the pixel memory when you call <see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" />,
	the pixel memory may be copied internally.
	Any changes that you make to the pixel may not be written back to the image until
	you call 	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />.
	Your application should assume that no changes
	to the image take place until then.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.GetPixel(System.Int32,System.Int32)"><param name="x"><PARA>The pixel's x location.</PARA></param><param name="y"><PARA>The pixel's y location.</PARA></param><summary>Pixel value at given location.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="M:Cognex.VisionPro.CogImage8Grey.Allocate(System.Int32,System.Int32)" /> has not yet been called.</para></exception><remarks><PARA>Returns the pixel value at given location. 
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.SetPixel(System.Int32,System.Int32,System.Byte)"><param name="x"><PARA>The pixel's x location.</PARA></param><param name="y"><PARA>The pixel's y location.</PARA></param><param name="value"></param><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="M:Cognex.VisionPro.CogImage8Grey.Allocate(System.Int32,System.Int32)" /> has not yet been called.</para></exception><summary>Pixel value at given location.</summary><remarks><PARA>Returns the pixel value at given location. 
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.Copy"><returns><PARA>The new image.</PARA></returns><summary>Create a copy of this image in a new image. While the pixels will be copied, the CoordinateSpaceTree and PixelFromRootTransform will be shared.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.Copy(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"><PARA>The <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">copy mode</see>.</PARA></param><returns><PARA>The new image.</PARA></returns><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary><remarks><PARA>Creates a copy of this image in a new image. Pixels may be shared between images by specifying <paramref name="copyMode" /> as <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">SharePixels</see>.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.SetRoot(Cognex.VisionPro.ICogImage8Root)"><param name="root"><PARA>The image data.</PARA></param><summary>Sets the root image object that contains the raw pixel data.</summary><remarks><PARA>Sets the root image object that contains the raw pixel data.</PARA><PARA>It is legal to set <paramref name="root" /> to NULL to disconnect the image from an existing root.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Grey.GetRoot(Cognex.VisionPro.ICogImage8Root@)"><param name="root"><PARA>The image data.</PARA></param><remarks><PARA>Returns the root image object that contains the raw pixel data.</PARA><NOTE>This function is <BOLD>not</BOLD> recommended to access raw pixel data.
	Use <see cref="T:Cognex.VisionPro.CogImage8Grey" /> to directly access the image's pixel data.
	</NOTE><PARA>This function is useful in cases where you want two images to share the same pixel data.
	For example, you can pass the result of this function to <see cref="M:Cognex.VisionPro.CogImage8Grey.SetRoot(Cognex.VisionPro.ICogImage8Root)" />.
	</PARA></remarks><summary>Returns the root image object that contains the raw pixel data.</summary></member><member name="M:Cognex.VisionPro.CogImage8Grey.ToBitmap"><summary>Creates a 24-bit RGB Windows bitmap from this image.</summary><returns>The 24-bit RGB Windows bitmap.</returns></member><member name="M:Cognex.VisionPro.CogImage8Grey.ScaleImage(System.Int32,System.Int32)"><param name="width">Width in pixels of the desired output image.</param><param name="height">Height in pixels of the desired output image.</param><summary>Creates a scaled version of this image. The dimensions of the returned image (in pixels) are specified by the width and height arguments. The scaling is performed using bilinear interpolation.</summary><returns>The scaled image.</returns></member><member name="E:Cognex.VisionPro.CogImage8Grey.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage8Root"><summary>Object that holds raw 8-bit pixel data of an image.</summary><remarks><PARA>Interface to a root object that holds raw 8-bit pixel data of an image.</PARA><NOTE>This interface is intended for Cognex use only.</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogImage8Root.#ctor(Cognex.VisionPro.CogImage8Root)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogImage8Root.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogImage8Root.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogImage8Root.Height"><summary>Returns the height of the pixel data.</summary><remarks><PARA>Returns the height of the pixel data.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogImage8Root.Width"><summary>Returns the width of the pixel data.</summary><remarks><PARA>Returns the width of the pixel data.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Root.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogImage8Root.GetRawPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage8PixelMemory@)"><param name="dataMode"><PARA>Specifies whether the pixel data are read, write, or read/write. </PARA></param><param name="x"><PARA>The x-coordinate of the portion of the image to get.</PARA></param><param name="y"><PARA>The y-coordinate of the portion of the image to get.</PARA></param><param name="width"><PARA>The width of the image to get.</PARA></param><param name="height"><PARA>The height of the image to get.</PARA></param><param name="pixelMemory"><PARA>An object that represents the pixel data.</PARA></param><summary>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it.</summary><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="pixelMemory" /> is NULL. (C++ only)</para></exception><remarks><PARA>Gets an object that can be used to directly access the raw pixel data.
<!-- 	You <BOLD>must</BOLD> call 
	<LINK IFACE="ICogImage8PixelMemory" FUNC="Dispose"/>
	on this object when you are finished with it. --><NOTE>This method is intended for Cognex use only. To access the pixel data directly, use 
		<see cref="T:Cognex.VisionPro.CogImage8Grey" />.<see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" /> instead.
	</NOTE></PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage8Root.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.CogImage16Grey"><summary>Object that describes a rectangular array of 16 bit grey scale pixels.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.#ctor(System.Drawing.Bitmap)"><param name="pBitmap">n/a</param><summary>Constructs a CogImage16Grey, copying or computing the pixels from the given bitmap.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.#ctor(System.Int32,System.Int32)"><param name="width">The width of the new image.</param><param name="height">The height of the new image.</param><summary>Constructs a CogImage16Grey, allocating image memory with the given width and height.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.#ctor(Cognex.VisionPro.CogImage16Grey)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogImage16Grey.SfEncoding"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Encoding may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage16Grey.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage16Grey.SfCoordinateSpaceTree"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoordinateSpaceTree may have changed.</summary></member><member name="F:Cognex.VisionPro.CogImage16Grey.SfPixelFromRootTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PixelFromRootTransform may have changed.</summary></member><member name="P:Cognex.VisionPro.CogImage16Grey.Encoding"><summary>Cognex internal use only.</summary></member><member name="P:Cognex.VisionPro.CogImage16Grey.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogImage16Grey.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogImage16Grey.PixelFromRootTransform"><remarks><PARA>Returns the transformation that maps points into pixel space ("#") from the root space ("@").</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The transform is NULL.</para></exception><summary>Transformation that maps points into pixel space ("#") from the root space ("@").</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the transform changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_PixelFromRootTransform--><ul /></event></member><member name="P:Cognex.VisionPro.CogImage16Grey.CoordinateSpaceTree"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the coordinate space tree changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_CoordinateSpaceTree--><ul /></event><summary>Returns/sets the tree of all named coordinate spaces for this image.  The tree provides advanced functions for managing coordinate spaces.</summary><remarks><PARA>Returns or sets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> for a particular  image. You can use this tree to create a transform that maps points between coordinate spaces.</PARA><PARA>To ensure that all acquired images have the same coordinate space tree, use <see cref="T:Cognex.VisionPro.CogAcqFifo" />.<see cref="P:Cognex.VisionPro.ICogAcqFifo.CoordinateSpaceTree" /> instead.	</PARA></remarks></member><member name="P:Cognex.VisionPro.CogImage16Grey.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_SelectedSpaceName--><ul /></event><summary>Returns/sets the name of the coordinate space to be used by tools which process this image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="val" /> is not a valid space name.</para></exception><remarks><PARA>Returns or sets the name of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> to be used by tools that process this image. 
VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA></remarks></member><member name="P:Cognex.VisionPro.CogImage16Grey.Height"><remarks><PARA>Returns the height of the image.</PARA></remarks><summary>Height of the image.</summary></member><member name="P:Cognex.VisionPro.CogImage16Grey.Width"><summary>Width of the image.</summary><remarks><PARA>Returns the width of the image.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogImage16Grey.Allocated"><summary>Whether there is pixel data associated with this image.</summary><remarks><PARA>Returns True if pixel data is associated with this image.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImage16Grey.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.Allocate(System.Int32,System.Int32)"><param name="width"><PARA>The width of the image in pixels.</PARA></param><param name="height"><PARA>The height of the image in pixels.</PARA></param><summary>Initialize the image with (undefined) pixel data of the given width and height. This method may not be called more than once.</summary><remarks><PARA>Initialize the image of the given height and width with undefined pixel data. You can call <see cref="M:Cognex.VisionPro.ICogImage.Allocate(System.Int32,System.Int32)" /> only once for an image. The allocated pixel space may not be resized.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocateSizeException" cgnxHRESULT="E_CogImage_AllocateSize"><para>The image is already allocated to a different size.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> &lt;= 0.</para></exception></member><member name="M:Cognex.VisionPro.CogImage16Grey.CopyBase(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"><PARA>The <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">copy mode</see>.</PARA></param><remarks><PARA>Creates a copy of this image in a new image. Pixels may be shared between images by specifying 
	<see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">SharePixels</see> as the copy mode.</PARA></remarks><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary><returns><PARA>The new image.</PARA></returns></member><member name="M:Cognex.VisionPro.CogImage16Grey.GetTransform(System.String,System.String)"><param name="toSpaceName"><PARA>The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><param name="fromSpaceName"><PARA>The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><summary>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the SelectedSpaceName of this image.</summary><remarks><PARA>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></remarks><returns><PARA>The transform that maps a point from the <paramref name="fromSpaceName" /> to the <paramref name="toSpaceName" />.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>The coordinate space tree is missing.</para></exception><PARA>Also see the errors for <DISPLAY IFACE="ICogCoordinateSpaceTree" />.<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.GetTransform(System.String,System.String)" />.</PARA></member><member name="M:Cognex.VisionPro.CogImage16Grey.Get16GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="dataMode"></param><param name="x"></param><param name="y"></param><param name="width"></param><param name="height"></param><summary>Gets an object that can be used to directly access pixel memory. The caller MUST call Dispose on this object when finished with it.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.GetPixel(System.Int32,System.Int32)"><param name="x"></param><param name="y"></param><summary>Pixel value at given location.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.SetPixel(System.Int32,System.Int32,System.UInt16)"><param name="x"></param><param name="y"></param><param name="value"></param><summary>Pixel value at given location.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.Copy"><summary>Create a deep copy of this image in a new image.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.Copy(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"></param><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.SetRoot(Cognex.VisionPro.ICogImage16Root)"><param name="root"></param><summary>Sets the root image object that contains the raw pixel data.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.GetRoot(Cognex.VisionPro.ICogImage16Root@)"><param name="root"></param><summary>Returns the root image object that contains the raw pixel data.</summary></member><member name="M:Cognex.VisionPro.CogImage16Grey.ToBitmap"><summary>Creates a 24-bit RGB Windows bitmap from this image. Note that creating an 8+8+8 RGB image from a 16-bit greyscale image will involve the loss of some greyscale information.</summary><returns>The 24-bit RGB Windows bitmap.</returns></member><member name="M:Cognex.VisionPro.CogImage16Grey.ScaleImage(System.Int32,System.Int32)"><param name="width">Width in pixels of the desired output image.</param><param name="height">Height in pixels of the desired output image.</param><summary>Creates a scaled version of this image. The dimensions of the returned image (in pixels) are specified by the width and height arguments. The scaling is performed using bilinear interpolation.</summary><returns>The scaled image.</returns></member><member name="E:Cognex.VisionPro.CogImage16Grey.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage16Root"><summary>Object that holds raw 16-bit pixel data of an image.</summary></member><member name="M:Cognex.VisionPro.CogImage16Root.#ctor(Cognex.VisionPro.CogImage16Root)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogImage16Root.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogImage16Root.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogImage16Root.Height"><summary>Returns the height of the pixel data.</summary></member><member name="P:Cognex.VisionPro.CogImage16Root.Width"><summary>Returns the width of the pixel data.</summary></member><member name="M:Cognex.VisionPro.CogImage16Root.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogImage16Root.GetRawPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage16PixelMemory@)"><param name="dataMode"></param><param name="x"></param><param name="y"></param><param name="width"></param><param name="height"></param><param name="pixelMemory"></param><summary>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it.</summary></member><member name="M:Cognex.VisionPro.CogImage16Root.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.CogSimpleColor"><summary>Class of simple nominal color value.</summary></member><member name="M:Cognex.VisionPro.CogSimpleColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><param name="info">n/a</param><param name="ctxt">n/a</param><summary>Serialization constructor.</summary></member><member name="M:Cognex.VisionPro.CogSimpleColor.#ctor(Cognex.VisionPro.CogSimpleColor)"><param name="other">The CogSimpleColor object to be copied. May not be NULL.</param><exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is NULL.</exception><summary>Construct a deep copy of the supplied CogSimpleColor object.</summary></member><member name="M:Cognex.VisionPro.CogSimpleColor.#ctor(Cognex.VisionPro.CogImageColorSpaceConstants,System.Double,System.Double,System.Double)"><param name="space">The color space for the new object.</param><param name="plane0">The value for the first color plane.</param><param name="plane1">The value for the second color plane.</param><param name="plane2">The value for the third color plane.</param><summary>Constructs a SimpleColor Object taking the supplied color space and plane values.</summary><exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="plane0" />, or <paramref name="plane1" />, or <paramref name="plane2" /> is less than zero.</exception></member><member name="M:Cognex.VisionPro.CogSimpleColor.#ctor(Cognex.VisionPro.CogImageColorSpaceConstants)"><param name="colorSpaceValue">The color space for the new object.</param><summary>Construct a CogSimpleColor object with the specified color space. Sets each color plane value to be 0.</summary></member><member name="P:Cognex.VisionPro.CogSimpleColor.SystemColorValue"><remarks>The returned color has type ystem::Drawing::Color no matter what the CogSimpleColor's ColorSpace is, and the returned color value can be used for displaying purpose.</remarks><summary>Get a color value with type System::Drawing::Color corresponding to this CogSimpleColor object.</summary><value>The system color value</value></member><member name="P:Cognex.VisionPro.CogSimpleColor.Plane2"><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero.</exception><summary>Gets or sets the value of the third color plane.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The value of the third color plane</value></member><member name="P:Cognex.VisionPro.CogSimpleColor.Plane1"><summary>Gets or sets the value of the second color plane.</summary><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero.</exception><value>The value of the second color plane</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.CogSimpleColor.Plane0"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set this to a value less than zero.</exception><value>The value of the first color plane</value><summary>Gets or sets the value of the first color plane.</summary></member><member name="P:Cognex.VisionPro.CogSimpleColor.Name"><summary>Gets or sets the name of the simple color value. It provides another way to distinguish color objects.</summary><value>The name. Its default value is NULL.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.CogSimpleColor.ColorSpace"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Gets or sets the color space of this CogSimpleColor object. The color space specifies how the color values should be interpreted and used.</summary><remarks>Note that changing this color space value will not affect  the plane values.</remarks><value>The color space</value></member><member name="M:Cognex.VisionPro.CogSimpleColor.UpdateUsingMeanColorFromImageRegion(Cognex.VisionPro.CogImage24PlanarColor,Cognex.VisionPro.ICogRegion)"><param name="image">The input image to get color from. May not be NULL.</param><param name="region">The region to specify a portion of the image to be used. If it is NULL, the whole image is used.</param><remarks>The color space of this CogSimpleColor will be the same as the input image's color space.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this method updates the color values.</event><summary>Assign this CogSimpleColor object's value from the mean color value of the input image and Region.</summary><exception cref="T:System.InvalidOperationException">If an internal error occurs.</exception><exception cref="T:System.ArgumentNullException">If  <paramref name="image" />is NULL.</exception></member><member name="M:Cognex.VisionPro.CogSimpleColor.UpdateUsingMeanColorFromImageRegion(Cognex.VisionPro.CogImage24PlanarColor,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.CogImageColorSpaceConstants)"><param name="image">The image to analyze. May not be NULL.</param><param name="region">An optional region. May be NULL. If supplied, limit the computation of mean color to only the pixels that fall within this region. If no region is supplied, the entire image is processed.</param><param name="desiredColorSpace">After calling this method, the ColorSpace property will have this value.</param><exception cref="T:System.InvalidOperationException">If an internal error occurs.</exception><exception cref="T:System.ArgumentNullException">If  <paramref name="image" />is NULL.</exception><summary>Set the values of this CogSimpleColor object to the mean color of the supplied input image. If a region is provided, limit analysis to the pixels within that region. The new values for this CogSimpleColor will be in the user specified color space.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this method updates the color values.</event></member><member name="T:Cognex.VisionPro.CogPlaneRange"><summary>Class of range of color values on one color plane.</summary></member><member name="M:Cognex.VisionPro.CogPlaneRange.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><param name="info">n/a</param><param name="ctxt">n/a</param><summary>Serialization Constructor</summary></member><member name="M:Cognex.VisionPro.CogPlaneRange.#ctor(Cognex.VisionPro.CogPlaneRange)"><param name="other">The CogPlaneRange object to be copied. May not be NULL.</param><exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is NULL.</exception><summary>Construct a deep copy of the supplied CogPlaneRange object.</summary></member><member name="M:Cognex.VisionPro.CogPlaneRange.#ctor(System.Double,Cognex.VisionPro.CogImagePlaneConstants)"><param name="nominalValue">The nominal value.</param><param name="planeValue">The plane type value.</param><exception cref="T:System.ArgumentOutOfRangeException">If &lt;paramref name="nominalValue"/&gt; is &gt; 0 or &lt; 255.</exception><summary>Constructs and initializes a CogPlaneRange object based on a nominal value and the specified plane. Default Tolerance = +/-10, default Softness = 0. Tolerance and Softness values might be changed if the original range defined is out of range limits.</summary></member><member name="M:Cognex.VisionPro.CogPlaneRange.#ctor(Cognex.VisionPro.CogImagePlaneConstants)"><param name="planeValue">The plane type value.</param><summary>Constructs and initializes a CogPlaneRange object based on the specified plane. Default Nominal = 128,  Tolerance = +/-10, default Softness = 0.</summary></member><member name="P:Cognex.VisionPro.CogPlaneRange.Plane"><remarks>The Plane property represents the color space and the direction in the color space the range is defined upon.</remarks><value>The color plane type</value><summary>Gets the color plane type of this CogPlaneRange object.</summary></member><member name="P:Cognex.VisionPro.CogPlaneRange.CanWrap"><summary>Gets whether the values on this color plane can wrap from 255 to 0.</summary><value>True if the plane is hue plane in HSI color space; otherwise, false.</value></member><member name="P:Cognex.VisionPro.CogPlaneRange.Nominal"><summary>Gets the nominal value on this color plane.</summary><value>The nominal value</value></member><member name="P:Cognex.VisionPro.CogPlaneRange.Softness"><remarks>Low end position of the softness is Nominal + LowTolerance - Softness.  High end position of the softness is Nominal + HighTolerance + Softness.</remarks><summary>Gets the softness value.</summary><value>The softness value</value></member><member name="P:Cognex.VisionPro.CogPlaneRange.HighTolerance"><value>The high end tolerance value</value><summary>Gets the high end tolerance value.</summary><remarks>High end of the range is specified as  Nominal + HighTolerance.</remarks></member><member name="P:Cognex.VisionPro.CogPlaneRange.LowTolerance"><summary>Gets the low end tolerance value.</summary><value>The low end tolerance value</value><remarks>Low end of the range is specified as  Nominal + LowTolerance.</remarks></member><member name="M:Cognex.VisionPro.CogPlaneRange.Update(System.Double,System.Double,System.Double,System.Double)"><param name="nominalVal">The new nominal value for the range.</param><param name="lowTolVal">The new low end tolerance value for the range.</param><param name="highTolVal">The new high end tolerance value for the range.</param><param name="softnessVal">The new softness value for the range.</param><summary>Sets Nominal, Tolerance and Softness values.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If  <paramref name="nominalVal" /> is less than 0 or larger than 255.</exception><remarks>If the plane is not hue plane, the range defined should be inside [0, 255]; If the plane is hue plane, the range defined can be in [-256, 255] or [0, 511] because of hue value wrapping.</remarks></member><member name="M:Cognex.VisionPro.CogPlaneRange.UpdateWithClipping(System.Double,System.Double,System.Double,System.Double)"><param name="nominalVal">The new nominal value for the range.</param><param name="lowTolVal">The new low end tolerance value for the range.</param><param name="highTolVal">The new high end tolerance value for the range.</param><param name="softnessVal">The new softness value for the range.</param><remarks>If the plane is not hue plane, the range defined should be inside [0, 255]; If the plane is hue plane, the range defined can be in [-256, 255] or [0, 511] because of hue value wrapping.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Sets Nominal, Tolerance and Softness values and clip these values if they are out of range.</summary></member><member name="T:Cognex.VisionPro.CogColorRange"><summary>Class of color value range. It includes CogPlaneRange objects for all the color planes.</summary></member><member name="M:Cognex.VisionPro.CogColorRange.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><param name="info">n/a</param><param name="ctxt">n/a</param><summary>Serialization constructor</summary></member><member name="M:Cognex.VisionPro.CogColorRange.#ctor(Cognex.VisionPro.CogColorRange)"><param name="other">The CogColorRange object to be copied. May not be NULL.</param><exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is NULL.</exception><summary>Construct a deep copy of the supplied CogColorRange object.</summary></member><member name="M:Cognex.VisionPro.CogColorRange.#ctor(Cognex.VisionPro.CogSimpleColor)"><param name="color">The nominal color for the new CogColorRange object. May not be NULL</param><exception cref="T:System.ArgumentNullException">If <paramref name="color" />  is NULL.</exception><summary>Constructs a CogColorRange based on a simple color value.</summary></member><member name="P:Cognex.VisionPro.CogColorRange.PlaneRange2"><exception cref="T:System.ArgumentNullException">If the new value is NULL.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentException">If the color plane of  the new value is not the same as the color plane of PlaneRange2.</exception><value>The CogPlaneRange object for the third image plane.</value><summary>Gets/sets the CogPlaneRange object for the third image plane.</summary></member><member name="P:Cognex.VisionPro.CogColorRange.PlaneRange1"><exception cref="T:System.ArgumentException">If the color plane of the new value is not the same as the color plane of PlaneRange1.</exception><summary>Gets/sets the CogPlaneRange object for the second image plane.</summary><exception cref="T:System.ArgumentNullException">If the new value is NULL.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The CogPlaneRange object for the second image plane.</value></member><member name="P:Cognex.VisionPro.CogColorRange.PlaneRange0"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentNullException">If the new value is NULL.</exception><exception cref="T:System.ArgumentException">If the color plane of   the new value is not the same as the color plane of PlaneRange0.</exception><summary>Gets/sets the CogPlaneRange object for the first image plane.</summary><value>The CogPlaneRange object for the first image plane.</value></member><member name="P:Cognex.VisionPro.CogColorRange.Name"><summary>Gets or sets the name of this CogColorRange object which provides another way to distinguish color range objects.</summary><value>The name of this CogColorRange object. Its default value is NULL.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="M:Cognex.VisionPro.CogColorRange.GetColor"><summary>Gets a CogSimpleColor object based on the name, color space and nominal values from this CogColorRange object.</summary></member><member name="M:Cognex.VisionPro.CogColorRange.SetColor(Cognex.VisionPro.CogSimpleColor)"><param name="color">The CogSimpleColor object to specify the new nominal color value and color name. May not be NULL.</param><exception cref="T:System.ArgumentException">If the color space of <paramref name="color" /> is not the same as the color space of this CogColorRange object.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this method updates the Name property.</event><remarks>It may result in changing the tolerance values if plane ranges based on the new nominal color are out of the range limits.</remarks><summary>Updates the range values based on the provided color.</summary><exception cref="T:System.ArgumentNullException">If <paramref name="color" /> is NULL.</exception></member><member name="M:Cognex.VisionPro.CogColorRange.UpdateUsingMeanVarianceFromImageRegion(Cognex.VisionPro.CogImage24PlanarColor,Cognex.VisionPro.ICogRegion)"><param name="image">The CogImage24PlanarColor object to update color range from. May not be NULL.</param><param name="region">The ICogRegion object to specify a portion of the image to be used. If it is NULL, the whole image is used.</param><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this method updates the range values.</event><exception cref="T:System.InvalidOperationException">If an internal error occurs.</exception><remarks>If the absoulte Tolerance values of any plane range after the updating are less than 5, it sets the Tolerances of that plane range to be +/-5, or clipped values if the range defined by +/-5 is out of range limits.</remarks><summary>Updates the range values based on the mean and variance from the provided image and Region.</summary><exception cref="T:System.ArgumentNullException">If <paramref name="image" /> is NULL.</exception></member><member name="T:Cognex.VisionPro.CogImageConvert"><summary>Class that provides image format conversion functions.</summary></member><member name="M:Cognex.VisionPro.CogImageConvert.GetRGBImage(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="inputImage">The image to convert.</param><param name="x">The X-coordinate in pixels of the origin of the region to convert.</param><param name="y">The Y-coordinate in pixels of the origin of the region to convert.</param><param name="width">The width in pixels of the region to convert.</param><param name="height">The height in pixels of the region to convert.</param><summary>Produce an RGB image from the supplied input image.</summary><returns>The converted image.</returns><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException">The region to convert does not lie entirely within the <paramref name="inputImage" />.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException"><paramref name="inputImage" /> does not refer to an image type that is convertible such as <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" />.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException"><paramref name="inputImage" /> is not allocated.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException"><paramref name="inputImage" /> is null.</exception><remarks><para>Produce an RGB image from the supplied input image.  The output image is of the same type (such as <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" />) as the input image.  If the supplied image is already an RGB image (<see cref="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace" /> is <see cref="F:Cognex.VisionPro.CogImageColorSpaceConstants.RGB" />) then no conversion is done. </para><para>If <paramref name="x" />, <paramref name="y" />, <paramref name="width" />, and <paramref name="height" /> are all zero, then the entire image is converted. Otherwise, only the specified portion of the image is converted.</para></remarks></member><member name="M:Cognex.VisionPro.CogImageConvert.GetHSIImage(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that supports RGB representation such as <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
	</para></exception><remarks><PARA>Produce an HSI image from the supplied input image. The output image 
	is of the same type (such as <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" />) as the 
	input image. If the supplied image is already an HSI image 
	(<see cref="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace" /> is 
	<see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">HSI</see>) 
	then no conversion is done.</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA></remarks><returns><PARA>The converted image.</PARA></returns><summary>Produce an HSI image from the supplied input image.</summary></member><member name="M:Cognex.VisionPro.CogImageConvert.GetIntensityImage(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type 
    that can be converted to an intensity image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
	</para></exception><returns><PARA>The converted image.</PARA></returns><remarks><PARA>Produce an intensity image from the supplied input image. If the input image
	is an RGB-format <see cref="T:Cognex.VisionPro.CogImage24PlanarColor" /> image, then a new 
	intensity image is converted. If the input image is in HSI format, then the existing 
	intensity (I) plane is returned.</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA></remarks><summary>Produce an intensity image from the supplied input image.</summary></member><member name="M:Cognex.VisionPro.CogImageConvert.GetRGBImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,Cognex.VisionPro.CogImageConvertBayerTypeConstants)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><param name="redWhiteBalanceScale"><PARA>The nominally computed red value for each pixel is multiplied by this parameter.</PARA></param><param name="greenWhiteBalanceScale"><PARA>The nominally computed green value for each pixel is multiplied by this parameter.</PARA></param><param name="blueWhiteBalanceScale"><PARA>The nominally computed blue value for each pixel is multiplied by this parameter.</PARA></param><param name="bayerType">The type of the input Bayer image. Choices include GR, RG, BG, and GB.</param><summary>Produce an RGB image from the supplied Bayer format image.</summary><remarks><PARA>Produce an RGB image from the supplied Bayer format image.The result of this conversion is a 
	<see cref="T:Cognex.VisionPro.CogImage24PlanarColor" /> with 
	its <see cref="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace" /> set to 
	<see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">RGB</see>.
</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that 
    can be used to represent a Bayer-format image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
  </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> is not an even multiple of 2.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redWhiteBalanceScale" />,
    		<paramref name="greenWhiteBalanceScale" />, or
    		 <paramref name="BluewWhiteBalanceScale" /> is less than or equal to 0.
	</para></exception><returns><PARA>The converted image.</PARA></returns></member><member name="M:Cognex.VisionPro.CogImageConvert.GetRGBImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><param name="redWhiteBalanceScale"><PARA>The nominally computed red value for each pixel is multiplied by this parameter.</PARA></param><param name="greenWhiteBalanceScale"><PARA>The nominally computed green value for each pixel is multiplied by this parameter.</PARA></param><param name="blueWhiteBalanceScale"><PARA>The nominally computed blue value for each pixel is multiplied by this parameter.</PARA></param><remarks><PARA>Produce an RGB image from the supplied Bayer format image.The result of this conversion is a 
	<see cref="T:Cognex.VisionPro.CogImage24PlanarColor" /> with 
	its <see cref="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace" /> set to 
	<see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">RGB</see>.
</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA></remarks><summary>Produce an RGB image from the supplied Bayer format image.</summary><returns><PARA>The converted image.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that 
    can be used to represent a Bayer-format image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
  </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> is not an even multiple of 2.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redWhiteBalanceScale" />,
    		<paramref name="greenWhiteBalanceScale" />, or
    		 <paramref name="BluewWhiteBalanceScale" /> is less than or equal to 0.
	</para></exception></member><member name="M:Cognex.VisionPro.CogImageConvert.GetHSIImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,Cognex.VisionPro.CogImageConvertBayerTypeConstants)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><param name="redWhiteBalanceScale"><PARA>The nominally computed red value for each pixel is multiplied by this parameter.</PARA></param><param name="greenWhiteBalanceScale"><PARA>The nominally computed green value for each pixel is multiplied by this parameter.</PARA></param><param name="blueWhiteBalanceScale"><PARA>The nominally computed blue value for each pixel is multiplied by this parameter.</PARA></param><param name="bayerType">The type of the input Bayer image. Choices include GR, RG, BG, and GB.</param><summary>Produce an HSI image from the supplied Bayer format image.</summary><returns><PARA>The converted image.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that 
    can be used to represent a Bayer-format image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
  </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> is not an even multiple of 2.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redWhiteBalanceScale" />,
    		<paramref name="greenWhiteBalanceScale" />, or
    		 <paramref name="BluewWhiteBalanceScale" /> is less than or equal to 0.
	</para></exception><remarks><PARA>Produce an HSI image from the supplied Bayer format image. The result of this conversion is a 
	<see cref="T:Cognex.VisionPro.CogImage24PlanarColor" /> with 
	its <see cref="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace" /> set to 
	<see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">HSI</see>.
</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA><NOTE>
	This is a convenience routine; it calls
	<see cref="M:Cognex.VisionPro.CogImageConvert.GetRGBImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)" />
	followed by 
	<see cref="M:Cognex.VisionPro.CogImageConvert.GetHSIImage(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32)" />. The 
	<paramref name="redWhiteBalanceScale" />, 
<paramref name="greenWhiteBalanceScale" />, and 
<paramref name="blueWhiteBalanceScale" /> are all used during thei initial Bayer-to-RGB conversion.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogImageConvert.GetHSIImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><param name="redWhiteBalanceScale"><PARA>The nominally computed red value for each pixel is multiplied by this parameter.</PARA></param><param name="greenWhiteBalanceScale"><PARA>The nominally computed green value for each pixel is multiplied by this parameter.</PARA></param><param name="blueWhiteBalanceScale"><PARA>The nominally computed blue value for each pixel is multiplied by this parameter.</PARA></param><summary>Produce an HSI image from the supplied Bayer format image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that 
    can be used to represent a Bayer-format image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
  </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> is not an even multiple of 2.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redWhiteBalanceScale" />,
    		<paramref name="greenWhiteBalanceScale" />, or
    		 <paramref name="BluewWhiteBalanceScale" /> is less than or equal to 0.
	</para></exception><remarks><PARA>Produce an HSI image from the supplied Bayer format image. The result of this conversion is a 
	<see cref="T:Cognex.VisionPro.CogImage24PlanarColor" /> with 
	its <see cref="P:Cognex.VisionPro.CogImage24PlanarColor.ColorSpace" /> set to 
	<see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">HSI</see>.
</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA><NOTE>
	This is a convenience routine; it calls
	<see cref="M:Cognex.VisionPro.CogImageConvert.GetRGBImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)" />
	followed by 
	<see cref="M:Cognex.VisionPro.CogImageConvert.GetHSIImage(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32)" />. The 
	<paramref name="redWhiteBalanceScale" />, 
<paramref name="greenWhiteBalanceScale" />, and 
<paramref name="blueWhiteBalanceScale" /> are all used during thei initial Bayer-to-RGB conversion.
</NOTE></remarks><returns><PARA>The converted image.</PARA></returns></member><member name="M:Cognex.VisionPro.CogImageConvert.GetIntensityImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,Cognex.VisionPro.CogImageConvertBayerTypeConstants)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><param name="redGreyscaleWeight"><PARA>The weighting value by which to multiply the input image red value (default: 0.299).</PARA></param><param name="greenGreyscaleWeight"><PARA>The weighting value by which to multiply the input image green value (default: 0.587).</PARA></param><param name="blueGreyscaleWeight"><PARA>The weighting value by which to multiply the input image blue value (default: 0.114).</PARA></param><param name="bayerType">The type of the input Bayer image. Choices include GR, RG, BG, and GB.</param><returns><PARA>The converted image.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that 
    can be used to represent a Bayer-format image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
  </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> is not an even multiple of 2.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redGreyscaleWeight" />,
    		<paramref name="greenGreyscaleWeight" />, or
    		 <paramref name="BluewGreyscaleWeight" /> is less than 0.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redGreyscaleWeight" /> +
    		<paramref name="greenGreyscaleWeight" /> +
    		 <paramref name="BluewGreyscaleWeight" /> does not equal 1.0.
	</para></exception><summary>Produce an intensity image from the supplied Bayer format image.</summary><remarks><PARA>Produce an intensity image from the supplied Bayer format image.</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA><PARA>
The 
<paramref name="redGreyscaleWeight" />,
<paramref name="greenGreyscaleWeight" />, and
<paramref name="blueGreyscaleWeight" /> 
parameters must add up to 1.0. These parameters are 
multiplied by each pixel's red, green, and blue values to 
compute the intensity value.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogImageConvert.GetIntensityImageFromBayer(Cognex.VisionPro.ICogImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)"><param name="inputImage"><PARA>The image to convert.</PARA></param><param name="x"><PARA>The X-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="y"><PARA>The Y-coordinate in pixels of the origin of the region to convert.</PARA></param><param name="width"><PARA>The width in pixels of the region to convert.</PARA></param><param name="height"><PARA>The height in pixels of the region to convert.</PARA></param><param name="redGreyscaleWeight"><PARA>The weighting value by which to multiply the input image red value (default: 0.299).</PARA></param><param name="greenGreyscaleWeight"><PARA>The weighting value by which to multiply the input image green value (default: 0.587).</PARA></param><param name="blueGreyscaleWeight"><PARA>The weighting value by which to multiply the input image blue value (default: 0.114).</PARA></param><returns><PARA>The converted image.</PARA></returns><remarks><PARA>Produce an intensity image from the supplied Bayer format image.</PARA><PARA>
	If 
	<paramref name="x" />,
	<paramref name="y" />,
	<paramref name="width" />, and
	<paramref name="height" />
	are all zero, then the entire image is converted. Otherwise, only 
	the specified portion of the image is converted.	
	</PARA><PARA>
The 
<paramref name="redGreyscaleWeight" />,
<paramref name="greenGreyscaleWeight" />, and
<paramref name="blueGreyscaleWeight" /> 
parameters must add up to 1.0. These parameters are 
multiplied by each pixel's red, green, and blue values to 
compute the intensity value.
</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is null.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException" cgnxHRESULT="E_CogImage_BadType"><para><paramref name="inputImage" /> does not refer to an image  type that 
    can be used to represent a Bayer-format image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageClippedException" cgnxHRESULT="E_CogImage_Clipped"><para><paramref name="x" /> is less than 0 or greater than or equal to the width of <paramref name="inputImage" />;
    		<paramref name="y" /> is less than 0 or greater than or equal to the height of <paramref name="inputImage" />;
    		<paramref name="x" /> plus <paramref name="width" /> is greater than the width of <paramref name="inputImage" />; or
    		<paramref name="y" /> plus <paramref name="height" /> is greater than the height of <paramref name="inputImage" />.
  </para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> is not an even multiple of 2.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redGreyscaleWeight" />,
    		<paramref name="greenGreyscaleWeight" />, or
    		 <paramref name="BluewGreyscaleWeight" /> is less than 0.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="redGreyscaleWeight" /> +
    		<paramref name="greenGreyscaleWeight" /> +
    		 <paramref name="BluewGreyscaleWeight" /> does not equal 1.0.
	</para></exception><summary>Produce an intensity image from the supplied Bayer format image.</summary></member><member name="M:Cognex.VisionPro.CogImageConvert.GetRGBColor(Cognex.VisionPro.CogSimpleColor)"><param name="inputColor">The color to convert.</param><summary>Produce an RGB color from the supplied input color.</summary><exception cref="T:System.ArgumentException"><paramref name="inputColor" /> contains an unrecognized <see cref="P:Cognex.VisionPro.CogSimpleColor.ColorSpace" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="inputColor" /> is null.</exception><returns>The converted color.</returns><remarks><para>Produce an RGB color from the supplied input color.  If the supplied color is already an RGB color (<see cref="P:Cognex.VisionPro.CogSimpleColor.ColorSpace" /> is <see cref="F:Cognex.VisionPro.CogImageColorSpaceConstants.RGB" />) then no conversion is done: a copy of the input color is returned. </para><para>The <see cref="P:Cognex.VisionPro.CogSimpleColor.Name" /> of the returned color will always be null.</para></remarks></member><member name="M:Cognex.VisionPro.CogImageConvert.GetHSIColor(Cognex.VisionPro.CogSimpleColor)"><param name="inputColor">The color to convert.</param><returns>The converted color.</returns><summary>Produce an HSI color from the supplied input color.</summary><exception cref="T:System.ArgumentNullException"><paramref name="inputColor" /> is null.</exception><remarks><para>Produce an HSI color from the supplied input color.  If the supplied color is already an HSI color (<see cref="P:Cognex.VisionPro.CogSimpleColor.ColorSpace" /> is <see cref="F:Cognex.VisionPro.CogImageColorSpaceConstants.HSI" />) then no conversion is done: a copy of the input color is returned. </para><para>The <see cref="P:Cognex.VisionPro.CogSimpleColor.Name" /> of the returned color will always be null.</para></remarks><exception cref="T:System.ArgumentException"><paramref name="inputColor" /> contains an unrecognized <see cref="P:Cognex.VisionPro.CogSimpleColor.ColorSpace" />.</exception></member><member name="M:Cognex.VisionPro.CogImageConvert.GetIntensityImageFromWeightedRGB(Cognex.VisionPro.CogImage24PlanarColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)"><param name="inputImage"></param><param name="x"></param><param name="y"></param><param name="width"></param><param name="height"></param><param name="redWeight">n/a</param><param name="greenWeight">n/a</param><param name="blueWeight">n/a</param><summary>Produce an intensity image from the supplied input RGB image.</summary></member><member name="T:Cognex.VisionPro.CogInputLine"><remarks><PARA>A discrete input line.</PARA></remarks><summary>Virtual (non-creatable) class for a discrete input line.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogInputLine.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogInputLine.SfTriggerMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TriggerMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogInputLine.SfDebounceDuration"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DebounceDuration may have changed.</summary></member><member name="P:Cognex.VisionPro.CogInputLine.DebounceDuration"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new duration is &lt; 0.</para></exception><remarks><PARA>Time in milliseconds from when a transition causes a <see cref="E:Cognex.VisionPro.CogInputLine.LowToHigh" /> or <see cref="E:Cognex.VisionPro.CogInputLine.HighToLow" /> event to fire, until another transition may fire another event.</PARA><DEFAULT>50</DEFAULT></remarks><summary>Time in milliseconds from when a transition causes a LowToHigh or HighToLow event to fire, until another transition may fire another event.</summary><event cref="E:Cognex.VisionPro.CogInputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogInputLine_DebounceDuration--><ul /></event></member><member name="P:Cognex.VisionPro.CogInputLine.TriggerMode"><remarks><PARA>Specifies what transitions cause the <see cref="E:Cognex.VisionPro.CogInputLine.LowToHigh" /> or <see cref="E:Cognex.VisionPro.CogInputLine.HighToLow" /> events to fire. 
Use
	<see cref="M:Cognex.VisionPro.CogInputLine.GetTriggerModeSupported(Cognex.VisionPro.CogInputLineTriggerModeConstants)" />
 to determine which transitions can be detected.</PARA></remarks><event cref="E:Cognex.VisionPro.CogInputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogInputLine_TriggerMode--><ul><li><see cref="F:Cognex.VisionPro.CogInputLine.SfTriggerMode" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="value" /> is not in <see cref="T:Cognex.VisionPro.CogInputLineTriggerModeConstants" />.</para></exception><summary>Specifies what transition(s) cause the LowToHigh and/or HighToLow event(s) to fire.  Check the TriggerModeSupported property to see which mode(s) are supported.</summary></member><member name="P:Cognex.VisionPro.CogInputLine.Value"><remarks><PARA>Reads the value of this input line.  True means that the input is in the TTL high state (for TTL lines) or the no-current-flowing state (for opto-isolated lines).</PARA></remarks><summary>Reads the value of this input line.  True means that the input is in the TTL high state (for TTL lines) or the no-current-flowing state (for opto-isolated lines).</summary></member><member name="P:Cognex.VisionPro.CogInputLine.LineNumber"><summary>Returns the logical line number of the I/O line.  Refer to your hardware documentation for the equivalence between logical line numbers and physical lines.</summary><remarks><PARA>Returns the logical line number of the I/O line.  Refer to your hardware documentation for the equivalence between logical line numbers and physical lines.</PARA><PARA>Some Cognex frame grabbers are available in several configurations which affect the relationship between logical line numbers and physical connections. These configurations are described in your frame grabber's hardware manual. VisionPro reads the I/O configuration from the <CONSOLE>VisionPro.ini</CONSOLE> in the <CONSOLE>Windows</CONSOLE> or <CONSOLE>WINNT</CONSOLE> directory. Make sure that the configuration described in this file matches your frame grabber. </PARA><PARA>See <see cref="u:Framework.PhysicalIO.CodeWalkthrough.UseIOLines">How to Use I/O Lines</see> for a list of topics that describe the mappings for different frame grabbers.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogInputLine.CanBeEnabled"><remarks><PARA>Whether this line is capable of being enabled. Some input lines may not be capable of being enabled if they are being used as output lines, and vice-versa.</PARA></remarks><summary>Whether this line is capable of being enabled. Some input lines may not be capable of being enabled if they are being used as output lines, and vice-versa.</summary></member><member name="P:Cognex.VisionPro.CogInputLine.Enabled"><event cref="E:Cognex.VisionPro.CogInputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the enabled state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogInputLine_Enabled--><ul><li><see cref="F:Cognex.VisionPro.CogInputLine.SfEnabled" /></li></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.FAILException" cgnxHRESULT="E_FAIL"><para>This line cannot be enabled.</para></exception><!-- the IDL file says it's this error, but jay says it hasn't been defined yet
	<ERROR_HRESULT NAME="E_CogIO_CannotEnable">This line cannot be enabled.</ERROR_HRESULT>
--><remarks><PARA>Sets or gets whether this line is enabled.  For bidirectional lines, check the 
	<see cref="P:Cognex.VisionPro.CogInputLine.CanBeEnabled" /> property to see whether this line can be enabled.</PARA></remarks><summary>Read or set whether this line is enabled.  For bidirectional lines, check the CanBeEnabled property to see whether this line can be enabled.</summary></member><member name="P:Cognex.VisionPro.CogInputLine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.GetTriggerModeSupported(Cognex.VisionPro.CogInputLineTriggerModeConstants)"><param name="mode"><PARA>The trigger mode to test.</PARA></param><remarks><PARA>Returns True if the specified trigger mode is supported by this input line.</PARA></remarks><summary>Returns True if the specified trigger mode is supported by this input.</summary></member><member name="M:Cognex.VisionPro.CogInputLine.CreateEventSink(System.String)"><param name="progIDOrClassID"><PARA>A ProgID or ClassID that identifies the type of object to create. </PARA></param><remarks><PARA>Create an object in the event thread of this input line. This allows single-threaded objects to sink input line events efficiently.</PARA><PARA>
This input line's event thread runs at a high priority, which means that the event 
handler you implement in the specified class will also run at a high priority. You should 
take care to limit the amount of processing time required to service events.
</PARA><PARA>
This function creates an object within the apartment of the input line's 
event thread but it does not actually connect the input line events to the
object. In Visual Basic events are connected by assigning the input line to
a <BOLD> WithEvents</BOLD> variable declared in the class that was created. 
For example if your event sink class (named  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="MyInspection" />
				--><see cref="T:Cognex.VisionPro.MyInspection" />) contains 
the following code:
</PARA><CODE LANGUAGE="VB">
  Public WithEvents InputLine As CogInputLineEvents

  Private Sub InputLine_LowToHigh(ByVal Overlap As Long)
	<COMMENTLINE><ITALIC>Run the inspection now</ITALIC></COMMENTLINE>
  End Sub
</CODE><PARA>
You would use the code shown below to create the event sink class and 
connect it to the input line event source when your program starts:
</PARA><CODE LANGUAGE="VB">
 Dim FGs As New CogFrameGrabbers, DiscreteIO As CogDiscreteIO
  Set DiscreteIO = FGs(0)
  Dim InputLine As CogInputLine
  Set InputLine = DiscreteIO.InputLines(0)
  
  Dim Inspection As MyInspection
  Set Inspection = InputLine.CreateEventSink("MyProject.MyInspection")
  Set Inspection.InputLine = InputLine
  </CODE><NOTE>
If you wish to use this function to implement true multithreading in a Visual Basic 6 application, 
the object specified by <paramref name="progIDOrClassID" /> must be
defined in an ActiveX DLL project.
</NOTE></remarks><returns><PARA>The object that was created.</PARA></returns><summary>Create an object in the event thread of this input line. This allows single-threaded objects to sink input line events efficiently.</summary></member><member name="E:Cognex.VisionPro.CogInputLine.HighToLow"><summary>Occurs after an input line's state has changed from high to low.</summary><summary>Occurs after an input line's state has changed from high to low.</summary></member><member name="E:Cognex.VisionPro.CogInputLine.LowToHigh"><summary>Occurs after an input line's state has changed from low to high.</summary><summary>Occurs after an input line's state has changed from low to high.</summary></member><member name="E:Cognex.VisionPro.CogInputLine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogInputLines"><remarks><PARA>Collection of <see cref="T:Cognex.VisionPro.CogInputLine" />.</PARA></remarks><summary>Collection of input lines.</summary></member><member name="M:Cognex.VisionPro.CogInputLines.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogInputLines.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogInputLines.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogInputLines.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogInputLines.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogInputLines.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.CogInputLines.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogInputLines.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogInputLines.IndexOf(Cognex.VisionPro.CogInputLine)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogInputLines.GetGroupValue(System.Int32,System.Int32)"><param name="firstIndex"><PARA>The first input line.</PARA></param><param name="numberOfBits"><PARA>The number of lines to read.</PARA></param><remarks><PARA>Reads a group of up to 32 input line values as a binary number.</PARA><PARA>The first input line, specified by <paramref name="firstIndex" /> has a binary value of 1. The last input line, specified by <paramref name="firstIndex" />+<paramref name="numberOfBits" />-1, has a binary value of 2^(<paramref name="numberOfBits" />-1).</PARA><NOTE>
The line values you specify are <ITALIC>logical lines</ITALIC>. Make sure that the  
<see cref="u:Framework.PhysicalIO.CodeWalkthrough.UseIOLines">frame grabber and I/O adapter configuration</see> that
you are using maps the range of logical lines you specify as contiguous physical lines.
</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogCollectionInvalidIndexException" cgnxHRESULT="E_CogCollection_InvalidIndex"><para><paramref name="firstIndex" /> is &lt; 0 or &gt;= <see cref="P:Cognex.VisionPro.CogInputLines.Count" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="numberOfBits" /> is &lt; 1 or &gt; 32.</para></exception><summary>Reads a group of up to 32 input line values as a binary number.</summary></member><member name="T:Cognex.VisionPro.CogMath"><summary>Global class that provides miscellaneous math functions.</summary></member><member name="M:Cognex.VisionPro.CogMath.AnglePointPoint(System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>The x-coordinate of the start point.</PARA></param><param name="startY"><PARA>The y-coordinate of the start point.</PARA></param><param name="endX"><PARA>The x-coordinate of the end point.</PARA></param><param name="endY"><PARA>The y-coordinate of the end point.</PARA></param><summary>Returns the angle in radians of the segment between the given points.</summary><remarks><PARA>Returns the angle measured in radians from the x-axis of the segment between (<paramref name="startX" />,<paramref name="startY" />) and (<paramref name="endX" />,<paramref name="endY" />). The angle is normalized to the range -π to π.</PARA></remarks><returns><PARA>The angle of the line segment.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.DistancePointPoint(System.Double,System.Double,System.Double,System.Double,System.Double@)"><param name="startX"><PARA>The x-coordinate of the start point.</PARA></param><param name="startY"><PARA>The y-coordinate of the start point.</PARA></param><param name="endX"><PARA>The x-coordinate of the end point.</PARA></param><param name="endY"><PARA>The y-coordinate of the end point.</PARA></param><param name="angle"><PARA>The angle of the line segment formed by the points.</PARA></param><returns><PARA>The distance between the points.</PARA></returns><summary>Returns the length of the segment between the given points.  Also provides the angle of the segment.</summary><remarks><PARA>Returns the length of the segment between (<paramref name="startX" />,<paramref name="startY" />) and (<paramref name="endX" />,<paramref name="endY" />) and optionally its angle.</PARA><PARA>The angle is measured in radians from the x-axis and  is normalized to the range -π to π.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.CreateLineBisectingPointPoint(System.Double,System.Double,System.Double,System.Double,System.String)"><param name="startX"><PARA>The x-coordinate of the start point.</PARA></param><param name="startY"><PARA>The y-coordinate of the start point.</PARA></param><param name="endX"><PARA>The x-coordinate of the end point.</PARA></param><param name="endY"><PARA>The y-coordinate of the end point.</PARA></param><param name="selectedSpaceName"><PARA>The name of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" />
that the <paramref name="startX" />, <paramref name="startY" />, <paramref name="endX" />, and <paramref name="endY" /> parameters are specified in.
</PARA></param><returns><PARA>The new line.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>Start and endpoint coordinates must be different.</para></exception><summary>Create a new line by bisecting the segment between the given points.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLine" /> by bisecting the segment between the given points.</PARA><PARA>The new line has its reference point at the midpoint between (<paramref name="startX" />,<paramref name="startY" />) and (<paramref name="endX" />,<paramref name="endY" />). Its rotation is the rotation of the line segment (<paramref name="startX" />,<paramref name="startY" />) and (<paramref name="endX" />,<paramref name="endY" />) plus π/2 radians.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.CreateLineParallel(System.Double,System.Double,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage)"><param name="x"><PARA>The x-coordinate of the reference point of the new line.</PARA></param><param name="y"><PARA>The y-coordinate of the reference point of the new line.</PARA></param><param name="line"><PARA>The line that the new line will be parallel to.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Create a new line through the given point parallel to the given line.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLine" /> that is parallel to <paramref name="line" /> and whose reference point is (<paramref name="x" />,<paramref name="y" />).</PARA><PARA>The new line has the same rotation and properties (such as <see cref="P:Cognex.VisionPro.CogLine.Color" />) as <paramref name="line" />.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> 
is mapped to the selected space of <paramref name="image" /> before the 
new line is created. The returned line has its selected space set to the 
selected space of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
the returned line has its selected space set to ".".
</PARA></remarks><returns><PARA>The new line.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.CreateLinePerpendicular(System.Double,System.Double,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage)"><param name="x"><PARA>The x-coordinate of the reference point of the new line.</PARA></param><param name="y"><PARA>The y-coordinate of the reference point of the new line.</PARA></param><param name="line"><PARA>The line that the new line will be perpendicular to.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><returns><PARA>The new line.</PARA></returns><summary>Create a new line through the given point perpendicular to the given line.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLine" /> that is perpendicular to <paramref name="line" /> and whose reference point is (<paramref name="x" />,<paramref name="y" />).</PARA><PARA>The new line's rotation is <paramref name="line" />'s rotation plus π/2 radians. The new lines has the same properties (such as <see cref="P:Cognex.VisionPro.CogLine.Color" />) as <paramref name="line" />.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> 
is mapped to the selected space of <paramref name="image" /> before the 
new line is created. The returned line has its selected space set to the 
selected space of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
the returned line has its selected space set to ".".
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistancePointLine(System.Double,System.Double,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="line"><PARA>The line.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="lineX"><PARA>The x-coordinate of the nearest point on the line. If the point is on the line, this value is the same as <paramref name="x" />.</PARA></param><param name="lineY"><PARA>The y-coordinate of the nearest point on the line. If the point is on the line, this value is the same as <paramref name="y" />.</PARA></param><summary>Returns the shortest distance from the given point to the given line.  Also provides the closest point on the line.</summary><remarks><PARA>Returns the shortest distance from the given point to the given line and optionally the closest point on the line.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="line" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance from the point (<paramref name="x" />,<paramref name="y" />) to the line. If the point is on the line, the distance is zero.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception></member><member name="M:Cognex.VisionPro.CogMath.AngleLineLine(Cognex.VisionPro.CogLine,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage)"><param name="lineA"><PARA>The first line.</PARA></param><param name="lineB"><PARA>The second line.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><remarks><PARA>Returns the angle in radians measured from <paramref name="lineA" /> to <paramref name="lineB" />.

The angle is normalized to the range -π to π.

<PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="lineA" /> and <paramref name="lineB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="lineA" /> and <paramref name="lineB" /> 
are presumed to be in the same coordinate space.
</PARA></PARA><PARA>
If the selected space of  
<paramref name="lineA" /> and <paramref name="lineB" /> is already the same as 
the selected space of <paramref name="image" />, 
the angle is equivalent to <paramref name="lineB" />.<see cref="P:Cognex.VisionPro.CogLine.Rotation" />-<paramref name="lineA" />.<see cref="P:Cognex.VisionPro.CogLine.Rotation" />.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="lineA" /> or <paramref name="lineB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><returns><PARA>The angle between the two lines.</PARA></returns><summary>Returns the angle in radians measured from LineA to LineB.</summary></member><member name="M:Cognex.VisionPro.CogMath.IntersectLineLine(Cognex.VisionPro.CogLine,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@,System.Double@)"><param name="lineA"><PARA>The first line.</PARA></param><param name="lineB"><PARA>The first line.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If this value is −1, the lines are coincident.</PARA></param><param name="x"><PARA>The x-coordinate of the intersection point.</PARA></param><param name="y"><PARA>The y-coordinate of the intersection point.</PARA></param><param name="angle"><PARA>The angle between the two lines. The angle is normalized to the range -π to π.
</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="lineA" /> or <paramref name="lineB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><returns><PARA>True if the lines intersect or are coincident.</PARA></returns><summary>Returns whether the given lines intersect.  Also provides the point of intersection and the angle between the lines.</summary><remarks><PARA>Returns whether the given lines intersect and optionally, the point of intersection and the angle between the lines.</PARA><PARA>The following table describes how the relationship between <paramref name="lineA" /> and <paramref name="lineB" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x" />,<paramref name="y" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="35" SRC="llparallel.jpg" apiSRC="IntersectLineLine_llparallel.jpg" /></PARA><PARA>Parallel</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="llcoincident.jpg" apiSRC="IntersectLineLine_llcoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>−1</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="28" SRC="llintersect.jpg" apiSRC="IntersectLineLine_llintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="lineA" /> and <paramref name="lineB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="lineA" /> and <paramref name="lineB" /> 
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.CreateSegmentByAveragingSegments(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.ICogImage)"><param name="segmentA"><PARA>The first line segment.</PARA></param><param name="segmentB"><PARA>The second line segment.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><returns><PARA>The new line segment.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segmentA" /> or <paramref name="segmentB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLineSegment" /> by averaging <paramref name="segmentA" /> and <paramref name="segmentB" />.</PARA><PARA>The start point of the new segment is the average of the start points of <paramref name="segmentA" /> and <paramref name="segmentB" />, and the end point of the new segment is the is the average of the end points of <paramref name="segmentA" /> and <paramref name="segmentB" />. The new segment is initialized with as many of <paramref name="segmentA" />'s properties (such as <see cref="P:Cognex.VisionPro.CogLineSegment.Color" />) as possible.
</PARA><PARA>You would typically use this function when <paramref name="segmentA" /> and <paramref name="segmentB" /> are parallel to each other and you wish to find a center line between them.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segmentA" /> and <paramref name="segmentB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
returned segment is computed. The returned segment 
has its selected space set to the 
selected space of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segmentA" /> and <paramref name="segmentB" /> 
are presumed to be in the same coordinate space and 
the returned line has its selected space set to ".".
</PARA></remarks><summary>Create a new line segment by averaging SegmentA and SegmentB.</summary></member><member name="M:Cognex.VisionPro.CogMath.DistancePointSegment(System.Double,System.Double,Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.ICogImage,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="segment"><PARA>The line segment.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="segmentX"><PARA>The x-coordinate of the nearest point on the line segment. If the point is on the line segment, this value is the same as <paramref name="x" />.</PARA></param><param name="segmentY"><PARA>The y-coordinate of the nearest point on the line segment. If the point is on the line segment, this value is the same as <paramref name="y" />.</PARA></param><summary>Returns the shortest distance from the given point to the given line segment.  Also provides the closest point on the line segment.</summary><returns><PARA>The shortest distance from the point (<paramref name="x" />,<paramref name="y" />) to the line segment. If the point is on the line segment, the distance is zero.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns the shortest distance from the given point to the given line segment and optionally the closest point on the line segment.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistanceSegmentLine(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segment"><PARA>The line segment.</PARA></param><param name="line"><PARA>The line.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="segmentX"><PARA>The x-coordinate of the nearest point on the line segment.</PARA></param><param name="segmentY"><PARA>The y-coordinate of the nearest point on the line segment.</PARA></param><param name="lineX"><PARA>The x-coordinate of the nearest point on the line.</PARA></param><param name="lineY"><PARA>The y-coordinate of the nearest point on the line.</PARA></param><returns><PARA>The shortest distance between the line and the line segment or zero if they are coincident or intersecting.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> or <paramref name="line" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns the shortest distance from the given line to the given line segment and optionally the closest point on the line and line segment.</PARA><PARA>The following table describes how the relationship between <paramref name="line" /> and <paramref name="segment" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="SegementX" />,<paramref name="segmentY" />)</tab-head></TH><TH><tab-head>(<paramref name="lineX" />,<paramref name="lineY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="39" HEIGHT="33" SRC="slparallel.jpg" apiSRC="DistanceSegmentLine_slparallel.jpg" /></PARA><PARA>Parallel</PARA></CELL><CELL><PARA>The distance between <paramref name="segment" /> and <paramref name="line" />.</PARA></CELL><CELL><PARA>A point on <paramref name="segment" /></PARA></CELL><CELL><PARA>A point on <paramref name="line" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="39" HEIGHT="33" SRC="slnonparallel.jpg" apiSRC="DistanceSegmentLine_slnonparallel.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The shortest distance between <paramref name="segment" /> and <paramref name="line" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="line" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="slcoincident.jpg" apiSRC="DistanceSegmentLine_slcoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="39" HEIGHT="33" SRC="slintersect.jpg" apiSRC="DistanceSegmentLine_slintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> and <paramref name="line" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" /> and <paramref name="line" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><summary>Returns the shortest distance from the given line to the given line segment.  Also provides the closest point on the line and line segment.</summary></member><member name="M:Cognex.VisionPro.CogMath.IntersectSegmentLine(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogLine,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@)"><param name="segment"><PARA>The line segment.</PARA></param><param name="line"><PARA>The line.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If this value is −1, the line and the line segment are coincident.</PARA></param><param name="x"><PARA>The x-coordinate of the intersection point.</PARA></param><param name="y"><PARA>The y-coordinate of the intersection point.</PARA></param><summary>Returns whether the given segment and line intersect.  Also provides the point of intersection.</summary><returns><PARA>True if the lines are intersecting or coincident.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> or <paramref name="line" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns whether the given segment and line intersect and optionally the point of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="line" /> and <paramref name="segment" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x" />,<paramref name="y" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="39" HEIGHT="33" SRC="slparallel.jpg" apiSRC="IntersectSegmentLine_slparallel.jpg" /></PARA><PARA>Parallel</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="39" HEIGHT="33" SRC="slnonparallel.jpg" apiSRC="IntersectSegmentLine_slnonparallel.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="slcoincident.jpg" apiSRC="IntersectSegmentLine_slcoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>−1</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="39" HEIGHT="33" SRC="slintersect.jpg" apiSRC="IntersectSegmentLine_slintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> and <paramref name="line" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" /> and <paramref name="line" /> 
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistanceSegmentSegment(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segmentA"><PARA>The first line segment.</PARA></param><param name="segmentB"><PARA>The second line segment.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="segmentAX"><PARA>The x-coordinate of the nearest point on <paramref name="segmentA" />.</PARA></param><param name="segmentAY"><PARA>The y-coordinate of the nearest point on <paramref name="segmentA" />.</PARA></param><param name="segmentBX"><PARA>The x-coordinate of the nearest point on <paramref name="segmentB" />.</PARA></param><param name="segmentBY"><PARA>The y-coordinate of the nearest point on <paramref name="segmentB" />.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segmentA" /> or <paramref name="segmentB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns the shortest distance between the two given segments.  Also provides the closest point on each segment.</summary><remarks><PARA>Returns the shortest distance between two line segments and optionally the closest point on each segment.</PARA><PARA>The following table describes how the relationship between <paramref name="segmentA" /> and <paramref name="segmentB" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="segmentAX" />,<paramref name="segmentAY" />)</tab-head></TH><TH><tab-head>(<paramref name="segmentBX" />,<paramref name="segmentBY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="35" SRC="ssparallel.jpg" apiSRC="DistanceSegmentSegment_ssparallel.jpg" /></PARA><PARA>Parallel, overlapping</PARA></CELL><CELL><PARA>The distance between <paramref name="segmentA" /> and <paramref name="segmentB" />.</PARA></CELL><CELL><PARA>A point on <paramref name="segmentA" /></PARA></CELL><CELL><PARA>A point on <paramref name="segmentB" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="33" SRC="ssnonparallel.jpg" apiSRC="DistanceSegmentSegment_ssnonparallel.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The shortest distance between <paramref name="segmentA" /> and <paramref name="segmentB" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segmentA" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segmentB" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="31" SRC="ssnonoverlap.jpg" apiSRC="DistanceSegmentSegment_ssnonoverlap.jpg" /></PARA><PARA>Parallel, not overlapping</PARA></CELL><CELL><PARA>The shortest distance between <paramref name="segmentA" /> and <paramref name="segmentB" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segmentA" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segmentB" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="sscoincident.jpg" apiSRC="DistanceSegmentSegment_sscoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="ssintersect.jpg" apiSRC="DistanceSegmentSegment_ssintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segmentA" /> and <paramref name="segmentB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segmentA" /> and <paramref name="segmentB" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance between the segments or zero if the line segments are coincident or intersecting.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.IntersectSegmentSegment(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@)"><param name="segmentA"><PARA>The first line segment.</PARA></param><param name="segmentB"><PARA>The other line segment.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If this value is −1, the line segments are coincident.</PARA></param><param name="x"><PARA>The x-coordinate of the intersection point.</PARA></param><param name="y"><PARA>The y-coordinate of the intersection point.</PARA></param><returns><PARA>True if the line segments are intersecting or coincident.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segmentA" /> or <paramref name="segmentB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns whether two line segments intersect and optionally the point of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="segmentA" /> and <paramref name="segmentB" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x" />,<paramref name="y" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="35" SRC="ssparallel.jpg" apiSRC="IntersectSegmentSegment_ssparallel.jpg" /></PARA><PARA>Parallel, overlapping</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="33" SRC="ssnonparallel.jpg" apiSRC="IntersectSegmentSegment_ssnonparallel.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="31" SRC="ssnonoverlap.jpg" apiSRC="IntersectSegmentSegment_ssnonoverlap.jpg" /></PARA><PARA>Parallel, not overlapping</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="sscoincident.jpg" apiSRC="IntersectSegmentSegment_sscoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>−1</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="35" HEIGHT="29" SRC="ssintersect.jpg" apiSRC="IntersectSegmentSegment_ssintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The point of intersection.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segmentA" /> and <paramref name="segmentB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segmentA" /> and <paramref name="segmentB" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><summary>Returns whether the given segments intersect.  Also provides the point of intersection.</summary></member><member name="M:Cognex.VisionPro.CogMath.InsidePointCircle(System.Double,System.Double,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage)"><param name="x"><PARA>The x-coordinate of the point to test.</PARA></param><param name="y"><PARA>The y-coordinate of the point to test.</PARA></param><param name="circle"><PARA>The circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><returns><PARA>True if the point (<paramref name="x" />,<paramref name="y" />) is in or on the circle.</PARA></returns><summary>Returns whether the given point is inside the given circle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="circle" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns true if the given point is on or in <paramref name="circle" />.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="circle" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="circle" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistancePointCircle(System.Double,System.Double,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="circle"><PARA>The circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="circleX"><PARA>The x-coordinate of the nearest point on the circle. If the point is on the circle, this value is the same as <paramref name="x" />. If (<paramref name="x" />,<paramref name="y" />) is the center of the circle, this value is the x-coordinate of an arbitrary point on the circle.</PARA></param><param name="circleY"><PARA>The y-coordinate of the nearest point on the circle. If the point is on the circle, this value is the same as <paramref name="y" />. If (<paramref name="x" />,<paramref name="y" />) is the center of the circle, this value is the y-coordinate of an arbitrary point on the circle.</PARA></param><summary>Returns the shortest distance from the given point to the given circle.  Also provides the closest point on the circle.</summary><remarks><PARA>Returns the shortest distance from the given point to the given circle.</PARA><PARA>The following table describes how the relationship between the point (<paramref name="x" />,<paramref name="y" />) and <paramref name="circle" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="circleX" />,<paramref name="circleY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="29" HEIGHT="30" SRC="cpin.jpg" apiSRC="DistancePointCircle_cpin.jpg" /></PARA><PARA>Point inside</PARA></CELL><CELL><PARA>The negative of the shortest distance between (<paramref name="x" />,<paramref name="y" />) and <paramref name="circle" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circle" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="29" HEIGHT="33" SRC="cpout.jpg" apiSRC="DistancePointCircle_cpout.jpg" /></PARA><PARA>Point outside</PARA></CELL><CELL><PARA>The shortest distance between (<paramref name="x" />,<paramref name="y" />) and <paramref name="circle" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circle" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="30" HEIGHT="30" SRC="cpon.jpg" apiSRC="DistancePointCircle_cpon.jpg" /></PARA><PARA>Point on circle</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(<paramref name="x" />,<paramref name="y" />)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="29" HEIGHT="30" SRC="cpcenter.jpg" apiSRC="DistancePointCircle_cpcenter.jpg" /></PARA><PARA>Point in center</PARA></CELL><CELL><PARA>The radius of the circle.</PARA></CELL><CELL><PARA>An arbitrary point on the circle</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="circle" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="circle" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance from the point (<paramref name="x" />,<paramref name="y" />) to the circle. If the point is inside the circle, the distance is negative.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="circle" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception></member><member name="M:Cognex.VisionPro.CogMath.DistanceLineCircle(Cognex.VisionPro.CogLine,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="line"><PARA>The line.</PARA></param><param name="circle"><PARA>The circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="lineX"><PARA>The x-coordinate of the nearest point on the line.</PARA></param><param name="lineY"><PARA>The y-coordinate of the nearest point on the line.</PARA></param><param name="circleX"><PARA>The x-coordinate of the nearest point on the circle.</PARA></param><param name="circleY"><PARA>The y-coordinate of the nearest point on the circle.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> or <paramref name="circle" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns the shortest distance from <paramref name="line" /> to <paramref name="circle" /> and optionally the points on each shape that correspond to this shortest distance.</PARA><PARA>The following table describes how the relationship between <paramref name="line" /> and <paramref name="circle" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="lineX" />,<paramref name="lineY" />)</tab-head></TH><TH><tab-head>(<paramref name="circleX" />,<paramref name="circleY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="53" HEIGHT="46" SRC="lcnonintersect.jpg" apiSRC="DistanceLineCircle_lcnonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>Shortest distance between <paramref name="line" /> and <paramref name="circle" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="line" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circle" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="lctangent.jpg" apiSRC="DistanceLineCircle_lctangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="lcintersect.jpg" apiSRC="DistanceLineCircle_lcintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> and <paramref name="circle" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="line" /> and <paramref name="circle" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The nearest distance between <paramref name="line" /> and <paramref name="circle" />. Zero if the line and circle are tangent or intersecting.</PARA></returns><summary>Returns the shortest distance from the given line to the given circle.  Also provides the points on each shape that correspond to this shortest distance.</summary></member><member name="M:Cognex.VisionPro.CogMath.IntersectLineCircle(Cognex.VisionPro.CogLine,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="line"><PARA>The line.</PARA></param><param name="circle"><PARA>The circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If the value is zero, <paramref name="line" /> and <paramref name="circle" /> do not intersect. If the value is 1, (<paramref name="x0" />,<paramref name="y0" />) is the tangent point.
If the value is 2, (<paramref name="x0" />,<paramref name="y0" />) and (<paramref name="x1" />,<paramref name="y1" />) are the intersection points.</PARA></param><param name="x0"><PARA>The x-coordinate of the first intersection point.</PARA></param><param name="y0"><PARA>The y-coordinate of the first intersection point.</PARA></param><param name="x1"><PARA>The x-coordinate of the second intersection point.</PARA></param><param name="y1"><PARA>The y-coordinate of the second intersection point.</PARA></param><returns><PARA>True if the <paramref name="line" /> and <paramref name="circle" /> are tangent or intersecting.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> or <paramref name="circle" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns whether the given circle and line intersect.  Also provides the points of intersection.</summary><remarks><PARA>Returns whether the given circle and line intersect and optionally the points of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="line" /> and <paramref name="circle" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x0" />,<paramref name="y0" />)</tab-head></TH><TH><tab-head>(<paramref name="x1" />,<paramref name="y1" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="53" HEIGHT="46" SRC="lcnonintersect.jpg" apiSRC="IntersectLineCircle_lcnonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="lctangent.jpg" apiSRC="IntersectLineCircle_lctangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The tangent point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="lcintersect.jpg" apiSRC="IntersectLineCircle_lcintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>2</PARA></CELL><CELL><PARA>The first intersection point.</PARA></CELL><CELL><PARA>The second intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> and <paramref name="circle" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="line" /> and <paramref name="circle" /> 
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistanceSegmentCircle(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segment"><PARA>The line segment.</PARA></param><param name="circle"><PARA>The circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="segmentX"><PARA>The x-coordinate of the nearest point on the line segment.</PARA></param><param name="segmentY"><PARA>The x-coordinate of the nearest point on the line segment.</PARA></param><param name="circleX"><PARA>The x-coordinate of the nearest point on the circle.</PARA></param><param name="circleY"><PARA>The y-coordinate of the nearest point on the circle.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> or <paramref name="circle" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns the shortest distance from the given line segment to the given circle.  Also provides the points on each shape that correspond to this shortest distance.</summary><remarks><PARA>Returns the shortest distance from the line segment <paramref name="segment" /> to <paramref name="circle" /> and optionally the points on each shape that correspond to this shortest distance.</PARA><PARA>The following table describes how the relationship between <paramref name="segment" /> and <paramref name="circle" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="segmentX" />,<paramref name="segmentY" />)</tab-head></TH><TH><tab-head>(<paramref name="circleX" />,<paramref name="circleY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="53" HEIGHT="46" SRC="scnonintersect.jpg" apiSRC="DistanceSegmentCircle_scnonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>Shortest distance between <paramref name="segment" /> and <paramref name="circle" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circle" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="29" HEIGHT="30" SRC="scwithin.jpg" apiSRC="DistanceSegmentCircle_scwithin.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The negative of the shortest distance between <paramref name="segment" /> and <paramref name="circle" />.</PARA></CELL><CELL><PARA>The nearest endpoint on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circle" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="sctangent.jpg" apiSRC="DistanceSegmentCircle_sctangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="scendpt.jpg" apiSRC="DistanceSegmentCircle_scendpt.jpg" /></PARA><PARA>Intersecting, endpoint on circle</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="scstraddle.jpg" apiSRC="DistanceSegmentCircle_scstraddle.jpg" /></PARA><PARA>Straddle</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="scintersect.jpg" apiSRC="DistanceSegmentCircle_scintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> and <paramref name="circle" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" /> and <paramref name="circle" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance between the circle and the line segment.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.IntersectSegmentCircle(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segment"><PARA>The line segment.</PARA></param><param name="circle"><PARA>The circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If the value is zero, <paramref name="segment" /> and <paramref name="circle" /> do not intersect. If the value is 1, (<paramref name="x0" />,<paramref name="y0" />) is the tangent point or the single intersection point.
If the value is 2, (<paramref name="x0" />,<paramref name="y0" />) and (<paramref name="x1" />,<paramref name="y1" />) are the intersection points.</PARA></param><param name="x0"><PARA>The x-coordinate of the first intersection point.</PARA></param><param name="y0"><PARA>The y-coordinate of the first intersection point.</PARA></param><param name="x1"><PARA>The x-coordinate of the second intersection point.</PARA></param><param name="y1"><PARA>The y-coordinate of the second intersection point.</PARA></param><summary>Returns whether the given circle and line segment intersect.  Also provides the points of intersection.</summary><remarks><PARA>Returns whether <paramref name="circle" /> and line segment <paramref name="segment" /> intersect and optionally the point of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="segment" /> and <paramref name="circle" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x0" />,<paramref name="y0" />)</tab-head></TH><TH><tab-head>(<paramref name="x1" />,<paramref name="y1" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="53" HEIGHT="46" SRC="scnonintersect.jpg" apiSRC="IntersectSegmentCircle_scnonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="29" HEIGHT="30" SRC="scwithin.jpg" apiSRC="IntersectSegmentCircle_scwithin.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="sctangent.jpg" apiSRC="IntersectSegmentCircle_sctangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The tangent point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="52" HEIGHT="30" SRC="scendpt.jpg" apiSRC="IntersectSegmentCircle_scendpt.jpg" /></PARA><PARA>Intersecting, endpoint on circle</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The endpoint of the segment that touches the circle.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="scstraddle.jpg" apiSRC="IntersectSegmentCircle_scstraddle.jpg" /></PARA><PARA>Straddle</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The intersection point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="scintersect.jpg" apiSRC="IntersectSegmentCircle_scintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>2</PARA></CELL><CELL><PARA>The first intersection point.</PARA></CELL><CELL><PARA>The second intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> and <paramref name="circle" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" /> and <paramref name="circle" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> or <paramref name="circle" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><returns><PARA>True if the <paramref name="segment" /> and <paramref name="circle" /> are tangent or intersecting.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.DistanceCircleCircle(Cognex.VisionPro.CogCircle,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="circleA"><PARA>The first circle.</PARA></param><param name="circleB"><PARA>The second circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="circleAX"><PARA>The x-coordinate of the nearest point in <paramref name="circleA" />.</PARA></param><param name="circleAY"><PARA>The y-coordinate of the nearest point in <paramref name="circleA" />.</PARA></param><param name="circleBX"><PARA>The x-coordinate of the nearest point in <paramref name="circleB" />.</PARA></param><param name="circleBY"><PARA>The y-coordinate of the nearest point in <paramref name="circleB" />.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="circleA" /> or <paramref name="circleB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogMathUnsupportedGeometryException" cgnxHRESULT="E_CogMath_Unsupported_Geometry"><para>It is impossible to map both 
			<paramref name="circleA" /> and <paramref name="circleB" /> to the same coordinate space without converting one or both circles into ellipses.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns the shortest distance between the given circles and optionally the points on each shape that correspond to this shortest distance.</PARA><PARA>The following table describes how the relationship between <paramref name="circleA" /> and <paramref name="circleB" /> affects the out parameters.</PARA><NOTE>
In this release of VisionPro, if it is not possible to map both <paramref name="circleA" /> and <paramref name="circleB" /> 
into a single space where neither circle is converted into an ellipse, this function will throw 
<BOLD>E_CogMath_Unsupported_Geometry</BOLD>.
</NOTE><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="circleAX" />,<paramref name="circleAY" />)</tab-head></TH><TH><tab-head>(<paramref name="circleBX" />,<paramref name="circleBY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="40" SRC="cconcentric.jpg" apiSRC="DistanceCircleCircle_cconcentric.jpg" /></PARA><PARA>Concentric</PARA></CELL><CELL><PARA>The negative of the distance from <paramref name="circleA" /> to <paramref name="circleB" />.</PARA></CELL><CELL><PARA>An arbitrary point on  <paramref name="circleA" /></PARA></CELL><CELL><PARA>An arbitrary point on  <paramref name="circleB" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="40" SRC="cwithin.jpg" apiSRC="DistanceCircleCircle_cwithin.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The negative of the shortest distance from <paramref name="circleA" /> to <paramref name="circleB" />.</PARA></CELL><CELL><PARA>The nearest point on <paramref name="circleA" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circleB" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="55" HEIGHT="25" SRC="cnonintersect.jpg" apiSRC="DistanceCircleCircle_cnonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The shortest distance from <paramref name="circleA" /> to <paramref name="circleB" />.</PARA></CELL><CELL><PARA>The nearest point on <paramref name="circleA" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="circleB" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="40" SRC="ccoincident.jpg" apiSRC="DistanceCircleCircle_ccoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="46" HEIGHT="25" SRC="ctangent.jpg" apiSRC="DistanceCircleCircle_ctangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="38" HEIGHT="25" SRC="cintersect.jpg" apiSRC="DistanceCircleCircle_cintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="circleA" /> and <paramref name="circleB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="circleA" /> and <paramref name="circleB" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance between the two circles. The distance in negative if one circle is wholly within the other; zero if the circles are coincident, tangent, or intersecting.</PARA></returns><summary>Returns the shortest distance between the given circles.  Also provides the points on each shape that correspond to this shortest distance.</summary></member><member name="M:Cognex.VisionPro.CogMath.IntersectCircleCircle(Cognex.VisionPro.CogCircle,Cognex.VisionPro.CogCircle,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="circleA"><PARA>The first circle.</PARA></param><param name="circleB"><PARA>The second circle.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of points that are valid in the out parameters. If the value is −1, the circles are coincident; if the value is zero, the circles not intersecting. If the value is 1, only the value (<paramref name="x0" />,<paramref name="y0" />) is valid; if the value is 2, both (<paramref name="x0" />,<paramref name="y0" />) and (<paramref name="x1" />,<paramref name="y1" />) are valid.</PARA></param><param name="x0"><PARA>The x-coordinate of the first intersection point.</PARA></param><param name="y0"><PARA>The y-coordinate of the first intersection point.</PARA></param><param name="x1"><PARA>The x-coordinate of the second intersection point.</PARA></param><param name="y1"><PARA>The y-coordinate of the second intersection point.</PARA></param><param name="x2"><PARA>The x-coordinate of the third intersection point.</PARA></param><param name="y2"><PARA>The y-coordinate of the third intersection point.</PARA></param><param name="x3"><PARA>The x-coordinate of the fourth intersection point.</PARA></param><param name="y3"><PARA>The y-coordinate of the fourth intersection point.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="circleA" /> or <paramref name="circleB" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogMathUnsupportedGeometryException" cgnxHRESULT="E_CogMath_Unsupported_Geometry"><para>
	It is impossible to map both 
	<paramref name="circleA" /> and <paramref name="circleB" /> to the same 
	coordinate space without converting one or both circles into ellipses.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns whether the given circles intersect.  Also provides the points of intersection.</summary><remarks><PARA>Returns whether the given circles intersect and optionally the points of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="circleA" /> and <paramref name="circleB" /> affects the out parameters.</PARA><NOTE>
In this release of VisionPro, if it is not possible to map both <paramref name="circleA" /> and <paramref name="circleB" /> 
into a single space where neither circle is converted into an ellipse, this function will throw 
<BOLD>E_CogMath_Unsupported_Geometry</BOLD>. Also, 
in this release of VisionPro, <paramref name="numPoints" /> is never more than 2. In future releases, in cases
where one or both input circles are transformed into ellipses, up to 4 intersection points may be returned. Accordingly, 
the table below does not include columns for the values of 
<paramref name="x2" />, 
<paramref name="y2" />, 
<paramref name="x3" />, and
<paramref name="y3" />.
</NOTE><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x0" />,<paramref name="y0" />)</tab-head></TH><TH><tab-head>(<paramref name="x1" />,<paramref name="y1" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="40" SRC="cconcentric.jpg" apiSRC="IntersectCircleCircle_cconcentric.jpg" /></PARA><PARA>Concentric</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="40" SRC="cwithin.jpg" apiSRC="IntersectCircleCircle_cwithin.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="55" HEIGHT="25" SRC="cnonintersect.jpg" apiSRC="IntersectCircleCircle_cnonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="40" SRC="ccoincident.jpg" apiSRC="IntersectCircleCircle_ccoincident.jpg" /></PARA><PARA>Coincident</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>−1</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="46" HEIGHT="25" SRC="ctangent.jpg" apiSRC="IntersectCircleCircle_ctangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The tangent point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="38" HEIGHT="25" SRC="cintersect.jpg" apiSRC="IntersectCircleCircle_cintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>2</PARA></CELL><CELL><PARA>The first intersection point.</PARA></CELL><CELL><PARA>The second intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="circleA" /> and <paramref name="circleB" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="circleA" /> and <paramref name="circleB" /> 
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.InsidePointEllipse(System.Double,System.Double,Cognex.VisionPro.CogEllipse,Cognex.VisionPro.ICogImage)"><param name="x"><PARA>The x-coordinate of the point to test.</PARA></param><param name="y"><PARA>The y-coordinate of the point to test.</PARA></param><param name="ellipse"><PARA>The ellipse.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipse" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns true if the given point is on or in <paramref name="ellipse" />.</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="ellipse" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="ellipse" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA></remarks><summary>Returns whether the given point is inside the given ellipse.</summary><returns><PARA>True if the point (<paramref name="x" />,<paramref name="y" />) is in or on the ellipse.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.DistancePointEllipse(System.Double,System.Double,Cognex.VisionPro.CogEllipse,Cognex.VisionPro.ICogImage,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="ellipse"><PARA>The ellipse.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="ellipseX"><PARA>The x-coordinate of the nearest point on the ellipse. If the point is on the ellipse, this value is the same as <paramref name="x" />. If the ellipse is a circle and (<paramref name="x" />,<paramref name="y" />) is the center of the circle, this value is the x-coordinate of an arbitrary point on the circle.</PARA></param><param name="ellipseY"><PARA>The x-coordinate of the another point on the ellipse that is equidistant to (<paramref name="x" />,<paramref name="y" />). </PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipse" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns the shortest distance from the given point to the given ellipse.  Also provides the closest point on the ellipse.</summary><remarks><PARA>Returns the shortest distance from the given point to the given ellipse.</PARA><PARA>The following table describes how the relationship between the point (<paramref name="x" />,<paramref name="y" />) and <paramref name="ellipse" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="ellipseX" />,<paramref name="ellipseY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="24" SRC="epin.jpg" apiSRC="DistancePointEllipse_epin.jpg" /></PARA><PARA>Point inside</PARA></CELL><CELL><PARA>The negative of the shortest distance between (<paramref name="x" />,<paramref name="y" />) and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="24" SRC="epin2.jpg" apiSRC="DistancePointEllipse_epin2.jpg" /></PARA><PARA>Point inside</PARA></CELL><CELL><PARA>The negative of the shortest distance between (<paramref name="x" />,<paramref name="y" />) and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>One of the equidistant points on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="38" SRC="epout.jpg" apiSRC="DistancePointEllipse_epout.jpg" /></PARA><PARA>Point outside</PARA></CELL><CELL><PARA>The shortest distance between (<paramref name="x" />,<paramref name="y" />) and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="24" SRC="epon.jpg" apiSRC="DistancePointEllipse_epon.jpg" /></PARA><PARA>Point on ellipse</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(<paramref name="x" />,<paramref name="y" />)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="29" HEIGHT="30" SRC="cpcenter.jpg" apiSRC="DistancePointEllipse_cpcenter.jpg" /></PARA><PARA>Ellipse is a circle, point in center</PARA></CELL><CELL><PARA>The radius of the circle.</PARA></CELL><CELL><PARA>An arbitrary point on the circle</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="ellipse" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="ellipse" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance from the point (<paramref name="x" />,<paramref name="y" />) to the ellipse. If the point is inside the ellipse, the distance is negative.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.DistanceLineEllipse(Cognex.VisionPro.CogLine,Cognex.VisionPro.CogEllipse,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="line"><PARA>The line.</PARA></param><param name="ellipse"><PARA>The ellipse.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="lineX"><PARA>The x-coordinate of the nearest point on the line.</PARA></param><param name="lineY"><PARA>The y-coordinate of the nearest point on the line.</PARA></param><param name="ellipseX"><PARA>The x-coordinate of the nearest point on the ellipse.</PARA></param><param name="ellipseY"><PARA>The y-coordinate of the nearest point on the ellipse.</PARA></param><remarks><PARA>Returns the shortest distance from <paramref name="line" /> to <paramref name="ellipse" /> and optionally the points on each shape that correspond to this shortest distance.</PARA><PARA>The following table describes how the relationship between <paramref name="line" /> and <paramref name="ellipse" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="lineX" />,<paramref name="lineY" />)</tab-head></TH><TH><tab-head>(<paramref name="ellipseX" />,<paramref name="ellipseY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="56" HEIGHT="47" SRC="lenonintersect.jpg" apiSRC="DistanceLineEllipse_lenonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>Shortest distance between <paramref name="line" /> and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="line" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="50" HEIGHT="47" SRC="letangent.jpg" apiSRC="DistanceLineEllipse_letangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="44" HEIGHT="47" SRC="leintersect.jpg" apiSRC="DistanceLineEllipse_leintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> and <paramref name="ellipse" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="line" /> and <paramref name="ellipse" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> or <paramref name="ellipse" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns the shortest distance from the given line to the given ellipse.  Also provides the points on each shape that correspond to this shortest distance.</summary><returns><PARA>The nearest distance between <paramref name="line" /> and <paramref name="ellipse" />. Zero if the line and ellipse are tangent or intersecting.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.IntersectLineEllipse(Cognex.VisionPro.CogLine,Cognex.VisionPro.CogEllipse,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="line"><PARA>The line.</PARA></param><param name="ellipse"><PARA>The ellipse.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If the value is zero, <paramref name="line" /> and <paramref name="ellipse" /> do not intersect. If the value is 1, (<paramref name="x0" />,<paramref name="y0" />) is the tangent point.
If the value is 2, (<paramref name="x0" />,<paramref name="y0" />) and (<paramref name="x1" />,<paramref name="y1" />) are the intersection points.</PARA></param><param name="x0"><PARA>The x-coordinate of the first intersection point.</PARA></param><param name="y0"><PARA>The y-coordinate of the first intersection point.</PARA></param><param name="x1"><PARA>The x-coordinate of the second intersection point.</PARA></param><param name="y1"><PARA>The y-coordinate of the second intersection point.</PARA></param><returns><PARA>True if the <paramref name="line" /> and <paramref name="ellipse" /> are tangent or intersecting.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="line" /> or <paramref name="ellipse" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns whether the given ellipse and line intersect.  Also provides the points of intersection.</summary><remarks><PARA>Returns whether <paramref name="ellipse" /> and <paramref name="line" /> intersect and optionally the point of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="line" /> and <paramref name="ellipse" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x0" />,<paramref name="y0" />)</tab-head></TH><TH><tab-head>(<paramref name="x1" />,<paramref name="y1" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="56" HEIGHT="47" SRC="lenonintersect.jpg" apiSRC="IntersectLineEllipse_lenonintersect.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="50" HEIGHT="47" SRC="letangent.jpg" apiSRC="IntersectLineEllipse_letangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The tangent point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="44" HEIGHT="47" SRC="leintersect.jpg" apiSRC="IntersectLineEllipse_leintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>2</PARA></CELL><CELL><PARA>The first intersection point.</PARA></CELL><CELL><PARA>The second intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="line" /> and <paramref name="ellipse" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="line" /> and <paramref name="ellipse" /> 
are presumed to be in the same coordinate space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistanceSegmentEllipse(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogEllipse,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segment"><PARA>The line segment.</PARA></param><param name="ellipse"><PARA>The ellipse.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="segmentX"><PARA>The x-coordinate of the nearest point on the line segment.</PARA></param><param name="segmentY"><PARA>The y-coordinate of the nearest point on the line segment.</PARA></param><param name="ellipseX"><PARA>The x-coordinate of the nearest point on the ellipse.</PARA></param><param name="ellipseY"><PARA>The x-coordinate of the nearest point on the ellipse.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> or <paramref name="ellipse" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns the shortest distance from the given line segment to the given ellipse.  Also provides the points on each shape that correspond to this shortest distance.</summary><remarks><PARA>Returns the shortest distance from the given the line segment <paramref name="segment" /> to <paramref name="ellipse" /> and optionally the points on each shape that correspond to this shortest distance.</PARA><PARA>The following table describes how the relationship between <paramref name="segment" /> and <paramref name="ellipse" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Distance" /></tab-head></TH><TH><tab-head>(<paramref name="segmentX" />,<paramref name="segmentY" />)</tab-head></TH><TH><tab-head>(<paramref name="ellipseX" />,<paramref name="ellipseY" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="53" HEIGHT="46" SRC="senonintersectd.jpg" apiSRC="DistanceSegmentEllipse_senonintersectd.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>Shortest distance between <paramref name="segment" /> and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>The nearest point on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="23" SRC="sewithin2d.jpg" apiSRC="DistanceSegmentEllipse_sewithin2d.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The negative of the shortest distance between <paramref name="segment" /> and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>One of the endpoints on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point to (<paramref name="SegmentX0" />, <paramref name="SegmentY0" />) on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="23" SRC="sewithin3d.jpg" apiSRC="DistanceSegmentEllipse_sewithin3d.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The negative of the shortest distance between <paramref name="segment" /> and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>One of the endpoints on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point to (<paramref name="SegmentX0" />, <paramref name="SegmentY0" />) on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="37" HEIGHT="23" SRC="sewithin4d.jpg" apiSRC="DistanceSegmentEllipse_sewithin4d.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>The negative of the shortest distance between <paramref name="segment" /> and <paramref name="ellipse" />.</PARA></CELL><CELL><PARA>One of the endpoints on  <paramref name="segment" /></PARA></CELL><CELL><PARA>The nearest point to (<paramref name="SegmentX0" />, <paramref name="SegmentY0" />) on  <paramref name="ellipse" /></PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="setangent.jpg" apiSRC="DistanceSegmentEllipse_setangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="52" HEIGHT="23" SRC="seendpt.jpg" apiSRC="DistanceSegmentEllipse_seendpt.jpg" /></PARA><PARA>Intersecting, endpoint on ellipse</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="44" HEIGHT="23" SRC="sestraddle.jpg" apiSRC="DistanceSegmentEllipse_sestraddle.jpg" /></PARA><PARA>Straddle</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="seintersect.jpg" apiSRC="DistanceSegmentEllipse_seintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> and <paramref name="ellipse" /> 
are mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" /> and <paramref name="ellipse" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><returns><PARA>The shortest distance between the line segment and the ellipse.</PARA><PARA>If the line segment is within the ellipse, the distance is negative.</PARA><PARA>If the line segment intersects or touches the ellipse, the distance is zero.</PARA></returns></member><member name="M:Cognex.VisionPro.CogMath.IntersectSegmentEllipse(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogEllipse,Cognex.VisionPro.ICogImage,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segment"><PARA /></param><param name="ellipse"><PARA>The ellipse.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="numPoints"><PARA>The number of intersection points. If the value is zero, <paramref name="segment" /> and <paramref name="ellipse" /> do not intersect. If the value is 1, (<paramref name="x0" />,<paramref name="y0" />) is the tangent point or the single intersection point.
If the value is 2, (<paramref name="x0" />,<paramref name="y0" />) and (<paramref name="x1" />,<paramref name="y1" />) are the intersection points.</PARA></param><param name="x0"><PARA>The x-coordinate of the first intersection point.</PARA></param><param name="y0"><PARA>The y-coordinate of the first intersection point.</PARA></param><param name="x1"><PARA>The x-coordinate of the second intersection point.</PARA></param><param name="y1"><PARA>The y-coordinate of the second intersection point.</PARA></param><returns><PARA>True if the <paramref name="segment" /> and <paramref name="ellipse" /> are tangent or intersecting.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="segment" /> or <paramref name="ellipse" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns whether the <paramref name="ellipse" /> and line segment <paramref name="segment" /> intersect and optionally the point of intersection.</PARA><PARA>The following table describes how the relationship between <paramref name="segment" /> and <paramref name="ellipse" /> affects the out parameters.</PARA><TABLE><ROW><TH><tab-head>Condition</tab-head></TH><TH><tab-head><paramref name="Intersected" /></tab-head></TH><TH><tab-head><paramref name="numPoints" /></tab-head></TH><TH><tab-head>(<paramref name="x0" />,<paramref name="y0" />)</tab-head></TH><TH><tab-head>(<paramref name="x1" />,<paramref name="y1" />)</tab-head></TH></ROW><ROW><CELL><PARA><PICTURE WIDTH="53" HEIGHT="46" SRC="senonintersect.jpg" apiSRC="IntersectSegmentEllipse_senonintersect.jpg" /></PARA><PARA><PICTURE WIDTH="37" HEIGHT="23" SRC="sewithin2.jpg" apiSRC="IntersectSegmentEllipse_sewithin2.jpg" /></PARA><PARA><PICTURE WIDTH="37" HEIGHT="23" SRC="sewithin3.jpg" apiSRC="IntersectSegmentEllipse_sewithin3.jpg" /></PARA><PARA><PICTURE WIDTH="37" HEIGHT="23" SRC="sewithin4.jpg" apiSRC="IntersectSegmentEllipse_sewithin4.jpg" /></PARA><PARA>Non-intersecting</PARA></CELL><CELL><PARA>False</PARA></CELL><CELL><PARA>0</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="47" HEIGHT="46" SRC="setangent.jpg" apiSRC="IntersectSegmentEllipse_setangent.jpg" /></PARA><PARA>Tangent</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The tangent point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="52" HEIGHT="23" SRC="seendpt.jpg" apiSRC="IntersectSegmentEllipse_seendpt.jpg" /></PARA><PARA>Intersecting, endpoint on ellipse</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The endpoint that touches the ellipse.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="44" HEIGHT="23" SRC="sestraddle.jpg" apiSRC="IntersectSegmentEllipse_sestraddle.jpg" /></PARA><PARA>Straddle</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>1</PARA></CELL><CELL><PARA>The intersection point.</PARA></CELL><CELL><PARA>(0,0)</PARA></CELL></ROW><ROW><CELL><PARA><PICTURE WIDTH="40" HEIGHT="46" SRC="seintersect.jpg" apiSRC="IntersectSegmentEllipse_seintersect.jpg" /></PARA><PARA>Intersecting</PARA></CELL><CELL><PARA>True</PARA></CELL><CELL><PARA>2</PARA></CELL><CELL><PARA>The first intersection point.</PARA></CELL><CELL><PARA>The second intersection point.</PARA></CELL></ROW></TABLE><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="segment" /> and <paramref name="ellipse" /> 
are mapped to the selected space of <paramref name="image" /> before the 
intersection is computed and the result is expressed in that space.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="segment" /> and <paramref name="ellipse" /> 
are presumed to be in the same coordinate space.
</PARA></remarks><summary>Returns whether the given ellipse and line segment intersect.  Also provides the points of intersection.</summary></member><member name="M:Cognex.VisionPro.CogMath.DistancePointPolygon(System.Double,System.Double,Cognex.VisionPro.CogPolygon,Cognex.VisionPro.ICogImage,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the point.</PARA></param><param name="y"><PARA>The y-coordinate of the point.</PARA></param><param name="polygon"><PARA>The polygon.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="polygonX"><PARA>The x-coordinate of the nearest point on the polygon. If the point is on the polygon, this value is the same as <paramref name="x" />.</PARA></param><param name="polygonY"><PARA>The y-coordinate of the nearest point on the polygon. If the point is on the polygon, this value is the same as <paramref name="y" />.</PARA></param><summary>Returns the shortest distance from the given point to the given polygon.  Also provides the closest point on the polygon.</summary><returns><PARA>The shortest distance from <paramref name="PolygonA" /> to <paramref name="PolygonB" />. If the nearest point is within <paramref name="PolygonA" /> the distance is negative. If the polygons intersect, the distance is zero.
</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polygon" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><remarks><PARA>Returns the shortest distance from the given point to the given polygon and optionally the closest point on the polygon. If the point is within the polygon (according to <see cref="P:Cognex.VisionPro.CogPolygon.FillMode" />), the distance is negative. 
</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="polygon" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="x" /> and <paramref name="y" /> are presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="polygon" />, <paramref name="x" />, and <paramref name="y" />
are presumed to be in the same coordinate space.
</PARA><PARA>If more than one point on the polygon has the same distance from (<paramref name="x" />, <paramref name="y" />), the returned point (<paramref name="polygonX" />, <paramref name="polygonY" />) is chosen arbitrarily among them.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMath.DistanceSegmentPolygon(Cognex.VisionPro.CogLineSegment,Cognex.VisionPro.CogPolygon,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="segment"><PARA>The line segment.</PARA></param><param name="polygon"><PARA>The polygon.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="segmentX"><PARA>The x-coordinate of the nearest point on the line segment.</PARA></param><param name="segmentY"><PARA>The x-coordinate of the nearest point on the line segment.</PARA></param><param name="polygonX"><PARA>The x-coordinate of the nearest point on the polygon.</PARA></param><param name="polygonY"><PARA>The y-coordinate of the nearest point on the polygon.</PARA></param><remarks><PARA>Returns the shortest distance from the given segment to the given polygon and optionally the points on each shape that correspond to this shortest distance. If <paramref name="segment" /> is within the polygon (according to <see cref="P:Cognex.VisionPro.CogPolygon.FillMode" />), the distance is negative. 
</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="polygon" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="segment" /> is presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="polygon" /> and <paramref name="segment" />
are presumed to be in the same coordinate space.
</PARA><PARA>If more than one pair of points on the polygon and <paramref name="segment" /> have the same distance,
the returned  (<paramref name="segmentX" />, <paramref name="segmentY" />) and  (<paramref name="polygonX" />, <paramref name="polygonY" />) pair is chosen arbitrarily among them.</PARA></remarks><summary>Returns the shortest distance from the given segment to the given polygon.  Also provides the points on each shape that correspond to this shortest distance.</summary><returns><PARA>The shortest distance from <paramref name="segment" /> to the polygon. If <paramref name="segment" /> is inside the polygon, the distance is negative. If the segment is tangent or intersecting, the distance is zero.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polygon" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception></member><member name="M:Cognex.VisionPro.CogMath.DistancePolygonPolygon(Cognex.VisionPro.CogPolygon,Cognex.VisionPro.CogPolygon,Cognex.VisionPro.ICogImage,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="polygonA"><PARA>The first polygon.</PARA></param><param name="polygonB"><PARA>The second polygon.</PARA></param><param name="image"><PARA>
An image that specifies the coordinate space to use.
</PARA></param><param name="polygonAX"><PARA>The x-coordinate of the nearest point on <paramref name="polygonA" />.</PARA></param><param name="polygonAY"><PARA>The y-coordinate of the nearest point on <paramref name="polygonA" />.</PARA></param><param name="polygonBX"><PARA>The x-coordinate of the nearest point on <paramref name="polygonB" />.</PARA></param><param name="polygonBY"><PARA>The y-coordinate of the nearest point on <paramref name="polygonB" />.</PARA></param><returns><PARA>The shortest distance from the <paramref name="polygonA" /> and <paramref name="polygonB" />. If <paramref name="polygonB" /> is inside <paramref name="polygonA" />, the distance is negative.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Polygon" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para>
			At least one shape's selected space names is not a 
			<see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">legal space name</see>.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotUniqueException" cgnxHRESULT="E_CogSpaceTree_NotUnique"><para>
			At least one shape's selected space names is a nonqualified space name and more than one instance of it 
			exists in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeNotInTreeException" cgnxHRESULT="E_CogSpaceTree_NotInTree"><para>
			At least one shape does not exist in <paramref name="image" />'s coordinate space tree.
		</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>
			The coordinate space tree is missing from <paramref name="image" />.
		</para></exception><summary>Returns the shortest distance between the given polygons.  Also provides the points on each polygon that correspond to this shortest distance.</summary><remarks><PARA>Returns the shortest distance between the given polygons and optionally the points on each polygon that correspond to this shortest distance.
If <paramref name="polygonB" /> is within <paramref name="polygonA" /> (according to <see cref="P:Cognex.VisionPro.CogPolygon.FillMode" />), the distance is negative. 
</PARA><PARA>
If you supply a value for the <paramref name="image" /> parameter, then 
<paramref name="polygonA" /> is mapped to the selected space of <paramref name="image" /> before the 
measurement is computed and the result is expressed in that space. 
<paramref name="polygonB" /> is presumed to be expressed in the selected space 
of <paramref name="image" />.
</PARA><PARA>
If you do not supply a value for <paramref name="image" />, then 
<paramref name="polygonA" /> and <paramref name="polygonB" />
are presumed to be in the same coordinate space.
</PARA><PARA>If more than one pair of points on <paramref name="polygonA" /> and <paramref name="polygonB" /> have the same distance,
the returned  (<paramref name="polygonAX" />, <paramref name="polygonAY" />) and (<paramref name="polygonBX" />, <paramref name="polygonBY" />) pair is chosen arbitrarily among them.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogLine"><remarks><PARA>Primary interface of a <see cref="T:Cognex.VisionPro.CogLine" />.</PARA><PARA>A CogLine is a line of infinite length specified by a reference point and a rotation. The rotation is specified from the x-axis.</PARA></remarks><summary>Class that represents a line.</summary></member><member name="M:Cognex.VisionPro.CogLine.#ctor(Cognex.VisionPro.CogLine)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogLine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogLine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by X may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Y may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Adornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLine.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogLine.Adornment"><summary>The reference point adornment for the line.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogLineAdornmentConstants" />.</para></exception><remarks><PARA>The <see cref="T:Cognex.VisionPro.CogLineAdornmentConstants">adornment</see> for the line.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogLineAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogLine.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogLine_Adornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogLine.Rotation"><event cref="E:Cognex.VisionPro.CogLine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The angle (in radians, from the x-axis) of this directed line.  The Rotation is normalized to the range -PI to PI.</summary><remarks><PARA>The angle (in radians, from the x-axis) of this directed line.  The rotation is normalized to the range -π to π.</PARA><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLine.Y"><event cref="E:Cognex.VisionPro.CogLine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The Y coordinate of the reference point on the line.</summary><remarks><PARA>The y-coordinate of the reference point on the line.</PARA><DEFAULT>10</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLine.X"><remarks><PARA>The x-coordinate of the reference point on the line.</PARA><DEFAULT>10</DEFAULT></remarks><summary>The X coordinate of the reference point on the line.</summary><event cref="E:Cognex.VisionPro.CogLine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogLine.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><event cref="E:Cognex.VisionPro.CogLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogLineDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLine.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLine.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLine.GraphicDOFEnableBase"><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLine.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLine.DragLineWidthInScreenPixels"><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLine.DragLineStyle"><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLine.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogLine.SelectedLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLine.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogLine.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLine.Selected"><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLine.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.CogLine.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLine.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLine.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLine.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLine.Visible"><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogLine.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary></member><member name="P:Cognex.VisionPro.CogLine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogLine.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogLine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogLine.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogLine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogLine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogLine.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from this shape to the given point.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogLine.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Maps this shape through the given transform.</summary><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><returns><PARA>The mapped shape.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogLine.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogLine.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogLine.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogLine.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLine.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogLine" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></param><returns><PARA>The returned shape model.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary></member><member name="M:Cognex.VisionPro.CogLine.SetXYRotation(System.Double,System.Double,System.Double)"><param name="x"><PARA>The x-coordinate of the line's reference point.</PARA></param><param name="y"><PARA>The y-coordinate of the line's reference point.</PARA></param><param name="rotation"><PARA>The line's rotation, measured in radians from the x-axis.</PARA></param><summary>Sets the line's X and Y reference point and its Rotation in radians from the x-axis.  The Rotation is normalized to the range -PI to PI.</summary><remarks><PARA>Sets the x- and y-coordinates of the line's reference point and its rotation. <see cref="P:Cognex.VisionPro.CogLine.Rotation" /> is measured in radians from the x-axis. The rotation is normalized to the range -π to  π.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLine.GetXYRotation(System.Double@,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the line's reference point.</PARA></param><param name="y"><PARA>The y-coordinate of the line's reference point.</PARA></param><param name="rotation"><PARA>The line's rotation, measured in radians from the x-axis.</PARA></param><remarks><PARA>Gets the x- and y-coordinates of the line's reference point and its rotation. <see cref="P:Cognex.VisionPro.CogLine.Rotation" /> is measured in radians from the x-axis.</PARA></remarks><summary>Gets the line's X and Y reference point and its Rotation. The Rotation is measured in radians from the x-axis.</summary></member><member name="M:Cognex.VisionPro.CogLine.SetDistanceRotation(System.Double,System.Double)"><param name="distance"><PARA>The distance from the origin to the line.</PARA></param><param name="rotation"><PARA>The line's rotation, measured in radians from the x-axis.</PARA></param><summary>Sets the X and Y properties of this line to the end of the vector (Distance, Rotation + 90 deg.) or (-Distance, Rotation - 90 deg.) for negative Distance.  Sets the Rotation property to the specified Rotation.</summary><remarks><PARA>Sets the reference point and rotation of the line based on a vector.</PARA><PARA>The reference point of the line is the end of the vector (<paramref name="distance" />, <paramref name="rotation" /> + 90°). If <paramref name="distance" /> is negative, the reference point is the end of the vector (-<paramref name="distance" />, <paramref name="rotation" /> - 90°). <paramref name="rotation" /> is specified in radians and normalized to the range -π to π.</PARA><PARA>You can also interpret the line as if it were parallel to the x-axis of a coordinate frame that is rotated <paramref name="rotation" /> radians, and translated along the rotated y-axis by <paramref name="distance" />. </PARA><PARA>In the following figure, <paramref name="distance" /> is 3 and <paramref name="rotation" /> is 45° (π/2 radians).</PARA><PARA><PICTURE SRC="posdistance.gif" WIDTH="374" HEIGHT="284" apiSRC="SetDistanceRotation_posdistance.gif" /></PARA><PARA>And in the following figure, <paramref name="distance" /> is -3 and <paramref name="rotation" /> is 45° (π/2 radians).</PARA><PARA><PICTURE SRC="negdistance.gif" WIDTH="314" HEIGHT="327" apiSRC="SetDistanceRotation_negdistance.gif" /></PARA></remarks></member><member name="M:Cognex.VisionPro.CogLine.GetDistanceRotation(System.Double@,System.Double@)"><param name="distance"><PARA>The distance from the origin to the line.</PARA></param><param name="rotation"><PARA>The line's rotation, measured in radians from the x-axis.</PARA></param><remarks><PARA>Gets the line's distance from the origin and its rotation in radians from the x-axis.  The distance is negative if the direction from the origin is reversed.</PARA><PARA>See <see cref="M:Cognex.VisionPro.CogLine.SetDistanceRotation(System.Double,System.Double)" /> for additional information and illustrations.</PARA></remarks><summary>Gets the line's Distance from the origin and its Rotation in radians from the x-axis.  The Distance will be negative if the direction from the origin is reversed.</summary></member><member name="M:Cognex.VisionPro.CogLine.SetFromLineSegment(Cognex.VisionPro.CogLineSegment)"><param name="lineSegment"><PARA>The line segment used to specify the line.</PARA></param><remarks><PARA>Sets the line parameters from the specified <see cref="T:Cognex.VisionPro.CogLineSegment" />. The line segment's <see cref="P:Cognex.VisionPro.CogLineSegment.StartX" /> and <see cref="P:Cognex.VisionPro.CogLineSegment.StartY" /> coordinates are used as the line's reference point. The direction of the line is from the line segment's (<see cref="P:Cognex.VisionPro.CogLineSegment.StartX" />, <see cref="P:Cognex.VisionPro.CogLineSegment.StartY" />) point to its (<see cref="P:Cognex.VisionPro.CogLineSegment.EndX" />, <see cref="P:Cognex.VisionPro.CogLineSegment.EndY" />) point.
</PARA></remarks><summary>Sets the line parameters from the specified CogLineSegment. StartX, StartY will be used as the reference point. The direction of the line is from the segment's StartX, StartY to the EndX, EndY.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="lineSegment" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>The points designated by the line segment are not unique</para></exception></member><member name="M:Cognex.VisionPro.CogLine.SetFromStartXYEndXY(System.Double,System.Double,System.Double,System.Double)"><param name="x0"><PARA>The x-coordinate of the first point. This is the x-coordinate of the line's reference point.</PARA></param><param name="y0"><PARA>The y-coordinate of the first point. This is the y-coordinate of the line's reference point.</PARA></param><param name="x1"><PARA>The x-coordinate of the second point.</PARA></param><param name="y1"><PARA>The y-coordinate of the second point.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>The points specified are not unique</para></exception><remarks><PARA>Sets the line properties from a pair of x-, y-coordinates that are unique points on the line. The first coordinate pair is the reference point of the line.  The direction of the line is from the first point to the second.</PARA></remarks><summary>Sets the line parameters from a pair of X and Y coordinates that are unique points on the line. The first coordinate pair will be used as the reference point on the line.  The direction of the line is from the first point to the second.</summary></member><member name="M:Cognex.VisionPro.CogLine.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></returns><remarks><PARA>Creates a new line by mapping the line through a linear transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Creates a new line by mapping the line through a linear transform.</summary></member><member name="M:Cognex.VisionPro.CogLine.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLine" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></remarks><summary>Create a new shape that copies specified parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogLine" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.CogLine.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogLine.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogLine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogLineSegment"><summary>Class that represents a line segment.</summary><remarks><PARA>Primary interface of a CogLineSegment.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.#ctor(Cognex.VisionPro.CogLineSegment)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfCreateLine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateLine may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfStartX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfStartY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfEndX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfEndY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfStartPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfEndPointAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EndPointAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Length may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfMidpointX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MidpointX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfMidpointY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MidpointY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogLineSegment.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.MidpointY"><summary>The Y coordinate halfway between StartY and EndY.</summary><remarks><PARA>The y-coordinate that is halfway between <see cref="P:Cognex.VisionPro.CogLineSegment.StartY" /> and <see cref="P:Cognex.VisionPro.CogLineSegment.EndY" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.MidpointX"><summary>The X coordinate halfway between StartX and EndX.</summary><remarks><PARA>The x-coordinate that is halfway between <see cref="P:Cognex.VisionPro.CogLineSegment.StartX" /> and <see cref="P:Cognex.VisionPro.CogLineSegment.EndX" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.Length"><remarks><PARA>The length of the line segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The length of the line segment.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.Rotation"><summary>The angle (in radians, from the x-axis) of the line segment. The line segment must not be degenerate (i.e. the end points must differ).</summary><remarks><PARA>The angle (in radians, from the x-axis) of the line segment. The rotation is normalized to the range -π to π.</PARA></remarks><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogLineSegment.EndPointAdornment"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants" />.</para></exception><remarks><PARA>The end point <see cref="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants">adornment</see> of this line segment.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants">None</see></DEFAULT></remarks><summary>The end point adornment of this line segment.</summary><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogLineSegment_EndPointAdornment--><ul /></event></member><member name="P:Cognex.VisionPro.CogLineSegment.StartPointAdornment"><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogLineSegment_StartPointAdornment--><ul /></event><summary>The start point adornment of this line segment.</summary><remarks><PARA>The start point <see cref="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants">adornment</see> of this line segment.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants">None</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogLineSegment.EndY"><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>Start and endpoint coordinates must be different.</para></exception><summary>The Y coordinate of the end point for the line segment.</summary><remarks><PARA>The y-coordinate of the line segment's ending point.</PARA><DEFAULT>120</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.EndX"><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>Start and endpoint coordinates must be different.</para></exception><remarks><PARA>The x-coordinate of the line segment's ending point.</PARA><DEFAULT>120</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The X coordinate of the end point for the line segment.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.StartY"><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>Start and endpoint coordinates must be different.</para></exception><remarks><PARA>The y-coordinate of the line segment's starting point.</PARA><DEFAULT>20</DEFAULT></remarks><summary>The Y coordinate of the start point for the line segment.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.StartX"><remarks><PARA>The x-coordinate of the line segment's starting point.</PARA><DEFAULT>20</DEFAULT></remarks><summary>The X coordinate of the start point for the line segment.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>Start and endpoint coordinates must be different.</para></exception><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogLineSegment.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogLineSegmentDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogLineSegment" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event></member><member name="P:Cognex.VisionPro.CogLineSegment.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogLineSegment.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.DragColor"><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLineSegment.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLineSegment.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogLineSegment.LineWidthInScreenPixels"><summary>Line width (in screen pixels) of this graphic.</summary><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogLineSegment.LineStyle"><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogLineSegment.Visible"><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogLineSegment.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogLineSegment.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogLineSegment.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><summary>Shortest distance from this shape to the given point.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogLineSegment" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogLineSegment" />.</PARA></param><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary><returns><PARA>The returned shape model.</PARA></returns></member><member name="M:Cognex.VisionPro.CogLineSegment.SetStartEnd(System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>X-coordinate of the start point.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point.</PARA></param><param name="endX"><PARA>X-coordinate of the end point.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point.</PARA></param><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>Start and endpoint coordinates must be different.</para></exception><summary>Sets coordinates StartX, StartY, EndX, EndY for the line segment.</summary><remarks><PARA>Sets coordinates StartX, StartY, EndX, EndY for the line segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>X-coordinate of the start point.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point.</PARA></param><param name="endX"><PARA>X-coordinate of the end point.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point.</PARA></param><summary>Gets coordinates StartX, EndX, StartY, EndY for the line segment.</summary><remarks><PARA>Gets coordinates StartX, EndX, StartY, EndY for the line segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.SetStartLengthRotation(System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>X-coordinate of the start point.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point.</PARA></param><param name="length"><PARA>Length of the line segment.</PARA></param><param name="rotation"><PARA>Rotation of the line segment.</PARA></param><event cref="E:Cognex.VisionPro.CogLineSegment.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Sets StartX, StartY, Length and Rotation (in radians, from the x-axis) for the line segment.</summary><remarks><PARA>Sets StartX, StartY, Length and Rotation (from the x-axis) for the line segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogLineSegment.GetStartLengthRotation(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>X-coordinate of the start point.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point.</PARA></param><param name="length"><PARA>Length of the line segment.</PARA></param><param name="rotation"><PARA>Rotation of the line segment.</PARA></param><remarks><PARA>Gets StartX, StartY, Length and Rotation (from the x-axis) for the line segment.</PARA></remarks><summary>Gets StartX, StartY, Length and Rotation (in radians from the x-axis) for the line segment.</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.CreateLine"><returns><PARA>The newly created <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLine" /> for this line segment. The reference point on the new line is the midpoint (<see cref="P:Cognex.VisionPro.CogLineSegment.MidpointX" />, <see cref="P:Cognex.VisionPro.CogLineSegment.MidpointY" />) of the segment.</PARA></remarks><summary>Creates a new CogLine for this line segment. The reference point on the line will be the midpoint of the segment.  The line segment must not be degenerate (i.e. the end points must differ).</summary></member><member name="M:Cognex.VisionPro.CogLineSegment.CreateLine(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the line segment to copy to the new line.</PARA></param><summary>Creates a new CogLine for this line segment. The reference point on the line will be the midpoint of the segment.  The line segment must not be degenerate (i.e. the end points must differ).</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLine" /> for this line segment. The reference point on the new line is the midpoint (<see cref="P:Cognex.VisionPro.CogLineSegment.MidpointX" />, <see cref="P:Cognex.VisionPro.CogLineSegment.MidpointY" />) of the segment.</PARA></remarks><returns><PARA>The newly created <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogLineSegment.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogLineSegment" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Creates a new line segment by mapping this line segment through a linear transform.</summary><remarks><PARA>Creates a new line segment by mapping this line segment through a linear transform.</PARA></remarks><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogLineSegment" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogLineSegment.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogLineSegment" /> object.</PARA></returns><summary>Create a new shape that copies specified parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLineSegment" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogLineSegment" />.</PARA></remarks></member><member name="E:Cognex.VisionPro.CogLineSegment.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogLineSegment.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogLineSegment.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogMaskGraphic"><summary>Class that represents a mask graphic.</summary><remarks><PARA>Interface describing a mask graphic.</PARA><PARA><see cref="T:Cognex.VisionPro.CogMaskGraphic" /> is used only for displaying image masks.

Tools use <see cref="T:Cognex.VisionPro.CogImage8Grey" /> to define image masks. See, for example,
<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" />.<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImageMask" /> and
<see cref="T:Cognex.VisionPro.CNLSearch.CogCNLSearchPattern" />.<see cref="P:Cognex.VisionPro.CNLSearch.CogCNLSearchPattern.TrainImageMask" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMaskGraphic.#ctor(Cognex.VisionPro.CogMaskGraphic)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Image may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfOffsetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfOffsetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfGetColorMap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetColorMap may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfGetTransparencyMap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetTransparencyMap may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphic.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.OffsetY"><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>
		
		Fires when the offset changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogMaskGraphic_OffsetY--><ul /></event><summary>The Y position, in pixel coordinates, of the upper left corner of the mask image. The X,Y offset controls where the mask graphic will be overlaid on a displayed image.</summary><remarks><PARA>The y-position, in pixel coordinates, of the upper left corner of the mask image. The x- and y-offsets control where the mask graphic will be overlaid on a displayed image.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.OffsetX"><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>
		
		Fires when the offset changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogMaskGraphic_OffsetX--><ul /></event><remarks><PARA>The x-position, in pixel coordinates, of the upper left corner of the mask image. The x- and y-offsets control where the mask graphic will be overlaid on a displayed image.</PARA><DEFAULT>0</DEFAULT></remarks><summary>The X position, in pixel coordinates, of the upper left corner of the mask image. The X,Y offset controls where the mask graphic will be overlaid on a displayed image.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Image"><summary>Image containing mask data. Only pixel data and Width and Height are used in building mask graphic.</summary><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mask image changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogMaskGraphic_Image--><ul /></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogImage8Grey" /> containing mask data. Only pixel data, <see cref="P:Cognex.VisionPro.CogImage8Grey.Width" />, and <see cref="P:Cognex.VisionPro.CogImage8Grey.Height" /> are used in building mask graphic.</PARA><DEFAULT>Nothing</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.GraphicDOFEnable"><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which interactive <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogMaskGraphic" />.</PARA></remarks><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.GraphicDOFEnableBase"><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogMaskGraphic.SelectedLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><summary>Line width of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogMaskGraphic.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogMaskGraphic.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><summary>Color of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Selected"><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogMaskGraphic.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Interactive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogMaskGraphic.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogMaskGraphic.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogMaskGraphic.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogMaskGraphic.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMaskGraphic.SetColorMap(System.Byte,Cognex.VisionPro.CogColorConstants)"><param name="maskVal"><PARA>The mask pixel value.</PARA></param><param name="value"></param><remarks><PARA>Sets or gets the color to use to display pixels with the value <paramref name="maskVal" />.</PARA><DEFAULT><paramref name="maskVal" /> = 0 (Don't Care): <see cref="T:Cognex.VisionPro.CogColorConstants">DarkRed</see><HTMLPASS><br /></HTMLPASS><paramref name="maskVal" /> = 1-254 (Tool Specific): <see cref="T:Cognex.VisionPro.CogColorConstants">Yellow</see><HTMLPASS><br /></HTMLPASS><paramref name="maskVal" /> = 255  (Care): <see cref="T:Cognex.VisionPro.CogColorConstants">DarkGreen</see></DEFAULT></remarks><summary>Controls color of mask pixel values when displayed.</summary><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mask value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogMaskGraphic_ColorMap--><ul /></event></member><member name="M:Cognex.VisionPro.CogMaskGraphic.GetColorMap(System.Byte)"><param name="maskVal"><PARA>The mask pixel value.</PARA></param><remarks><PARA>Sets or gets the color to use to display pixels with the value <paramref name="maskVal" />.</PARA><DEFAULT><paramref name="maskVal" /> = 0 (Don't Care): <see cref="T:Cognex.VisionPro.CogColorConstants">DarkRed</see><HTMLPASS><br /></HTMLPASS><paramref name="maskVal" /> = 1-254 (Tool Specific): <see cref="T:Cognex.VisionPro.CogColorConstants">Yellow</see><HTMLPASS><br /></HTMLPASS><paramref name="maskVal" /> = 255  (Care): <see cref="T:Cognex.VisionPro.CogColorConstants">DarkGreen</see></DEFAULT></remarks><summary>Controls color of mask pixel values when displayed.</summary><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mask value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogMaskGraphic_ColorMap--><ul /></event></member><member name="M:Cognex.VisionPro.CogMaskGraphic.SetTransparencyMap(System.Byte,Cognex.VisionPro.CogMaskGraphicTransparencyConstants)"><param name="maskVal"><PARA>The mask pixel value.</PARA></param><param name="value"></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="value" />  is not in the range 0 to 100.</para></exception><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>Fires when the transparency value changes. </para><para>The following state flag may be affected:</para><ul><see cref="F:Cognex.VisionPro.CogMaskGraphic.SfGetTransparencyMap" /></ul></event><summary>Controls transparency of mask values when displayed. The transparency value may be any integer between 0 (fully opaque) and 100 (fully transparent) inclusive.</summary><remarks><PARA>Controls transparency of mask values when displayed.</PARA><PARA>The transparency value can be any integer in the range 0 to 100.
				If the transparency is set to 0 (<see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">None</see>),
				then the mask value is drawn opaque in the color returned by calling
					<see cref="M:Cognex.VisionPro.CogMaskGraphic.GetColorMap(System.Byte)" />(<paramref name="maskVal" />).

				If the transparency value is 100 (<see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">Full</see>), the mask value is completely transparent.
			</PARA><PARA>
				Values between 0 and 100 are color-blended between
					the color returned by calling 
					<see cref="M:Cognex.VisionPro.CogMaskGraphic.GetColorMap(System.Byte)" />(<paramref name="maskVal" />).
				 and the color value at that location under the mask as dictated by graphic z-order.
			</PARA><PARA>
					The predefined transparency constants,
						<see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">None</see>,
						<see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">Half</see>, and
						<see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">Full</see>
					 provide best performance.
			</PARA><DEFAULT><paramref name="maskVal" /> = 0 (Don't Care): <see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">Half</see><BR /><paramref name="maskVal" /> = 1-254 (Tool Specific): <see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">Half</see><BR /><paramref name="maskVal" /> = 255  (Care): <see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">Full</see><BR /></DEFAULT><seealso cref="M:Cognex.VisionPro.CogMaskGraphic.GetTransparencyMap(System.Byte)" /></remarks></member><member name="M:Cognex.VisionPro.CogMaskGraphic.GetTransparencyMap(System.Byte)"><param name="maskVal"><PARA>The mask pixel value.</PARA></param><event cref="E:Cognex.VisionPro.CogMaskGraphic.Changed" cgnxEvent="singleState"><para>Fires when the transparency value changes. </para><para>The following state flag may be affected:</para><ul><see cref="F:Cognex.VisionPro.CogMaskGraphic.SfGetTransparencyMap" /></ul></event><summary>Controls transparency of mask values when displayed. The transparency value may be any integer between 0 (fully opaque) and 100 (fully transparent) inclusive.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in the range 0 to 100.</para></exception><remarks><PARA>
				Returns the <see cref="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants">transparency constant</see>
				that corresponds to the specified <paramref name="maskVal" /> pixel value.
			</PARA><seealso cref="M:Cognex.VisionPro.CogMaskGraphic.SetTransparencyMap(System.Byte,Cognex.VisionPro.CogMaskGraphicTransparencyConstants)" /></remarks></member><member name="E:Cognex.VisionPro.CogMaskGraphic.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogMaskGraphic.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogMaskGraphic.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogMaximizer"><summary>Class that provides a hill-climbing maximization algorithm.</summary><remarks><PARA>Primary interface of CogMaximizer.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMaximizer.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogMaximizer.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="M:Cognex.VisionPro.CogMaximizer.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogMaximizer.Execute(System.Int32,System.Int32,System.Int32)"><param name="lowLimit"><PARA>
	The minimum input value to evaluate.	</PARA></param><param name="highLimit"><PARA>
	The maximum input value to evaluate.
	</PARA></param><param name="tolerance"><PARA>
	When the maximized value can not be increased except by changing the input value by 
	less than <paramref name="tolerance" />, this function returns.  
	</PARA></param><remarks><PARA>
Empirically determines the input value that maximizes a function's output value. This function 
works by firing the <see cref="E:Cognex.VisionPro.CogMaximizer.Evaluate" /> event. You supply a 
handler for this event that takes an input value and produces an output value; this 
function invokes that event handler repeatedly with a variety of input values 
until it determines which input value produces the maximum output value.
</PARA><PARA>
	In addition to providing the event handler, you also supply this function with values for the  
	<paramref name="lowLimit" /> and <paramref name="highLimit" /> of the range of values to evaluate. You 
	also provide a <paramref name="tolerance" /> value that controls the granularity with which this 
	function adjusts the input value.
	</PARA><PARA>
	If the function being maximized is strictly unimodal (has only one maximum) and has no plateaus, then 
	the maximization algorithm will compute the true global maximum for the function. If these conditions are 
	not met, then the algorithm may compute a local but not a global maximum.
	</PARA><PARA>
	A typical application for the maximizer function is automatically 
	focusing a camera. You would specify the minimum 
	and maximum focus positions as the <paramref name="lowLimit" /> and <paramref name="highLimit" /> 
	parameters, and your <see cref="E:Cognex.VisionPro.CogMaximizer.Evaluate" /> event handler would take the supplied focus position value,
	adjust the focus accordingly, acquire an image, use the 
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness">Image Sharpness tool</see>
	to compute its 
	<see cref="M:Cognex.VisionPro.ImageProcessing.CogImageSharpness.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)">sharpness score</see>
	and return the sharpness score. The 
	maximizer would invoke your event handler repeatedly with a variety of focus position values until it 
	determined the focus position that produced the highest image sharpness score.
	</PARA><NOTE>
	Keep in mind that if the combination of the 
	<see cref="u:ImageProcessing.ImageSharpness.Theory.ImageSharpness" cgnxAnchor="selecting_the_mode">image sharpness method</see> you select and the specific image 
	content you are evaluating does not produce a strictly unimodal image sharpness graph, then this 
	function may not determine the focus position that produces the sharpest image. 
	</NOTE></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogMaximizerEvent" FUNC="Evaluate"><ACTUAL_PARAMS><ACTUAL_PARAM><DISPLAY PARAM="Position" /></ACTUAL_PARAM><ACTUAL_PARAM><DISPLAY PARAM="Fitness" /></ACTUAL_PARAM><ACTUAL_PARAM><DISPLAY PARAM="Continue" /></ACTUAL_PARAM></ACTUAL_PARAMS>
Fires repeatedly until maximum <paramref name="Fitness" /> is located 
or <paramref name="Continue" /> is set to false. 
</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="highLimit" /> is less than or equal to <paramref name="lowLimit" />.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="highLimit" />–<paramref name="lowLimit" /> is greater than 701408733.
	</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Tolearance" /> is less than or equal to 0.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogMaximizerCancelledException" cgnxHRESULT="E_CogMaximizer_Cancelled"><para>
		The <see cref="E:Cognex.VisionPro.CogMaximizer.Evaluate" /> event sink did not set	
		<paramref name="Continue" /> to true.
	</para></exception><returns><PARA>The value, in the range from 
	 <paramref name="lowLimit" />
	through
	<paramref name="highLimit" />, that produced the highest 
	value from the 
	<see cref="E:Cognex.VisionPro.CogMaximizer.Evaluate" /> event handler that 
	you implement.</PARA></returns><summary>Executes the maximization algorithm by iteratively firing the Evaluate event to maximize the Fitness value. Tolerance must be greater than 0 and HighLimit-LowLimit must be less than 701408733.</summary></member><member name="E:Cognex.VisionPro.CogMaximizer.Evaluate"><summary>Occurs when the Execute method of CogMaximizer is run.   Each time it is fired, the handler for this event must compute a Fitness value that corresponds to the supplied Position value. The Execute method continues to fire this event until it has determined which input Position value produces the highest output Fitness value  (or until the event handler terminates the Execute method prematurely, by failing to set the Continue parameter to true.</summary></member><member name="T:Cognex.VisionPro.CogOutputLine"><remarks><PARA>A discrete output line.</PARA></remarks><summary>Virtual (non-creatable) class for a discrete output line.</summary></member><member name="M:Cognex.VisionPro.CogOutputLine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogOutputLine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogOutputLine.SfEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Enabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogOutputLine.SfValue"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Value may have changed.</summary></member><member name="F:Cognex.VisionPro.CogOutputLine.SfPulseMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PulseMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogOutputLine.SfPulseDuration"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PulseDuration may have changed.</summary></member><member name="P:Cognex.VisionPro.CogOutputLine.PulseDuration"><summary>Time in milliseconds after which the output returns to its non-pulsed state.  Ignored if PulseMode=cogOutputLinePulseModeNone.</summary><remarks><PARA>Time in milliseconds after which the output returns to its nonpulsed state.  
This value is ignored if <see cref="P:Cognex.VisionPro.CogOutputLine.PulseMode" /> is <see cref="T:Cognex.VisionPro.CogOutputLinePulseModeConstants">None</see>.</PARA><DEFAULT>50</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogOutputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogOutputLine_PulseDuration--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new duration is &lt; 0.</para></exception></member><member name="P:Cognex.VisionPro.CogOutputLine.PulseMode"><event cref="E:Cognex.VisionPro.CogOutputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogOutputLine_PulseMode--><ul /></event><summary>Specifies whether the output is steady-state, or pulsed on high or low transitions.  Check the PulseModeSupported property to see which mode(s) are supported.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The pulse mode is not supported.</para></exception><remarks><PARA>Specifies whether the output is steady-state or pulsed on high or low transitions.  
			Use
				<see cref="M:Cognex.VisionPro.CogOutputLine.GetPulseModeSupported(Cognex.VisionPro.CogOutputLinePulseModeConstants)" />
			to determine whether a particular pulse mode is supported.
		</PARA></remarks></member><member name="P:Cognex.VisionPro.CogOutputLine.Value"><summary>The value of this output line.  True means that the output is in the TTL high state (for TTL lines) or the no-current-flowing state (for opto-isolated lines).</summary><event cref="E:Cognex.VisionPro.CogOutputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogOutputLine_Value--><ul /></event><remarks><PARA>The value of this output line.  True means that the output is in the TTL high state (for TTL lines) or the no-current-flowing state (for opto-isolated lines).</PARA><NOTE>When you get the value of this property, the value returned does not indicate the actual state of the line. Instead, it indicates the state that the software is attempting to set. An improper connection or hardware failure can  cause the actual state of the output line to be different than the value returned by this property.
</NOTE><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogOutputLine.LineNumber"><remarks><PARA>Returns the logical line number of the I/O line.  Refer to your hardware documentation for the equivalence between logical line numbers and physical lines.</PARA><PARA>Some Cognex frame grabbers are available in several configurations which affect the relationship between logical line numbers and physical connections. These configurations are described in your frame grabber's hardware manual. VisionPro reads the I/O configuration from the <CONSOLE>VisionPro.ini</CONSOLE> in the <CONSOLE>Windows</CONSOLE> or <CONSOLE>WINNT</CONSOLE> directory. Make sure that the configuration described in this file matches your frame grabber. </PARA><PARA>See <see cref="u:Framework.PhysicalIO.CodeWalkthrough.UseIOLines">How to Use I/O Lines</see> for a list of topics that describe the mappings for different frame grabbers.
</PARA></remarks><summary>Returns the logical line number of the I/O line.  Refer to your hardware documentation for the equivalence between logical line numbers and physical lines.</summary></member><member name="P:Cognex.VisionPro.CogOutputLine.CanBeEnabled"><remarks><PARA>Whether this line is capable of being enabled. Some input lines may not be capable of being enabled if they are being used as output lines, and vice-versa.</PARA></remarks><summary>Whether this line is capable of being enabled. Some input lines may not be capable of being enabled if they are being used as output lines, and vice-versa.</summary></member><member name="P:Cognex.VisionPro.CogOutputLine.Enabled"><summary>Read or set whether this line is enabled.  For bidirectional lines, check the CanBeEnabled property to see whether this line can be enabled.</summary><event cref="E:Cognex.VisionPro.CogInputLine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the enabled state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogInputLine_Enabled--><ul><li><see cref="F:Cognex.VisionPro.CogOutputLine.SfEnabled" /></li></ul></event><remarks><PARA>Sets or gets whether this line is enabled.  For bidirectional lines, check the 
	<see cref="P:Cognex.VisionPro.CogOutputLine.CanBeEnabled" /> property to see whether this line can be enabled.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.FAILException" cgnxHRESULT="E_FAIL"><para>This line cannot be enabled.</para></exception><!-- the IDL file says it's this error, but jay says it hasn't been defined yet
	<ERROR_HRESULT NAME="E_CogIO_CannotEnable">This line cannot be enabled.</ERROR_HRESULT>
--></member><member name="P:Cognex.VisionPro.CogOutputLine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="M:Cognex.VisionPro.CogOutputLine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogOutputLine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogOutputLine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogOutputLine.GetPulseModeSupported(Cognex.VisionPro.CogOutputLinePulseModeConstants)"><param name="mode"><PARA>The pulse mode to test.</PARA></param><remarks><PARA>Returns True if the specified pulse mode is supported by this output line.</PARA></remarks><summary>Returns True if the specified pulse mode is supported by this output.</summary></member><member name="E:Cognex.VisionPro.CogOutputLine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogOutputLines"><summary>Collection of output lines.</summary><remarks><PARA>Collection of <see cref="T:Cognex.VisionPro.CogOutputLine" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogOutputLines.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogOutputLines.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogOutputLines.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogOutputLines.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogOutputLines.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogOutputLines.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.CogOutputLines.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogOutputLines.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogOutputLines.IndexOf(Cognex.VisionPro.CogOutputLine)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogOutputLines.GetGroupValue(System.Int32,System.Int32)"><param name="firstIndex"><PARA>The first output line.</PARA></param><param name="numberOfBits"><PARA>The number of lines to write.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogCollectionInvalidIndexException" cgnxHRESULT="E_CogCollection_InvalidIndex"><para><paramref name="firstIndex" /> is &lt; 0 or &gt;= <see cref="P:Cognex.VisionPro.CogOutputLines.Count" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="numberOfBits" /> is &lt; 1 or &gt; 32.</para></exception><summary>Access a group of up to 32 output line values as a binary number.</summary><remarks><PARA>Reads or writes a group of up to 32 output line values as a binary number.</PARA><PARA>The first output line, specified by <paramref name="firstIndex" /> has a binary value of 1. The last output line, specified by <paramref name="firstIndex" />+<paramref name="numberOfBits" />-1, has a binary value of 2^(<paramref name="numberOfBits" />-1).</PARA></remarks></member><member name="M:Cognex.VisionPro.CogOutputLines.SetGroupValue(System.Int32,System.Int32,System.Int32)"><param name="firstIndex"><PARA>The first output line.</PARA></param><param name="numberOfBits"><PARA>The number of lines to write.</PARA></param><param name="value"></param><summary>Access a group of up to 32 output line values as a binary number.</summary><remarks><PARA>Reads or writes a group of up to 32 output line values as a binary number.</PARA><PARA>The first output line, specified by <paramref name="firstIndex" /> has a binary value of 1. The last output line, specified by <paramref name="firstIndex" />+<paramref name="numberOfBits" />-1, has a binary value of 2^(<paramref name="numberOfBits" />-1).</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogCollectionInvalidIndexException" cgnxHRESULT="E_CogCollection_InvalidIndex"><para><paramref name="firstIndex" /> is &lt; 0 or &gt;= <see cref="P:Cognex.VisionPro.CogOutputLines.Count" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="numberOfBits" /> is &lt; 1 or &gt; 32.</para></exception></member><member name="T:Cognex.VisionPro.CogPointMarker"><remarks><PARA>Primary interface of a CogPointMarker.</PARA></remarks><summary>Class that represents a graphical point marker.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.#ctor(Cognex.VisionPro.CogPointMarker)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by X may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Y may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfSizeInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SizeInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfGraphicType"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicType may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPointMarker.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.GraphicType"><summary>The graphic type (such as Cross, etc.) of this point marker.</summary><remarks><PARA>The graphic used to display  this point marker.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants">Cross</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is not in <see cref="T:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.SizeInScreenPixels"><remarks><PARA>The size in screen pixels of a side of the bounding square for this point marker.</PARA><DEFAULT>11</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The size (in screen pixels) of a side of the bounding square for this point marker.  Size must be greater than zero.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt;= 0.</para></exception></member><member name="P:Cognex.VisionPro.CogPointMarker.Rotation"><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>The rotation, in radians from the x-axis, of this point marker.</PARA><DEFAULT>0</DEFAULT></remarks><summary>The rotation (from the x-axis) in radian of this point marker.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.Y"><remarks><PARA>The y-coordinate of the center of this point marker.</PARA><DEFAULT>10</DEFAULT></remarks><summary>The Y coordinate of the center of this point marker.</summary><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.X"><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>The x-coordinate of the center of this point marker.</PARA><DEFAULT>10</DEFAULT></remarks><summary>The X coordinate of the center of this point marker.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.GraphicDOFEnable"><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogPointMarkerDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogPointMarker" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.Parent"><remarks><PARA>Parent of this graphic.</PARA></remarks><summary>Parent of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.GraphicDOFEnableBase"><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogPointMarker.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.SelectedLineWidthInScreenPixels"><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.SelectedLineStyle"><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.SelectedColor"><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.TipText"><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPointMarker.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Line width (in screen pixels) of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogPointMarker.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.Visible"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPointMarker.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.CogPointMarker.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogPointMarker.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from this shape to the given point.</summary><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogPointMarker.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPointMarker.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogPointMarker.SetCenterRotationSize(System.Double,System.Double,System.Double,System.Int32)"><param name="x"><PARA>The x-coordinate of the center of the point marker.</PARA></param><param name="y"><PARA>The y-coordinate of the center of the point marker.</PARA></param><param name="rotation"><PARA>The rotation angle (in radians) of the point marker.</PARA></param><param name="sizeInScreenPixels"><PARA>The size (in pixels) of the bounding box of the point marker.</PARA></param><event cref="E:Cognex.VisionPro.CogPointMarker.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="sizeInScreenPixels" />  is &lt;= 0.</para></exception><remarks><PARA>Sets x- and y-coordinates of the center point, rotation (in radians) and the size (in screen pixels) of a side of the bounding square of the point marker.</PARA></remarks><summary>Sets x and y coordinates of the center point, rotation (in radian) and the size (in screen pixels) of a side of the bounding square of the point marker.  Size must be greater than zero.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.GetCenterRotationSize(System.Double@,System.Double@,System.Double@,System.Int32@)"><param name="x"><PARA>The x-coordinate of the center of the point marker.</PARA></param><param name="y"><PARA>The y-coordinate of the center of the point marker.</PARA></param><param name="rotation"><PARA>The rotation angle (in radians) of the point marker.</PARA></param><param name="sizeInScreenPixels"><PARA>The size (in pixels) of the bounding box of the point marker.</PARA></param><remarks><PARA>Gets x and y coordinates of the center point, rotation (in radian) and the size (in screen pixels) of a side of the bounding square of the point marker.</PARA></remarks><summary>Gets x and y coordinates of the center point, rotation (in radian) and the size (in screen pixels) of a side of the bounding square of the point marker.</summary></member><member name="M:Cognex.VisionPro.CogPointMarker.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogPointMarker" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Creates a new point marker by mapping this point marker through a linear transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogPointMarker" />.</PARA></returns><remarks><PARA>Creates a new point marker by mapping this point marker through a linear transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPointMarker.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogPointMarker" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogPointMarker" />.</PARA></remarks><summary>Create a new shape that copies specified parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogPointMarker" /> object.</PARA></returns></member><member name="E:Cognex.VisionPro.CogPointMarker.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogPointMarker.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogPointMarker.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogPolygon"><summary>Class that represents a polygon.</summary><remarks><PARA>Interface describing a polygon shape.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.#ctor(Cognex.VisionPro.CogPolygon)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfNumVertices"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumVertices may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfVertexCapacity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VertexCapacity may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfGetVertexX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetVertexX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfGetVertexY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetVertexY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfVertexAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by VertexAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfGetVertexAdornmentColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetVertexAdornmentColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfComplex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Complex may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfFillMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FillMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfConvex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Convex may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfHighlightColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfHighlightIndex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightIndex may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfHighlightRequested"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighlightRequested may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogPolygon.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.HighlightIndex"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set HighlightIndex to a value less than -1.</exception><value>The index of the vertex to be highlighted.</value><summary>Get or set the index of the vertex to be highlighted. If set to -1, no vertex highlighting will occur.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.HighlightColor"><value>The color of the vertex highlight. If set to CogColorConstants.None, no vertex highlighting will occur.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Get or set the color of the vertex highlight.</summary><exception cref="T:System.ArgumentException">If you attempt to set HighlightColor to a an unknown value.</exception></member><member name="P:Cognex.VisionPro.CogPolygon.HighlightRequested"><summary>If greater than zero, vertex highlighting is enabled.</summary><value>The number of outstanding requests for vertex highlighting.</value></member><member name="P:Cognex.VisionPro.CogPolygon.Area"><remarks><PARA>Area of the region enclosed by the polygon, in units consistent with the <see cref="P:Cognex.VisionPro.CogPolygon.SelectedSpaceName" />. 
If there are fewer than three <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices">vertices</see>, or if <see cref="P:Cognex.VisionPro.CogPolygon.Complex" /> is True, the area is zero. </PARA></remarks><summary>Area of the enclosed region, in units consistent with the SelectedSpaceName. Zero if there are fewer than 3 vertices.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Convex"><remarks><PARA>True if the polygon is identical to the <see cref="M:Cognex.VisionPro.CogPolygon.ConvexHull">convex hull</see> of its vertices, False otherwise. The convex hull of a polygon is the polygon that would result if you were to stretch a rubber band around the vertices.
</PARA><PARA>A polygon with 0 or 1 vertex is convex.</PARA><DEFAULT>True</DEFAULT></remarks><summary>True if the polygon is identical to the convex hull of its vertices, otherwise False.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.FillMode"><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="singleState"><para>
		
		Fires when the fill mode of the polygon changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPolygon_LineStyle--><ul /></event><remarks><PARA>Sets or gets the algorithm used to distinguish between the inside and outside of the polygon. <see cref="P:Cognex.VisionPro.CogPolygon.FillMode" /> affects the way that <see cref="M:Cognex.VisionPro.ICogShape.DistanceToPoint(System.Double,System.Double)" /> and <see cref="M:Cognex.VisionPro.ICogRegion.CreateRLE(System.Byte,System.Byte)" /> determine which points lie within a polygon. </PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogPolygonFillConstants">EvenOdd</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The fill mode is not in <see cref="T:Cognex.VisionPro.CogPolygonFillConstants" />.</para></exception><summary>The algorithm to be used to distinguish inside from outside.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Perimeter"><remarks><PARA>Perimeter of the polygon, in units consistent with the <see cref="P:Cognex.VisionPro.CogPolygon.SelectedSpaceName" />. 
The perimeter is the sum of the lengths of all of the segments including the closing the segment from the last vertex to the first vertex.
If there are fewer than two <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices">vertices</see>, the perimeter is zero.
</PARA></remarks><summary>Perimeter of the polygon, in units consistent with the SelectedSpaceName. Zero if there are fewer than 2 vertices.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Complex"><remarks><PARA>Returns True if any of the polygon segments are intersecting, False otherwise.</PARA><DEFAULT>False</DEFAULT></remarks><summary>True if any segments are intersecting, otherwise False.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.VertexAdornment"><summary>The adornment shape to be rendered for each vertex.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogPolygonVertexAdornmentConstants" />.</para></exception><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="singleState"><para>
		
		Fires when the vertex adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPolygon_VertexAdornment--><ul /></event><remarks><PARA>The adornment shape to be rendered for all vertices. You can use
		<see cref="M:Cognex.VisionPro.CogPolygon.SetVertexAdornmentColor(System.Int32,Cognex.VisionPro.CogPolygonVertexColorConstants)" />
		to hide or to change the color of the adornment for each vertex.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogPolygonVertexAdornmentConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.VertexCapacity"><summary>The maximum number of vertices that may be held by this polygon without reallocating storage.</summary><remarks><PARA>Returns the maximum number of vertices that may be held by this polygon without reallocating storage.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.NumVertices"><remarks><PARA>Sets or gets the number of vertices in this polygon.  The following table describes what happens when you set the number of vertices.</PARA><TABLE><CAPTION>Changing the number of vertices</CAPTION><HEADING><ROW><CELL>Operation</CELL><CELL>Effect</CELL></ROW></HEADING><BODY><ROW><CELL>New value &gt; current <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /></CELL><CELL>New vertices with coordinates (0,0) are added to the end of the list of vertices.</CELL></ROW><ROW><CELL>New value &lt; current <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /></CELL><CELL>Existing vertices are removed from the end of the list of vertices.</CELL></ROW><ROW><CELL>New value = 0</CELL><CELL>All vertices removed.</CELL></ROW></BODY></TABLE><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The number of vertices is &lt; 0.</para></exception><!-- ERROR_HRESULT NAME="E_OUTOFMEMORY">The memory to store the vertices cannot be allocated.</ERROR_HRESULT --><summary>Number of vertices in this polygon.</summary><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
Fires when the number of  vertices changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM><ACTUAL_PARAM>NewNumVertices</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the new number of vertices is greater than the current number of vertices. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
</EVENT><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexRemoved"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewNumVertices</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the new number of vertices is less than the current number of vertices. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
</EVENT></member><member name="P:Cognex.VisionPro.CogPolygon.GraphicDOFEnable"><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogPolygonDeprecatedDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogPolygon" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPolygon_GraphicDOFEnable--><ul /></event><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.MouseCursor"><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogPolygon.DragLineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when dragged.</summary><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.DragColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogPolygon.SelectedLineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event><summary>Line style of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Selected"><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><remarks><PARA>True when the shape is selected in a display.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Interactive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width (in screen pixels) of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event></member><member name="P:Cognex.VisionPro.CogPolygon.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogPolygon.Visible"><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogPolygon.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogPolygon.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogPolygon.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks><summary>Maps this shape through the given transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogPolygon.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns></member><member name="M:Cognex.VisionPro.CogPolygon.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><returns><PARA>The RLE representation of this region.</PARA></returns><summary>Create an RLE representation of this Region.</summary><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks></member><member name="M:Cognex.VisionPro.CogPolygon.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogPolygon.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogPolygon" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogPolygon" />.</PARA></param><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary><returns><PARA>The returned shape model.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.GetVertexX(System.Int32)"><param name="index"><PARA>Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.</PARA></param><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when the x-coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the x-coordinate of the vertex changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the x-coordinate of the vertex with the given index.</PARA><PARA>Use <see cref="M:Cognex.VisionPro.CogPolygon.SetVertex(System.Int32,System.Double,System.Double)" /> and  <see cref="M:Cognex.VisionPro.CogPolygon.GetVertex(System.Int32,System.Double@,System.Double@)" />  to set or get both the x- and y-coordinate at once.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt; 0 or <paramref name="index" /> &gt; (<see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />−1)</para></exception><summary>The X-coordinate of the vertex with the given index.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.SetVertexX(System.Int32,System.Double)"><param name="index"><PARA>Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when the x-coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the x-coordinate of the vertex changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt; 0 or <paramref name="index" /> &gt; (<see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />−1)</para></exception><summary>The X-coordinate of the vertex with the given index.</summary><remarks><PARA>Sets or gets the x-coordinate of the vertex with the given index.</PARA><PARA>Use <see cref="M:Cognex.VisionPro.CogPolygon.SetVertex(System.Int32,System.Double,System.Double)" /> and  <see cref="M:Cognex.VisionPro.CogPolygon.GetVertex(System.Int32,System.Double@,System.Double@)" />  to set or get both the x- and y-coordinate at once.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.GetVertexY(System.Int32)"><param name="index"><PARA>Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.</PARA></param><summary>The Y-coordinate of the vertex with the given index.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt; 0 or <paramref name="index" /> &gt; (<see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />−1)</para></exception><remarks><PARA>Sets or gets the y-coordinate of the vertex with the given index.</PARA><PARA>Use <see cref="M:Cognex.VisionPro.CogPolygon.SetVertex(System.Int32,System.Double,System.Double)" /> and  <see cref="M:Cognex.VisionPro.CogPolygon.GetVertex(System.Int32,System.Double@,System.Double@)" />  to set or get both the x- and y-coordinate at once.</PARA></remarks><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when the y-coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the y-coordinate of the vertex changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="M:Cognex.VisionPro.CogPolygon.SetVertexY(System.Int32,System.Double)"><param name="index"><PARA>Index of the vertex. Must be &gt;= 0 and &lt; <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when the y-coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the y-coordinate of the vertex changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt; 0 or <paramref name="index" /> &gt; (<see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />−1)</para></exception><summary>The Y-coordinate of the vertex with the given index.</summary><remarks><PARA>Sets or gets the y-coordinate of the vertex with the given index.</PARA><PARA>Use <see cref="M:Cognex.VisionPro.CogPolygon.SetVertex(System.Int32,System.Double,System.Double)" /> and  <see cref="M:Cognex.VisionPro.CogPolygon.GetVertex(System.Int32,System.Double@,System.Double@)" />  to set or get both the x- and y-coordinate at once.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.GetVertexAdornmentColor(System.Int32)"><param name="index"><PARA>Index of the vertex.</PARA></param><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="singleState"><para>
		
		Fires when the vertex adornment color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPolygon_VertexAdornmentColor--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogPolygonVertexColorConstants" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt; 0 or <paramref name="index" /> &gt; (<see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />−1)</para></exception><summary>The adornment color for the vertex with the given index.</summary><remarks><PARA>Sets or gets the adornment color for the vertex with the given index. Use <see cref="P:Cognex.VisionPro.CogPolygon.VertexAdornment" /> to specify the shape of the adornment.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogPolygonVertexColorConstants">Auto</see></DEFAULT></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.SetVertexAdornmentColor(System.Int32,Cognex.VisionPro.CogPolygonVertexColorConstants)"><param name="index"><PARA>Index of the vertex.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="singleState"><para>
		
		Fires when the vertex adornment color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPolygon_VertexAdornmentColor--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogPolygonVertexColorConstants" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt; 0 or <paramref name="index" /> &gt; (<see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />−1)</para></exception><remarks><PARA>Sets or gets the adornment color for the vertex with the given index. Use <see cref="P:Cognex.VisionPro.CogPolygon.VertexAdornment" /> to specify the shape of the adornment.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogPolygonVertexColorConstants">Auto</see></DEFAULT></remarks><summary>The adornment color for the vertex with the given index.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.VertexReserve(System.Int32)"><param name="minNumVertices"><PARA /></param><summary>If the supplied value is less than or equal to the current VertexCapacity, there will be no change. Otherwise, ensure that VertexCapacity is greater than or equal to the supplied value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="minNumVertices" /> &lt; 0.</para></exception><remarks><PARA>Ensures a reserve for a specified number of vertices.
If <paramref name="minNumVertices" /> is less than or equal to <see cref="P:Cognex.VisionPro.CogPolygon.VertexCapacity" /> there is no change. Otherwise, <see cref="P:Cognex.VisionPro.CogPolygon.VertexCapacity" /> is greater than or equal to <paramref name="minNumVertices" />.
</PARA></remarks><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="singleState"><para>
		
		Fires when the vertex capacity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPolygon_VertexCapacity--><ul /></event></member><member name="M:Cognex.VisionPro.CogPolygon.AddVertex(System.Double,System.Double,System.Int32)"><param name="x"><PARA>X-coordinate of the vertex.</PARA></param><param name="y"><PARA>Y-coordinate of the vertex.</PARA></param><param name="index"><PARA>Index of the vertex.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt;  −1</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &gt;  <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.OUTOFMEMORYException" cgnxHRESULT="E_OUTOFMEMORY"><para>The memory to store the vertices cannot be allocated.</para></exception><remarks><PARA>Add a vertex to the polygon at the given index. If <paramref name="index" /> is −1 or <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />, the vertex is added to the end.
</PARA></remarks><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when a vertex is added.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexAdded"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM><ACTUAL_PARAM>NewNumVertices</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when a vertex is added. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
</EVENT><summary>Add a vertex to the polygon. If the default index -1 is used, the new vertex will be added to the end of any existing vertices. Otherwise Index must be &gt;= 0 and &lt;= NumVertices.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.RemoveVertex(System.Int32)"><param name="index"><PARA>Index of the vertex.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt;  0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &gt;=  <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /></para></exception><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when a vertex is removed.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexRemoved"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewNumVertices</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when a vertex is removed. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
</EVENT><summary>Remove the specified vertex from the polygon. Index must be &gt;= 0 and &lt; NumVertices.</summary><remarks><PARA>Removes the specified vertex from the polygon.
<paramref name="index" /> must be &gt;= 0 and &lt; <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.GetVertex(System.Int32,System.Double@,System.Double@)"><param name="index"><PARA>Index of the vertex.</PARA></param><param name="x"><PARA>X-coordinate of the vertex.</PARA></param><param name="y"><PARA>Y-coordinate of the vertex.</PARA></param><summary>Get the coordinates of the vertex at the specified index. Index must be &gt;= 0 and &lt; NumVertices.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt;  0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &gt;=  <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /></para></exception><remarks><PARA>Gets the coordinates of the vertex at the specified index. 
<paramref name="index" /> must be greater than or equal to 0 and less than <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.SetVertex(System.Int32,System.Double,System.Double)"><param name="index"><PARA>Index of the vertex.</PARA></param><param name="x"><PARA>X-coordinate of the vertex.</PARA></param><param name="y"><PARA>Y-coordinate of the vertex.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &lt;  0</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> &gt;=  <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /></para></exception><summary>Set the coordinates of the vertex at the specified index. Index must be &gt;= 0 and &lt; NumVertices.</summary><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when a vertex is set.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="VertexChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>Index</ACTUAL_PARAM><ACTUAL_PARAM>NewX</ACTUAL_PARAM><ACTUAL_PARAM>NewY</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinates of the vertex change. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Set the coordinates of the vertex at the specified index. 
<paramref name="index" /> must be greater than or equal to 0 and less than <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" />.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.GetVertices"><summary>The X,Y coordinates of all vertices, returned as a two-dimensional array. The size of this array is automatically set to match the number of vertices.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="CoordinatesXY" /> is not two-dimensional.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The row or column lower bound is not zero.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The number of columns is not two.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The array type is not Double.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.OUTOFMEMORYException" cgnxHRESULT="E_OUTOFMEMORY"><para>Additional vertices cannot be allocated.</para></exception><remarks><PARA>Returns the (x,y) coordinates of all vertices as a two-dimensional array.
The size of this array is automatically set to match the number of vertices.</PARA></remarks><returns><PARA>Array of vertices.</PARA></returns></member><member name="M:Cognex.VisionPro.CogPolygon.SetVertices(System.Double[0:,0:])"><param name="coordinatesXY"><PARA>An array of vertex coordinates.</PARA></param><event cref="E:Cognex.VisionPro.CogPolygon.Changed" cgnxEvent="multiState"><para>
        
		Fires when vertices are set.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogPolygonEvents" FUNC="BulkChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>NewNumVertices</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the vertices are set. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.OUTOFMEMORYException" cgnxHRESULT="E_OUTOFMEMORY"><para>The array cannot be allocated.</para></exception><remarks><PARA>Modifies the coordinates of the vertices to match the supplied values.
If there are more supplied values than vertices, additional vertices are appended to the polygon. 
If there are fewer supplied values than vertices, the superfluous vertices are discarded.
</PARA></remarks><summary>Modify the coordinates of the vertices to match the supplied values. If there are more supplied values than vertices, append sufficient vertices. If there are fewer supplied values than vertices, discard vertices at the end.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogPolygon" /> object.</PARA></returns><summary>Create a new polygon that replicates the specified properties.</summary><remarks><PARA>Creates a new polygon that copies specified parameters.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> through which to map 
	this polygon.</PARA></param><param name="copyFlags"><PARA>One or more values from <see cref="T:Cognex.VisionPro.CogCopyShapeConstants" /> 
	specifying which attributes of this polygon are to be copied to the
	mapped polygon.</PARA></param><returns><PARA>The returned <see cref="T:Cognex.VisionPro.CogPolygon" />.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Creates a new polygon by mapping the vertices through a linear transform.</PARA></remarks><summary>Create a new polygon by mapping this one through the given transform.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.NearestVertex(System.Double,System.Double)"><param name="x"><PARA>X-coordinate.</PARA></param><param name="y"><PARA>X-coordinate.</PARA></param><returns><PARA>Index or the nearest vertex.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegeneratePolygonException" cgnxHRESULT="E_CogShape_DegeneratePolygon"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1.</para></exception><remarks><PARA>Returns the index number of the vertex nearest to the supplied (x,y) coordinates.</PARA></remarks><summary>Return the index number of the vertex nearest to the supplied X,Y coordinates. Generates an error if there are no vertices.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.MeanVertex(System.Double@,System.Double@)"><param name="x"><PARA>The mean x-coordinate.</PARA></param><param name="y"><PARA>The mean y-coordinate.</PARA></param><summary>Return the average X and Y coordinates of all the vertices. Generates an error if there are no vertices.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegeneratePolygonException" cgnxHRESULT="E_CogShape_DegeneratePolygon"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 1.</para></exception><remarks><PARA>Returns the average x- and y-coordinates of all the vertices.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.ArcCenter(System.Double@,System.Double@)"><param name="x"><PARA>X-coordinate of the center.</PARA></param><param name="y"><PARA>Y-coordinate of the center.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegeneratePolygonException" cgnxHRESULT="E_CogShape_DegeneratePolygon"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 2.</para></exception><remarks><PARA>Computes the center of mass of this polygon as if the mass were uniformly distributed along the perimeter.</PARA></remarks><summary>Compute the center of mass of this polygon as if the mass were uniformly distributed along the perimeter. Generates an error if there are less than two vertices.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.ArcMoments1(System.Double@,System.Double@,System.Double@)"><param name="sum"><PARA>Integral of the function 1 over the length of the polygon.</PARA></param><param name="sumX"><PARA>Integral of the function <ITALIC>x</ITALIC> over the length of the polygon.</PARA></param><param name="sumY"><PARA>Integral of the function <ITALIC>y</ITALIC> over the length of the polygon.</PARA></param><summary>Compute the zeroth and first moments of this polygon as if the mass were uniformly distributed along the perimeter. Results will be zero if there are fewer than two vertices.</summary><remarks><PARA>Compute the zeroth and first moments of this polygon as if the mass were uniformly distributed along the perimeter.
All results are zero if <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> is less than 2.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.ArcMoments2(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="sum"><PARA>Integral of the function 1 over the length of the polygon.</PARA></param><param name="sumX"><PARA>Integral of the function <ITALIC>x</ITALIC> over the length of the polygon.</PARA></param><param name="sumY"><PARA>Integral of the function <ITALIC>y</ITALIC> over the length of the polygon.</PARA></param><param name="sumXX"><PARA>Integral of the function <ITALIC>x<SUPER>2</SUPER></ITALIC> over the length of the polygon.</PARA></param><param name="sumYY"><PARA>Integral of the function <ITALIC>y<SUPER>2</SUPER></ITALIC> over the length of the polygon.</PARA></param><param name="sumXY"><PARA>Integral of the function <ITALIC>xy</ITALIC> over the length of the polygon.</PARA></param><summary>Compute the zeroth, first, and second moments of this polygon as if the mass were uniformly distributed along the perimeter. Results will be zero if there are fewer than two vertices.</summary><remarks><PARA>Compute the zeroth, first, and second moments of this polygon as if the mass were uniformly distributed along the perimeter.
All results are zero if <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> is less than 2.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.ConvexHull"><remarks><PARA>Returns a new polygon that is the convex hull of the vertices of this polygon. The convex hull is the polygon
that would result if you were to stretch an elastic band over all of the vertices. The following picture shows that the convex hull of a star-shaped polygon is the pentagon that encloses it.</PARA><PARA><PICTURE SRC="hull.gif" apiSRC="ConvexHull_hull.gif" /></PARA></remarks><returns><PARA>The convex hull of this polygon.</PARA></returns><summary>Compute and return a CogPolygon that is the convex hull of these vertices.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.AreaCenter(System.Double@,System.Double@)"><param name="x"><PARA>X-coordinate of the center.</PARA></param><param name="y"><PARA>Y-coordinate of the center.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegeneratePolygonException" cgnxHRESULT="E_CogShape_DegeneratePolygon"><para><see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> &lt; 3.</para></exception><remarks><PARA>Computes the centroid of this polygon. The polygon must have at least three vertices.</PARA><PARA>If the polygon is <see cref="P:Cognex.VisionPro.CogPolygon.Complex" />, the value that <see cref="M:Cognex.VisionPro.CogPolygon.AreaCenter(System.Double@,System.Double@)" /> computes will not be valid, but <see cref="M:Cognex.VisionPro.CogPolygon.AreaCenter(System.Double@,System.Double@)" /> will not return an error. For <see cref="P:Cognex.VisionPro.CogPolygon.Complex" /> polygons use <see cref="M:Cognex.VisionPro.CogPolygon.ArcCenter(System.Double@,System.Double@)" /> instead.</PARA></remarks><summary>Compute the centroid of this polygon. Generates an error if there are fewer than 3 vertices.</summary></member><member name="M:Cognex.VisionPro.CogPolygon.AreaMoments1(System.Double@,System.Double@,System.Double@)"><param name="sum"><PARA>Integral of the function 1 over the area of the polygon.</PARA></param><param name="sumX"><PARA>Integral of the function <ITALIC>x</ITALIC> over the area of the polygon.</PARA></param><param name="sumY"><PARA>Integral of the function <ITALIC>y</ITALIC> over  the area of the polygon.</PARA></param><summary>Compute the zeroth and first moments of area of this polygon. Results will be zero if there are fewer than 3 vertices.</summary><remarks><PARA>Compute the zeroth and first moments of area of this polygon.
All results are zero if <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> is less than 3.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.AreaMoments2(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="sum"><PARA>Integral of the function 1 over the area of the polygon.</PARA></param><param name="sumX"><PARA>Integral of the function <ITALIC>x</ITALIC> over the area of the polygon.</PARA></param><param name="sumY"><PARA>Integral of the function <ITALIC>y</ITALIC> over the area of the polygon.</PARA></param><param name="sumXX"><PARA>Integral of the function <ITALIC>x<SUPER>2</SUPER></ITALIC> over the area of the polygon.</PARA></param><param name="sumYY"><PARA>Integral of the function <ITALIC>y<SUPER>2</SUPER></ITALIC> over the area of the polygon.</PARA></param><param name="sumXY"><PARA>Integral of the function <ITALIC>xy</ITALIC> over the area of the polygon.</PARA></param><summary>Compute the zeroth, first, and second moments of area of this polygon. Results will be zero if there are fewer than 3 vertices.</summary><remarks><PARA>Compute the zeroth, first, and second moments of area of this polygon.
All results are zero if <see cref="P:Cognex.VisionPro.CogPolygon.NumVertices" /> is less than 3.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogPolygon.HighlightRequest"><summary>Enables vertex highlighting by incrementing HighlightRequested.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires to indicate that HighlightRequested has changed.</event></member><member name="M:Cognex.VisionPro.CogPolygon.HighlightRelinquish"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires to indicate that HighlightRequested has changed.</event><summary>Decrement the HighlightRequested reference count, unless it is already zero. If HighlightRequested reaches zero, vertex highlighting is disabled.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.BulkChanged"><summary>Occurs after a bulk change to the polygon, such as a call to SetVertices or loading from an archive.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.VertexRemoved"><summary>Occurs after one or more vertices are deleted from the polygon.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.VertexAdded"><summary>Occurs after one or more vertices are added to the polygon.</summary></member><member name="E:Cognex.VisionPro.CogPolygon.VertexChanged"><summary>Occurs after the x or y coordinate of a single vertex is changed in the polygon.</summary></member><member name="T:Cognex.VisionPro.CogRLEBuffer"><remarks><PARA>Interface of a buffer which holds a Run Length Encoded image.</PARA></remarks><summary>Class that holds a run-length-encoded representation of an image.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.#ctor(Cognex.VisionPro.CogRLEBuffer)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfInitted"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Initted may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfBinary"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Binary may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by X may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Y may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Width may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Height may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfGetPixel"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetPixel may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRLEBuffer.SfNumRuns"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NumRuns may have changed.</summary></member><member name="P:Cognex.VisionPro.CogRLEBuffer.NumRuns"><summary>Total number of runs in this RLE image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><remarks><PARA>Total number of runs in this RLE image.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRLEBuffer.Height"><remarks><PARA>Height dimension of this RLE image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><summary>Height dimension of this RLE image.</summary></member><member name="P:Cognex.VisionPro.CogRLEBuffer.Width"><remarks><PARA>Width dimension of this RLE image.</PARA></remarks><summary>Width dimension of this RLE image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception></member><member name="P:Cognex.VisionPro.CogRLEBuffer.Y"><remarks><PARA>Topmost coordinate of the RLE image.</PARA><PARA>The RLE buffer contains pixels whose y-values range from <see cref="P:Cognex.VisionPro.CogRLEBuffer.Y" /> to <see cref="P:Cognex.VisionPro.CogRLEBuffer.Y" />+<see cref="P:Cognex.VisionPro.CogRLEBuffer.Height" />−1.</PARA></remarks><summary>Topmost coordinate of the RLE image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception></member><member name="P:Cognex.VisionPro.CogRLEBuffer.X"><summary>Leftmost coordinate of the RLE image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><remarks><PARA>Leftmost coordinate of the RLE image.</PARA><PARA>The RLE buffer contains pixels whose x-values range from <see cref="P:Cognex.VisionPro.CogRLEBuffer.X" /> to <see cref="P:Cognex.VisionPro.CogRLEBuffer.X" />+<see cref="P:Cognex.VisionPro.CogRLEBuffer.Width" />−1.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRLEBuffer.Binary"><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><remarks><PARA>Returns True if this object contains only data with values 0 and 255.</PARA></remarks><summary>Set to true, if this object contains only data with values 0 and 255.</summary></member><member name="P:Cognex.VisionPro.CogRLEBuffer.Initted"><summary>Set to true, if this object has been initialized.</summary><remarks><PARA>Returns True if this object has been initialized.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRLEBuffer.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogRLEBuffer.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.GetPixel(System.Int32,System.Int32)"><param name="x"><PARA>X-coordinate of the pixel.</PARA></param><param name="y"><PARA>Y-coordinate of the pixel.</PARA></param><remarks><PARA>Pixel Value at the specified location in this RLE image.</PARA></remarks><summary>Pixel Value at the specified location in this RLE image.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception></member><member name="M:Cognex.VisionPro.CogRLEBuffer.CreateImage8Grey"><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><returns><PARA>The image.</PARA></returns><summary>Create an image from this CogRLEBuffer.</summary><remarks><PARA>Create an image from this CogRLEBuffer.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRLEBuffer.DrawIntoImage8Grey(Cognex.VisionPro.CogImage8Grey,System.Boolean,System.Byte)"><param name="image"><PARA>The image into which the RLE buffer will be copied.</PARA></param><param name="transparencyEnabled"><PARA>When True, portions of the RLE buffer whose value is <paramref name="transparencyValue" /> are not copied into the destination image.  Instead the original image pixels remain unmodified, as if the RLE buffer were transparent in those regions.
</PARA></param><param name="transparencyValue"><PARA>If <paramref name="transparencyEnabled" /> is True, portions of the RLE buffer with this value are treated as if they were transparent;: they are not copied into the destination image.</PARA></param><summary>Destructively write into an image from this CogRLEBuffer.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><remarks><PARA>Destructively write into an image from this <see cref="T:Cognex.VisionPro.CogRLEBuffer" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRLEBuffer.PixelMap(System.Byte[])"><param name="map"><PARA>
The pixel map. Each pixel in in this image is 
replaced with the value at the corresponding offset in the map.
</PARA></param><remarks><PARA>Pixel map this CogRLEBuffer.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="map" />'s lower bound is &lt; 0 or its upper bound is &gt; 255, or its dimension is &gt; 1.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><summary>Pixel map this CogRLEBuffer.</summary></member><member name="M:Cognex.VisionPro.CogRLEBuffer.Combine(Cognex.VisionPro.CogRLEBuffer,System.Byte[],System.Byte)"><param name="subImage"><PARA>
The image to combine with this one.
The contents of <paramref name="subImage" /> are used to overwrite the corresponding part of this image.
</PARA></param><param name="map"><PARA>
A pixel map. If supplied, each pixel in <paramref name="subImage" /> is
replaced with the value at the corresponding offset in the map.
</PARA></param><param name="transparencyValue"><PARA>
If you specify a  <paramref name="transparencyValue" />, then any pixels 
in  <paramref name="subImage" /> that have this value (after the mapping operation) 
are ignored during the combine operation (they are not used to replace existing pixels in this image).
</PARA></param><summary>Combine with another CogRLEBuffer.  The SubImage must be contained within the primary RLE image's bounds.</summary><remarks><PARA>Combine with another CogRLEBuffer.  The SubImage must be contained within the primary RLE image's bounds.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="subImage" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="map" />'s lower bound is &lt; 0 or its upper bound is &gt; 255, or its dimension is &gt; 1.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferNotInitializedException" cgnxHRESULT="E_CogRLEBuffer_NotInitialized"><para>The RLE buffer is not initialized.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogRLEBufferCombineFailedException" cgnxHRESULT="E_CogRLEBuffer_CombineFailed"><para>The operation failed. Typically, this error means that the <paramref name="subImage" /> exceeds
		the primary image's bounds.</para></exception></member><member name="M:Cognex.VisionPro.CogRLEBuffer.GetRuns"><summary>Gets a one dimensional array of CogRLERun objects for this CogRLEBuffer. The order of these CogRLERun objects is row major - that is, they start with the first image pixel row, progressing from the first pixel column towards the last pixel column, then continue with the second row, and so on. The end of each row is identified with a CogRLERun object whose Length value is zero.</summary><returns>A one dimensional array of CogRLERun objects.</returns></member><member name="E:Cognex.VisionPro.CogRLEBuffer.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogRectangle"><summary>Class that represents a rectangle.</summary><remarks><PARA>Interface that describes a rectangle shape.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.#ctor(Cognex.VisionPro.CogRectangle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.#ctor"><summary>Constructs a new instance of this class.</summary><remarks>
    	The default-contructed rectangle has its (x,y) coordinates set to (20,20)
    	and its height and width each set to 100,
    </remarks></member><member name="M:Cognex.VisionPro.CogRectangle.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by X may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Y may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfWidth"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Width may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfHeight"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Height may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangle.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.Perimeter"><summary>Perimeter length of this CogRectangle.</summary><remarks><PARA>Returns the perimeter of this <see cref="T:Cognex.VisionPro.CogRectangle" /> in units specified by the <see cref="P:Cognex.VisionPro.CogRectangle.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.Area"><remarks><PARA>Returns the area of this <see cref="T:Cognex.VisionPro.CogRectangle" /> in units specified by the <see cref="P:Cognex.VisionPro.CogRectangle.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks><summary>Area of this CogRectangle.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.Height"><remarks><PARA>The height of this rectangle.</PARA><DEFAULT>100</DEFAULT></remarks><summary>Height of this rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>New height is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogRectangle.Width"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>New width is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Width of this rectangle.</summary><remarks><PARA>The width of this rectangle.</PARA><DEFAULT>100</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.CenterY"><summary>Center Y coordinate of this rectangle.</summary><remarks><PARA>Gets the y-coordinate of the center of this rectangle. To set the center of the rectangle use <see cref="M:Cognex.VisionPro.CogRectangle.SetCenterWidthHeight(System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.CenterX"><summary>Center X coordinate of this rectangle.</summary><remarks><PARA>Gets the x-coordinate of the center of this rectangle. To set the center of the rectangle use <see cref="M:Cognex.VisionPro.CogRectangle.SetCenterWidthHeight(System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.Y"><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Minimum Y coordinate of this rectangle.</summary><remarks><PARA>Returns the smallest y-coordinate of this rectangle.</PARA><DEFAULT>20</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.X"><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Returns the smallest x-coordinate of this rectangle.</PARA><DEFAULT>20</DEFAULT></remarks><summary>Minimum X coordinate of this rectangle.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.GraphicDOFEnable"><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogRectangleDOFConstants">interactive degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogRectangle" />.</PARA></remarks><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.GraphicDOFEnableBase"><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.DragLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangle.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><summary>Color of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangle.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><summary>Color of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangle.Selected"><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangle.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.Visible"><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogRectangle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogRectangle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><returns><PARA>The RLE representation of this region.</PARA></returns><summary>Create an RLE representation of this Region.</summary><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks></member><member name="M:Cognex.VisionPro.CogRectangle.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.SetXYWidthHeight(System.Double,System.Double,System.Double,System.Double)"><param name="x"><PARA>The x-coordinate of the top left corner of the rectangle</PARA></param><param name="y"><PARA>The y-coordinate of the top left corner of the rectangle</PARA></param><param name="width"><PARA>The width of the rectangle.</PARA></param><param name="height"><PARA>The height of the rectangle.</PARA></param><summary>Initialize from X,Y,Width,Height.</summary><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> is &lt;= 0 or <paramref name="height" /> is &lt;= 0.</para></exception><remarks><PARA>Returns the x- and y-coordinates and the width and height of this rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.GetXYWidthHeight(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the top left corner of the rectangle.</PARA></param><param name="y"><PARA>The y-coordinate of the top left corner of the rectangle</PARA></param><param name="width"><PARA>The width of the rectangle.</PARA></param><param name="height"><PARA>The height of the rectangle.</PARA></param><remarks><PARA>Returns the x- and y-coordinates and the width and height of this rectangle.</PARA></remarks><summary>Retrieve X,Y,Width,Height parameterization.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.SetCenterWidthHeight(System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the center of the rectangle</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the rectangle</PARA></param><param name="width"><PARA>The width of the rectangle.</PARA></param><param name="height"><PARA>The height of the rectangle.</PARA></param><summary>Initialize from CenterX,CenterY,Width,Height.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> is &lt;= 0 or <paramref name="height" /> is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets the x- and y-coordinates of the center and the width and height of this rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.GetCenterWidthHeight(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center of the rectangle.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center of the rectangle</PARA></param><param name="width"><PARA>The width of the rectangle.</PARA></param><param name="height"><PARA>The height of the rectangle.</PARA></param><remarks><PARA>Returns the x- and y-coordinates of the center and the width and height of this rectangle.</PARA></remarks><summary>Retrieve CenterX,CenterY,Width,Height parameterization.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.Intersect(Cognex.VisionPro.CogRectangle,Cognex.VisionPro.CogCopyShapeConstants)"><param name="other"><PARA>The intersecting rectangle.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Return a rectangle that is the intersection of this rectangle with another.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="other" /> is NULL.
	</para><para>
		This rectangle and <paramref name="other" /> do not intersect.
	</para></exception><returns><PARA>The intersection of this rectangle with <paramref name="other" /></PARA></returns><summary>Compute the intersection with Other.</summary></member><member name="M:Cognex.VisionPro.CogRectangle.Dilate(Cognex.VisionPro.CogRectangle,Cognex.VisionPro.CogCopyShapeConstants)"><param name="other"><PARA>The rectangle used to dilate this rectangle.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Creates a new rectangle which is the dilation of this by Other.</summary><returns><PARA>The dilated rectangle.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="other" /> is NULL.</para></exception><remarks><PARA>Creates a new rectangle that is the result of dilating this rectangle with another rectangle. The dilated rectangle is the area occupied by <paramref name="other" /> as its origin traces the perimeter of this rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.Erode(Cognex.VisionPro.CogRectangle,Cognex.VisionPro.CogCopyShapeConstants)"><param name="other"><PARA>The rectangle used to erode this rectangle.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Creates a new rectangle which is the erosion of this by Other.</summary><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="other" /> is NULL.</para></exception><returns><PARA>The eroded rectangle.</PARA></returns><remarks><PARA>Creates a new rectangle that is the result of eroding this rectangle with another rectangle. The eroded rectangle is the result of tracing <paramref name="other" />'s origin point as it occupies every possible point within this rectangle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.Union(Cognex.VisionPro.CogRectangle,Cognex.VisionPro.CogCopyShapeConstants)"><param name="other"><PARA>The other rectangle.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of this rectangle to copy to the new rectangle.</PARA></param><summary>Creates a new rectangle which is the union of this by Other.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="other" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.CogRectangle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Creates a new rectangle which is the union of this by Other.</PARA></remarks><returns><PARA>The union of this rectangle with <paramref name="other" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogRectangle.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogRectangle" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogRectangle" />.</PARA></returns><summary>Map through a linear transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Create a new rectangle that is the result of mapping this rectangle using a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangle.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Create a new shape that copies specified parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogRectangle" /> object.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogRectangle" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogRectangle" />.</PARA></remarks></member><member name="E:Cognex.VisionPro.CogRectangle.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogRectangle.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogRectangle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogRectangleAffine"><remarks><PARA>Interface that describes an affine rectangle.</PARA><PARA>An affine rectangle is a quadrilateral where the opposite sides are parallel. An affine rectangle can be specified by the locations of three of its vertices;  by its center point, width, height, rotation, and skew angle; or by its origin  point, width, height, rotation, and skew angle. The vertices of an affine rectangle are labeled as shown in the following figure:</PARA><PARA><PICTURE SRC="AffineParts.gif" HEIGHT="147" WIDTH="189" apiSRC="ICogRectangleAffine_AffineParts.gif" /></PARA><PARA><BOLD>Po</BOLD> is the Corner point origin.</PARA><PARA><BOLD>Popp</BOLD> is the Corner point opposite.</PARA><PARA><BOLD>Px</BOLD> is the Corner point X.</PARA><PARA><BOLD>Py</BOLD> is the Corner point Y.</PARA><PARA>Note that the corner points Px and Py denote the points that lie along the x- and y-axes. Each of these points has its own x- and y-coordinates.</PARA></remarks><summary>Class that represents an affine rectangle.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.#ctor(Cognex.VisionPro.CogRectangleAffine)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfGraphicDOFEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCenterX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCenterY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CenterY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerOriginX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOriginX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerOriginY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOriginY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerXX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerXX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerXY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerXY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerYX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerYX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerYY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerYY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerOppositeX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOppositeX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCornerOppositeY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CornerOppositeY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSideXLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SideXLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSideYLength"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SideYLength may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfXDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfYDirectionAdornment"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YDirectionAdornment may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSkew"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Skew may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfArea"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Area may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Perimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfEnclosingRectangle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EnclosingRectangle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfCreateRLE"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateRLE may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSelectedSpaceName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedSpaceName may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfVisible"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Visible may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Color may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfInteractive"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Interactive may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfTipText"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TipText may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSelected"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Selected may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSelectedColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSelectedLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfSelectedLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SelectedLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfDragColor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragColor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfDragLineStyle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineStyle may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfDragLineWidthInScreenPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DragLineWidthInScreenPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfMouseCursor"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MouseCursor may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfGraphicDOFEnableBase"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GraphicDOFEnableBase may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfParent"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Parent may have changed.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffine.SfChildren"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Children may have changed.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Perimeter"><remarks><PARA>Returns the perimeter of this <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> in units specified by the <see cref="P:Cognex.VisionPro.CogRectangleAffine.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks><summary>Perimeter length of this CogRectangleAffine.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Area"><summary>Area of this CogRectangleAffine.</summary><remarks><PARA>Returns the area of this <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> in units specified by the <see cref="P:Cognex.VisionPro.CogRectangleAffine.SelectedSpaceName">selected coordinate space</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Skew"><remarks><PARA>Sets or gets the skew angle of this affine rectangle in radians.</PARA><NOTE>To prevent degenerate affine rectangles, setting <see cref="P:Cognex.VisionPro.CogRectangleAffine.Skew" /> to within +/- 0.002 of +/-(π/2) causes the value to be set to either (-π/2 - 0.002) or (π/2 + 0.002) for negative and positive values of <see cref="P:Cognex.VisionPro.CogRectangleAffine.Skew" />, respectively.
</NOTE><DEFAULT>0</DEFAULT></remarks><summary>The skew (in radians) of this affine rectangle.</summary><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Rotation"><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>The angle (in radians, from the x-axis) of the directed vector which starts at CornerOrigin and ends at CornerX.</summary><remarks><PARA>Gets the rotation angle in radians. This is the angle, measured from the x-axis, of the directed vector that starts at the corner origin (Po) and ends at corner point x (Px).</PARA><PARA><PICTURE SRC="LocationLengthRotationSkew.gif" WIDTH="350" HEIGHT="216" apiSRC="Rotation_LocationLengthRotationSkew.gif" /></PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.YDirectionAdornment"><remarks><PARA>The Y direction adornment of this affine rectangle.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogRectangleAffine_YDirectionAdornment--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The adornment is not in <see cref="T:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants" />.</para></exception><summary>The Y direction adornment of this affine rectangle.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.XDirectionAdornment"><remarks><PARA>The X direction adornment of this affine rectangle.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogRectangleAffine_XDirectionAdornment--><ul /></event><summary>The X direction adornment of this affine rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The adornment is not in <see cref="T:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.CogRectangleAffine.SideYLength"><summary>The Length of this affine rectangle from CornerOrigin to CornerY.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The length is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the side x length of this affine rectangle. This is the length from the origin point (Po) to corner point y (Py).</PARA><DEFAULT>100</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.SideXLength"><summary>The Length of this affine rectangle from CornerOrigin to CornerX.</summary><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><remarks><PARA>Sets or gets the side x length of this affine rectangle. This is the length from the origin point (Po) to corner point x (Px).</PARA><DEFAULT>100</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The length is &lt;= 0.</para></exception></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerOppositeY"><summary>Corner point Opposite (Y coordinate) of this affine rectangle.</summary><remarks><PARA>Gets the y-coordinate of the corner point opposite (Popp).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerOppositeX"><remarks><PARA>Gets the x-coordinate of the corner point opposite (Popp).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks><summary>Corner point Opposite (X coordinate) of this affine rectangle.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerYY"><summary>Corner point Y (Y coordinate) of this affine rectangle.</summary><remarks><PARA>Gets the y-coordinate of the corner point y.
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerYX"><summary>Corner point Y (X coordinate) of this affine rectangle.</summary><remarks><PARA>Gets the x-coordinate of the corner point y (Py).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerXY"><summary>Corner point X (Y coordinate) of this affine rectangle.</summary><remarks><PARA>Gets the y-coordinate of the corner point x (Px).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerXX"><summary>Corner point X (X coordinate) of this affine rectangle.</summary><remarks><PARA>Gets the x-coordinate of the corner point x (Px).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerOriginY"><summary>Corner point origin (Y coordinate) of this affine rectangle.</summary><remarks><PARA>Gets the y-coordinate of the corner point origin (Po).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CornerOriginX"><remarks><PARA>Gets the x-coordinate of the corner point origin (Po).
To set this property, use <see cref="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)" />.</PARA></remarks><summary>Corner point origin (X coordinate) of this affine rectangle.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CenterY"><summary>Center point (Y coordinate) of this affine rectangle.</summary><remarks><PARA>Sets or gets the y-coordinate of the center point of this affine rectangle.
<!-- To set this property use <LINK FUNC="SetCenterLengthsRotationSkew"/>. --></PARA><DEFAULT>70</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.CenterX"><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Center point (X coordinate) of this affine rectangle.</summary><remarks><PARA>Sets or gets the x-coordinate of the center point of this affine rectangle.
<!-- To set this property use <LINK FUNC="SetCenterLengthsRotationSkew"/>. --></PARA><DEFAULT>70</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.GraphicDOFEnable"><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogRectangleAffineDOFConstants">degrees of freedom</see> (DOF) are enabled for this <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul /></event><summary>Interactive Degree of freedom for this graphic object.  Provides the ability to govern interactive manipulation of an object; for example could be used to prevent an object from being resized.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Children"><remarks><PARA>Children of this graphic.</PARA></remarks><summary>Children of this graphic.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.MouseCursor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.DragLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><summary>Line width of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.DragLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.DragColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.SelectedLineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><summary>Line width of this graphic when selected.</summary><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogRectangleAffine.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.SelectedColor"><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Selected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event><summary>True when the shape is selected in a display.</summary><remarks><PARA>True when the shape is selected in a display.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.TipText"><summary>Text to describe this graphic in a tool tip.</summary><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.LineWidthInScreenPixels"><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception></member><member name="P:Cognex.VisionPro.CogRectangleAffine.LineStyle"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><summary>Line style of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.Visible"><summary>Visible property of this graphic.</summary><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.CogRectangleAffine.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogRectangleAffine.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogRectangleAffine.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.CogRectangleAffine.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><returns><PARA>The mapped shape.</PARA></returns><summary>Maps this shape through the given transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception></member><member name="M:Cognex.VisionPro.CogRectangleAffine.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns><summary>Minimum enclosing rectangle of this shape.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><summary>Create an RLE representation of this Region.</summary><returns><PARA>The RLE representation of this region.</PARA></returns><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><summary>Copy a graphic and its derived parameters.</summary><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogRectangleAffine.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)"><param name="weight"><PARA>The weight of the shape model.</PARA></param><param name="polarity"><PARA>The polarity of the shape model.</PARA></param><param name="copyShape"><PARA>If True, the returned shape model refers to a copy of this <see cref="T:Cognex.VisionPro.CogRectangleAffine" />; otherwise the shape model refers to this <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></param><summary>Returns a newly created shape model with the given weight and polarity.  The 'Shape' property of the returned shape model will refer to this shape, or a copy of this shape, as specified by the CopyShape argument.</summary><remarks><PARA>Returns a newly created <see cref="T:Cognex.VisionPro.CogShapeModel" /> with the given weight and polarity.
</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogShapeModel.Shape" /> property of the returned shape will refer to this shape or to a copy of this shape depending on the <paramref name="copyShape" /> argument.</PARA></remarks><returns><PARA>The returned shape model.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="polarity" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception></member><member name="M:Cognex.VisionPro.CogRectangleAffine.SetFromRectangle(Cognex.VisionPro.CogRectangle,Cognex.VisionPro.CogTransform2DLinear)"><param name="rectangle"><PARA>The rectangle to use as the basis for this affine rectangle. This is often a unit square..</PARA></param><param name="newTransform"><PARA>The transformation object to apply to <paramref name="rectangle" /> set this affine rectangle.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The rectangle is NULL.</para></exception><remarks><PARA>Sets parameters of this affine rectangle from the given rectangle and transformation.</PARA></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Set parameters of this affine rectangle from the given rectangle and transformation.</summary></member><member name="M:Cognex.VisionPro.CogRectangleAffine.SetOriginCornerXCornerY(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="originX"><PARA>The x-coordinate of corner point origin (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of corner point origin (Po).</PARA></param><param name="cornerXX"><PARA>The x-coordinate of corner point x (Px).</PARA></param><param name="cornerXY"><PARA>The y-coordinate of corner point x (Px).</PARA></param><param name="cornerYX"><PARA>The x-coordinate of corner point y (Py).</PARA></param><param name="cornerYY"><PARA>The y-coordinate of corner point y (Py).</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeNotRectangleException" cgnxHRESULT="E_CogShape_NotRectangle"><para>The three points are not unique.</para></exception><summary>Initialize this affine rectangle from the three corner points: Origin, CornerX, and CornerY.</summary><remarks><PARA>Sets this affine rectangle from the specified origin point (Po), corner point x (Px), and corner point y (Py) as shown in the following illustration:</PARA><PARA><PICTURE SRC="AffineParts.gif" HEIGHT="147" WIDTH="189" apiSRC="SetOriginCornerXCornerY_AffineParts.gif" /></PARA></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="M:Cognex.VisionPro.CogRectangleAffine.GetOriginCornerXCornerY(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="originX"><PARA>The x-coordinate of corner point origin (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of corner point origin (Po).</PARA></param><param name="cornerXX"><PARA>The x-coordinate of corner point x (Px).</PARA></param><param name="cornerXY"><PARA>The y-coordinate of corner point x (Px).</PARA></param><param name="cornerYX"><PARA>The x-coordinate of corner point y (Py).</PARA></param><param name="cornerYY"><PARA>The y-coordinate of corner point y (Py).</PARA></param><summary>Query the parameterization of this affine rectangle with respect to the three corner points: Origin, CornerX, and CornerY.</summary><remarks><PARA>Gets the values of three corner points of this affine rectangle: origin (Po), corner point x (Px), and corner point y (Py).</PARA><PARA><PICTURE SRC="AffineParts.gif" HEIGHT="147" WIDTH="189" apiSRC="GetOriginCornerXCornerY_AffineParts.gif" /></PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.SetCenterLengthsRotationSkew(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="centerX"><PARA>The x-coordinate of the center point.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center point.</PARA></param><param name="sideXLength"><PARA>The length of side x (the side along the x-axis).</PARA></param><param name="sideYLength"><PARA>The length of side y  (the side along the y-axis).</PARA></param><param name="rotation"><PARA>The rotation angle in radians.</PARA></param><param name="skew"><PARA>The skew angle in radians.</PARA></param><summary>Initialize this affine rectangle from its center point, SideXLength, SideYLength, Rotation (in radians) and Skew.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="sideXLength" /> is &lt;= 0 or <paramref name="sideYLength" /> is &lt;= 0.</para></exception><remarks><PARA>Sets this affine rectangle from the specified center point, side x length, side y length, rotation angle, and skew angle as shown in the following illustration:</PARA><PARA><PICTURE SRC="LocationLengthRotationSkew.gif" WIDTH="350" HEIGHT="216" apiSRC="SetCenterLengthsRotationSkew_LocationLengthRotationSkew.gif" /></PARA><NOTE>To prevent degenerate affine rectangles, setting <paramref name="skew" /> to within +/- 0.002 of +/-(π/2) causes the value to be set to either (-π/2 - 0.002) or (π/2 + 0.002) for negative and positive values of <paramref name="skew" />, respectively.</NOTE></remarks><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event></member><member name="M:Cognex.VisionPro.CogRectangleAffine.GetCenterLengthsRotationSkew(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="centerX"><PARA>The x-coordinate of the center point.</PARA></param><param name="centerY"><PARA>The y-coordinate of the center point.</PARA></param><param name="sideXLength"><PARA>The length of side x (the side along the x-axis).</PARA></param><param name="sideYLength"><PARA>The length of side y  (the side along the y-axis).</PARA></param><param name="rotation"><PARA>The rotation angle in radians.</PARA></param><param name="skew"><PARA>The skew angle in radians.</PARA></param><summary>Query this affine rectangle for its center, length, rotation and skew parameterization.  All angles are in radians.</summary><remarks><PARA>Gets the center point, side x length, side y length, rotation angle, and skew angle of this affine rectangle as shown in the following illustration:</PARA><PARA><PICTURE SRC="LocationLengthRotationSkew.gif" WIDTH="350" HEIGHT="216" apiSRC="GetCenterLengthsRotationSkew_LocationLengthRotationSkew.gif" /></PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.SetOriginLengthsRotationSkew(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="originX"><PARA>The x-coordinate of the origin point (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of the origin point (Po).</PARA></param><param name="sideXLength"><PARA>The length of side x (the side along the x-axis).</PARA></param><param name="sideYLength"><PARA>The length of side y  (the side along the y-axis).</PARA></param><param name="rotation"><PARA>The rotation angle in radians.</PARA></param><param name="skew"><PARA>The skew angle in radians.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="sideXLength" /> is &lt;= 0 or <paramref name="sideYLength" /> is &lt;= 0.</para></exception><event cref="E:Cognex.VisionPro.CogRectangleAffine.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><summary>Initialize this affine rectangle from its origin point, SideXLength, SideYLength, Rotation and Skew.  All angles are in radians.</summary><remarks><PARA>Sets this affine rectangle from the specified origin point (Po), side x length, side y length, rotation angle, and skew angle as shown in the following illustration:</PARA><PARA><PICTURE SRC="LocationLengthRotationSkew.gif" WIDTH="350" HEIGHT="216" apiSRC="SetOriginLengthsRotationSkew_LocationLengthRotationSkew.gif" /></PARA><NOTE>To prevent degenerate affine rectangles, setting <paramref name="skew" /> to within +/- 0.002 of +/-(π/2) causes the value to be set to either (-π/2 - 0.002) or (π/2 + 0.002) for negative and positive values of <paramref name="skew" />, respectively.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.GetOriginLengthsRotationSkew(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="originX"><PARA>The x-coordinate of the origin point (Po).</PARA></param><param name="originY"><PARA>The y-coordinate of the origin point (Po).</PARA></param><param name="sideXLength"><PARA>The length of side x (the side along the x-axis).</PARA></param><param name="sideYLength"><PARA>The length of side y  (the side along the y-axis).</PARA></param><param name="rotation"><PARA>The rotation angle in radians.</PARA></param><param name="skew"><PARA>The skew angle in radians.</PARA></param><summary>Query this affine rectangle for its origin, length, rotation and skew parameterization.  All angles are in radians.</summary><remarks><PARA>Gets the specified origin point (Po), side x length, side y length, rotation angle, and skew angle as shown in the following illustration:</PARA><PARA><PICTURE SRC="LocationLengthRotationSkew.gif" WIDTH="350" HEIGHT="216" apiSRC="GetOriginLengthsRotationSkew_LocationLengthRotationSkew.gif" /></PARA></remarks></member><member name="M:Cognex.VisionPro.CogRectangleAffine.MapLinear(Cognex.VisionPro.CogTransform2DLinear,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> used to map this <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><remarks><PARA>Creates a new affine rectangle by mapping this one through the given transform.</PARA></remarks><summary>Create a new affine rectangle by mapping this one through the given transform.</summary><returns><PARA>The mapped <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></returns></member><member name="M:Cognex.VisionPro.CogRectangleAffine.Copy(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogRectangleAffine" /> object.</PARA></returns><summary>Create a new shape that copies specified parameters.</summary></member><member name="E:Cognex.VisionPro.CogRectangleAffine.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.CogRectangleAffine.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="E:Cognex.VisionPro.CogRectangleAffine.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogShapeExtract"><summary>The shape extraction operator is used to extract contours from an image.  Each contour is converted into a shape model which describes the geometry of the contour as well as its polarity.  A filtered and ranked collection of shape models is returned.</summary><remarks><PARA>Primary interface of CogShapeExtract.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogShapeExtract.#ctor(Cognex.VisionPro.CogShapeExtract)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfContrastThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ContrastThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfApproximationTolerance"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ApproximationTolerance may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfVocabulary"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Vocabulary may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfConnectTolerance"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ConnectTolerance may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfClosure"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Closure may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfPolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Polarity may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfPerimeterLimitsEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerimeterLimitsEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfPerimeterLimitMin"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerimeterLimitMin may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfPerimeterLimitMax"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerimeterLimitMax may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfRankMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RankMode may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfProximityShape"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProximityShape may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtract.SfMaxNumShapes"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MaxNumShapes may have changed.</summary></member><member name="P:Cognex.VisionPro.CogShapeExtract.MaxNumShapes"><remarks><PARA>The maximum number of shapes that will be returned. Shapes that do not meet the closure, polarity, and perimeter constraints are filtered out first. If more than specified number of shapes remain after filtering, the lowest-ranked shapes are also discarded.</PARA><DEFAULT>100</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_MaxNumShapes--><ul /></event><summary>The maximum number of shapes that will be returned.  Shapes that do not meet the closure, polarity, and perimeter constraints are filtered out first.  If more than MaxNumShapes remain after filtering then the lowest-ranked shapes are also discarded.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to 0.</para></exception></member><member name="P:Cognex.VisionPro.CogShapeExtract.ProximityShape"><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_ProximityShape--><ul /></event><summary>Shape used for ranking extracted shapes when RankMode is cogShapeExtractRankModeProximity.  Shapes are ranked based on their distance from this shape.  Shapes closer to this proximity shape are ranked higher.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is a 
   <see cref="T:Cognex.VisionPro.CogCompositeShape" /> or <see cref="T:Cognex.VisionPro.CogCoordinateAxes" />.</para></exception><remarks><PARA>Shape used for ranking extracted shapes when RankMode is cogShapeExtractRankModeProximity. Shapes are ranked based on their distance from this shape. Shapes closer to this proximity shape are ranked higher.</PARA><PARA>
This parameter is ignored unless <see cref="P:Cognex.VisionPro.CogShapeExtract.RankMode" />  is 
<see cref="T:Cognex.VisionPro.CogShapeExtractRankModeConstants">Proximity</see>.
</PARA><DEFAULT>Nothing</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapeExtract.RankMode"><summary>Indicates the mode for ranking extracted shapes.  The returned collection of shapes is sorted from highest rank to lowest.  If more shapes than the maximum number requested are found then the lowest ranking shapes are discarded.</summary><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_RankMode--><ul /></event><remarks><PARA>Indicates the mode for ranking extracted shapes. The returned collection of shapes is sorted from highest rank to lowest. If more shapes than the maximum number requested are found then the lowest ranking shapes are discarded.</PARA><NOTE>
The shape rankings are computed from the raw image
 edge data, before they are converted into approximating
 shapes.  For this reason, it is possible that the 
approximating shapes appear out of ranked order.
</NOTE><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeExtractRankModeConstants">Perimeter</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not 
   a member of the <see cref="T:Cognex.VisionPro.CogShapeExtractRankModeConstants" /> enumeration.</para></exception></member><member name="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMax"><remarks><PARA>The maximum allowed perimeter length of extracted shapes when PerimeterLimitsEnabled is true. The maximum perimeter length is specified in units of the selected space of the input image.</PARA><PARA><see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMin" /> must be less than or equal to <see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMax" />. If one 
property changes such this relationship is not maintained, the other property is set equal to this one.
</PARA><NOTE>
The limit checking is performed after connect tolerance checking is performed but 
before the raw edges are converted into a shape. The perimeter limit is checked against 
the perimeter of a polyline with a vertex at each edge point. Under some conditions, 
the final approximated shape will have a perimeter outside of the specified limits.
</NOTE><DEFAULT>10,000.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_PerimeterLimitMax--><ul /></event><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="multiState"><para>
		
		Fires when both this property and <see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMin" /> change. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_ShapeExtract_PerimeterLimits--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to zero.</para></exception><summary>The maximum allowed perimeter length of extracted shapes when PerimeterLimitsEnabled is true.  The maximum perimeter length is specified in units of the selected space of the input image.</summary></member><member name="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMin"><summary>The minimum allowed perimeter length of extracted shapes when PerimeterLimitsEnabled is true.  The minimum perimeter length is specified in units of the selected space of the input image.</summary><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_PerimeterLimitMin--><ul /></event><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="multiState"><para>
		
		Fires when both this property and <see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMax" /> change. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_ShapeExtract_PerimeterLimits--></ul></event><remarks><PARA>The minimum allowed perimeter length of extracted shapes when PerimeterLimitsEnabled is true. The minimum perimeter length is specified in units of the selected space of the input image.</PARA><PARA><see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMax" /> must be greater than or equal to <see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMin" />. If one 
property changes such this relationship is not maintained, the other property is set equal to this one.
</PARA><NOTE>
The limit checking is performed after connect tolerance checking is performed but 
before the raw edges are converted into a shape. The perimeter limit is checked against 
the perimeter of a polyline with a vertex at each edge point. Under some conditions, 
the final approximated shape will have a perimeter outside of the specified limits.
</NOTE><DEFAULT>10.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to zero.</para></exception></member><member name="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitsEnabled"><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_PerimeterLimitsEnabled--><ul /></event><summary>If true then only shapes with perimeter length within the limits specified by PerimeterLimitMin and PerimeterLimitMax will be extracted.</summary><remarks><PARA>If true then only shapes with perimeter length within the limits specified by 
	<see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMin" />
 and 
	<see cref="P:Cognex.VisionPro.CogShapeExtract.PerimeterLimitMax" />
 will be extracted.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapeExtract.Polarity"><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_Polarity--><ul /></event><summary>Specifies the desired polarity for extracting closed shapes.  The polarity setting has no effect on the extraction of open shapes.</summary><remarks><PARA>Specifies the desired polarity for extracting closed shapes. The polarity setting has no effect on the extraction of open shapes.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeExtractPolarityConstants">DontCare</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not 
   a member of the <see cref="T:Cognex.VisionPro.CogShapeExtractPolarityConstants" /> enumeration.</para></exception></member><member name="P:Cognex.VisionPro.CogShapeExtract.Closure"><remarks><PARA>Indicates whether open and/or closed shapes should be extracted from the input image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeExtractClosureConstants">DontCare</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_Closure--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not 
   a member of the <see cref="T:Cognex.VisionPro.CogShapeExtractClosureConstants" /> enumeration.</para></exception><summary>Indicates whether open and/or closed shapes should be extracted from the input image.</summary></member><member name="P:Cognex.VisionPro.CogShapeExtract.ConnectTolerance"><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_ConnectTolerance--><ul /></event><summary>If the distance between two endpoints of raw edge chains is less than this tolerance then the chains will be connected into a single chain.  In the case that the two endpoints come from the same open chain, the chain is converted into a closed chain.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.</para></exception><remarks><PARA>If the distance between two endpoints of raw edge chains is less than this tolerance then the chains will be connected into a single chain. In the case that the two endpoints come from the same open chain, the chain is converted into a closed chain.</PARA><PARA>
Polarity is ignored when forming connections.  The polarity
of a composite chain comprising multiple connected subchains
 is set to the polarity that exists over the majority of the
composite contour.
</PARA><NOTE>
Specifying a value of zero disables the connecting of raw edge chains.
</NOTE><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapeExtract.Vocabulary"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is 0 (no shapes).</para></exception><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_Vocabulary--><ul /></event><summary>Indicates which primitive shapes that may be extracted.  The shape vocabulary is an integer that is obtained by ORing together the vocabulary constants of the desired primitive shapes.</summary><remarks><PARA>Indicates which primitive shapes that may be extracted. The shape vocabulary is an integer that is obtained by ORing together the vocabulary constants of the desired primitive shapes.</PARA><PARA>
If both the circle and ellipse shapes are enabled, then <see cref="M:Cognex.VisionPro.CogShapeExtract.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)" /> will generate 
a circle whenever the raw edges can be fit to a circle within the specified 
<see cref="P:Cognex.VisionPro.CogShapeExtract.ApproximationTolerance" />. Similarly, if both the circular and elliptical arc shapes 
are enabled, <see cref="M:Cognex.VisionPro.CogShapeExtract.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)" /> will generate an elliptical arc with equal radii if the 
raw edges can be fit to a circular arc within the specified <see cref="P:Cognex.VisionPro.CogShapeExtract.ApproximationTolerance" />.
</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeExtractVocabularyConstants">LineSegment</see> + 
<see cref="T:Cognex.VisionPro.CogShapeExtractVocabularyConstants">EllipticalArc</see> + 
<see cref="T:Cognex.VisionPro.CogShapeExtractVocabularyConstants">Ellipse</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapeExtract.ApproximationTolerance"><summary>Specifies an upper bound on the deviation of the raw edge data from the approximating shape.  Specified in selected space units of the input image.  Higher tolerances result in larger approximations, but tend to produce simpler shape representations.</summary><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_ApproximationTolerance--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to 0.</para></exception><remarks><PARA>Specifies an upper bound on the deviation of the raw edge data from the approximating shape. Specified in selected space units of the input image supplied to <see cref="M:Cognex.VisionPro.CogShapeExtract.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion)" />. Higher tolerances result in less accurate but generally simpler shape representations.</PARA><DEFAULT>0.7</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapeExtract.ContrastThreshold"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.</para></exception><summary>The minimum absolute contrast difference used when extracting raw edge data from the input image.  Edges with a contrast difference that is less than or equal to this threshold are ignored.</summary><event cref="E:Cognex.VisionPro.CogShapeExtract.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeExtract_ContrastThreshold--><ul /></event><remarks><PARA>The minimum absolute contrast difference used when extracting raw edge data from the input image. Edges with a contrast difference that is less than or equal to this threshold are ignored.</PARA><DEFAULT>20.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapeExtract.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogShapeExtract.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogShapeExtract.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogRegion)"><param name="inputImage"><PARA>The image from which to extract shapes.</PARA></param><param name="extractRegion"><PARA>The region of <paramref name="inputImage" /> from which to extract shapes. If no 
	region is supplied, the entire image is used.</PARA></param><summary>Execute will extract contours from the input image and convert each contour into a shape model which describes the geometry of the contour as well as its polarity.  A filtered and ranked collection of shape models is returned.</summary><remarks><PARA>Execute will extract contours from the input image and convert each contour into a shape model which describes the geometry of the contour as well as its polarity. A filtered and ranked collection of shape models is returned.</PARA><NOTE>Each shape model within the collection will have its selected space set to the 
fully-qualified name of <paramref name="inputImage" />'s selected space.</NOTE></remarks><returns><PARA>The returned shape models.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
   	A NULL shape model was supplied.
   </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeExtractNoProximityShapeException" cgnxHRESULT="E_CogShapeExtract_NoProximityShape"><para><see cref="P:Cognex.VisionPro.CogShapeExtract.RankMode" /> is
	<see cref="T:Cognex.VisionPro.CogShapeExtractRankModeConstants">Proximity</see>
	but <see cref="P:Cognex.VisionPro.CogShapeExtract.ProximityShape" /> is Nothing.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeExtractNoOpenShapesException" cgnxHRESULT="E_CogShapeExtract_NoOpenShapes"><para><see cref="P:Cognex.VisionPro.CogShapeExtract.Closure" /> is set to either
	<see cref="T:Cognex.VisionPro.CogShapeExtractClosureConstants">Open</see>
	or
	<see cref="T:Cognex.VisionPro.CogShapeExtractClosureConstants">DontCare</see>
	but <see cref="P:Cognex.VisionPro.CogShapeExtract.Vocabulary" /> specifies no open shapes.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>
	The selected space of the <paramref name="inputImage" />
	 is not a valid space of the <paramref name="inputImage" />'s coordinate
	space tree;
	<paramref name="inputImage" />'s selected space is 
	nonqualified and more than one
	instance of it exists in <paramref name="inputImage" />'s space tree; 
	or
	<paramref name="inputImage" />'s selected space is not a
	legal space name.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidShapeException" cgnxHRESULT="E_CogOperator_InvalidShape"><para><see cref="P:Cognex.VisionPro.CogShapeExtract.RankMode" /> is 
	<see cref="T:Cognex.VisionPro.CogShapeExtractRankModeConstants">Proximity</see>
	and 
	<see cref="P:Cognex.VisionPro.CogShapeExtract.ProximityShape" />'s selected space is not a valid space 
	in <paramref name="inputImage" />; 
	<see cref="P:Cognex.VisionPro.CogShapeExtract.ProximityShape" />'s selected space is nonqualified and more than one
	instance of it exists in <paramref name="inputImage" />'s coordinate space tree;
	or <see cref="P:Cognex.VisionPro.CogShapeExtract.ProximityShape" />'s selected space is not a 
	legal space name.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="extractRegion" />'s selected space is not a 
	valid space in <paramref name="inputImage" />'s coordinate space tree; 
	<paramref name="extractRegion" />'s selected space is nonqualified and 
	more than once instance of it appears in  
	<paramref name="inputImage" />'s coordinate space tree; 
	<paramref name="extractRegion" />'s selected space is not a 
	legal space name; or
	<paramref name="extractRegion" /> falls completely outside of 
	<paramref name="inputImage" />. 
</para></exception></member><member name="E:Cognex.VisionPro.CogShapeExtract.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection"><summary>A collection of CogShapeModel objects.</summary><remarks><PARA>Interface for a collection of <see cref="T:Cognex.VisionPro.CogShapeModel" /> objects.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.#ctor(Cognex.VisionPro.CogShapeModelCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogShapeModelCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogShapeModelCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogShapeModelCollection.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogShapeModelCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogShapeModelCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogShapeModelCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.IndexOf(Cognex.VisionPro.ICogShapeModel)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.Insert(Cognex.VisionPro.ICogShapeModel,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.Add(Cognex.VisionPro.ICogShapeModel)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogShapeModelCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.CogShapeModelCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogShapePolarize"><remarks><PARA>The shape polarization operator is used to determine polarity information along a shape based on image data. Polarity information indicates which side of the shape boundary is dark and which side is light.</PARA></remarks><summary>The shape polarization operator is used to determine polarity information along a shape based on image data.  Polarity information indicates which side of the shape boundary is dark and which side is light.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.#ctor(Cognex.VisionPro.CogShapePolarize)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarize.SfProbeResolution"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProbeResolution may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarize.SfProbeOffsetInPixels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ProbeOffsetInPixels may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarize.SfContrastThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ContrastThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarize.SfMaintainShapeIntegrity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MaintainShapeIntegrity may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarize.SfMinPolarityPerimeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MinPolarityPerimeter may have changed.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarize.SfCombineMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CombineMode may have changed.</summary></member><member name="P:Cognex.VisionPro.CogShapePolarize.CombineMode"><summary>Indicates the mode that the shape polarization operator will use for combining the original shape polarities with the polarities derived from the image.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not a member of the 
   <see cref="T:Cognex.VisionPro.CogShapePolarizeCombineModeConstants" /> enumeration.</para></exception><remarks><PARA>Indicates the mode that the shape polarization operator will use for combining the original shape polarities with the polarities derived from the image.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapePolarizeCombineModeConstants">IgnoreOriginal</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogShapePolarize.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapePolarize_CombineMode--><ul /></event></member><member name="P:Cognex.VisionPro.CogShapePolarize.MinPolarityPerimeter"><remarks><PARA>The minimum length a constant-polarity section of the shape must have in order to be preserved. Sections that are shorter than this length will be combined with neighboring sections and the polarity will be set based on polarity of its neighbors.</PARA><PARA>
A value of 0 will disable the combining of sections. A value greater than the longest perimeter of 
the original shape has the same effect as setting <see cref="P:Cognex.VisionPro.CogShapePolarize.MaintainShapeIntegrity" /> to true.
</PARA><NOTE>This property is in the units of the selected space of the image being used for polarization.</NOTE><DEFAULT>10.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogShapePolarize.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapePolarize_MinPolarityPerimeter--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.</para></exception><summary>The minimum length a constant-polarity section of the shape must have in order to be preserved.  Sections that are shorter than this length will be combined with neighboring sections and the polarity will be set based on polarity of its neighbors.</summary></member><member name="P:Cognex.VisionPro.CogShapePolarize.MaintainShapeIntegrity"><summary>If true then the shape will not be broken up into sections due to differing polarities along the shape's boundary.  In this case, the MinPolarityPerimeter property is ignored.  A primitive shape that is broken up into sections will become a contour.</summary><event cref="E:Cognex.VisionPro.CogShapePolarize.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapePolarize_MaintainShapeIntegrity--><ul /></event><remarks><PARA>If true then the shape will not be broken up into sections due to differing polarities along the shape's boundary. In this case, the 
	<see cref="P:Cognex.VisionPro.CogShapePolarize.MinPolarityPerimeter" /> property is ignored. A primitive shape that is broken up into sections will become a 
	<see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA><PARA>
	If this property is true, then any  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogGeneralContour" />
				--><see cref="T:Cognex.VisionPro.CogGeneralContour" /> shapes being polarized will be assigned a 
	single polarity value. That is, all the segments of the contour will have the same polarity.
	</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapePolarize.ContrastThreshold"><event cref="E:Cognex.VisionPro.CogShapePolarize.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapePolarize_ContrastThreshold--><ul /></event><summary>The minimum absolute contrast difference between a polarity sample point's probes that is required to make a polarity determination.  If the difference is less than the threshold then the polarity sample point is assigned an undefined polarity.</summary><remarks><PARA>The minimum absolute contrast difference between a polarity sample point's probes that is required to make a polarity determination. If the difference is less than the threshold then the polarity sample point is assigned an undefined polarity.</PARA><DEFAULT>20.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.</para></exception></member><member name="P:Cognex.VisionPro.CogShapePolarize.ProbeOffsetInPixels"><event cref="E:Cognex.VisionPro.CogShapePolarize.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapePolarize_ProbeOffsetInPixels--><ul /></event><summary>The probe offset specifies the distance from the shape to each of the two points where the image intensity is sampled.  This parameter is specified in image pixel units.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.</para></exception><remarks><PARA>The probe offset specifies the distance from the shape to each of the two points where the image intensity is sampled. This parameter is specified in image pixel units.</PARA><DEFAULT>3.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.CogShapePolarize.ProbeResolution"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than or equal to 0.</para></exception><event cref="E:Cognex.VisionPro.CogShapePolarize.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapePolarize_ProbeResolution--><ul /></event><remarks><PARA>The probe resolution specifies the maximum arc length,  in the units of the input image's selected space, between adjacent polarity sample points along the original shape. Some portions of the shape may be sampled more densely than the specified probe resolution.</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>The probe resolution specifies the maximum arc length, in shape selected space units, between adjacent polarity sample points along the original shape.  Some portions of the shape may be sampled more densely than the specified probe resolution.</summary></member><member name="P:Cognex.VisionPro.CogShapePolarize.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogShapePolarize.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogShapePolarize.Execute(Cognex.VisionPro.ICogImage,Cognex.VisionPro.ICogShapeModel)"><param name="inputImage"><PARA>The image to use for polarizing. <paramref name="shapeModel" />  is applied to this image, based on its
	selected space and the coordinate space tree of this image.</PARA></param><param name="shapeModel"><PARA>The shape model to polarize.</PARA></param><returns><PARA>The polarized shape model.</PARA></returns><summary>Execute will determine the polarity information along the provided shape based on data extracted from the input image. Polarity information indicates which side of the shape boundary is dark and which side is light.</summary><remarks><PARA>Determines  the polarity information along the provided shape based on data extracted from the input image. Polarity information indicates which side of the shape boundary is dark and which side is light.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
   	A NULL shape model was supplied.
   </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="inputImage" /> is NULL
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="inputImage" /> is not allocated.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>
		The selected space of 
		<paramref name="inputImage" /> is not a valid space in 
		<paramref name="inputImage" />'s coordinate space tree; 
		the selected space of <paramref name="inputImage" /> is 
		nonqualified and more than one instance of 
		the name is present in <paramref name="inputImage" />'s coordinate 
		space tree; or the selected space 
		of <paramref name="inputImage" /> is not a legal space name.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidShapeException" cgnxHRESULT="E_CogOperator_InvalidShape"><para>
		The selected space of 
		<paramref name="shapeModel" /> is not a valid space in <paramref name="inputImage" />'s 
		coordinate space tree; the selected space of <paramref name="shapeModel" /> is 
		nonqualified and more than one instance of the name is present in <paramref name="inputImage" />'s 
		coordinate space tree; or the selected space of <paramref name="shapeModel" /> is 
		not a legal space name.
	</para></exception></member><member name="E:Cognex.VisionPro.CogShapePolarize.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogStopwatch"><summary>Class which provides a means for very high accuracy timing.</summary><remarks><PARA>Interface that provides a means for very high accuracy timing.</PARA><NOTE><see cref="T:Cognex.VisionPro.CogStopwatch" /> uses the highest accuracy timer that the operating system provides. The <see cref="P:Cognex.VisionPro.CogStopwatch.ResolutionInSeconds" /> may
vary depending on the operating system.</NOTE></remarks></member><member name="M:Cognex.VisionPro.CogStopwatch.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogStopwatch.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.MicroSeconds"><summary>Cognex Internal use only</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.TicksPerSecond64"><summary>Cognex Internal use only</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.RawTicks64"><summary>Cognex Internal use only</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.Ticks"><summary>Cognex Internal use only</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.Count"><summary>Cognex Internal use only</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.ResolutionInSeconds"><remarks><PARA>Returns the 
smallest interval (in seconds) that this timer can measure.</PARA></remarks><summary>Returns the smallest quantum of time (in seconds) measurable by this object.</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.Running"><summary>Returns whether the timer is running.</summary><remarks><PARA>Returns True if the timer running.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogStopwatch.Milliseconds"><remarks><PARA>Returns this timer's elapsed time in milliseconds.</PARA><PARA>The granularity of the timer is specified by <see cref="P:Cognex.VisionPro.CogStopwatch.ResolutionInSeconds" />.</PARA></remarks><summary>Returns the elapsed time in milliseconds.</summary></member><member name="P:Cognex.VisionPro.CogStopwatch.Seconds"><summary>Returns the elapsed time in seconds.</summary><remarks><PARA>Returns this timer's elapsed time in seconds.</PARA><PARA>The granularity of the timer is specified by <see cref="P:Cognex.VisionPro.CogStopwatch.ResolutionInSeconds" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStopwatch.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogStopwatch.Start"><summary>Starts the timer running without resetting the elapsed time.</summary><remarks><PARA>Starts this timer if it was stopped. This method has no effect if the timer is already running.</PARA><PARA>The timer is not reset to zero when you call this function. To reset this timer, use the <see cref="M:Cognex.VisionPro.CogStopwatch.Reset" /> method.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogStopwatch.Stop"><remarks><PARA>Stops the timer from running without resetting the elapsed time.</PARA><PARA>To reset the timer to zero, use the <see cref="M:Cognex.VisionPro.CogStopwatch.Reset" /> method.</PARA></remarks><summary>Stops the timer from running without resetting the elapsed time.</summary></member><member name="M:Cognex.VisionPro.CogStopwatch.Reset"><summary>Resets the timer such that 0 seconds have elapsed. The running state remains unchanged.</summary><remarks><PARA>Resets the timer to zero. The <see cref="P:Cognex.VisionPro.CogStopwatch.Running">running</see> state remains unchanged.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogStringCollection"><remarks><PARA>A keyed collection of strings. You can retrieve a string from the collection by specifying its key or zero-based index position.</PARA></remarks><summary>Collection of strings.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.#ctor(Cognex.VisionPro.CogStringCollection)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.Item(System.String)"><param name="key">n/a</param><summary>Gets or sets the item with the specified index or key. In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.Item(System.Int32)"><param name="index">n/a</param><summary>Gets or sets the item with the specified index or key. In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogStringCollection.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Clear"><summary>Removes all items from this collection.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Move(System.Int32,System.Int32)"><param name="fromIndex">The index of the item to move.</param><param name="toIndex">The index to which the item will be moved.</param><summary>Moves the selected item to a new index in this collection.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.RemoveAt(System.Int32)"><param name="index">The index of the item to remove.</param><summary>Removes the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Remove(System.String)"><param name="key">The key of the item to remove.</param><summary>Removes the item with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Insert(System.String,System.Int32)"><param name="value">The item to be inserted.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Insert(System.String,System.String,System.Int32)"><param name="value">The item to be inserted.</param><param name="key">The key of the inserted item.</param><param name="index">The index at which to insert the item.</param><summary>Inserts the given item at the specified index, with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Add(System.String)"><param name="value">The item to be added.</param><summary>Adds the given item to the end of this collection.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.Add(System.String,System.String)"><param name="value">The item to be added.</param><param name="key">The key of the added item.</param><summary>Adds the given item to the end of this collection, with the specified key.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.IndexOfKey(System.String)"><param name="key">The key whose index is desired.</param><summary>Gets the index of the item with the specified key.  If the key cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.IndexOf(System.String)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.GetKey(System.Int32)"><param name="index">The index of the item whose key is desired.</param><summary>Gets the key of the item at the specified index.</summary></member><member name="M:Cognex.VisionPro.CogStringCollection.SetKey(System.Int32,System.String)"><param name="index">The index of the item whose key will be set.</param><param name="key">The key to set.</param><summary>Sets the key of the item at the specified index.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.KeyChanged"><summary>Occurs after an item's key is changed.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.KeyChanging"><summary>Occurs before an item's key is changed.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.MovedItem"><summary>Occurs after an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.MovingItem"><summary>Occurs before an item is moved to a new index.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.ReplacedItem"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.ReplacingItem"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.RemovedItem"><summary>Occurs after an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.RemovingItem"><summary>Occurs before an item is removed from this collection.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.InsertedItem"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.InsertingItem"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.Cleared"><summary>Occurs after this collection is cleared.</summary></member><member name="E:Cognex.VisionPro.CogStringCollection.Clearing"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DComposed"><summary>A CogTransform2DComposed is a transform object that can compose transforms of different types. The composed transform maps points through all its contained transformations (from 'Right' to 'Left'), and thus acts as their composition.</summary><remarks><PARA>
A 2D transform object that can 
<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="composed_transformation">compose transforms</see> of different types. The composed transform maps points through all its contained transformations (from 'Right' to 'Left'), acting as their composition even if 
the individual transformations are not mathematically composable.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.#ctor(Cognex.VisionPro.CogTransform2DComposed)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DComposed.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DComposed.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DComposed.Count"><remarks><PARA>Returns the number of transforms contained in this composed transform's sequence. 
		This is the number of transforms that can be retrieved by the
		<see cref="M:Cognex.VisionPro.CogTransform2DComposed.GetTransform(System.Int32)" /> method.</PARA></remarks><summary>Returns the number of transforms contained in this composed transform's sequence.  This is the number of transforms that can be retrieved by the indexed Transform property.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DComposed.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DComposed.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DComposed.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception><exception cref="T:System.ArgumentException">If coordinatesXY is not an array of doubles.</exception><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><summary>Map the supplied points through this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformTooFewPointsLinFitException" cgnxHRESULT="E_CogTransform_TooFewPointsLinFit"><para>Too few points were provided to compute a best fit linear transform.</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.CopyBase"><returns><PARA>The cloned transformation object.</PARA></returns><summary>Returns a new copy of this transform.</summary><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.InvertBase"><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><summary>Returns a new transform which is the inverse of this one.</summary><returns><PARA>The inverted transform.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Copy"><returns><PARA>The returned transformation.</PARA></returns><summary>Returns a new copy of this composed transform.</summary><remarks><PARA>Returns a new copy of this composed transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Compose(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transformation to compose with this one.</PARA></param><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><returns><PARA>The returned composed transformation.</PARA></returns><remarks><PARA>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Invert"><remarks><PARA>Returns a new transform that is the inverse of this one.</PARA></remarks><summary>Returns a new transform that is the inverse of this one.</summary><returns><PARA>The returned transformation.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.GetTransform(System.Int32)"><param name="index"><PARA>The zero-based index of the transformation to return.</PARA></param><summary>Returns a reference to the transform at the specified index in the contained sequence.</summary><remarks><PARA>Returns the transform at the specified index in the sequence of 
	transformations contained in this composed transformation.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or &gt; <see cref="P:Cognex.VisionPro.CogTransform2DComposed.Count" />−1</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.PopFromLeft"><summary>Removes and returns the left-most transform from the contained sequence.  Note that this will decrease the index of all remaining transforms in the contained sequence by one.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformCantPopEmptyComposedException" cgnxHRESULT="E_CogTransform_CantPopEmptyComposed"><para><see cref="P:Cognex.VisionPro.CogTransform2DComposed.Count" /> is 0.</para></exception><returns><PARA>The returned transformation.</PARA></returns><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when a transformation is popped. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>
	Removes and returns the left-most transformation from the list of transformations in 
	this object.  Note that this will decrease the index of all remaining transforms in the contained sequence by one.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.PopFromRight"><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when a transformation is popped. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><returns><PARA>The returned transformation.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformCantPopEmptyComposedException" cgnxHRESULT="E_CogTransform_CantPopEmptyComposed"><para><see cref="P:Cognex.VisionPro.CogTransform2DComposed.Count" /> is 0.</para></exception><summary>Removes and returns the right-most transform from the contained sequence.</summary><remarks><PARA>
	Removes and returns the right-most transformation from the list of transformations in 
	this object.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.PushOntoLeft(Cognex.VisionPro.ICogTransform2D,System.Boolean)"><param name="leftSide"><PARA>The transformation to push onto this one.</PARA></param><param name="copy"><PARA>If true, <paramref name="leftSide" /> is copied into 
	this object. Otherwise, it is added by reference.</PARA></param><remarks><PARA>
	Composes the <paramref name="leftSide" /> 
	transform into this composed transform on the left side of this transformation. 
		If <paramref name="copy" /> is true, 
	the <paramref name="leftSide" /> transformation is added by value (copied). If 
	<paramref name="copy" /> is false, then it is added by reference.
	Note that this will increase the index of all contained transforms by one.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="leftSide" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when a transformation is pushed. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Composes the LeftSide transform into this composed transform on the left. If Copy is True, the transform is added to the sequence by value, otherwise it's added by reference. Note that this will increase the index of all contained transforms by one.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.PushOntoRight(Cognex.VisionPro.ICogTransform2D,System.Boolean)"><param name="rightSide"><PARA>The transformation to push onto this one.</PARA></param><param name="copy"><PARA>If true, <paramref name="rightSide" /> is copied into 
	this object. Otherwise, it is added by reference.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when a transformation is pushed. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Composes the RightSide transform into this composed transform on the right. If Copy is True, the transform is added to the sequence by value, otherwise it's added by reference.</summary><remarks><PARA>
	Composes the <paramref name="rightSide" /> 
	transform into this composed transform on the right side of this transformation. 
		If <paramref name="copy" /> is true, 
	the <paramref name="rightSide" /> transformation is added by value (copied). If 
	<paramref name="copy" /> is false, then it is added by reference.
	Note that this will increase the index of all contained transforms by one.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Split(System.Int32)"><param name="index"><PARA>The zero-based index at which to split this transformation. Transforms with indices up to but 
	not including <paramref name="index" /> are retained in this object; the remaining transformations 
	become the returned object.</PARA></param><remarks><PARA>
		Splits this composed transformation into two composed transformations at the specified point. 
	The transformations starting at the specified <paramref name="index" /> are removed from this object and 
	returned as a new composed transformation. 
</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when the transformation is split. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><returns><PARA>The returned transformation, which contains all transforms from this object with indices 
	greater than or equal to <paramref name="index" />.
	</PARA></returns><summary>Splits this composed transform into two composed transforms just before Index. This object becomes the left part and the right part is returned.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or &gt; <see cref="P:Cognex.VisionPro.CogTransform2DComposed.Count" />−1</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Merge(Cognex.VisionPro.CogTransform2DComposed,System.Boolean)"><param name="rightSide"><PARA>The transformation to merge with this one.</PARA></param><param name="copy"><PARA>If true, the transformations within <paramref name="rightSide" /> are copied into 
	this object. Otherwise, they are added by reference.</PARA></param><remarks><PARA>
	Merges the supplied
	composed transformation with this one. The supplied transform is composed on the right side of 
	this transformation. This function is the opposite of <see cref="M:Cognex.VisionPro.CogTransform2DComposed.Split(System.Int32)" />.
	If <paramref name="copy" /> is true, 
	the transformations contained within <paramref name="rightSide" /> are added by value (copied). If 
	<paramref name="copy" /> is false, then they are added by reference.
</PARA><PARA>
Unlike <see cref="M:Cognex.VisionPro.CogTransform2DComposed.Compose(Cognex.VisionPro.ICogTransform2D)" />, this function modifies the state of this object; it does not return a 
new transformation.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><summary>Merges the RightSide composed transform into this composed transform, on right. This is the opposite of Split. If Copy is true, RightSide's contained transforms are added to the sequence by value, otherwise they are added by reference.</summary><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when the transformations are merged. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Replace(System.Int32,Cognex.VisionPro.ICogTransform2D,System.Boolean)"><param name="index"><PARA>The zero-based index of the transformation to replace.</PARA></param><param name="replacement"><PARA>The new transformation.</PARA></param><param name="copy"><PARA>If true, <paramref name="replacement" /> is copied into 
	this object. Otherwise, it is added by reference.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or &gt; <see cref="P:Cognex.VisionPro.CogTransform2DComposed.Count" />−1</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="replacement" /> is NULL.</para></exception><remarks><PARA>
	Replaces the specified transformation in this composed transformation's list 
	of transformations with the supplied transformation. 
	If <paramref name="copy" /> is true, 
	the <paramref name="replacement" /> transformation is added by value (copied). If 
	<paramref name="copy" /> is false, then it is added by reference.
	</PARA><PARA>
	This function returns the transformation being replaced.
	</PARA></remarks><summary>Replaces the transform at the given index with the passed Replacement transform. If Copy is True, the Replacement transform is added by value, otherwise, it is added by reference.</summary><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when the transformation is replaced. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><returns><PARA>The transformation that was replaced.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DComposed.Canonize(System.Boolean)"><param name="typeSimplify"><PARA>Specify False to force this function to return a transformation of type 
	<see cref="T:Cognex.VisionPro.CogTransform2DComposed" />. If you specify True, then the returned transformation may be of a 
	simpler type.</PARA></param><returns><PARA>The returned canonical transformation.</PARA></returns><event cref="E:Cognex.VisionPro.CogTransform2DComposed.Changed" cgnxEvent="multiState"><para>
		
Fires when the transformation is canonized. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>
	Returns the canonical form of this composed transform. This is the mathematically equivalent form that has the fewest number of transforms. 
</PARA><PARA>
Canonization may include each of the following operations:
</PARA><LIST><ITEM>
If this
	<see cref="T:Cognex.VisionPro.CogTransform2DComposed" />
contains other 
	<see cref="T:Cognex.VisionPro.CogTransform2DComposed" />
transformations (effectively a tree of transformations where the non-leaf nodes are composed transformations), 
the Canonical form will flatten this tree by arranging all the leaf nodes linearly within the canonical form of 
the composed transformation.
</ITEM><ITEM>
Any adjacent transformations that are mathematically composable (such as <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> 
objects) are composed.
</ITEM><ITEM>
If the effect of applying the preceding two operations is to produce a composed transformation that contains a 
single transformation, the Canonical form will be of that type (typically 
	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />). 
You can prevent this conversion by specifying False for the <paramref name="typeSimplify" /> argument. 
</ITEM></LIST><NOTE>
This function returns a new transformation which is the canonical form of this object. It does <ITALIC>not</ITALIC> 
change the current object in any way.
</NOTE></remarks><summary>Returns the canonical form of this composed transform. This is the mathematically equivalent form that has the fewest number of transforms. If TypeSimplify is True, the returned type may be reduced to a type simpler than this.</summary></member><member name="E:Cognex.VisionPro.CogTransform2DComposed.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DLinear"><remarks><PARA><see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> represents a two-dimensional linear transformation between two coordinate spaces. It enables you to map points from the <ITALIC>from</ITALIC> coordinate space to the <ITALIC>to</ITALIC> coordinate space. It defaults to the identity transform.</PARA><PARA><see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> represents a linear <see cref="u:Framework.Coordinates.Theory.Transformations">transformation</see> as a (2x2) matrix and a translation vector. There are three different <see cref="u:Framework.Coordinates.Theory.Transformations">parameterization methods</see> for the matrix, each based on the following general 2-d linear transformation:
	</PARA><PICTURE apiSRC="CogTransform2DLinear_equation.gif" /><PARA>Where (x<SUB>A</SUB>, y<SUB>A</SUB>) is the input point, (T<SUB>x</SUB>, T<SUB>y</SUB>) is the translation vector, and the rest is the (2x2) matrix that represents the scaling and rotation.</PARA></remarks><summary>Linear 2D coordinate transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.#ctor(Cognex.VisionPro.CogTransform2DLinear)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfSkew"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Skew may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfScaling"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Scaling may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfAspect"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Aspect may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfGetMatrixElement"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetMatrixElement may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfMatrixDeterminant"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MatrixDeterminant may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfRotationX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RotationX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfRotationY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RotationY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfScalingX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfScalingY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScalingY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfTranslationX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TranslationX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfTranslationY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TranslationY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinear.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY"><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when the y-axis translation changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Returns/sets the y component of the translation vector.</summary><remarks><PARA>Sets or gets the y-component of the translation vector. In the standard transformation matrix, the y-component of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="translation">translation vector</see> is represented by the symbol T<SUB>y</SUB>.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX"><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when the x-axis translation changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Sets or gets the x-component of the translation vector. In the standard transformation matrix, the x-component of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="translation">translation vector</see> is represented by the symbol T<SUB>x</SUB>.</PARA></remarks><summary>Returns/sets the x component of the translation vector.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY"><remarks><PARA>Returns the y-axis <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scaling">scaling</see> of this transformation object.</PARA><PARA>In the standard transformation matrix, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY" /> is represented by the symbol S<SUB>Y</SUB>.</PARA></remarks><summary>Returns the y-axis scaling of this transform.  When set, RotationX, RotationY, and ScalingX remain unchanged.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX"><remarks><PARA>Returns the x-axis <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scaling">scaling</see> of this transformation object.</PARA><PARA>In the standard transformation matrix, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX" /> is represented by the symbol S<SUB>x</SUB>.</PARA></remarks><summary>Returns the x-axis scaling of this transform.  When set, RotationX, RotationY, and ScalingY remain unchanged.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.RotationY"><summary>Returns the y-axis rotation of this transform (in radians).  When set, RotationX, ScalingX, and ScalingY remain unchanged.</summary><remarks><PARA>Returns the y-axis <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="skew_rotation">rotation</see> of this transformation object in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>. <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" /> represents the angle measured from the y-axis of the <ITALIC>to</ITALIC> space to the y-axis of the <ITALIC>from</ITALIC> space. In the standard transformation matrix, the symbol θ<SUB>y</SUB> stands for <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" />.</PARA><PARA>Notice that <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" /> has the same value as <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" /> if and only if the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" /> equals zero. If <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" /> has a non-zero value, then <CONSOLE><see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" /> = <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" /> + <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" />.</CONSOLE></PARA></remarks></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.RotationX"><remarks><PARA>Returns the x-axis <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="skew_rotation">rotation</see> of this transformation object in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>. <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" /> represents the angle measured from the x-axis of the <ITALIC>to</ITALIC> space to the x-axis of the <ITALIC>from</ITALIC> space. In the standard transformation matrix, the symbol θ<SUB>x</SUB> stands for <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" />.</PARA><PARA>Notice that <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" /> has the same value as <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" /> if and only if <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" /> equals zero. <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" /> always has the same value as <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" />.</PARA></remarks><summary>Returns the x-axis rotation of this transform (in radians).  When set, RotationY, ScalingX, and ScalingY remain unchanged.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.MatrixDeterminant"><summary>Returns the determinant of the 2-by-2 matrix in this transformation.</summary><remarks><PARA>Returns the determinant of this transformation object's 2x2 matrix. The determinant of a 2x2 matrix is computed as follows:</PARA><PICTURE SRC="none" apiSRC="MatrixDeterminant_determinant.gif" /><PARA>In VisionPro, you might use the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.MatrixDeterminant" /> to test for a degenerate transform: for example, the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Singular(System.Double)" /> method is based on the determinant. You might also use the determinant to ascertain how a transform changes the handedness of the x- and y-axes: if the matrix determinant is negative, the transform swaps the handedness of the x- and y-axes. In other words, if the determinant is negative, the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew">skew</see> is greater than +90 or less than -90 degrees; if the determinant is positive, the skew is between +90 and -90 degrees.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.Aspect"><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when the aspect changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new aspect value is zero.</para></exception><remarks><PARA>Sets or gets the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="aspect">aspect</see> of this transformation object. Aspect is the ratio of scaling along the y-axis over scaling along the x-axis. It is represented by the symbol A in the standard transformation matrix.</PARA><PARA>When <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect" /> is set, the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew">skew</see>, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" /> remain unchanged.</PARA><PARA>Notice that if the aspect equals one, then <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX" />, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY" /> are equal.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Returns/sets the aspect of this transform.  Aspect is the ratio of scaling along the y axis over scaling along the x axis.  When aspect is set the rotation, skew, and scaling remain unchanged.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.Scaling"><summary>Returns/sets the scaling of this transform.  When scaling is set the rotation, skew, and aspect remain unchanged.</summary><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when the scaling changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Sets or gets the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scaling">uniform scaling</see> of this transformation object. When you set the scaling, the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" />,  and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect" /> values remain unchanged. If <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect" /> equals one, then <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX" />, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY" /> are equal. Otherwise, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" /> is equal to <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX" />, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect" /> is equal to <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY" /> divided by <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX" />. Notice that changes to this property affect both <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX" /> and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY" />.
</PARA><PARA>In the standard transformation matrix, scaling is represented by the symbol S.</PARA><DEFAULT>1</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new scaling value is zero.</para></exception></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.Skew"><summary>Returns/sets the skew of this transform (in radians).  When skew is set the rotation, scaling, and aspect remain unchanged.</summary><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when the skew changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Sets or gets the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="skew_rotation">skew</see> of this transformation object in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>. When you set the skew, the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" />, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect" /> values remain unchanged.</PARA><PARA>In the standard transformation matrix, <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="skew_rotation">skew</see> is represented by the symbol Q, and is equal to <CONSOLE><see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" /> - <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" /></CONSOLE>.</PARA><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is π/2 or −π/2 (when normalized to the range between π and −π).</para></exception></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.Rotation"><remarks><PARA>Sets or gets the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="rotation">uniform rotation</see> of this transformation object in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>. When you set the rotation, the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" />, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect" /> values remain unchanged. If <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew" /> equals zero, then <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" />, <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX" />, and <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY" /> are equal. Otherwise, Rotation is equal to RotationX and Skew is equal to RotationY minus RotationX. Notice that changes to this property affect both RotationX and RotationY.</PARA><PARA>In the standard transformation matrix, the symbol for <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" /> is θ.</PARA></remarks><summary>Returns/sets the rotation of this transform (in radians).  When rotation is set the skew, scaling, and aspect remain unchanged.</summary><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when the rotation changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinear.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><exception cref="T:System.ArgumentException">If coordinatesXY is not an array of doubles.</exception><summary>Map the supplied points through this transform.</summary><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.CopyBase"><returns><PARA>The cloned transformation object.</PARA></returns><summary>Returns a new copy of this transform.</summary><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.InvertBase"><summary>Returns a new transform which is the inverse of this one.</summary><returns><PARA>The inverted transform.</PARA></returns><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.GetMatrixElement(System.Int32,System.Int32)"><param name="row"><PARA>The row index of the element to set or get. Row numbering starts at zero.</PARA></param><param name="column"><PARA>The column index of the element to set or get. Column numbering starts at zero.</PARA></param><remarks><PARA>Sets or gets the selected element from this transformation object's <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_element">(2x2) matrix</see>.</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when a matrix element changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> or <paramref name="column" /> is less than zero or greater than one.</para></exception><summary>Access the selected element of the 2-by-2 matrix in this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.SetMatrixElement(System.Int32,System.Int32,System.Double)"><param name="row"><PARA>The row index of the element to set or get. Row numbering starts at zero.</PARA></param><param name="column"><PARA>The column index of the element to set or get. Column numbering starts at zero.</PARA></param><param name="value"></param><summary>Access the selected element of the 2-by-2 matrix in this transform.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="row" /> or <paramref name="column" /> is less than zero or greater than one.</para></exception><remarks><PARA>Sets or gets the selected element from this transformation object's <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_element">(2x2) matrix</see>.</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when a matrix element changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.MatrixIdentity(System.Double)"><param name="tolerance"><PARA>The tolerance to use against each matrix element.</PARA></param><remarks><PARA>Returns true if:</PARA><LIST><ITEM>MatrixElement(0, 0) = 1 +/- tolerance</ITEM><ITEM>MatrixElement(0, 1) = 0 +/- tolerance</ITEM><ITEM>MatrixElement(1, 0) = 0 +/- tolerance</ITEM><ITEM>MatrixElement(1, 1) = 1 +/- tolerance</ITEM></LIST></remarks><returns><PARA>True if the matrix is an identity matrix within the specified tolerance; False if it is not.</PARA></returns><summary>Returns true if the 2-by-2 matrix in this transform is an identity mapping within the given tolerance.  The tolerance is applied to each matrix element.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.Singular(System.Double)"><param name="tolerance"><PARA>The tolerance against which to test the determinant of the transformation object's matrix.</PARA></param><returns><PARA>True if the transformation object is singular within the specified tolerance; False if it is not.</PARA></returns><remarks><PARA>Returns True if this transformation is singular within the given tolerance. A transformation is singular if the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.MatrixDeterminant">matrix determinant</see> is zero within the given tolerance. A singular transformation cannot be inverted.</PARA></remarks><summary>Returns true if this transform is singular.  A transform is singular if the matrix determinant equals zero within the given tolerance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.Copy"><returns><PARA>The cloned transformation object.</PARA></returns><summary>Returns a new copy of this transform.</summary><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA><see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> performs the same operation as the <see cref="M:Cognex.VisionPro.ICogTransform2D.CopyBase" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />.
		The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method returns a linear transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)"><param name="rightSide"><PARA>The transformation to compose with this one.</PARA></param><returns><PARA>The result of the composition.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><summary>Returns a new linear transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><remarks><PARA>Returns a new linear transformation object that is the composition of a given transformation object and this one. </PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.Compose(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.Compose(AFromB).</CONSOLE></PARA><PARA><see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> performs the same operation as the
		<see cref="M:Cognex.VisionPro.ICogTransform2D.ComposeBase(Cognex.VisionPro.ICogTransform2D)" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2D" />. The only difference is the type of the returned object:
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method returns a linear transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.Invert"><remarks><PARA>Returns a new linear transformation object that is the inverse of this one. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
			performs the same operation as the
		<see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" /> method of
		<see cref="T:Cognex.VisionPro.ICogTransform2D" />.
	
	The only difference is the type of the returned transform:
		<see cref="T:Cognex.VisionPro.ICogTransform2D" />'s
	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
	method returns a linear transform.</PARA></remarks><summary>Returns a new linear transform which is the inverse of this one.</summary><returns><PARA>The inverse of this transformation object.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.MapVector(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-component of the vector to map.</PARA></param><param name="y"><PARA>The y-component of the vector to map.</PARA></param><param name="mappedX"><PARA>The x-component of the mapped vector.</PARA></param><param name="mappedY"><PARA>The y-component of the mapped vector</PARA></param><summary>Maps the given x,y vector through this transform, filling in the mapped x,y vector components.</summary><remarks><PARA>Maps the given (x, y) vector through this transformation, returning the mapped (x,y) vector components as given by:</PARA><PICTURE apiSRC="Vector_component.gif" /><PARA>Points and vectors are treated differently when transformed between coordinate spaces. A point represents a specific position in a coordinate space. A vector represents a length and direction in the same space but has no fixed location. The following figure shows the coordinates of P and the components of the vector v in two different coordinate spaces.</PARA><PICTURE apiSRC="MappointVsMapvector.gif" /><PARA>In Space 1, the components of the vector and the coordinates of the point are the same: the vector's tail is at the origin and the tip is at point P. In Space 2, the vector components and the point coordinates are different. The point P has a fixed position in space, and the vector has a fixed length and direction.</PARA><PARA>You use <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> and <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapVector(System.Double,System.Double,System.Double@,System.Double@)" /> to map point coordinates and vector components from one coordinate space to another. In the preceding figure, you would use <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> to map (x<SUB>P1</SUB>, y<SUB>P1</SUB>) to (x<SUB>P2</SUB>, y<SUB>P2</SUB>). <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapVector(System.Double,System.Double,System.Double@,System.Double@)" /> would map (x<SUB>v1</SUB>, y<SUB>v1</SUB>) to (x<SUB>v2</SUB>, y<SUB>v2</SUB>).</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.MapAngle(System.Double)"><param name="angle"><PARA>The angle to map.</PARA></param><summary>Maps the given angle (in radians) through this transform and returns the result (in radians).</summary><remarks><PARA>Maps the given angle in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see> through this transformation.</PARA><PARA>The operation of <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapAngle(System.Double)" /> is equivalent to creating a unit vector at the given angle, mapping the vector, and then computing the rotation angle of the mapped vector. The following code uses other VisionPro methods to illustrate what <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapAngle(System.Double)" /> does. This example does not represent actual code you need to enter.</PARA><CODE LANGUAGE="VB">
Dim angle as Double
angle = ICogMisc.DegToRad(45)

Dim MappedX as Double
Dim MappedY as Double
objCogTransform2DLinear.MapVector(Cos(angle), Sin(angle), MappedX, MappedY)

Dim MappedAngle as Double
MappedAngle = ARCTAN(MappedY, MappedX)
</CODE></remarks><returns><PARA>The mapped angle.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.MapArea(System.Double)"><param name="area"><PARA>The area to map.</PARA></param><remarks><PARA>Maps the given area through this transformation. <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapArea(System.Double)" /> computes the mapped area by first calculating the area of a unit square and then multiplying the given area by the result.</PARA><PARA>The area formed by two vectors is the cross product of the vectors. <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapArea(System.Double)" /> takes the vectors (1, 0) and (0, 1), maps these to the new coordinates, and then calculates the cross product. Given the following 2x2 matrix</PARA><PICTURE apiSRC="Matrix_abcd" /><PARA>vector (1, 0) maps to (a, c) and vector (0,1) maps to (b, d). You calculate the cross product as:</PARA><PICTURE apiSRC="Crossproduct_abcd.gif" /><PARA>The cross product is also equivalent to the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.MatrixDeterminant">determinant</see>.</PARA><PARA>You may want to call <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapArea(System.Double)" /> with an area of 1.0 to get a conversion constant, and then use this constant in calculations. This saves the overhead of invoking <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapArea(System.Double)" /> multiple times.</PARA></remarks><returns><PARA>The mapped area.</PARA></returns><summary>Maps the given area through this transform and returns the result.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.SetScalingAspectRotationSkewTranslation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="scaling"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" /> factor.</PARA></param><param name="aspect"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect">aspect</see> ratio.</PARA></param><param name="rotation"><PARA>The angle of <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" /> in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="skew"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew">skew</see> angle in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="translationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX">translation</see> along the x-axis.</PARA></param><param name="translationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY">translation</see> along the y-axis.</PARA></param><remarks><PARA>Sets the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scalingaspectrotationskew_method">scaling, aspect, rotation, skew, and/or translation</see> of this transformation object.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scaling" /> is zero.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="aspect" /> is zero.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="skew" /> is π/2 or −π/2 (when normalized to the range between π and −π).</para></exception><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when you use this property to set the scaling, aspect, rotation, skew, or translation. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Set this transform from the given parameters.  Rotation and Skew are in radians.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.GetScalingAspectRotationSkewTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="scaling"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Scaling" /> factor.</PARA></param><param name="aspect"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Aspect">aspect</see> ratio.</PARA></param><param name="rotation"><PARA>The angle of <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" /> in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="skew"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Skew">skew</see> angle in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="translationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX">translation</see> along the x-axis.</PARA></param><param name="translationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY">translation</see> along the y-axis.</PARA></param><summary>Extract the named parameters from this transform.  Rotation and Skew are in radians.</summary><remarks><PARA>Returns the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scalingaspectrotationskew_method">scaling, aspect, rotation, skew, and/or translation</see> of this transformation. Note that each <see cref="M:Cognex.VisionPro.CogTransform2DLinear.GetScalingAspectRotationSkewTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" /> parameter is optional.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.SetMatrixElementsTranslation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="elem00"><PARA>Element (0,0) of the matrix component of the transformation object.</PARA></param><param name="elem01"><PARA>Element (0,1) of the matrix component of the transformation object.</PARA></param><param name="elem10"><PARA>Element (1,0) of the matrix component of the transformation object.</PARA></param><param name="elem11"><PARA>Element (1,1) of the matrix component of the transformation object.</PARA></param><param name="translationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX">translation</see> along the x-axis.</PARA></param><param name="translationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY">translation</see> along the y-axis.</PARA></param><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when you use this property to set a matrix or translation element. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Sets the specified <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> and translation elements of this transformation object.</PARA></remarks><summary>Set this transform from the given parameters.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.GetMatrixElementsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="elem00"><PARA>Element (0,0) of the matrix component of the transformation object.</PARA></param><param name="elem01"><PARA>Element (0,1) of the matrix component of the transformation object.</PARA></param><param name="elem10"><PARA>Element (1,0) of the matrix component of the transformation object.</PARA></param><param name="elem11"><PARA>Element (1,1) of the matrix component of the transformation object.</PARA></param><param name="translationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX">translation</see> along the x-axis.</PARA></param><param name="translationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY">translation</see> along the y-axis.</PARA></param><remarks><PARA>Returns the requested 
		<see cref="M:Cognex.VisionPro.CogTransform2DLinear.GetMatrixElement(System.Int32,System.Int32)">matrix elements</see>
		 and translation of this transformation. Note that each
		 <see cref="M:Cognex.VisionPro.CogTransform2DLinear.GetMatrixElementsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" /> 
		 parameter is optional.
	</PARA></remarks><summary>Extract the named parameters from this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.SetScalingsRotationsTranslation(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="scalingX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX">scaling</see> factor of the x-axis.</PARA></param><param name="scalingY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY">scaling</see> factor of the y-axis.</PARA></param><param name="rotationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX">rotation</see> of the x-axis in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="rotationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY">rotation</see> of the y-axis in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="translationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX">translation</see> along the x-axis.</PARA></param><param name="translationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY">translation</see> along the y-axis.</PARA></param><remarks><PARA>Sets the x- and y-axis <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scalingxyrotationxy_method">scaling, rotation, and/or translation</see> of this transformation object.</PARA></remarks><summary>Set this transform from the given parameters.  RotationX and RotationY are in radians.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scalingX" /> is zero.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scalingY" /> is zero.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rotationY" /> is (<paramref name="rotationX" /> ± π/2) when normalized to the range between π and −π.</para></exception><event cref="E:Cognex.VisionPro.CogTransform2DLinear.Changed" cgnxEvent="multiState"><para>
		
		Fires when you use this property to set the x- and y-axis scaling, rotation, or translation. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="M:Cognex.VisionPro.CogTransform2DLinear.GetScalingsRotationsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="scalingX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingX">scaling</see> factor of the x-axis.</PARA></param><param name="scalingY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.ScalingY">scaling</see> factor of the y-axis.</PARA></param><param name="rotationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationX">rotation</see> of the x-axis in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="rotationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.RotationY">rotation</see> of the y-axis in <see cref="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)">radians</see>.</PARA></param><param name="translationX"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationX">translation</see> along the x-axis.</PARA></param><param name="translationY"><PARA>The <see cref="P:Cognex.VisionPro.CogTransform2DLinear.TranslationY">translation</see> along the y-axis.</PARA></param><remarks><PARA>Returns the x- and y-axis <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="scalingxyrotationxy_method">scaling, rotation, and/or translation</see> of this transformation. Note that each <see cref="M:Cognex.VisionPro.CogTransform2DLinear.GetScalingsRotationsTranslation(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" /> parameter is optional.</PARA></remarks><summary>Extract the named parameters from this transform.  RotationX and RotationY are in radians.</summary></member><member name="E:Cognex.VisionPro.CogTransform2DLinear.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial"><remarks><PARA>
	A
		<see cref="U:CogTransform2DPerspectiveAndRadial" />
		comprises a 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_distortion">planar perspective</see> transform, followed by a
	 <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="radial_distortion">radial</see> 
	 transform, followed by a linear transform (without rotation). 
	 It can be used to correct for common nonlinear effects in a camera setup.
</PARA></remarks><summary>A CogTransform2DPerspectiveAndRadial transform is a planar perspective transform, followed by a radial transform, followed by a linear transform without rotation. This can be used to correct for common non-linear effects in a camera setup.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.#ctor(Cognex.VisionPro.CogTransform2DPerspectiveAndRadial)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfInverted"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Inverted may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveXX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveXX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveXY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveXY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveXC"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveXC may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveDX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveDX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveYX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveYX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveYY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveYY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveYC"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveYC may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfPerspectiveDY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PerspectiveDY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfRadialK"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RadialK may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfLinearSkew"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinearSkew may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfLinearScaling"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinearScaling may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfLinearAspect"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinearAspect may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfLinearTranslationX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinearTranslationX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfLinearTranslationY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LinearTranslationY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.LinearTranslationY"><summary>Returns/sets the y component of the translation vector.</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>The Y-component of the linear translation vector.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.LinearTranslationX"><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Returns/sets the x component of the translation vector.</summary><remarks><PARA>The X-component of the linear translation vector.</PARA></remarks></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.LinearAspect"><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Returns/sets the aspect of this transform.  Aspect is Y-axis scale divided by X-axis scale.</PARA></remarks><summary>Returns/sets the aspect of this transform.  Aspect is the ratio of scaling along the y axis over scaling along the x axis.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is 0.</para></exception></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.LinearScaling"><remarks><PARA>The linear scale of this transform.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is 0.</para></exception><summary>Returns/sets the scaling of this transform.</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.LinearSkew"><remarks><PARA>The linear skew of this transform (in radians).</PARA></remarks><summary>Returns/sets the skew of this transform (in radians).</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is π/2  or −π/2 when normalized to the range π to −π.</para></exception></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.RadialK"><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Returns/sets the 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="radial_transformation">coefficient of radial distortion</see>. Zero indicates no radial distortion, positive value causes a scale and pin cushion effect on a grid, negative value causes a negative scale and barrel effect.</PARA></remarks><summary>Returns/sets the radial coefficient of distortion. Zero indicates no radial distortion, positive value causes a scale and pin cushion effect on a grid, negative value causes a negative scale and barrel effect.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveDY"><remarks><PARA>Returns/sets the planar perspective coefficient
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="pdx_and_pdy">PDY</see>. This controls perspective in the unmapped Y direction. Zero means no Y perspective, positive value tilts plane away with increasing unmapped Y, negative tilts plane away with decreasing unmapped Y.</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Returns/sets the planar perspective coefficient PDY. This controls perspective in the unmapped Y direction. Zero means no Y perspective, positive value tilts plane away with increasing unmapped Y, negative tilts plane away with decreasing unmapped Y.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveYC"><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Returns/sets the planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYC</see>, as applied in: Yp = (PYX*X + PYY*Y + PYC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.   Defines the Y coordinate for the center of radial distortion needed in the subsequent step.</PARA></remarks><summary>Returns/sets the planar perspective coefficient PYC, as applied in: Yp = (PYX*X + PYY*Y + PYC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.   Defines the Y coordinate for the center of radial distortion needed in the subsequent step.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveYY"><summary>Returns/sets the planar perspective coefficient PYY, as applied in: Yp = (PYX*X + PYY*Y + PYC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>Returns/sets the planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYY</see>, as applied in: Yp = (PYX*X + PYY*Y + PYC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.
 This corresponds to 
element (1,1) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> used to denote a 2D linear transformation.
</PARA></remarks></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveYX"><remarks><PARA>Returns/sets the planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYX</see>, as applied in: Yp = (PYX*X + PYY*Y + PYC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.
 This corresponds to 
element (1,0) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> used to denote a 2D linear transformation.
</PARA></remarks><summary>Returns/sets the planar perspective coefficient PYX, as applied in: Yp = (PYX*X + PYY*Y + PYC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveDX"><remarks><PARA>The planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="pdx_and_pdy">PDX</see>. This controls perspective in the unmapped X direction. Zero means no X perspective, positive value tilts plane away with increasing unmapped X, negative tilts plane away with decreasing unmapped X.</PARA></remarks><summary>Returns/sets the planar perspective coefficient PDX. This controls perspective in the unmapped X direction. Zero means no X perspective, positive value tilts plane away with increasing unmapped X, negative tilts plane away with decreasing unmapped X.</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveXC"><summary>Returns/sets the planar perspective coefficient PXC, as applied in: Xp = (PXX*X + PXY*Y + PXC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates. Defines the X coordinate for the center of radial distortion needed in the subsequent step.</summary><remarks><PARA>Returns/sets the planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXC</see>, as applied in: Xp = (PXX*X + PXY*Y + PXC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates. Defines the X coordinate for the center of radial distortion needed in the subsequent step.</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveXY"><summary>Returns/sets the planar perspective coefficient PXY, as applied in: Xp = (PXX*X + PXY*Y + PXC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.</summary><remarks><PARA>Returns/sets the planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXY</see>, as applied in: Xp = (PXX*X + PXY*Y + PXC)/(PDX*X + PDY*Y +1) where X and Y are unmapped coordinates.
 This corresponds to 
element (0,1) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> used to denote a 2D linear transformation.
</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveXX"><remarks><PARA>
	Returns/sets the planar perspective coefficient 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXX</see>, as applied in: Xp = (PXX*X + PXY*Y + PXC)/(PDX*X + PDY*Y +1), where X and Y are unmapped coordinates. This corresponds to 
element (0,0) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> used to denote a 2D linear transformation.
</PARA></remarks><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><summary>Returns/sets the planar perspective coefficient PXX, as applied in: Xp = (PXX*X + PXY*Y + PXC)/(PDX*X + PDY*Y +1), where X and Y are unmapped coordinates.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Inverted"><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>False if this transform represents the forward perspective and radial transform specified by its properties; 
	true if this transform represents the inverse of the forward transform specified by the properties.</PARA><NOTE>
The various transformation parameter properties (such as <see cref="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveDX" />) always 
represent the transformation in the forward direction. Even when a transformation 
is inverted, you still specify the parameters as if it were uninverted. The <see cref="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Inverted" /> 
property determines which direction the transformation operates in, not how it is parameterized.
</NOTE></remarks><summary>Returns false if this transform represents the forward perspective and radial transform specified by its properties.  Returns true if this transform represents the inverse of the forward transform specified by the properties.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><exception cref="T:System.ArgumentException">If coordinatesXY is not a two dimensional array with two columns.</exception><summary>Map the supplied points through this transform.</summary><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformTooFewPointsLinFitException" cgnxHRESULT="E_CogTransform_TooFewPointsLinFit"><para>Too few points were provided to compute a best fit linear transform.</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.CopyBase"><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><returns><PARA>The cloned transformation object.</PARA></returns><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.InvertBase"><summary>Returns a new transform which is the inverse of this one.</summary><returns><PARA>The inverted transform.</PARA></returns><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Copy"><returns><PARA>The new transformation.</PARA></returns><remarks><PARA>Returns a new copy of this transformation.</PARA></remarks><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Compose(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transformation to compose with this one.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><remarks><PARA>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</PARA></remarks><returns><PARA>The composed transformation.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Invert"><summary>Returns a new transform which is the inverse of this one.</summary><remarks><PARA>Returns a new transform which is the inverse of this one.</PARA><NOTE>The inverse of a  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogTransform2DPerspectiveAndRadial" />
				--><see cref="T:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial" /> transformation 
	is simply a copy of the object with the <see cref="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Inverted" /> flag set to the opposite value. 
	</NOTE></remarks><returns><PARA>The inverted transformation.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformSingularException" cgnxHRESULT="E_CogTransform_Singular"><para>The transform is singular.</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.SetPerspectiveRadialLinearParams(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)"><param name="pxx"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXX</see> term. This 
	corresponds to element (0,0) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pxy"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXY</see> term. This 
	corresponds to element (0,1) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pxc"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXC</see> term. This 
	is the X-axis translation of the optical center.</PARA></param><param name="pyx"><PARA>
	The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYX</see> term. This 
	corresponds to element (1,0) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pyy"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYY</see> term. This 
	corresponds to element (1,1) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pyc"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYC</see> term. This 
	is the Y-axis translation of the optical center.</PARA></param><param name="pdx"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="pdx_and_pdy">PDX</see> term. This is the X-axis 
	perspective distortion.</PARA></param><param name="pdy"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="pdx_and_pdy">PDY</see> term. This is the Y-axis 
	perspective distortion.</PARA></param><param name="radialK"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="radial_transformation">coefficient of radial distortion</see>.
	</PARA></param><param name="scaling"><PARA>The linear scale component.</PARA></param><param name="aspect"><PARA>The aspect ratio (Y-axis scale divided by X-axis scale).</PARA></param><param name="skew"><PARA>The linear skew component.</PARA></param><param name="translationX"><PARA>The X-axis translation.</PARA></param><param name="translationY"><PARA>The Y-axis translation.</PARA></param><param name="inverted"><PARA>False if this transform represents the forward perspective and radial transform specified by its properties; True if this transform represents the inverse of the forward transform specified by the properties.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="skew" />  is π/2  or −π/2 when normalized to the range π to −π.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scaling" />  or <paramref name="aspect" />  is 0.</para></exception><remarks><PARA>Set this transform from the given parameters.  Skew is in radians.</PARA><PARA>
	Set this transformation from the named 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_and_radial_transformation">parameters</see>.
	</PARA></remarks><summary>Set this transform from the given parameters.  Skew is in radians.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.GetPerspectiveRadialLinearParams(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean@)"><param name="pxx"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXX</see> term. This 
	corresponds to element (0,0) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pxy"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXY</see> term. This 
	corresponds to element (0,1) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pxc"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PXC</see> term. This 
	is the X-axis translation of the optical center.</PARA></param><param name="pyx"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYX</see> term. This 
	corresponds to element (1,0) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pyy"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYY</see> term. This 
	corresponds to element (1,1) of the <see cref="u:Framework.Coordinates.Theory.Transformations" cgnxAnchor="matrix_elements_method">matrix</see> 
	used to denote a 2D linear transformation.
	</PARA></param><param name="pyc"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_transformation">PYC</see> term. This 
	is the Y-axis translation of the optical center.</PARA></param><param name="pdx"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="pdx_and_pdy">PDX</see> term. This is the X-axis 
	perspective distortion.</PARA></param><param name="pdy"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="pdx_and_pdy">PDY</see> term. This is the Y-axis 
	perspective distortion.</PARA></param><param name="radialK"><PARA>The <see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="radial_transformation">coefficient of radial distortion</see>.
	</PARA></param><param name="scaling"><PARA>The linear scale component.</PARA></param><param name="aspect"><PARA>The aspect ratio (Y-axis scale divided by X-axis scale).</PARA></param><param name="skew"><PARA>The linear skew component.</PARA></param><param name="translationX"><PARA>The X-axis translation.</PARA></param><param name="translationY"><PARA>The Y-axis translation.</PARA></param><param name="inverted"><PARA>False if this transform represents the forward perspective and radial transform specified by its properties; True if this transform represents the inverse of the forward transform specified by the properties.</PARA></param><summary>Extract the named parameters from this transform.  Skew is in radians.</summary><event cref="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed" cgnxEvent="multiState"><para>
		
Fires when this property changes. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--></ul></event><remarks><PARA>
		Extract the named 
	<see cref="u:Framework.Coordinates.Theory.RPXForm" cgnxAnchor="planar_perspective_and_radial_transformation">parameters</see> 
	from this transformation.
</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Singular(System.Double,System.Double,System.Double)"><param name="x"><PARA>The X-coordinate of the point to evaluate.</PARA></param><param name="y"><PARA>The Y-coordinate of the point to evaluate.</PARA></param><param name="tolerance"><PARA>The tolerance value. If the point specified by <paramref name="x" /> and <paramref name="y" /> 
	is within the tolerance distance of a singular point, this function returns True.</PARA></param><returns><PARA>True if the specified point is within <paramref name="tolerance" /> of a singular point.</PARA></returns><summary>Returns True if the specified point is within the given Tolerance (i.e., radius) of a singular point in the transform.</summary><remarks><PARA>Returns True if the specified point is within the given <paramref name="tolerance" /> of a singular point in the transform.</PARA><PARA>
In the case of a transformation that includes a nonzero
value for <see cref="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveDX" /> or <see cref="P:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.PerspectiveDY" />, a line of singular points 
exists. This line can be determined by reflecting the "vanishing point" over the line of identity 
(the line formed by all points that are unchanged by the transformation), as shown in the following 
figure:
</PARA><PICTURE SRC="singular.jpg" apiSRC="Singular_singular.jpg" /><PARA>
Note that when this transformation is inverted (points are mapped from the red space to the blue space), 
the "vanishing point" is singular.
</PARA></remarks></member><member name="E:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DLinescan"><summary>A CogTransform2DLinescan transform is a nonlinear transform suitable for use when calibrating a linescan camera.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.#ctor(Cognex.VisionPro.CogTransform2DLinescan)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DLinescan.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinescan.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinescan.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DLinescan.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception><summary>Map the supplied points through this transform.</summary><exception cref="T:System.ArgumentException">If coordinatesXY is not an array of doubles.</exception></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformTooFewPointsLinFitException" cgnxHRESULT="E_CogTransform_TooFewPointsLinFit"><para>Too few points were provided to compute a best fit linear transform.</para></exception><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.CopyBase"><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><returns><PARA>The cloned transformation object.</PARA></returns><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.InvertBase"><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><returns><PARA>The inverted transform.</PARA></returns><summary>Returns a new transform which is the inverse of this one.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.Copy"><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.Invert"><summary>Returns a new transform which is the inverse of this one.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.GetBinary"><summary>For Cognex Internal Use Only</summary></member><member name="M:Cognex.VisionPro.CogTransform2DLinescan.SetBinary(System.Byte[])"><param name="value">n/a</param><summary>For Cognex Internal Use Only</summary></member><member name="E:Cognex.VisionPro.CogTransform2DLinescan.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DRigid"><summary>Rigid 2D coordinate transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.#ctor(System.Double,System.Double,System.Double)"><param name="rotation">The rotation angle ( in radians).</param><param name="translationX">The translation in X axis.</param><param name="translationY">The translation in Y axis.</param><summary>Constructs a CogTransform2DRigid using the supplied components.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.#ctor(Cognex.VisionPro.CogTransform2DRigid)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DRigid.SfRotation"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Rotation may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DRigid.SfTranslationX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TranslationX may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DRigid.SfTranslationY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TranslationY may have changed.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DRigid.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DRigid.TranslationY"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The y component of the translation vector.</value><summary>Returns/sets the y component of the translation vector.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DRigid.TranslationX"><summary>Returns/sets the x component of the translation vector.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The x component of the translation vector.</value></member><member name="P:Cognex.VisionPro.CogTransform2DRigid.Rotation"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Returns/sets the rotation of this transform (in radians).</summary><value>The rotation of this transform (in radians).</value></member><member name="P:Cognex.VisionPro.CogTransform2DRigid.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DRigid.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DRigid.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception><summary>Map the supplied points through this transform.</summary><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><exception cref="T:System.ArgumentException">If coordinatesXY is not an array of doubles.</exception></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.CopyBase"><returns><PARA>The cloned transformation object.</PARA></returns><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.InvertBase"><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><summary>Returns a new transform which is the inverse of this one.</summary><returns><PARA>The inverted transform.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.Identity(System.Double)"><param name="tolerance">n/a</param><summary>Returns true if this transform is an identity mapping within the given tolerance.  The tolerance is applied to the rotation and both translation components.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.Copy"><returns>The cloned transformation object.</returns><remarks>Copy() performs the same operation as the CopyBase() method of ICogTransform2D.The only difference is the type of the returned copy: CogTransform2DRigid.Copy() method returns a rigid transform.</remarks><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.Compose(Cognex.VisionPro.CogTransform2DRigid)"><param name="rightSide">The transformation to compose with this one.</param><summary>Returns a new rigid transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><exception cref="T:System.ArgumentException">If rightSide is NULL.</exception><remarks>The order in which you compose transformations is important.If you have a transform that maps AFromB and another that maps BFromC,you compose the two to get a single transform that maps AFromC as follows: AFromB.Compose(BFromC). <para> Compose(CogTransform2DLinear) performs the same operation as the ComposeBase(ICogTransform2D) method of ICogTransform2D. The only difference is the type of the returned object:CogTransform2DRigid.Compose(CogTransform2DRigid) method returns a rigid transform. </para></remarks><returns>The result of the composition.</returns></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.Invert"><summary>Returns a new rigid transform which is the inverse of this one.</summary><remarks>If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.  <para> Invert() performs the same operation as the InvertBase() method of ICogTransform2D.  The only difference is the type of the returned transform: CogTransform2DRigid.Invert() method returns a rigid transform. </para></remarks><returns>The inverse of this transformation object.</returns></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.GetLinearTransform"><summary>Returns a new linear transform which describes this  rigid transform.</summary><returns>A linear transform which describes this transform.</returns></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.MapVector(System.Double,System.Double,System.Double@,System.Double@)"><param name="x">The x-coordinate of the original point in From space.</param><param name="y">The y-coordinate of the original point in From space.</param><param name="mappedX">The resulting mapped x-coordinate in To space.</param><param name="mappedY">The resulting mapped y-coordinate in To space.</param><remarks>Maps the given from space point through this transform, filling in the mapped to space (x, y) coordinates.</remarks><summary>Maps the given x,y vector through this transform, filling in the mapped x,y vector components.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.MapAngle(System.Double)"><param name="angle">The angle to map.</param><returns>The mapped angle.</returns><summary>Maps the given angle (in radians) through this transform and returns the result (in radians).</summary><remarks>The operation of MapAngle(Double) is equivalent to creating a unit vector at the given angle, mapping the vector, and then computing the rotation angle of the mapped vector.</remarks></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.SetRotationTranslation(System.Double,System.Double,System.Double)"><param name="rotation">The rotation in radians.</param><param name="translationX">The translation along the x-axis.</param><param name="translationY">The translation along the y-axis.</param><summary>Set this transform from the given parameters.  Rotation  is in radians.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when you use this method to set rotation and translation.</event></member><member name="M:Cognex.VisionPro.CogTransform2DRigid.GetRotationTranslation(System.Double@,System.Double@,System.Double@)"><param name="rotation">The rotation in radians.</param><param name="translationX">The translation along the x-axis.</param><param name="translationY">The translation along the y-axis.</param><summary>Extract the named parameters from this transform.  Rotation is in radians.</summary></member><member name="E:Cognex.VisionPro.CogTransform2DRigid.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DCameraCalibration"><summary>A CogTransform2DCameraCalibration transform is a nonlinear transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.#ctor(Cognex.VisionPro.CogTransform2DCameraCalibration)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.CogTransform2DCameraCalibration.SfLinear"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Linear may have changed.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DCameraCalibration.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DCameraCalibration.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.CogTransform2DCameraCalibration.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><summary>Map the supplied points through this transform.</summary><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception><exception cref="T:System.ArgumentException">If coordinatesXY is not an array of doubles.</exception></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformTooFewPointsLinFitException" cgnxHRESULT="E_CogTransform_TooFewPointsLinFit"><para>Too few points were provided to compute a best fit linear transform.</para></exception><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.CopyBase"><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><returns><PARA>The cloned transformation object.</PARA></returns><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.InvertBase"><summary>Returns a new transform which is the inverse of this one.</summary><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><returns><PARA>The inverted transform.</PARA></returns></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.Copy"><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.Invert"><summary>Returns a new transform which is the inverse of this one.</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.GetBinary"><summary>For Cognex Internal Use Only</summary></member><member name="M:Cognex.VisionPro.CogTransform2DCameraCalibration.SetBinary(System.Byte[])"><param name="value">n/a</param><summary>For Cognex Internal Use Only</summary></member><member name="E:Cognex.VisionPro.CogTransform2DCameraCalibration.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogSerializer"><summary>This class provides convenient functions for serializing objects.  It allows you to save (load) objects to (from) files or streams.  You should use these functions for serializing all VisionPro objects.</summary></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToFile(System.Object,System.String,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="obj">The object to save.</param><param name="path">The path to the file.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><summary>Saves an object to a file in a specified format, with option bits that cause fields to be selectively persisted.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToFile(System.Object,System.String,System.Type)"><param name="obj">The object to save.</param><param name="path">The path to the file.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><summary>Saves an object to a file in a specified format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToFile(System.Object,System.String)"><param name="obj">The object to save.</param><param name="path">The path to the file.</param><summary>Saves an object to a file in a binary format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToString(System.Object,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants,System.Runtime.Serialization.StreamingContextStates)"><param name="obj">The object to save.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><param name="contextStates">n/a</param><returns>The string containing the saved object.</returns><summary>Saves an object to a string in a specified format, with option bits that cause fields to be selectively persisted.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToString(System.Object,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="obj">The object to save.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><summary>Saves an object to a string in a specified format, with option bits that cause fields to be selectively persisted.</summary><returns>The string containing the saved object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToString(System.Object,System.Type)"><param name="obj">The object to save.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><summary>Saves an object to a string in a specified format.</summary><returns>The string containing the saved object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToString(System.Object)"><param name="obj">The object to save.</param><returns>The string containing the saved object.</returns><summary>Saves an object to a string in a SOAP format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToStream(System.Object,System.IO.Stream,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants,System.Runtime.Serialization.StreamingContextStates)"><param name="obj">The object to save.</param><param name="stream">The output stream.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><param name="contextStates">The context states specify the intended purpose of persisting. In particular, users should be aware that if the StreamingContextState.Persistence flag is set on save, any serialized VisionPro .NET objects will reset their HasChanged property to false.</param><summary>Saves an object to a stream in a specified format, with option bits that cause fields to be selectively persisted.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToStream(System.Object,System.IO.Stream,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="obj">The object to save.</param><param name="stream">The output stream.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><summary>Saves an object to a stream in a specified format, with option bits that cause fields to be selectively persisted.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToStream(System.Object,System.IO.Stream,System.Type)"><param name="obj">The object to save.</param><param name="stream">The output stream.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><summary>Saves an object to a stream in a specified format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.SaveObjectToStream(System.Object,System.IO.Stream)"><param name="obj">The object to save.</param><param name="stream">The output stream.</param><summary>Saves an object to a stream in a binary format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromFile(System.String,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="path">The path to the input file.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><returns>The loaded object.</returns><summary>Loads an object from a file in a specified format, with option bits that cause fields to be selectively persisted.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromFile(System.String,System.Type)"><param name="path">The path to the input file.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><returns>The loaded object.</returns><summary>Loads an object from a file in the specified format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromFile(System.String)"><param name="path">The full path to the file to load.</param><summary>Loads an object from the given file. The format of the file will be determined automatically for convenience.</summary><returns>The loaded object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromString(System.String,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants,System.Runtime.Serialization.StreamingContextStates)"><param name="source">The input string.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><param name="contextStates">Context states indicate the intended purpose of persisting. These flags are ignored on load by VisionPro .NET objects.</param><summary>Loads an object from a string in a specified format, with option bits that cause fields to be selectively persisted.</summary><returns>The loaded object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromString(System.String,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="source">The input string.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><summary>Loads an object from a string in a specified format, with option bits that cause fields to be selectively persisted.</summary><returns>The loaded object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromString(System.String,System.Type)"><param name="source">The input string.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><summary>Loads an object from a string in a specified format.</summary><returns>The loaded object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromString(System.String)"><param name="source">The input string.</param><returns>The loaded object.</returns><summary>Loads an object from a string in a binary format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromStream(System.IO.Stream,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants,System.Runtime.Serialization.StreamingContextStates)"><param name="stream">The input stream.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><param name="contextStates">Context states indicate the intended purpose of persisting. These flags are ignored on load by VisionPro .NET objects.</param><returns>The loaded object.</returns><summary>Loads an object from a stream in a specified format, with option bits that cause fields to be selectively persisted.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromStream(System.IO.Stream,System.Type,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="stream">The input stream.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><param name="optionBits">The option bits specifying what should be persisted.</param><summary>Loads an object from a stream in a specified format, with option bits that cause fields to be selectively persisted.</summary><returns>The loaded object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromStream(System.IO.Stream,System.Type)"><param name="stream">The input stream.</param><param name="formatterType">The type of formatter to use.  You may use either a BinaryFormatter (to save the object as binary data) or a SoapFormatter (to save the object as XML text).  For example, to use the SoapFormatter in C# you would type: typeof(System.Runtime.Serialization.Formatters.Soap.SoapFormatter)</param><summary>Loads an object from a stream in a specified format.</summary><returns>The loaded object.</returns><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.LoadObjectFromStream(System.IO.Stream)"><param name="stream">The input stream.</param><returns>The loaded object.</returns><summary>Loads an object from a stream. Attempt to automatically determine format.</summary><remarks>
    	To learn more about persisting objects, see <see cref="u:Programming.Tools.Theory.Persitence">Persistence in VisionPro</see></remarks></member><member name="M:Cognex.VisionPro.CogSerializer.DeepCopyObject(System.Object)"><param name="obj">The object to copy.</param><returns>A copy of the input object.</returns><summary>Returns a deep copy of the supplied object.</summary></member><member name="M:Cognex.VisionPro.CogSerializer.DeepCopyObject(System.Object,Cognex.VisionPro.CogSerializationOptionsConstants)"><param name="obj">The object to copy.</param><param name="optionBits">The option bits specifying what should be copied.</param><returns>A copy of the input object.</returns><summary>Returns a deep copy of the supplied object, modulated by the supplied serialization options.</summary></member><member name="T:Cognex.VisionPro.CogVisionToolMultiThreading"><summary>Class that provides API to control vision tool multithreading behavior</summary></member><member name="P:Cognex.VisionPro.CogVisionToolMultiThreading.ThreadCount"><summary>Get/set the number of threads the vision tool multithreading mechanism uses when running multithreading aware vision tools.</summary><value>This read/write property controls the number of threads the multithreading mechanism uses when running vision tools. The default value of this property is 0 until either the multithreading mechanism is enabled or the user specifies a new value.  If the mechanism is disabled, then setting this property has no effect.  If The ThreadCountMode is set to ::HardwareDefined and mechanims is enabled, then this property will be set to the number of physical processors or cores installed.  If a user sets the thread count, then that value will be used instead of the number of physical processors.</value></member><member name="P:Cognex.VisionPro.CogVisionToolMultiThreading.ThreadCountMode"><value>This read/write property sets the thread count mode to one of either CogVisionToolMultiThreadingThreadCountModeConstants::HardwareDefined or  CogVisionToolMultiThreadingThreadCountModeConstants::UserSpecified.The default is ::HardwareDefined.</value><summary>Get/set the thread count mode of the vision tool multithreading mechanism.</summary></member><member name="P:Cognex.VisionPro.CogVisionToolMultiThreading.Enable"><value>This read/write property enables or disables the vision tool multithreading mechanism.  The default is false (disabled).Some vision tools are not multithread-aware and ignore the value of this property.</value><summary>Get/set the current state of the vision tool multithreading mechanism.</summary></member><member name="T:Cognex.VisionPro.CogMisc"><summary>Class that provides miscellaneous useful functions.</summary></member><member name="M:Cognex.VisionPro.CogMisc.RadToDeg(System.Double)"><param name="radians">The input angle in radians.</param><summary>Convert radians to degrees.</summary><returns>The equivalent angle in degrees.</returns></member><member name="M:Cognex.VisionPro.CogMisc.DegToRad(System.Double)"><param name="degrees">The input angle in degrees.</param><summary>Convert degrees to radians.</summary><returns>The equivalent angle in radians.</returns><remarks><PARA>Converts <see cref="u:Programming.Tools.CodeWalkthrough.ConvertRadiansAndDegrees">degrees to radians</see>.</PARA><PARA>A radian is a unit of angular measure equal to the angle subtended at the center of a circle by an arc equal in length to the radius of the circle.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMisc.GetLicensedFeatures(System.Boolean)"><param name="includeNonVisionProFeatures">Currently unsupported (ignored).</param><summary>List of features for which licenses are available.</summary><returns>The displayable list of licensed features.</returns><remarks><PARA>Returns a string collection containing the names of all features for which licenses are available. You can use <see cref="M:Cognex.VisionPro.CogMisc.GetLicensedFeatures(System.Boolean)" />, for example,  to generate a displayable list of features for a user interface, or to determine if a particular feature is licensed. The returned name strings are not localized.</PARA><PARA>Cognex manufacturing programs your hardware or security key with the appropriate license bits based on the product features you purchased. </PARA><PARA>See 
		<see cref="u:Programming.Tools.Theory.Security">Understanding VisionPro Security</see>
		  for a table that lists each feature and the VisionPro component to which it corresponds.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMisc.IsLicensedFeatureEnabled(System.String)"><param name="feature">Feature name to check</param><summary>Determine if a given feature is currently licensed.</summary><returns>True, if the given feature is currently licensed, false if it is not.</returns></member><member name="M:Cognex.VisionPro.CogMisc.GetDefaultGraphicHandleSize"><summary>Gets the global default size (in screen pixels) for all interactive graphic handles.</summary></member><member name="M:Cognex.VisionPro.CogMisc.SetDefaultGraphicHandleSize(System.Int32)"><param name="size">n/a</param><summary>Sets the global default size (in screen pixels) for all interactive graphic handles.</summary><remarks>Note that VisionPro�s interactive graphic handles are created when they are first needed (usually when they are displayed for the first time). Changing the global setting will not change the size of graphic handles which have already been created. The new default setting only applies to new graphics which have not yet had their handles created.</remarks><exception cref="T:System.ArgumentOutOfRangeException">If size is less than 8.</exception></member><member name="M:Cognex.VisionPro.CogMisc.CheckSpaceNameSyntax(System.String,System.Boolean,System.String@)"><param name="spaceName">The input space name to be verified.</param><param name="allowPartialName">If false, PQ names will be ruled invalid.</param><param name="errMsg">If invalid syntax, an error message is provided.</param><summary>Returns true if given space name has valid syntax, returns false otherwise. If not valid syntax, an error message is provided.</summary><returns>True if syntax is valid, false otherwise.</returns><remarks><PARA>Returns an empty string if the given coordinate space name has <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames">valid syntax</see>. Otherwise, <see cref="M:Cognex.VisionPro.CogMisc.CheckSpaceNameSyntax(System.String,System.Boolean,System.String@)" /> returns an explicit error message.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMisc.ScaleImage(Cognex.VisionPro.ICogImage,System.Int32,System.Int32)"><param name="inputImage">The source image to be scaled.</param><param name="outputImageWidth">Width in pixels of the desired output image.</param><param name="outputImageHeight">Height in pixels of the desired output image.</param><returns>The scaled image.</returns><summary>Returns a scaled version of the inputImage. The dimensions of the returned image (in pixels) are specified by outputImageWidth and outputImageHeight. The scaling is performed using bilinear interpolation.</summary><remarks><PARA>Returns a scaled version of the <paramref name="inputImage" />. Scaling is performed using bilinear interpolation.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMisc.GetThumbnailImage(Cognex.VisionPro.ICogImage,System.Int32)"><param name="inputImage">The image of which to create a thumbnail.</param><param name="thumbSize">The output image's height and width are both less than or equal to thumbSize. The aspect ratio is kept the same.</param><returns>The thumbnail image.</returns><summary>Returns a thumbnail version of the inputImage.</summary></member><member name="M:Cognex.VisionPro.CogMisc.VisionProReleaseNumber"><returns>A string describing the installed release of VisionPro.</returns><summary>Returns a string describing the installed release of VisionPro.</summary></member><member name="M:Cognex.VisionPro.CogMisc.VisionProCopyright"><returns>A string containing the copyright dates for the installed release of VisionPro.</returns><summary>Returns a string containing the copyright dates for the installed release of VisionPro.</summary></member><member name="M:Cognex.VisionPro.CogMisc.AnyObjectHasChanged(Cognex.VisionPro.Implementation.ICogHasChanged,System.Collections.ArrayList)"><param name="obj">n/a</param><param name="previouslyTested">n/a</param><remarks><PARA>Returns True if the <see cref="P:Cognex.VisionPro.Implementation.ICogHasChanged.HasChanged" /> property of the parent object or any of its subobjects is True.</PARA></remarks></member><member name="M:Cognex.VisionPro.CogMisc.AnyObjectHasChanged(Cognex.VisionPro.Implementation.ICogHasChanged)"><param name="obj">n/a</param><returns>True if anything has changed, false otherwise.</returns><summary>Returns True if the HasChanged property of the parent object or any of its sub-objects is True.</summary></member><member name="M:Cognex.VisionPro.CogMisc.LoadShapeModelsFromCVLFile(System.String,Cognex.VisionPro.ICogImage,System.Boolean)"><param name="fileName">The name of the source file.</param><param name="shapeImage">An image whose coordinate space tree aids in the determination of handedness.</param><param name="propagateEvents">If true, return a CogShapeModelPropCollection. Otherwise return a ShapeModelCollection.</param><summary>Load a CogShapeModelCollection from a CVL archive.</summary><returns>A shape model collection corresponding to the specified CVL archive.</returns></member><member name="M:Cognex.VisionPro.CogMisc.SaveShapeModelsToCVLFile(System.String,Cognex.VisionPro.ICogShapeModelCollection,Cognex.VisionPro.ICogImage)"><param name="fileName">The name of the source file.</param><param name="shapes">The shape model collection to be written to a CVL archive.</param><param name="shapeImage">An image whose coordinate space tree aids in the determination of handedness.</param><summary>Save a shape model collection to a CVL archive.</summary></member><member name="M:Cognex.VisionPro.CogMisc.SetAllHasChanged(Cognex.VisionPro.Implementation.Internal.ICogNetInternal,System.Boolean)"><param name="obj">n/a</param><param name="changed">n/a</param><summary>Sets the HasChanged property of the parent object and all of its sub-objects.</summary></member><member name="T:Cognex.VisionPro.CogImageStitch"><summary>The CogImageStitch class offers functionality for image seamless stitching and image override stitching. This class has following two different ways to do image stitching. (1)To do �gblended�h stitching(Seamless Stitching) as follows.    (a)Allocate an internal data structure known as the BlendingBuffer.    (b)Add as many source images as desired to the buffer.    (c)Fill a pre-allocated destination image with the final result. (2)To do �goverwrite�h stitching(Override Stitching) as follows.    (a)Simply call one of the static �gOverwriteImage�h functions.</summary></member><member name="P:Cognex.VisionPro.CogImageStitch.NumberOfBlendedImages"><summary>This read-only property tells how many images the BlendingBuffer contains.</summary></member><member name="P:Cognex.VisionPro.CogImageStitch.BlendingBufferAllocated"><summary>This read-only property is true when the BlendingBuffer is allocated.</summary></member><member name="M:Cognex.VisionPro.CogImageStitch.AllocateBlendingBuffer(System.Int32,System.Int32,Cognex.VisionPro.CogTransform2DLinear)"><param name="width">n/a</param><param name="height">n/a</param><param name="rootFromBlending">n/a</param><exception cref="T:System.InvalidOperationException">If width is not greater than 0.</exception><exception cref="T:System.ArgumentNullException">If rootFromBlending is null.</exception><summary>Allocate the internal data structures that are needed for stitching images in Blending mode.</summary><exception cref="T:System.OutOfMemoryException">If allocation failed.</exception></member><member name="M:Cognex.VisionPro.CogImageStitch.DeallocateBlendingBuffer"><summary>Free the internal data structures.</summary></member><member name="M:Cognex.VisionPro.CogImageStitch.BlendImageIntoBuffer(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey,System.Int32,System.Int32)"><param name="inputImage">n/a</param><param name="inputImageWeights">n/a</param><param name="inputImageMask">n/a</param><param name="inputImageMaskOffsetX">n/a</param><param name="inputImageMaskOffsetY">n/a</param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If inputImage is null.</exception><exception cref="T:System.InvalidOperationException">If inputImageWeights size differs from inputImage.(If inputImageWeights is non-null and allocated)</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If inputImage is not allocated.</exception><summary>This method allows user to do both masking and weighting. inputImageMask must be non-null and allocated, but does not need to be the same size as the input image.  VisionPro assumes that image pels not covered by the mask are care pixels (i.e.they are copied into the destination) inputImageMaskOffsetX/Y can be any integer value. These values specify how the mask is aligned on the image. (Same as other VPro tools with masking.).</summary></member><member name="M:Cognex.VisionPro.CogImageStitch.BlendImageIntoBuffer(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey)"><param name="inputImage">n/a</param><param name="inputImageWeights">n/a</param><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If inputImageWeights is not null and not allocated.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If inputImage is null.</exception><exception cref="T:System.InvalidOperationException">If BlendingBuffer is not allocated.</exception><summary>This method adds inputImage to the BlendingBuffer with inputImageWeights. inputImage pel�fs contribution to the result image is weighted with the contribution of inputImageWeights pels that corresponded to the same pel in the result image. inputImageWeights can be null. In this case, all input pels are weighted fully and equally.</summary></member><member name="M:Cognex.VisionPro.CogImageStitch.FillDestinationImageFromBuffer(Cognex.VisionPro.CogImage8Grey,System.Int32)"><param name="destinationImage">n/a</param><param name="unfilledPelValue">n/a</param><exception cref="T:System.InvalidOperationException">the destinationimage is  not the same size as the BlendingBuffer.</exception><summary>This method extracts the stitched image from the BlendingBuffer. This will write the unfilledPelValue  into  any destination pixels that were never written.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If destinationImage is not allocated.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If destinationImage is null.</exception></member><member name="M:Cognex.VisionPro.CogImageStitch.FillDestinationImageFromBuffer(Cognex.VisionPro.CogImage8Grey)"><param name="destinationImage">n/a</param><exception cref="T:System.InvalidOperationException">If Number of Blended Image is zero.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If destinationImage is null.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If destinationImage is not allocated.</exception><summary>This method extracts the stitched image from the BlendingBuffer. Any destination pixels that were never written to are untouched.</summary></member><member name="M:Cognex.VisionPro.CogImageStitch.FillDestinationImageMaskFromBuffer(Cognex.VisionPro.CogImage8Grey)"><param name="destinationImageMask">n/a</param><exception cref="T:System.InvalidOperationException">If Number of Blended Image is zero.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If destinationImageMask is not allocated.</exception><summary>This method extracts the result mask indicating which pels in the stitched image are meaningful. This can be useful to tell user which pels were actually written during the stitch operation.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If destinationImageMask is null.</exception></member><member name="M:Cognex.VisionPro.CogImageStitch.OverwriteImage(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey,System.Int32,System.Int32,Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey)"><param name="inputImage">n/a</param><param name="inputImageMask">n/a</param><param name="inputImageMaskOffsetX">n/a</param><param name="inputImageMaskOffsetY">n/a</param><param name="destinationImage">n/a</param><param name="destinationImageMask">n/a</param><summary>This method allows users to stitch images in overwrite mode.  This allow masking and will fill a destinationImageMask.  The BlendingBuffer is not used. destinationImageMask must be either(1)null (i.e. no mask is desired),or (2) non-null, allocated, and the same size as the destinationImage. inputImageMaskOffsetX/Y can be any integer value. These values specify how the mask is aligned on the image. (Same as other VPro tools with masking.)</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If destinationImage is null.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If destinationImage is not allocated.</exception><exception cref="T:System.InvalidOperationException">If destinationImageMask size differs from inputImage.(If destinationImageMask is non-null and allocated)</exception></member><member name="M:Cognex.VisionPro.CogImageStitch.OverwriteImage(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogImage8Grey)"><param name="inputImage">n/a</param><param name="destinationImage">n/a</param><param name="destinationImageMask">n/a</param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If destinationImage is null.</exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If inputImage is not allocated.</exception><summary>This method allows users to stitch images in overwrite mode.  This will fill a destinationImageMask.  The BlendingBuffer is not used. destinationImageMask must be either(1)null (i.e. no mask is desired),or (2) non-null, allocated, and the same size as the destinationImage.</summary><exception cref="T:System.InvalidOperationException">If destinationImageMask size differs from inputImage.(If destinationImageMask is non-null and allocated)</exception></member><member name="M:Cognex.VisionPro.CogImageStitch.FillDefaultWeightImage(Cognex.VisionPro.CogImage8Grey)"><param name="weightImage">n/a</param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException">If weightImage is null.</exception><summary>This method allows users to fill weightImage with weighting values.The resulting weightImage can be used for blending images togetherweightImage is filled in with the distance in pels from the nearest image boundary, to a maximum of 255. The result is concentric squares of pel values, increasing in weight toward the middle</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException">If weightImage is not allocated.</exception></member><member name="T:Cognex.VisionPro.ICogImagingDeviceAccess"><summary>Interface for accessing features and Imaging Device hardware info.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.GetFeature(System.String)"><param name="node">n/a</param><summary>Read the feature identified by node.  Works with any data type.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.SetFeature(System.String,System.String)"><param name="node">n/a</param><param name="value">n/a</param><summary>Write the feature identified by node.  Works with any data type.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.ExecuteCommand(System.String)"><param name="node">n/a</param><summary>Execute the command identified by node.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.GetAvailableFeatures(System.String)"><param name="category">n/a</param><summary>Get the child features of the specified category.  Use the Root category to get the top level features.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.GetFeatureType(System.String)"><param name="feature">n/a</param><summary>Get the type of this feature.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.GetValidEnumValues(System.String)"><param name="feature">n/a</param><summary>Get the valid settings for an enum feature.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.GetComment(System.String)"><param name="feature">n/a</param><summary>Get a helpful comment describing the feature.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.IsReadable(System.String)"><param name="feature">n/a</param><summary>Returns false if the feature is not readable.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.IsWriteable(System.String)"><param name="feature">n/a</param><summary>Returns false if the feature is not writable.</summary></member><member name="M:Cognex.VisionPro.ICogImagingDeviceAccess.IsReserved(System.String)"><param name="feature">n/a</param><summary>Returns true if the feature is reserved.</summary></member><member name="T:Cognex.VisionPro.ICogGigEAccess"><summary>Interface for accessing features and GigE hardware info.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.TimeStampFrequency"><summary>Read the frequency of the camera's timestamp counter.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.TimeStampCounter"><summary>Read the current value of the camera's timestamp counter.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.IsDHCPEnabled"><summary>Whether true or false is determined by if the current IP address of the camera is set via DHCP or by its PersistentIPAddress.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.MACAddress"><summary>Returns the MAC address (also known as physical address) of the camera.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.HostSubnetMask"><summary>Returns the subnet mask of the GigE adapter to which the camera is attached.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.PersistentSubnetMask"><summary>Returns the persistent subnet mask of the camera.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.PersistentIPAddress"><summary>Returns the persistent IP address of the camera.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.CurrentSubnetMask"><summary>Returns the current subnet mask to be used for communicating with the camera.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.HostIPAddress"><summary>The IP address of the host adapter the camera is connected to.</summary></member><member name="P:Cognex.VisionPro.ICogGigEAccess.CurrentIPAddress"><summary>The IP address used to communicate with the camera.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetFeature(System.String)"><param name="node">n/a</param><summary>Read the feature identified by node.  Works with any data type.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetFeature(System.String,System.String)"><param name="node">n/a</param><param name="value">n/a</param><summary>Write the feature identified by node.  Works with any data type.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.ExecuteCommand(System.String)"><param name="node">n/a</param><summary>Execute the command identified by node.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetIntegerFeature(System.String)"><param name="node">n/a</param><summary>Read the integer feature identified by node.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetIntegerFeature(System.String,System.UInt32)"><param name="node">n/a</param><param name="value">n/a</param><summary>Write the integer feature identified by node.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetDoubleFeature(System.String)"><param name="node">n/a</param><summary>Read the double feature identified by node.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetDoubleFeature(System.String,System.Double)"><param name="node">n/a</param><param name="value">n/a</param><summary>Write the double feature identified by node.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetTemporaryIPConfiguration(System.String,System.String)"><param name="IPAddress">n/a</param><param name="SubnetMask">n/a</param><summary>Function to set the camera�s temporary IP address and subnet mask.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetPersistentIPConfiguration(System.String,System.String)"><param name="IPAddress">n/a</param><param name="SubnetMask">n/a</param><summary>Function to set the camera�s persistent IP address and subnet mask.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.ResetTimeStamp"><summary>Reset the timestamp counter in the camera to 0.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetFeatureReadTimeout"><summary>Read the read feature timeout (in seconds).</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetFeatureReadTimeout(System.Double)"><param name="value">n/a</param><summary>Write the read feature timeout (in seconds).</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetFeatureWriteTimeout"><summary>Read the write feature timeout (in seconds).</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.SetFeatureWriteTimeout(System.Double)"><param name="value">n/a</param><summary>Write the write feature timeout (in seconds).</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetAvailableFeatures(System.String)"><param name="category">n/a</param><summary>Get the child features of the specified category.  Use the Root category to get the top level features.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetFeatureType(System.String)"><param name="feature">n/a</param><summary>Get the type of this feature.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetValidEnumValues(System.String)"><param name="feature">n/a</param><summary>Get the valid settings for an enum feature.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetComment(System.String)"><param name="feature">n/a</param><summary>Get a helpful comment describing the feature.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.IsReadable(System.String)"><param name="feature">n/a</param><summary>Returns false if the feature is not readable.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.IsWriteable(System.String)"><param name="feature">n/a</param><summary>Returns false if the feature is not writeable.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.IsReserved(System.String)"><param name="feature">n/a</param><summary>Returns true if the feature is reserved.</summary></member><member name="M:Cognex.VisionPro.ICogGigEAccess.GetXMLFromCamera"><summary>Return the raw XML data from the camera.</summary></member><member name="T:Cognex.VisionPro.ICog1394DCAMAccess"><summary>Interface for accessing registers and 1394DCAM hardware info.</summary></member><member name="P:Cognex.VisionPro.ICog1394DCAMAccess.AdapterLocation"><summary>Get the Adapter Location string of the host controller for this camera.</summary></member><member name="P:Cognex.VisionPro.ICog1394DCAMAccess.VendorID"><summary>Get the vendor ID of this camera.</summary></member><member name="P:Cognex.VisionPro.ICog1394DCAMAccess.ControllerID"><summary>Get the ID string of the host controller for this camera.</summary></member><member name="P:Cognex.VisionPro.ICog1394DCAMAccess.BusNumber"><summary>Read the 10-bit bus number that identifies the 1394 bus to which this camera is connected.</summary></member><member name="P:Cognex.VisionPro.ICog1394DCAMAccess.NodeNumber"><summary>Read the 6-bit node number that identifies this camera.</summary></member><member name="M:Cognex.VisionPro.ICog1394DCAMAccess.GetRegisterAccess(System.UInt32)"><param name="addr"></param><summary>Access the 1394DCAM register with the given address.</summary></member><member name="M:Cognex.VisionPro.ICog1394DCAMAccess.GetRegisterAccess(System.Int32)"><param name="addr"></param><summary>Access the 1394DCAM register with the given address.</summary></member><member name="M:Cognex.VisionPro.ICog1394DCAMAccess.SetRegisterAccess(System.UInt32,System.UInt32)"><param name="addr"></param><param name="value"></param><summary>Access the 1394DCAM register with the given address.</summary></member><member name="M:Cognex.VisionPro.ICog1394DCAMAccess.SetRegisterAccess(System.Int32,System.Int32)"><param name="addr"></param><param name="value"></param><summary>Access the 1394DCAM register with the given address.</summary></member><member name="E:Cognex.VisionPro.ICog1394DCAMAccess.BusConfigurationChanged"><summary>Occurs when a bus configuration changed (e.g. unplugged or bus reset) is detected for this frame grabber.</summary><remarks><para>
    		This event fires whenever there is a change in the IEEE1394 bus configuration. In general, the only appropriate
    		action for your application to take in reponse to this event is to terminate the application gracefully. Once this
    		event fires, the acquisition hardware and software may no longer be consistent, and the only way to fix that 
    		is to restart the application.
    	</para></remarks></member><member name="T:Cognex.VisionPro.ICogAcq1394DCAM"><remarks><PARA>Interface for controlling IEEE 1394 DCAM properties.</PARA><PARA>
Supported only on
IEEE 1394 DCAM cameras.
</PARA></remarks><summary>Interface for controlling IEEE 1394 DCAM properties.</summary></member><member name="P:Cognex.VisionPro.ICogAcq1394DCAM.CameraBandwidth"><summary>Reads or sets the camera bandwidth. Values limited to 0.0 (minimum) and 1.0 (maximum). Default is 1.0.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the bandwith value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq1394DCAM_CameraBandwidth--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraBandwidth" /></li></ul></event><remarks><PARA>Sets or gets the camera bandwidth. Values range from
	0.0, which directs the camera to consume as little bandwidth as possible,
	 to
	 1.0, which directs the camera not to restrict its use of bandwidth.</PARA><PARA>
This property lets you limit the amount of bandwidth
used by an individual IEEE 1394 DCAM camera.
You can connect more than one IEEE 1394 DCAM to a single IEEE 1394 adapter.
By using this class, you can limit the amount of bandwidth used by individual cameras.
	</PARA><NOTE>Specifying a small (or zero) value for bandwidth may prevent some cameras from acquiring any images and cause the acquisition to return an error.</NOTE><DEFAULT>1.0</DEFAULT></remarks></member><member name="T:Cognex.VisionPro.ICogAcqBrightness"><remarks><PARA>Interface for controlling brightness levels of an acquired image.</PARA><PARA>
Supported on:
8100D,
8100L,
8100M,
8100M+,
8120/CVM1,
8120/CVM6 (analog),
8120/CVM9 (analog),
8501, 8504
</PARA></remarks><summary>Interface for controlling brightness levels of an acquired image. Brightness values are in the range 0-1 inclusive.</summary></member><member name="P:Cognex.VisionPro.ICogAcqBrightness.Brightness"><summary>Reads or sets the brightness level.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the brightness is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqBrightness_Brightness--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfBrightness" /></li></ul></event><remarks><PARA>Sets or gets the brightness level. This value ranges from 0.0 (darkest) to 1.0 (lightest).</PARA><PARA>Not all FIFOs support this property. Check whether the FIFO supports it, as in the example, before using this property.</PARA><PARA>The <see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast">contrast</see> and brightness values control how different light levels are mapped to pixel
values. Assume that you are working with an 8-bit image. All the light levels entering the
camera must be mapped to a pixel value from 0 to 255.</PARA><PARA>Brightness determines where the center of the contrast mapping window falls relative to
the range of light levels. Brightness values closer to 0.0 place the center of the mapping
window toward the higher light levels, resulting in a darker image.</PARA><PARA><PICTURE SRC="darker.gif" WIDTH="350" HEIGHT="200" apiSRC="Brightness_darker.gif" /></PARA><PARA>Brightness values
closer to 1.0 place the window toward the lower light levels, resulting in a brighter image.</PARA><PARA><PICTURE SRC="brighter.gif" WIDTH="350" HEIGHT="200" apiSRC="Brightness_brighter.gif" /></PARA><PARA>For multichannel FIFOs, <see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness" /> sets the brightness of all channels to the same value. To set the brightness of individual channels, use <see cref="T:Cognex.VisionPro.ICogAcqBrightnessMultiChannel" />.<see cref="M:Cognex.VisionPro.ICogAcqBrightnessMultiChannel.SetBrightnessMultiChannel(System.Int32,System.Double)" />.</PARA><DEFAULT>CDC-50 camera: 0.58 <BR />
CDC-100 camera: 0.50<BR />
CDC-200 camera: 0.50<BR />
All other cameras: 1.0
</DEFAULT></remarks><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqBrightness brightnessParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	brightnessParams = myAcqFifo.OwnedBrightnessParams;
	if (brightnessParams != null)
		brightnessParams.Brightness = .75;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim myBrightnessParam As Cognex.VisionPro.ICogAcqBrightness

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    myBrightnessParam = myAcqFifo.OwnedBrightnessParams

    If Not myBrightnessParam Is Nothing Then
        myBrightnessParam.Brightness = 0.75
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqBrightnessMultiChannel"><summary>Interface for controlling brightness levels on multiple channels of an acquired image. Brightness values are in the range 0-1 inclusive.</summary><remarks><PARA>Interface for controlling brightness levels on multiple channels of an acquired image.</PARA><PARA>
Supported on:
8504
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqBrightnessMultiChannel.NumBrightnessChannels"><summary>Returns the number of channels available to be set or read.</summary></member><member name="M:Cognex.VisionPro.ICogAcqBrightnessMultiChannel.GetBrightnessMultiChannel(System.Int32)"><param name="index"><PARA>The index of the image channel.</PARA></param><summary>Access the brightness level of a particular channel.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or <paramref name="index" /> &gt;= (number of camera channels).</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the brightness is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqBrightnessMultiChannel_BrightnessMultiChannel--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetBrightnessMultiChannel" /></li></ul></event><remarks><PARA>Sets or gets the <see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness">brightness</see> level of a particular channel.</PARA><PARA>You can use <see cref="T:Cognex.VisionPro.CogAcqBrightness" />.<see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness" /> to set the brightness of all channels to the same value.</PARA><DEFAULT>0.5</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ICogAcqBrightnessMultiChannel.SetBrightnessMultiChannel(System.Int32,System.Double)"><param name="index"><PARA>The index of the image channel.</PARA></param><param name="value"></param><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the brightness is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqBrightnessMultiChannel_BrightnessMultiChannel--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetBrightnessMultiChannel" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="value" /> is &lt; 0 or <paramref name="value" /> &gt; 1.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or <paramref name="index" /> &gt;= (number of camera channels).</para></exception><summary>Access the brightness level of a particular channel.</summary><remarks><PARA>Sets or gets the <see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness">brightness</see> level of a particular channel.</PARA><PARA>You can use <see cref="T:Cognex.VisionPro.CogAcqBrightness" />.<see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness" /> to set the brightness of all channels to the same value.</PARA><DEFAULT>0.5</DEFAULT></remarks></member><member name="T:Cognex.VisionPro.ICogAcqCameraCalibration"><remarks><PARA>Interface that lets you make corrections for Cognex CDC cameras.</PARA><PARA>Like most CMOS cameras, the Cognex CDC cameras may produce slightly inconsistent pixel values when presented with a scene of uniform intensity. In addition, a small number of individual pixels may have very low or very high values regardless of the scene intensity. The <see cref="T:Cognex.VisionPro.CogAcqCameraCalibration" /> interface lets you correct for these inconsistencies.</PARA><PARA>
Supported on:
8100D
</PARA></remarks><summary>Interface allowing certain camera corrections to be made.</summary></member><member name="P:Cognex.VisionPro.ICogAcqCameraCalibration.RowColumnCalibrationEnabled"><summary>Read or set whether row and column calibration is enabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when row and column calibration is enabled or disabled.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqCameraCalibration_RowColumnCalibrationEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfRowColumnCalibrationEnabled" /></li></ul></event><remarks><PARA>Sets or gets whether row and column calibration is enabled.</PARA><PARA>When this option is enabled, VisionPro uses the CDC camera's factory settings to reduce the fixed pattern noise that causes pixel value variations from row to row and from column to column when presented with a scene of uniform intensity.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqCameraCalibration.OutlierPixelCorrectionEnabled"><summary>Read or set whether outlier pixel correction is enabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when outlier pixel correction is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqCameraCalibration_OutlierPixelCorrectionEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOutlierPixelCorrectionEnabled" /></li></ul></event><remarks><PARA>Sets or gets whether outlier pixel correction is enabled.</PARA><PARA>When this option is enabled, VisionPro uses the CDC camera's factory settings to determine whether a pixel is stuck on or off and corrects it to the average of its neighbors to the right and to the left.
</PARA><PARA>Outlier correction is designed for naturally occurring images. It is not useful for images
with many small features that you care about. For example, when acquiring images of a
printout made with a laser printer or similar device, the
dithering effects of the printer will appear as small features which the outlier correction
would remove. In this case, outlier correction should not be used.
</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="T:Cognex.VisionPro.ICogAcqChargeTransferInterval"><summary>Interface which allows control of a camera's charge transfer interval.</summary></member><member name="P:Cognex.VisionPro.ICogAcqChargeTransferInterval.ChargeTransferInterval"><summary>Reads or sets the charge transfer interval in units of video lines relative to the beginning of the vertical drive signal.</summary></member><member name="T:Cognex.VisionPro.ICogAcqContrast"><remarks><PARA>Interface for controlling contrast levels of an acquired image.</PARA><PARA>
Supported on:
8100D,
8100L,
8100M,
8100M+,
8120/CVM1,
8120/CVM6 (analog),
8120/CVM9 (analog),
8501, 8504
</PARA></remarks><summary>Interface for controlling contrast levels of an acquired image.</summary></member><member name="P:Cognex.VisionPro.ICogAcqContrast.Contrast"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the contrast is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqContrast_Contrast--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfContrast" /></li></ul></event><remarks><PARA>Sets or gets the contrast level. This value ranges from 0.0 (least contrast) to 1.0 (most contrast).</PARA><PARA>Not all FIFOs support this property. Check whether the FIFO supports it, as in the example, before using this property.</PARA><PARA>The contrast and <see cref="P:Cognex.VisionPro.ICogAcqBrightness.Brightness">brightness</see> values control how different light levels are mapped to pixel
values. Assume that you are working with an 8-bit image. All the light levels entering the
camera must be mapped to a pixel value from 0 to 255.</PARA><PARA>Contrast determines how the light levels are mapped to the 256 light levels. A low value
closer to 0.0 maps more light values to the pixel value range.</PARA><PARA><PICTURE SRC="lowcontrast.gif" WIDTH="350" HEIGHT="200" apiSRC="Contrast_lowcontrast.gif" /></PARA><PARA>A high value closer to 1.0 maps fewer light values to the pixel value range. Light values that are below or above
the contrast threshold are mapped to the lowest and highest pixel values, respectively.
</PARA><PARA><PICTURE SRC="highcontrast.gif" WIDTH="350" HEIGHT="200" apiSRC="Contrast_highcontrast.gif" /></PARA><PARA>For multichannel FIFOs, <see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast" /> sets the contrast  of all channels to the same value. To set the contrast of individual channels,
use <see cref="T:Cognex.VisionPro.ICogAcqContrastMultiChannel" />.<see cref="M:Cognex.VisionPro.ICogAcqContrastMultiChannel.SetContrastMultiChannel(System.Int32,System.Double)" />.</PARA><DEFAULT>CDC-50 camera: 0.15 <BR />
CDC-100 camera: 0.66 <BR />
CDC-200 camera: 0.45 <BR />
All other cameras: 0.35
</DEFAULT></remarks><summary>Reads or sets the contrast level. Contrast values are in the range 0-1 inclusive.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>0 <paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqContrast contrastParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	contrastParams = myAcqFifo.OwnedContrastParams;
	if (contrastParams != null)
		contrastParams.Contrast = .8;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim contrastParams As Cognex.VisionPro.ICogAcqContrast

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    contrastParams = myAcqFifo.OwnedContrastParams

    If Not contrastParams Is Nothing Then
        contrastParams.Contrast = 0.8
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqContrastMultiChannel"><summary>Interface for controlling contrast levels on multiple channels of an acquired image.</summary><remarks><PARA>Interface for controlling contrast levels on multiple channels of an acquired image.</PARA><PARA>
Supported on:
8504
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqContrastMultiChannel.NumContrastChannels"><summary>Returns the number of channels available to be set or read.</summary></member><member name="M:Cognex.VisionPro.ICogAcqContrastMultiChannel.GetContrastMultiChannel(System.Int32)"><param name="index"><PARA>The index of the image channel.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt; 0 or <paramref name="Value" /> &gt; 1.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or <paramref name="index" /> &gt;= (number of camera channels).</para></exception><remarks><PARA>Sets or gets the <see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast">contrast</see>  level of a particular channel..</PARA><PARA>You can use <see cref="T:Cognex.VisionPro.CogAcqContrast" />.<see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast" /> to set the contrast of all channels to the same value.</PARA><DEFAULT>0.5</DEFAULT></remarks><summary>Access the contrast level of a particular channel. Contrast values are in the range 0-1 inclusive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the contrast is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqContrastMultiChannel_ContrastMultiChannel--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetContrastMultiChannel" /></li></ul></event></member><member name="M:Cognex.VisionPro.ICogAcqContrastMultiChannel.SetContrastMultiChannel(System.Int32,System.Double)"><param name="index"><PARA>The index of the image channel.</PARA></param><param name="value"></param><remarks><PARA>Sets or gets the <see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast">contrast</see>  level of a particular channel..</PARA><PARA>You can use <see cref="T:Cognex.VisionPro.CogAcqContrast" />.<see cref="P:Cognex.VisionPro.ICogAcqContrast.Contrast" /> to set the contrast of all channels to the same value.</PARA><DEFAULT>0.5</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="value" /> is &lt; 0 or <paramref name="value" /> &gt; 1.0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; 0 or <paramref name="index" /> &gt;= (number of camera channels).</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the contrast is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqContrastMultiChannel_ContrastMultiChannel--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetContrastMultiChannel" /></li></ul></event><summary>Access the contrast level of a particular channel. Contrast values are in the range 0-1 inclusive.</summary></member><member name="T:Cognex.VisionPro.ICogAcqDigitalCameraGain"><summary>Interface for controlling the gain on a digital camera.</summary><remarks><PARA>Interface for controlling the gain on a digital camera.</PARA><PARA>
Supported on:
8120/CVM11
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqDigitalCameraGain.DigitalHighGainSelected"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the gain selection changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqDigitalCamera_HighGainSelected--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfDigitalHighGainSelected" /></li></ul></event><remarks><PARA>Sets or gets the camera's analog/digital (A/D) gain setting.</PARA><PARA>Not all FIFOs support this property. Check whether the FIFO supports it, as in the example, before using this property.</PARA><PARA>The gain can be either high (True) or low (False).</PARA><PARA>Some digital cameras provide only manual gain control by means of a physical switch
or a dial in the camera. However, some digital cameras support gain selection by means of a control line.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Reads or sets whether using high A/D gain.</summary><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Dalsa DLS SP-11 2048x2048";
	ICogAcqDigitalCameraGain digitalCameraGainParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	digitalCameraGainParams = myAcqFifo.OwnedDigitalCameraGainParams ;
	if (digitalCameraGainParams != null)
		digitalCameraGainParams.DigitalHighGainSelected = true;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Dalsa DLS SP-11 2048x2048"
    Dim digitalCameraGainParams As Cognex.VisionPro.ICogAcqDigitalCameraGain

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    digitalCameraGainParams = myAcqFifo.OwnedDigitalCameraGainParams 

    If Not digitalCameraGainParams Is Nothing Then
        digitalCameraGainParams.DigitalHighGainSelected = True
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqExposure"><remarks><PARA>Interface for controlling exposure time for an <see cref="T:Cognex.VisionPro.CogAcqFifo" />.
For strobed acquisitions, this value is the duration of the strobe pulse.</PARA><PARA>
Supported on:
8100D,
8100L,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504
8600
</PARA></remarks><summary>Interface for controlling exposure time for an acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqExposure.MinExposure"><remarks><PARA>Minimum exposure time in milliseconds.</PARA></remarks><summary>Minimum exposure time in milliseconds.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The exposure time is &lt; <see cref="P:Cognex.VisionPro.ICogAcqExposure.MinExposure" />.</para></exception></member><member name="P:Cognex.VisionPro.ICogAcqExposure.Exposure"><summary>Reads or sets the exposure time in milliseconds. The special value of zero indicates to use the smallest supported time.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The exposure time is &lt; <see cref="P:Cognex.VisionPro.ICogAcqExposure.MinExposure" />.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the exposure changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqExposure_Exposure--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfExposure" /></li></ul></event><remarks><PARA>Sets or gets the exposure time in milliseconds. The special value zero indicates to use the shortest time that the camera supports.</PARA><PARA>For strobed acquisitions, this value is the duration of the strobe pulse. To find the pulse
duration of your strobe, see the strobe light’s specifications. Note that this function is
used to let the acquisition software know the duration of the strobe pulse, not to set the
duration of the strobe pulse.</PARA><PARA>To determine the exposure time for <see cref="u:Acquisition.CDC_CMOS.Theory.CMOSCams">Cognex CDC cameras</see>, see <see cref="u:Acquisition.CDC_CMOS.Walkthrough.ChooseCDCShutterMode">How to Choose a CDC Shutter Mode</see>.</PARA><PARA>
If you are using a FireWire (IEEE 1394DCAM) camera, the exposure value may be an absolute time in milliseconds or a
a register value. Check with the documentation supplied with your camera to determine whether your camera supports
absolute exposure times. In cases where the register value can be multiplied by a constant to obtain and absolute exposure,
the camera's CCF provides the necessary information to use absolute values. In all other case, you must use the raw register value.
</PARA><PARA>
You can use the <BOLD>DCAM Doctor</BOLD> application included in your VisionPro distribution to learn about the properties
of your FireWire camera. 
</PARA><!--


Step 3
- If absolute control of exposure is not supported, check how the exposure register is implemented in the camera. If the exposure value is of the form

actual_exposure(in secs) = exposure_reg_value * timebase 

then this timebase value can be encoded into the CCF meant for the camera. So if the timebase is part of the CCF, CVL will compute exposure_reg_value given the actual exposure passed in through CVL's exposure property.

E.g for a Basler A102f camera, the timebase value is 20e-6. When a user requests a 80e-6 exposure, this translates into a exposure_reg_value of 4. Note that all Basler and AVT cameras support exposure this way and one of the reasons we added support for this.

Also note that timebase value can only be encoded into CCFs that are meant for this camera. That means it is not part of Generic DCAM CCFs and therefore you will not get get automatic exposure control as you would get from a CCF meant specifically for this camera. This will bring us into Step 4.

Step 4
- For cameras that don't support absolute control and their exposure control doesn't fit into the form outlined above, CVL does not know how to translate the exposure set by the user into a camera exposure register value. In this case, CVL will set the actual value specified by the user into the camera exposure register. So for a camera exposure register that takes values from 0 to 100, the user will need to set values in the exposure to be something like 20.0 seconds to get a register value of 20. 
--><!-- No longer true with the addition of MinExposure.
<DEFAULT>20e-3 milliseconds</DEFAULT>
--></remarks><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqExposure exposureParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	exposureParams = myAcqFifo.OwnedExposureParams;
	if (exposureParams != null)
		exposureParams.Exposure = 0;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim exposureParams As Cognex.VisionPro.ICogAcqExposure

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    exposureParams = myAcqFifo.OwnedExposureParams

    If Not exposureParams Is Nothing Then
        exposureParams.Exposure = 0
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqInfo"><summary>Provides information about a completed acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqInfo.TimeStamp"><summary>The timestamp associated with the acquired image.</summary></member><member name="P:Cognex.VisionPro.ICogAcqInfo.TriggerNumber"><summary>The trigger sequence number of the completed acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqInfo.Ticket"><summary>The actual ticket of the completed acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqInfo.RequestedTicket"><summary>The ticket of an outstanding acquisition.</summary></member><member name="T:Cognex.VisionPro.ICogAcqFifo"><summary>An acquisition fifo.</summary><remarks><PARA>Interface for controlling an acquisition FIFO.</PARA><PARA>To learn how image acquisition works in VisionPro, see <see cref="u:Acquisition.General.Theory.AcqInVisionPro">Acquisition in VisionPro</see>.</PARA><PARA>Each acquisition FIFO has
	<see cref="u:Acquisition.General.Theory.AcqInVisionPro" cgnxAnchor="acquisition_fifo_properties">additional properties</see>
	
	(such as
		<see cref="T:Cognex.VisionPro.ICogAcqBrightness" />,
		<see cref="T:Cognex.VisionPro.ICogAcqContrast" />,
		and <see cref="T:Cognex.VisionPro.ICogAcqExposure" />)
	implemented as interfaces.
	To access these interfaces, use the <BOLD>Owned...</BOLD> getters
		(<see cref="T:Cognex.VisionPro.ICogAcqFifo.OwnedBrightnessParams" />,
		<see cref="T:Cognex.VisionPro.ICogAcqFifo.OwnedContrastParams" />,
		<see cref="T:Cognex.VisionPro.ICogAcqFifo.OwnedExposureParams" />).
</PARA><PARA>See  <see cref="u:Acquisition.General.CodeWalkthrough.ChangeAcqFifoProps">How to Change CogAcqFifo Properties</see>  for examples of how to obtain an acquisition property interface from a FIFO and how to change it.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedProfileCameraParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqProfileCamera" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedGigEVisionTransportParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqGigEVisionTransport" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedFieldCalibrationParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqFieldCalibration" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedRangeImageParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqRangeImage" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedCustomPropertiesParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqCustomProperties" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedTriggerFilterParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqTriggerFilter" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedTriggerParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqTrigger" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedSyncParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqSync" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedStrobePulseDurationParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqStrobePulseDuration" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedStrobeDelayParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqStrobeDelay" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedStrobeParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqStrobe" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedSimultaneousParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqSimultaneous" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedSettlingTimeParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqSettlingTime" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedSampleParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqSample" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedReadoutDirectionParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqReadoutDirection" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedROIParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqROI" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedOffsetClampParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqOffsetClamp" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedMasterClockFrequencyParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqMasterClockFrequency" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedLookupTableParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqLookupTable" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedLineScanParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqLineScan" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedLightParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqLight" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedHorizontalAdjustmentParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqHorizontalAdjustment" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqHardwareImagePool" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedWhiteBalanceParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqWhiteBalance" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedExposureParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqExposure" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedDigitalCameraGainParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqDigitalCameraGain" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedContrastMultiChannelParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqContrastMultiChannel" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedContrastParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqContrast" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedChargeTransferIntervalParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqChargeTransferInterval" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedCameraCalibrationParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqCameraCalibration" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedBrightnessMultiChannelParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqBrightnessMultiChannel" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OwnedBrightnessParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcqBrightness" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.Owned1394DCAMParams"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogAcq1394DCAM" /> interface for a FIFO if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.UserData"><summary>Gets a CogDictionary object that can be used to store application-specific information for this acquisition fifo. Internal use only.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_AutoPrepareEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAutoPrepareEnabled" /></li></ul></event><summary>Whether a fifo is automatically prepared after a property is changed. Default is true.</summary><remarks><PARA>Specifies whether the acquisition FIFO is automatically <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare">prepared</see> after a property changes.</PARA><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts"><summary>Number of physical camera ports available for this acquisition fifo.</summary><remarks><PARA>Returns the number of physical camera ports available for this acquisition FIFO.</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /> returns the number of camera ports available for connecting cameras of the same type as the video format you specified when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">created the FIFO</see>. Camera port numbering starts at zero. The highest camera port number is one less than <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" />. </PARA><PARA>Refer to the manual for the frame grabber you are using for information on how software port numbers map to the physical ports on your hardware.</PARA><PARA>Compare this function with 
		<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
	</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.VideoFormat"><summary>Video Format associated with this acquisition fifo.</summary><remarks><PARA>Returns the <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats">video format</see> associated with this acquisition FIFO. You specify the video format when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">create an acquisition FIFO</see>.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.FrameGrabber"><summary>Frame grabber associated with this acquisition fifo.</summary><remarks><PARA>Returns the <see cref="T:Cognex.VisionPro.CogFrameGrabber" /> associated with this acquisition FIFO.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.CameraPort"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  Port &lt; 0 or Port &gt;= <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /></para></exception><remarks><PARA>Sets or gets the camera port number that this acquisition FIFO is attached to. You specify the camera port when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">create an acquisition FIFO</see>.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /> to get the number of available camera ports. Port numbering starts at zero.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the camera port changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_CameraPort--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCameraPort" /></li></ul></event><summary>Camera port number which this fifo is attached to.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.Timeout"><remarks><PARA>Sets or gets the timeout period in milliseconds used when calling <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.
The timeout period is typically used for handling the case of triggers that didn't occur.</PARA><DEFAULT>10000 milliseconds</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the timeout period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_Timeout--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTimeout" /></li></ul></event><summary>Read or set the timeout in milliseconds used when calling Acquire or CompleteAcquire (typically used for handling the case of triggers that didn't occur).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is &lt;= 0.</para></exception></member><member name="P:Cognex.VisionPro.ICogAcqFifo.OutputPixelFormat"><summary>The desired pixel format for images acquired with this fifo.  A conversion will be performed if different from AcquiredPixelFormat.</summary><remarks><para>
    		Use this property to specify the <see cref="T:Cognex.VisionPro.CogImagePixelFormatConstants">pixel format</see>
    		that <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> returns. <see cref="M:Cognex.VisionPro.ICogAcqFifo.AcquiredPixelFormat" />
    		returns the pixel format of the image that the camera is acquiring. If the two values don't match,
    		VisionPro converts the acquired image to <see cref="P:Cognex.VisionPro.ICogAcqFifo.OutputPixelFormat" />.
    	</para></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.TimeoutEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the timeout period is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_TimeoutEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTimeoutEnabled" /></li></ul></event><remarks><PARA>Sets or gets whether the <see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> is used.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Read or set whether the timeout value is used.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFifo.CoordinateSpaceTree"><summary>Reads or sets a custom space tree that will be copied into all images acquired from this acquisition fifo.  The tree provides advanced functions for managing coordinate spaces.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the coordinate space tree changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_CoordinateSpaceTree--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfCoordinateSpaceTree" /></li></ul></event><remarks><PARA>Sets or gets the tree of all named coordinate spaces for images acquired from this acquisition FIFO.  
						The <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> provides advanced functions for managing coordinate spaces.</PARA><PARA>The coordinate space tree is deep-copied into the acquired <see cref="T:Cognex.VisionPro.CogImage" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFifo.SelectedSpaceName"><remarks><PARA>Sets or gets the selected <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> that is applied to each image returned from <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><PARA>The value of this property is ignored when this <see cref="T:Cognex.VisionPro.ICogAcqFifo" /> is used to acquire a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</PARA><DEFAULT>The default space name is "@".</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected coordinate space changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcq_SelectedSpaceName--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSelectedSpaceName" /></li></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="val" /> is not a valid space name.</para></exception><summary>Read or set the selected space name that is applied to each image returned from Acquire or CompleteAcquire.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFifo.AcquiredPixelFormat"><summary>The <see cref="T:Cognex.VisionPro.CogPixelFormatConstants">pixel format</see> of the image as the camera acquires them.</summary><remarks><para>
    		This method returns the <see cref="T:Cognex.VisionPro.CogImagePixelFormatConstants">pixel format</see>
    		of the images that the camera is acquiring. Use <see cref="P:Cognex.VisionPro.ICogAcqFifo.OutputPixelFormat" />
    		to specify pixel format of the image that <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> returns.
    		If that value that this method returns does not match <see cref="P:Cognex.VisionPro.ICogAcqFifo.OutputPixelFormat" />,
    		VisionPro converts the acquired image to <see cref="P:Cognex.VisionPro.ICogAcqFifo.OutputPixelFormat" />.
    	</para></remarks></member><member name="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)"><param name="triggerNumber"><PARA>A trigger sequence number. </PARA></param><event cref="E:Cognex.VisionPro.ICogAcqFifo.Complete"><para>
		The acquisition request completed, possibly unsuccessfully.
		</para></event><event cref="E:Cognex.VisionPro.ICogAcqFifo.MovePart"><para>
		Fired when the camera's field of view can be changed without affecting the acquired image.
		</para></event><event cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun"><para>
		Fired from an acquisition FIFO when a trigger is missed or an overrun occurs.
		</para></event><!--
	<ERROR_HRESULT NAME="E_CogAcq_ResourceAllocationTimeout">
		<LINK IFACE="ICogAcqResourceTimeout">Resource allocation timeout</LINK> expired.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException" cgnxHRESULT="E_CogAcq_Timeout"><para><see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> period expired.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para><see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerModel">Trigger model</see> is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Auto</see> or <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException" cgnxHRESULT="E_CogAcq_Overrun"><para>A trigger could not be serviced.</para></exception><!-- <ERROR_HRESULT NAME="E_CogAcq_Missed">The FIFO filled up. The size of the FIFO queue is 32 requests.</ERROR_HRESULT> --><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException" cgnxHRESULT="E_CogAcq_Abnormal"><para>The acquisition failed because of a fault in the acquisition hardware or because of some other unusual problem.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException" cgnxHRESULT="E_CogAcq_EncoderOverrun"><para>Encoder overrun.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException" cgnxHRESULT="E_CogAcq_InvalidROI"><para>The <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see> is not valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException" cgnxHRESULT="E_CogAcq_OtherFifoError"><para>There was an error in another FIFO in the same master/slave group.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTooManyStartsException" cgnxHRESULT="E_CogAcq_TooManyStarts"><para>No more acquisition requests can be made. The limit is 32 acquisition requests.</para></exception><summary>Acquire a new image.</summary><remarks><PARA>Acquires a new image. This method waits until an image is acquired. To start an acquisition without waiting, use <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> and <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.</PARA><!--
	<PARA>
		<see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)"/> can fire <see cref="T:Cognex.VisionPro.CogAcqCompleteEvent"/>.<LINK IFACE="ICogAcqCompleteEvent" FUNC="Complete" cref="Cognex.VisionPro.CogAcqCompleteEvent.Complete" assemblyName="Core" iface="CogAcqCompleteEvent" func="Complete"/>, <see cref="T:Cognex.VisionPro.CogAcqMovePartEvent"/>.<LINK IFACE="ICogAcqMovePartEvent" FUNC="MovePart" cref="Cognex.VisionPro.CogAcqMovePartEvent.MovePart" assemblyName="Core" iface="CogAcqMovePartEvent" func="MovePart"/>, and <see cref="T:Cognex.VisionPro.CogAcqOverrunEvent"/>.<LINK IFACE="ICogAcqOverrunEvent" FUNC="Overrun" cref="Cognex.VisionPro.CogAcqOverrunEvent.Overrun" assemblyName="Core" iface="CogAcqOverrunEvent" func="Overrun"/>.
</PARA>
--></remarks><returns><PARA>The acquired <see cref="T:Cognex.VisionPro.ICogImage">image</see>.</PARA></returns><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void AcquireDisplay () {
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	int	tNum;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	cogDisplay1.Image = myAcqFifo.Acquire(out tNum);
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub AcquireDisplay()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim tNum As Integer

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    CogDisplay1.Image = myAcqFifo.Acquire(tNum)
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire"><remarks><PARA>Starts a new acquisition without waiting for the acquisition for complete. The returned value is a ticket that you pass <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> to get the acquired image.</PARA></remarks><summary>Start a new acquisition. The returned value is a ticket that may be handed to CompleteAcquire.</summary><returns><PARA>A ticket that you can pass <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> to complete the acquisition.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para>Trigger model is auto or slave.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTooManyStartsException" cgnxHRESULT="E_CogAcq_TooManyStarts"><para>No more acquisition requests can be made. The limit is 32 acquisition requests.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

		private void AcquireDisplay () {
			const string VIDEO_FORMAT = "Sony XC75 640x480";
			int	acqTicket, completeTicket, triggerNumber, numPending, numReady;
			bool busy;

			myFrameGrabbers = new CogFrameGrabbers();
			myFrameGrabber = myFrameGrabbers[0];
			myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

			acqTicket = myAcqFifo.StartAcquire();

			do {
				myAcqFifo.GetFifoState(out numPending, out numReady, out busy);

				if (numReady &gt; 0)
					cogDisplay1.Image = myAcqFifo.CompleteAcquire(acqTicket, out completeTicket, out triggerNumber);
			} while (numReady &lt;= 0);
		}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub AcquireDisplay()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim acqTicket As Integer
    Dim numPending As Integer : Dim numReady As Integer : Dim busy As Boolean
    Dim completeTicket As Integer : Dim triggerNum As Integer

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    acqTicket = myAcqFifo.StartAcquire()
    Do
        myAcqFifo.GetFifoState(numPending, numReady, busy)
    Loop Until numReady &gt; 0

    CogDisplay1.Image = myAcqFifo.CompleteAcquire(acqTicket, completeTicket, triggerNum)
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)"><param name="requestedTicket"><PARA>The ticket of an outstanding acquisition. This is usually a value returned by <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />. If this value is omitted or set to -1, the oldest outstanding acquisition is completed. <paramref name="requestedTicket" /> must be -1 for automatically triggered acquisitions.</PARA></param><param name="ticket"><PARA>The actual ticket of the completed acquisition. When <paramref name="requestedTicket" /> is not −1, this value is the same as <paramref name="requestedTicket" />.</PARA></param><param name="triggerNumber"><PARA>The trigger sequence number of the completed acquisition. You can compare this value with <paramref name="Trigger" /> value returned by <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> to see if there were missed triggers.</PARA></param><returns><PARA>The acquired <see cref="T:Cognex.VisionPro.ICogImage">image</see>.</PARA></returns><remarks><PARA>Completes the acquisition specified by the given ticket and returns the acquired image.  If <paramref name="ticket" /> is omitted, or set to -1, the oldest outstanding acquisition will be completed.</PARA><NOTE>
	If you are completing an automatically triggered acquisition (one for which <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> was not called),
	then you must  either omit the <paramref name="requestedTicket" /> argument or supply a value of -1. 
</NOTE><PARA>
Under some conditions, the VisionPro acquisition system may fire a
	<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
event when there is no completed acquisition available.

If you call <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />
when this happens, you will receive a timeout error, or possibly some other error. 
This happens primarily when you disable triggers and
	<see cref="M:Cognex.VisionPro.ICogAcqFifo.Flush" /> the FIFO (to stop acquisitions),
and the
		<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
event for the flushed image fires.

To avoid this situation, be sure
to call
<see cref="M:Cognex.VisionPro.ICogAcqFifo.GetFifoState(System.Int32@,System.Int32@,System.Boolean@)" />, 
to determine whether there really is an image pending.
</PARA><PARA><see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> can fire
		<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />,
		<see cref="E:Cognex.VisionPro.ICogAcqFifo.MovePart" />,
		and <see cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun" />.
</PARA></remarks><summary>Completes the acquisition specified by the given ticket and returns the acquired image.  If the ticket is omitted, or set to -1, the uncompleted acquire that was least recently started will be completed.</summary><!--
    <ERROR_HRESULT NAME="E_CogAcq_ResourceAllocationTimeout"><LINK IFACE="ICogAcqResourceTimeout">Resource allocation timeout</LINK> expired.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException" cgnxHRESULT="E_CogAcq_Timeout"><para><see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> period expired.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadTicketException" cgnxHRESULT="E_CogAcq_BadTicket"><para><paramref name="ticket" /> is −1 and there is no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />, or if there is no <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> for this <paramref name="ticket" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOldTicketException" cgnxHRESULT="E_CogAcq_OldTicket"><para>The image corresponding to <paramref name="ticket" /> has already been collected.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException" cgnxHRESULT="E_CogAcq_Overrun"><para>A trigger could not be serviced.</para></exception><!-- <ERROR_HRESULT NAME="E_CogAcq_Missed">The FIFO filled up. The size of the FIFO queue is 32 requests.</ERROR_HRESULT> --><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException" cgnxHRESULT="E_CogAcq_Abnormal"><para>The acquisition failed because of a fault in the acquisition hardware or because of some other unusual problem.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException" cgnxHRESULT="E_CogAcq_EncoderOverrun"><para>Encoder overrun.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException" cgnxHRESULT="E_CogAcq_InvalidROI"><para>The <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see> is not valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNoOutstandingStartsException" cgnxHRESULT="E_CogAcq_NoOutstandingStarts"><para><paramref name="ticket" /> was −1, but there were no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> requests</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException" cgnxHRESULT="E_CogAcq_OtherFifoError"><para>There was an error in another FIFO in the same master/slave group.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

		private void AcquireDisplay () {
			const string VIDEO_FORMAT = "Sony XC75 640x480";
			int	acqTicket, completeTicket, triggerNumber, numPending, numReady;
			bool busy;

			myFrameGrabbers = new CogFrameGrabbers();
			myFrameGrabber = myFrameGrabbers[0];
			myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

			acqTicket = myAcqFifo.StartAcquire();

			do {
				myAcqFifo.GetFifoState(out numPending, out numReady, out busy);

				if (numReady &gt; 0)
					cogDisplay1.Image = myAcqFifo.CompleteAcquire(acqTicket, out completeTicket, out triggerNumber);
			} while (numReady &lt;= 0);
		}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub AcquireDisplay()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim acqTicket As Integer
    Dim numPending As Integer : Dim numReady As Integer : Dim busy As Boolean
    Dim completeTicket As Integer : Dim triggerNum As Integer

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    acqTicket = myAcqFifo.StartAcquire()
    Do
        myAcqFifo.GetFifoState(numPending, numReady, busy)
    Loop Until numReady &gt; 0

    CogDisplay1.Image = myAcqFifo.CompleteAcquire(acqTicket, completeTicket, triggerNum)
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquireEx(Cognex.VisionPro.ICogAcqInfo)"><param name="info">Contains information about the completed acquisition.</param><!--
						<ERROR_HRESULT NAME="E_CogAcq_ResourceAllocationTimeout"><LINK IFACE="ICogAcqResourceTimeout">Resource allocation timeout</LINK> expired.</ERROR_HRESULT>
					--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqTimeoutException" cgnxHRESULT="E_CogAcq_Timeout"><para><see cref="P:Cognex.VisionPro.ICogAcqFifo.Timeout" /> period expired.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadTicketException" cgnxHRESULT="E_CogAcq_BadTicket"><para><paramref name="Ticket" /> is −1 and there is no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />, or if there is no <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> for this <paramref name="Ticket" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOldTicketException" cgnxHRESULT="E_CogAcq_OldTicket"><para>The image corresponding to <paramref name="Ticket" /> has already been collected.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOverrunException" cgnxHRESULT="E_CogAcq_Overrun"><para>A trigger could not be serviced.</para></exception><!-- <ERROR_HRESULT NAME="E_CogAcq_Missed">The FIFO filled up. The size of the FIFO queue is 32 requests.</ERROR_HRESULT> --><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqAbnormalException" cgnxHRESULT="E_CogAcq_Abnormal"><para>The acquisition failed because of a fault in the acquisition hardware or because of some other unusual problem.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqEncoderOverrunException" cgnxHRESULT="E_CogAcq_EncoderOverrun"><para>Encoder overrun.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqInvalidROIException" cgnxHRESULT="E_CogAcq_InvalidROI"><para>The <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see> is not valid.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNoOutstandingStartsException" cgnxHRESULT="E_CogAcq_NoOutstandingStarts"><para><paramref name="Ticket" /> was −1, but there were no outstanding <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> requests</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqOtherFifoErrorException" cgnxHRESULT="E_CogAcq_OtherFifoError"><para>There was an error in another FIFO in the same master/slave group.</para></exception><returns><PARA>The acquired <see cref="T:Cognex.VisionPro.ICogImage">image</see>.</PARA></returns><summary>Completes the acquisition specified by the requested ticket and returns the acquired image.  This method is the same as <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />  but passes and returns its results in an <see cref="T:Cognex.VisionPro.ICogAcqInfo" />.</summary><remarks><PARA>Completes the acquisition specified by the requested ticket and returns the acquired image. This method is the same as <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" /> but passes and returns its results in an <see cref="M:Cognex.VisionPro.ICogAcqInfo" />.</PARA><NOTE>
			If you are completing an automatically triggered acquisition (one for which <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> was not called),
			then you must either omit the <see cref="E:Cognex.VisionPro.CogAcqInfo.RequestedTicket" /> property of the <paramref name="info" /> argument or supply a value of -1. 
		</NOTE><PARA>
		Under some conditions, the VisionPro acquisition system may fire a
			<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
		event when there is no completed acquisition available.

		If you call <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquireEx(Cognex.VisionPro.ICogAcqInfo)" />
		when this happens, you will receive a timeout error, or possibly some other error. 
		This happens primarily when you disable triggers and
			<see cref="M:Cognex.VisionPro.ICogAcqFifo.Flush" /> the FIFO (to stop acquisitions),
		and the
				<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />
		event for the flushed image fires.

		To avoid this situation, be sure
		to call
		<see cref="M:Cognex.VisionPro.ICogAcqFifo.GetFifoState(System.Int32@,System.Int32@,System.Boolean@)" />, 
		to determine whether there really is an image pending.
		</PARA><PARA><see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquireEx(Cognex.VisionPro.ICogAcqInfo)" /> can fire
				<see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" />,
				<see cref="E:Cognex.VisionPro.ICogAcqFifo.MovePart" />,
				and <see cref="E:Cognex.VisionPro.ICogAcqFifo.Overrun" />.
		</PARA></remarks><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

             private void AcquireDisplay () {
                    const string VIDEO_FORMAT = "Sony XC75 640x480";
                    int   numPending, numReady;
					CogAcqInfo info = new CogAcqInfo();
                    bool busy;

                    myFrameGrabbers = new CogFrameGrabbers();
                    myFrameGrabber = myFrameGrabbers[0];
                    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

                    info.RequestedTicket = myAcqFifo.StartAcquire();

                    do {
                           myAcqFifo.GetFifoState(out numPending, out numReady, out busy);

                           if (numReady &gt; 0)
                                 cogDisplay1.Image = myAcqFifo.CompleteAcquireEx(info);
                    } while (numReady &lt;= 0);
             }
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub AcquireDisplay()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim info As New CogAcqInfo
    Dim numPending As Integer : Dim numReady As Integer : Dim busy As Boolean

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    info.RequestedTicket = myAcqFifo.StartAcquire()
    Do
        myAcqFifo.GetFifoState(numPending, numReady, busy)
    Loop Until numReady &gt; 0

    CogDisplay1.Image = myAcqFifo.CompleteAcquireEx(info)
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqFifo.Flush"><summary>Flush all outstanding queued acquisitions.</summary><remarks><PARA>Flushes all outstanding acquisitions.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogAcqFifo.Flushed"><para>
		Fires when the acquisition FIFO is flushed. 
		</para></event></member><member name="M:Cognex.VisionPro.ICogAcqFifo.GetFifoState(System.Int32@,System.Int32@,System.Boolean@)"><param name="numPending"><PARA>The number of acquisitions in the pending state. This is the number of
acquisitions requested by <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> for which acquisition has not started. To achieve frame
rate acquisition in manual trigger mode, the FIFO must always have one or more
pending acquisitions.</PARA></param><param name="numReady"><PARA>The number of acquisition requests ready to be <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)">completed</see>.</PARA></param><param name="busy"><PARA>True if the oldest outstanding acquisition is waiting for a trigger signal or is
acquiring an image. For master/slave acquisitions, it becomes true only after the master
and all slaves are ready for acquisition.</PARA></param><remarks><PARA>Returns the current  state of the acquisition FIFO.</PARA></remarks><summary>Returns the instantaneous state of the fifo.</summary><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

		private void AcquireDisplay () {
			const string VIDEO_FORMAT = "Sony XC75 640x480";
			int	acqTicket, completeTicket, triggerNumber, numPending, numReady;
			bool busy;

			myFrameGrabbers = new CogFrameGrabbers();
			myFrameGrabber = myFrameGrabbers[0];
			myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

			acqTicket = myAcqFifo.StartAcquire();

			do {
				myAcqFifo.GetFifoState(out numPending, out numReady, out busy);

				if (numReady &gt; 0)
					cogDisplay1.Image = myAcqFifo.CompleteAcquire(acqTicket, out completeTicket, out triggerNumber);
			} while (numReady &lt;= 0);
		}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub AcquireDisplay()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim acqTicket As Integer
    Dim numPending As Integer : Dim numReady As Integer : Dim busy As Boolean
    Dim completeTicket As Integer : Dim triggerNum As Integer

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    acqTicket = myAcqFifo.StartAcquire()
    Do
        myAcqFifo.GetFifoState(numPending, numReady, busy)
    Loop Until numReady &gt; 0

    CogDisplay1.Image = myAcqFifo.CompleteAcquire(acqTicket, completeTicket, triggerNum)
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqFifo.Prepare"><remarks><PARA>Prepare the acquisition hardware so that the FIFO is ready to accept triggers immediately.</PARA><PARA>When <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> is True (the default), the acquisition system automatically calls <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare" /> when any property changes. In most cases you do not need to use <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare" /> yourself.</PARA><PARA>If you are changing many properties at once, you can set <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> to False, change all the properties, and call <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare" /> to set up the hardware for all the properties.</PARA></remarks><summary>Prepare the fifo so it is ready to start taking triggers immediately.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFifo.Connect(Cognex.VisionPro.ICogFrameGrabber)"><param name="fg">n/a</param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFifo.GetInternal(System.Double@,System.Int32)"><param name="val">n/a</param><param name="select">n/a</param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFifo.SetInternal(System.Double,System.Int32)"><param name="val">n/a</param><param name="select">n/a</param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFifo.CreateEventSink(System.String)"><param name="progIDOrClassID"><PARA>A ProgID or ClassID that identifies the type of object to create. </PARA></param><returns><PARA>The object that was created.</PARA></returns><remarks><PARA>Create an object in the event thread of this CogAcqFifo. This allows single-threaded objects to sink acquisition events efficiently.</PARA><PARA>
This CogAcqFifo's event thread runs at a high priority, which means that the event 
handler you implement in the specified class will also run at a high priority. You should 
take care to limit the amount of processing time required to service events.
</PARA><PARA>
This function creates an object within the apartment of the acquisition FIFO's
event thread but it does not actually connect the FIFO events to the
object. In Visual Basic events are connected by assigning the FIFO  to
a <BOLD> WithEvents</BOLD> variable declared in the class that was created. 
For example if your event sink class (named  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="MyInspection" />
				--><see cref="T:Cognex.VisionPro.MyInspection" />) contains 
the following code:
</PARA><CODE LANGUAGE="VB">
  Public WithEvents AcqComplete As CogAcqCompleteEvent

  Private Sub AcqComplete_Complete(ByVal Ticket As Long, ByVal TriggerNumber As Long)
	<COMMENTLINE><ITALIC>Run the inspection now</ITALIC></COMMENTLINE>
  End Sub
</CODE><PARA>
You would use the code shown below to create the event sink class and 
connect it to the acquisition FIFO event source when your program starts:
</PARA><CODE LANGUAGE="VB">
  Dim FGs As New CogFrameGrabbers, AcqFifo As CogAcqFifo
  Set AcqFifo = FGs(0).CreateAcqFifo("Sony XC-75 640x480 IntDrv CCF")
  
  Dim Inspection As MyInspection
  Set Inspection = AcqFifo.CreateEventSink("MyProject.MyInspection")
  Set Inspection.AcqComplete = AcqFifo
   </CODE><NOTE>
If you wish to use this function to implement true multithreading in a Visual Basic 6 application, 
the object specified by <paramref name="progIDOrClassID" /> must be
defined in an ActiveX DLL project.
</NOTE></remarks><summary>Create an object in the event thread of this fifo. This allows single-threaded objects to sink acquisition events efficiently.</summary></member><member name="E:Cognex.VisionPro.ICogAcqFifo.Overrun"><summary>Occurs after a FIFO has missed a trigger.  This usually means that triggers are coming in too fast to be processed.</summary><remarks><PARA>Event fired from an <see cref="T:Cognex.VisionPro.CogAcqFifo" /> when an overrun occurs.</PARA><PARA>The acquisition failed because even though the
acquisition system was able to obtain the required
resources, it was unable to start the acquisition in a timely
fashion.</PARA><PARA>
Supported on:
8100D,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504

</PARA></remarks></member><member name="E:Cognex.VisionPro.ICogAcqFifo.Complete"><summary>Occurs after a FIFO has completed an acquisition, perhaps unsuccessfully.  If the acquisition was unsuccessful, Acquire or CompleteAcquire will return an error.  The acquisition may have been initiated by a call to Acquire, a call to StartAcquire, or by the acquisition system if you are using auto-trigger mode.</summary></member><member name="E:Cognex.VisionPro.ICogAcqFifo.MovePart"><summary>Occurs when an acquisition FIFO determines that the camera's field of view can be changed without affecting the acquired image.</summary><remarks><PARA>Event fired from an <see cref="T:Cognex.VisionPro.ICogAcqFifo">acquisition FIFO</see> when the camera's field of view can be changed without affecting the acquired image.</PARA><PARA>With interlaced video formats an acquisition enters the movable state during the acquisition's next-to-last
vertical blank interval. With an RS170 camera, for example, an acquisition would enter
the movable state 17 ms (one field time) before it enters the <see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" /> state.
</PARA><PARA>Some frame grabbers, such as the MVS-8100L and the MVS-8100M, cannot
detect the next-to-last vertical blank interval. When using one
of these frame grabbers, the acquisition enters the movable and complete states at the
same time. In such cases, the move-part event always fires first, followed
immediately by the <see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" /> event.</PARA><PARA>
Supported on:
8100D,
8100L,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504,
8601, 8602

</PARA></remarks></member><member name="E:Cognex.VisionPro.ICogAcqFifo.Flushed"><summary>Occurs after an acquisition FIFO is flushed.</summary></member><member name="T:Cognex.VisionPro.ICogAcqHorizontalAdjustment"><summary>Interface which provides adjustment of horizontal timing.</summary></member><member name="P:Cognex.VisionPro.ICogAcqHorizontalAdjustment.HorizontalAdjustment"><summary>Reads or sets the horizontal adjustment value in pixels.</summary></member><member name="T:Cognex.VisionPro.ICogAcqLight"><summary>Interface used to control lighting for an acquisition.</summary><remarks><PARA>Interface used to control lighting devices, such as the Cognex acuLight, for an <see cref="T:Cognex.VisionPro.CogAcqFifo" />. These lighting devices are typically used for optical character recognition (OCR). </PARA><PARA>The acuLight device consists of two arrays of lights. One array is called the "bright field" and the other array is called the "dark field."</PARA><PARA>The interface supports setting up one or two lighting devices per camera: the primary light and the auxiliary light. The auxiliary light is controlled by methods whose names begin with Aux.</PARA><PARA>If you are using a Cognex MVS-8120 frame grabber with a light control board, you will need to notes this in the <CONSOLE>VisionPro.ini</CONSOLE> file in the <CONSOLE>Windows</CONSOLE> or <CONSOLE>WINNT</CONSOLE> directory. <CONSOLE>VisionPro.ini</CONSOLE> contains the instructions the tell you how to do this.</PARA><NOTE>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</NOTE><PARA>
Supported on:
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqLight.AuxLightBrightFieldPowerRatio"><remarks><PARA>Sets or gets the primary light's bright field power ratio which is the fraction of the <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower">light power</see> that is allocated to the bright field. The value ranges from 0.0 (no power to the bright field) to 1.0 (all power to the bright field).</PARA><DEFAULT>0</DEFAULT></remarks><summary>Reads or sets the bright field power ratio on the auxiliary port.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary power ratio changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightBrightFieldPowerRatio--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightBrightFieldPowerRatio" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception></member><member name="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception><remarks><PARA>Sets or gets the auxiliary light's power level. The light power can range from 0.0 (no power) to 1.0 (full power). The light power is split between the light field and the dark field according to the level set by <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightBrightFieldPowerRatio" />.</PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>0.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary light power changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightPower--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightPower" /></li></ul></event><summary>Reads or sets the power on the auxiliary port.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLight.AuxLightPort"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt;= 0 or <paramref name="val" /> is &gt;= <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" />.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary light port is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightPower--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightPower" /></li></ul></event><remarks><PARA>Sets or gets the auxiliary light's port number. You can use <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" /> to get the total number of camera ports.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Reads or sets the auxiliary port number.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the auxiliary light is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_AuxLightEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAuxLightEnabled" /></li></ul></event><summary>Reads or sets whether the auxiliary light is enabled.</summary><remarks><PARA>Sets or gets whether the auxiliary light is enabled.</PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqLight.LightDelay"><remarks><PARA>Sets or gets the delay in milliseconds between setting the light power and acquiring an image.</PARA><DEFAULT>30 milliseconds</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light delay changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightDelay--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightDelay" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><summary>Reads or sets the delay in milliseconds between setting the light power and performing the image capture.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLight.LightBrightFieldPowerRatio"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light power ratio changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightBrightFieldPowerRatio--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightBrightFieldPowerRatio" /></li></ul></event><summary>Reads or sets the bright field power ratio.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception><remarks><PARA>Sets or gets the primary light's bright field power ratio which is the fraction of the <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower">light power</see> that is allocated to the bright field. The value ranges from 0.0 (no power to the bright field) to 1.0 (all power to the bright field). </PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqLight.LightPower"><summary>Reads or sets the light power.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light power changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightPower--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightPower" /></li></ul></event><remarks><PARA>Sets or gets the primary light's power level. The light power can range from 0.0 (no power) to 1.0 (full power). The light power is split between the light field and the dark field according to the level set by <see cref="P:Cognex.VisionPro.ICogAcqLight.LightBrightFieldPowerRatio" /></PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>0.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0 or <paramref name="val" /> is &gt; 1.</para></exception></member><member name="P:Cognex.VisionPro.ICogAcqLight.LightEnabled"><remarks><PARA>Sets or gets whether the primary light is enabled.</PARA><PARA>Setting <see cref="P:Cognex.VisionPro.ICogAcqLight.LightEnabled" /> to False does not cut power to the light device.
To cut power to the light device, set <see cref="P:Cognex.VisionPro.ICogAcqLight.LightPower" /> and <see cref="P:Cognex.VisionPro.ICogAcqLight.AuxLightPower" />
to 0.0 and acquire an image.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the light is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLight_LightEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfLightEnabled" /></li></ul></event><summary>Reads or sets whether the light is enabled.</summary></member><member name="T:Cognex.VisionPro.ICogAcqLineScan"><remarks><PARA>Interface used to control properties of a line scan camera.</PARA><PARA>
Supported on:
8120/CVM11
8600 (partial support; see individual properties and methods)
</PARA></remarks><summary>Interface used to control properties of a line scan camera.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.MaximumMotionSpeed"><summary>The maximum speed of motion, in mm/sec, before encoder overrun errors begin to occur.</summary><remarks>This value is computed from the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MaximumLineFrequency" /> and the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerLine" /> values.</remarks><value>The maximum motion speed, measured in mm/sec.</value></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.MaximumLineFrequency"><summary>The maximum frequency at which lines can be acquired before encoder overrun errors begin to occur.</summary><value>The maximum frequency, measured in camera lines per second.</value><remarks>This value will change with different encoder and camera settings, particularly exposure.  It may also change between camera models and firmware versions.  Finally, it is an approximate limit, and the exact frequency at which overruns occur will vary slightly based on the data content of the image.</remarks></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.LineFrequency"><value>The frequency at which lines are being acquired from the camera, in lines/sec.</value><summary>The frequency at which lines are currently being acquired from the camera.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerLine"><remarks><para>This read-only distance is a computed value.  If the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoder</see> or <see cref="T:Cognex.VisionPro.CogMotionInputConstants">SimulatedEncoder</see> the distance is computed using <see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" />, <see cref="P:Cognex.VisionPro.ICogAcqLineScan.EncoderResolution" />, and <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycle" />.</para><para>If the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see> the distance is a copy of <see cref="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedDistancePerLine" />.</para><para>If the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Legacy</see> the distance is undefined.</para><para>For a factory-calibrated DS1000 Series camera this distance is also equal to the <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.YScale" />, the distance between rows of the range image.</para></remarks><value>The distance, in mm, between lines acquired from the camera.</value><summary>The distance, in mm, between lines acquired from the camera.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedDistancePerLine"><summary>The expected distance, in mm, between lines acquired from the camera.</summary><remarks>This distance is used to calculate the frequency of the test encoder when the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see>.</remarks><value>Expected distance, in mm, between lines acquired from the camera.</value></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedMotionSpeed"><summary>The user-specified speed that the motion system is expected to operate at.</summary><value>Expected speed of the motion system in mm/sec.</value><remarks>This speed is used to calculate the frequency of the test encoder when the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">SimulatedEncoder</see> or <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see>.  This speed may differ from the actual instantaneous speed of the motion system.</remarks></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput"><exception cref="T:System.ArgumentOutOfRangeException">If you do not have a DS1000 series camera and the supplied mode is anything other than <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Legacy</see>.</exception><summary>The motion input for a linescan acquisition.  This value controls whether linescan acquisition is performed using a hardware encoder or the test encoder.</summary><value>The selected mode for a DS1000 series sensor linescan encoder, with the default value <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Encoderless</see>.  For any other type of image source, the only valid value is <see cref="T:Cognex.VisionPro.CogMotionInputConstants">Legacy</see>.</value></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.ProfileCameraAcquireDirection"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><remarks>This currently only applies to the DS1000.</remarks><value>The default value is <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LensToLaser</see>.</value><summary>The scene motion for the next image acquisition. If you are using a quadrature encoder, only motion in the specified direction will cause image data to be acquired. If you are using the test encoder or a single-channel encoder, then any motion will cause image data to be acquired, and all motion will be treated as if it were in the specified direction.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.ProfileCameraPositiveEncoderDirection"><remarks>This currently only applies to the DS1000 series.</remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>The scene motion that causes the encoder to generate positive-direction pulses. Set this value to <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LensToLaser</see> if motion in that direction generates positive encoder pulses; otherwise, set this value to <see cref="F:Cognex.VisionPro.CogProfileCameraDirectionConstants.LaserToLens">LaserToLens</see>.</summary><value>The default value is <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LensToLaser</see>.</value></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycleMax"><value>The maximum value can be applied to DistancePerCycle.</value><summary>Maximum DistancePerCycle value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycleMin"><summary>Minimum DistancePerCycle value allowed.</summary><value>The minimum value can be applied to DistancePerCycle.</value></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycle"><value>This currently only applies to the DS1000 series.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than DistancePerCycleMin or greater than DistancePerCycleMax.</exception><summary>Specifies the distance moved for each cycle of the encoder signal.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.IgnoreTooFastEncoder"><summary>Read or set whether isTooFastEncoder acqfailure can be generated due to a line overrun situation.  Default is true (line overruns will not be reported).</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.EncoderResolution"><summary>Controls the number of edges required for each encoder count.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.IgnoreBackwardsMotionBetweenAcquires"><summary>When true, any backwards motion after an acquisition will not delay the start of the next acquisition.</summary><remarks><para>
	    This property only applies when an acquisition is not in progress
	     (manual or semi-automatic trigger mode before <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> has been called).
	     Once <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> has been called, all backwards motion is accounted for regardless of the value of this property.
	     </para><para>
	     When this property is false, acquisition always begins at the encoder position where the previous acquired image completed; 
	     you cannot back up and re-acquire an image of the previous part.
	     When this property is true, acquisition begins at the current encoder position when <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> is called.  
	     This allows you to re-acquire an image of a part by first reversing the encoder, then calling <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" />.
	    </para><para>
	   Changes to this property take effect after the next acquisition.
	   This means if you want to be able to back up and re-acquire an image of a part, you must set the property to true before the first image is acquired.	    
	    </para></remarks></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.StartAcqOnEncoderCount"><summary>Sets the number of encoder counts to wait before acquisition starts.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.UseSingleChannel"><remarks><PARA>If UseSingleChannel is set to true, it might be  possible to connect only a single encoder channel as encoder input instead of using a quadrature dual channel type encoder. 
						The channel that is used depends upon the setting of <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive" />. 
						If <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive" /> is true, channel A is used. If false, channel B is used.</PARA><PARA>One advantage of using a single channel encoder input is in some cases it might be desirable to acquire without considering the direction of motion of the encoder. </PARA><PARA>This property applies only to the MVS-8600/8600e platform. Only the MVS-8600/8600e platform supports this function.</PARA><DEFAULT>The default value is false indicating both encoder channels A and B are considered for acquisition on platforms supporting this functionality.</DEFAULT></remarks><summary>Reads or sets whether only one channel of the encoder signal is used for acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.EncoderOffset"><summary>Used to calculate the encoder count at which line zero of the region of interest occurs.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the encoder offset changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_EncoderOffset--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderOffset" /></li></ul></event><remarks><PARA>Sets or gets the encoder position at which line zero of the region of interest occurs.
This offset is meaningful only for encoder-triggered acquisition.
Out of range values are clipped to the camera format size.</PARA><PARA>To specify the starting encoder count, you must also take into account the
start of the <see cref="T:Cognex.VisionPro.CogAcqROI" />. In the following examples
<CONSOLE>y0</CONSOLE> means the <paramref name="Y" /> parameter returned by <see cref="T:Cognex.VisionPro.CogAcqROI" />.<see cref="M:Cognex.VisionPro.ICogAcqROI.GetROIXYWidthHeight(System.Int32@,System.Int32@,System.Int32@,System.Int32@)" />.</PARA><PARA>For acquisitions in which the encoder count <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive">increases</see>, the starting encoder count is:</PARA><CODE>
startCount = (y0 * <see cref="M:Cognex.VisionPro.ICogAcqLineScan.GetStepsPerLine(System.Int32@,System.Int32@)">stepsPerLine</see>) + encoderOffset
</CODE><PARA>For acquisitions in which the encoder count <see cref="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive">decreases</see>, the starting encoder count is:</PARA><CODE>
startCount = (−y0 * <see cref="M:Cognex.VisionPro.ICogAcqLineScan.GetStepsPerLine(System.Int32@,System.Int32@)">stepsPerLine</see>) + encoderOffset
</CODE><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.EncoderPort"><remarks><PARA>Sets or gets the encoder port to use with this acquisition FIFO.</PARA><PARA>On some platforms the association between a camera port and an encoder port is
fixed: each encoder can trigger an acquisition to a subset of all the available
camera ports on each frame grabber. This means that the encoder port you specify
must be consistent with the camera port of the FIFO that this property is associated
with. See the documentation for the Cognex Video Module (CVM) that you are using for supported encoder/camera
port settings.</PARA><NOTE>Ignored on MVS-8600. The encoder port is the same as the camera port.</NOTE><DEFAULT>0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is less than zero or &gt;= <see cref="P:Cognex.VisionPro.ICogAcqLineScan.NumEncoderPorts" />.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The specified port is not compatible with the current <see cref="P:Cognex.VisionPro.ICogAcqFifo.CameraPort">camera port</see>.</para></exception><summary>Port for Encoder.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the encoder port changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_EncoderPort--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEncoderPort" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.NumEncoderPorts"><remarks><PARA>Gets the number of encoder ports available.</PARA></remarks><summary>Number of encoder ports available.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder"><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para>The trigger model is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><summary>Read or set whether triggering is from an encoder or from an external trigger.</summary><remarks><PARA>Sets or gets whether triggering is from an encoder or from an external trigger.
Encoder triggering is only valid for <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Auto</see> and 
<see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Semi</see>.
When the trigger model is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Manual</see>, you can set this property, but it is ignored.
</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqLineScan.ResetCounterOnHardwareTrigger" /> should be True when this property is True.</PARA><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when encoder triggering is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_TriggerFromEncoder--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerFromEncoder" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.ResetCounterOnHardwareTrigger"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_ResetCounterOnHardwareTrigger--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfResetCounterOnHardwareTrigger" /></li></ul></event><remarks><PARA>Reads or sets whether the encoder counter is reset when the FIFO gets a trigger signal from the frame grabber.</PARA><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>True</DEFAULT></remarks><summary>Reads or sets whether encoder counter is reset on a hardware trigger.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.CurrentEncoderCount"><remarks><PARA>The current value of the encoder.</PARA><PARA>
	The Cognex MVS-8600 does not provide an absolute encoder position counter.
	On that platform, this property returns the product of
	the number of the line being acquired and the
	steps per line
	encoder setting.
	This value may not be accurate if the
	encoder travels backwards during acquisition.
	If you are using  the
	<see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled">test encoder</see>
	the steps per line value is ignored, so this property returns the currently acquired line number.
	If there is no acquisition in progress, the value of this property is zero.
</PARA></remarks><summary>Current value of the encoder.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.AcquireDirectionPositive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the direction changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_AcquireDirectionPositive--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfAcquireDirectionPositive" /></li></ul></event><remarks><PARA>Set/get the current acquire direction. If true, the encoder needs to be travelling in the positive direction (i.e. increasing encoder values) for acquisition to begin.  If false, the encoder needs to be travelling in the negative direction (i.e. decreasing values) for acquisition to begin. Acqusition can be started either by the hardware means determined by <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> or a software command (with manual trigger model).</PARA><PARA>For platforms which support encoder-triggered acquisitions, the specified acquire direction is only enforced when</PARA><PARA>  - <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> is set to true,</PARA><PARA>  - there is a valid setting for <see cref="P:Cognex.VisionPro.ICogAcqLineScan.EncoderOffset" />, and,</PARA><PARA>  - the trigger model is not Manual.</PARA><PARA>Unlike <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderDirectionPositive" />, this method does not dictate whether the encoder count increments or decrements. The encoder's direction of travel determines that.</PARA><DEFAULT>The default value of direction is true.</DEFAULT></remarks><summary>Reads or sets whether the Acquire direction is positive.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderDirectionPositive"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the direction changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_TestEncoderDirectionPositive--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTestEncoderDirectionPositive" /></li></ul></event><summary>Reads or sets whether the test encoder direction is positive.</summary><remarks><PARA>Sets or gets whether the test encoder values increase (True) or decrease (False) during image acquisition.</PARA><NOTE>Ignored on MVS-8600.</NOTE><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled"><remarks><PARA>Sets or gets whether the test encoder on the CVM is used instead of the external encoder interface.</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderDirectionPositive" /> lets you specify whether the test encoder's counts increase or decrease. 
Use <see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" /> to set the steps per line for the test encoder.</PARA><PARA>
	There is no test encoder availble on Cognex MVS-8600 frame grabbers.
	On those frame grabbers,when the test encoder is enabled,  the hardware runs freely and acquires lines
	as fast as possible without using an encoder input, and the
	<see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" />
	setting is ignored.
	You can use a positive
	<see cref="P:Cognex.VisionPro.ICogAcqTriggerFilter.TriggerDelay" />
	to create a delay between the acquisition of each line.

</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the test encoder is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_TestEncoderEnabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTestEncoderEnabled" /></li></ul></event><summary>Reads or sets whether the test encoder is used instead of the external encoder interface.  This setting is superceded by the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" /> setting for hardware that supports MotionInput.</summary></member><member name="M:Cognex.VisionPro.ICogAcqLineScan.GetStepsPerLine(System.Int32@,System.Int32@)"><param name="stepsPerLine"><PARA>The number of encoder steps per line.</PARA></param><param name="step16thsPerLine"><PARA>The number fractional steps per line as 1/16th steps that can be
added to <paramref name="stepsPerLine" /> to make up a single line.</PARA></param><summary>Get the number of encoder steps per image line. The number of steps is StepsPerLine + Step16thsPerLine/16.</summary><remarks><PARA>Gets the number of encoder steps per image line. The number of steps is <paramref name="stepsPerLine" /> + <paramref name="step16thsPerLine" />/16.</PARA><NOTE><paramref name="steps16thsPerLine" /> is ignored on MVS-8600.</NOTE><DEFAULT><paramref name="stepsPerLine" />: 3 <HTMLPASS><BR /></HTMLPASS><paramref name="step16thsPerLine" />: 0</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)"><param name="stepsPerLine"><PARA>The number of encoder steps per line.</PARA></param><param name="step16thsPerLine"><PARA>The number fractional steps per line as 1/16th steps that can be
added to <paramref name="stepsPerLine" /> to make up a single line.</PARA></param><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the number of steps per line changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLineScan_StepsPerLine--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetStepsPerLine" /></li></ul></event><summary>Set the number of encoder steps per image line. The number of steps is StepsPerLine + Step16thsPerLine/16.</summary><remarks><PARA>Set the number of encoder steps per image line. The number of steps is <paramref name="stepsPerLine" /> + <paramref name="step16thsPerLine" />/16.</PARA><PARA>
When using the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled">test encoder</see> with the test line
scan camera ("Test LS 2048x2048"), the minimum steps per line you can use
without getting <see cref="T:Cognex.VisionPro.CogErrConstants">e_CogAcq_EncoderOverrun</see> errors is:</PARA><CODE>
minStepsPerLine = (width + xROI) / 64 + 2
</CODE><PARA>Where <CONSOLE>width</CONSOLE> is the width of the <see cref="T:Cognex.VisionPro.CogAcqROI" /> and <CONSOLE>xROI</CONSOLE> is the x-coordinate of the region
of interest. If <CONSOLE>xROI</CONSOLE> is zero, the smallest
value you can use with the test encoder without getting <see cref="T:Cognex.VisionPro.CogErrConstants">e_CogAcq_EncoderOverrun</see> errors
is 34 for 2048-pixel-wide images and 18 for 1024-pixel-wide images.</PARA><PARA>See <see cref="u:Acquisition.LineScan.Walkthrough.SetStepsPerLine">How to Set Steps per Line for Linescan Cameras</see> for additional information about choosing appropriate values.</PARA><NOTE><paramref name="steps16thsPerLine" /> is ignored on MVS-8600.</NOTE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="stepsPerLine" /> &lt; 1 or <paramref name="stepsPerLine" /> &gt; 4095 or <HTMLPASS><BR /></HTMLPASS><paramref name="step16thsPerLine" /> &lt; 0 or <paramref name="step16thsPerLine" /> &gt; 15
	</para></exception></member><member name="M:Cognex.VisionPro.ICogAcqLineScan.ResetCounter"><remarks><PARA>Resets the encoder counter.</PARA><PARA>
	The Cognex MVS-8600 does not provide an absolute encoder position counter.
	There is, however, a counter that keeps track of any backward encoder pulses
	that the hardware detects when the encoder is moving opposite to the expected
	acquisition direction. Acquisition will not begin until forward motion resets this counter.
	Calling this method clears the backward encoder pulse counter and causes
	acquisition to begin right away without waiting for compensating forward counts.
	
</PARA></remarks><summary>Reset encoder counter.</summary></member><member name="T:Cognex.VisionPro.ICogAcqLookupTable"><remarks><PARA>Interface to a lookup table for mapping pixel values of acquired images.</PARA><PARA>
Supported on:
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504
8600
</PARA></remarks><summary>Interface to a lookup table for mapping acquired images.</summary></member><member name="P:Cognex.VisionPro.ICogAcqLookupTable.NumLookupTables"><summary>Returns the number of lookup tables available to be set or read.</summary><remarks><PARA>Returns the number of lookup tables available to be set or read.</PARA><DEFAULT>Camera dependent</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ICogAcqLookupTable.GetLookupTable(System.Int32)"><param name="index"><PARA>The index of the lookup table. For cameras that support only one lookup table, this value should always be zero. For dual tap cameras, the index of the even field is zero, and the index of the odd field is 1.</PARA></param><remarks><PARA>Sets or gets lookup table values as an array.</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqLookupTable.NumLookupTables" /> determines how many lookup tables a camera supports. Lookup table numbering starts at zero. The <paramref name="index" /> for a camera that supports only one lookup table, then, would be 0.</PARA><PARA>For dual tap cameras that provide even- and odd-field lookup tables, lookup table 0 is the even field and lookup table 1 is the odd field.</PARA><DEFAULT>An identity table.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the lookup table is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLookupTable_LookupTable--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetLookupTable" /></li></ul></event><summary>Access the specified lookup table values as an array.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not of the proper size for the <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants">pixel depth</see> of this FIFO.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; zero or &gt; <see cref="P:Cognex.VisionPro.ICogAcqLookupTable.NumLookupTables" /> − 1.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
    const string VIDEO_FORMAT = "Sony XC75 640x480";
    ICogAcqLookupTable LUTParams;

    myFrameGrabbers = new CogFrameGrabbers();
    myFrameGrabber = myFrameGrabbers[0];
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
        Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

    LUTParams = myAcqFifo.OwnedLookupTableParams;

    if (LUTParams  != null) {
        byte[] inverseLut = LUTParams.GetLookupTable(0);

        for (int i = 0; i &lt;= 255; i++)
            inverseLut[i] = (byte) (255 - i);
            LUTParams.SetLookupTable(0, inverseLut);
      }
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
        Const VIDEO_FORMAT = "Sony XC75 640x480"
        Dim LUTParams As Cognex.VisionPro.ICogAcqLookupTable

        myFrameGrabbers = New CogFrameGrabbers
        myFrameGrabber = myFrameGrabbers.Item(0)
        myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

        LUTParams = myAcqFifo.OwnedLookupTableParams

        If Not LUTParams Is Nothing Then
            Dim i As Integer
            Dim inverseLut As Byte()
            inverseLut = LUTParams.GetLookupTable(0)
            For i = 0 To 255
                inverseLut(i) = 255 - i
            Next
            LUTParams.SetLookupTable(0, inverseLut)
        End If
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqLookupTable.SetLookupTable(System.Int32,System.Byte[])"><param name="index"><PARA>The index of the lookup table. For cameras that support only one lookup table, this value should always be zero. For dual tap cameras, the index of the even field is zero, and the index of the odd field is 1.</PARA></param><param name="value"></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="value" /> is not of the proper size for the <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants">pixel depth</see> of this FIFO.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" /> is &lt; zero or &gt; <see cref="P:Cognex.VisionPro.ICogAcqLookupTable.NumLookupTables" /> − 1.</para></exception><summary>Access the specified lookup table values as an array.</summary><remarks><PARA>Sets or gets lookup table values as an array.</PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqLookupTable.NumLookupTables" /> determines how many lookup tables a camera supports. Lookup table numbering starts at zero. The <paramref name="index" /> for a camera that supports only one lookup table, then, would be 0.</PARA><PARA>For dual tap cameras that provide even- and odd-field lookup tables, lookup table 0 is the even field and lookup table 1 is the odd field.</PARA><DEFAULT>An identity table.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the lookup table is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqLookupTable_LookupTable--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetLookupTable" /></li></ul></event><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
    const string VIDEO_FORMAT = "Sony XC75 640x480";
    ICogAcqLookupTable LUTParams;

    myFrameGrabbers = new CogFrameGrabbers();
    myFrameGrabber = myFrameGrabbers[0];
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
        Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

    LUTParams = myAcqFifo.OwnedLookupTableParams;

    if (LUTParams  != null) {
        byte[] inverseLut = LUTParams.GetLookupTable(0);

        for (int i = 0; i &lt;= 255; i++)
            inverseLut[i] = (byte) (255 - i);
            LUTParams.SetLookupTable(0, inverseLut);
      }
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
        Const VIDEO_FORMAT = "Sony XC75 640x480"
        Dim LUTParams As Cognex.VisionPro.ICogAcqLookupTable

        myFrameGrabbers = New CogFrameGrabbers
        myFrameGrabber = myFrameGrabbers.Item(0)
        myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

        LUTParams = myAcqFifo.OwnedLookupTableParams

        If Not LUTParams Is Nothing Then
            Dim i As Integer
            Dim inverseLut As Byte()
            inverseLut = LUTParams.GetLookupTable(0)
            For i = 0 To 255
                inverseLut(i) = 255 - i
            Next
            LUTParams.SetLookupTable(0, inverseLut)
        End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqMasterClockFrequency"><summary>Interface for controlling the master clock frequency.</summary><remarks><PARA>Interface for controlling the master clock frequency.</PARA><PARA>
Supported on:
8120/CVM11
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqMasterClockFrequency.MasterClockFrequency"><summary>Reads or sets the master clock frequency.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the clock frequency changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqMasterClockFrequency_MasterClockFrequency--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMasterClockFrequency" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 5 or &gt; 40.</para></exception><remarks><PARA>Sets or gets the master clock frequency in MHz. This is the clock signal sent from the CVM to the camera. This value indirectly controls the acquisition rate.</PARA><DEFAULT>Hardware dependent.</DEFAULT></remarks></member><member name="T:Cognex.VisionPro.ICogAcqOffsetClamp"><summary>Interface for controlling how offset and clamping is performed.</summary><remarks><PARA>Interface for controlling how offset and clamping is performed.</PARA><PARA>
Supported on:
8100D
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqOffsetClamp.OffsetClampMode"><summary>Get or set the mode for clamping and offset.</summary><remarks><PARA>Sets or gets the acquisition FIFO's clamping and offset mode.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogAcqOffsetClampConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the clamping mode changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqOffsetClamp_OffsetClamp--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfOffsetClamp" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is not in <see cref="T:Cognex.VisionPro.CogAcqOffsetClampConstants" />.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Cognex CDC-50-33G 640x480";
	ICogAcqOffsetClamp offsetClampParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	offsetClampParams = myAcqFifo.OwnedOffsetClampParams;
	if (offsetClampParams != null)
		offsetClampParams.OffsetClampMode = CogAcqOffsetClampConstants.Both;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Cognex CDC-50-33G 640x480"
    Dim offsetClampParams As Cognex.VisionPro.ICogAcqOffsetClamp

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    offsetClampParams = myAcqFifo.OwnedOffsetClampParams

    If Not offsetClampParams Is Nothing Then
        offsetClampParams.OffsetClampMode = CogAcqOffsetClampConstants.Both
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqROI"><summary>Interface for specifying the region of interest for image acquisition.</summary><remarks><PARA>Interface for specifying the region of interest (ROI) for image acquisition.</PARA><PARA>
The ROI property lets you specify which part of the acquired image
you wish to process. The <see cref="T:Cognex.VisionPro.ICogAcqFifo" /> interface uses the ROI property to optimize acquisition
time.
<!-- For line scan cameras, you use the ROI property to refine the height and width of
the acquired image. --></PARA><PARA>Depending on the capabilities of the video hardware, the ROI setting may affect which
pixels are actually written in the pixel root image, allowing the acquisition FIFO to acquire
a smaller number of pixels, thereby reducing acquisition time.</PARA><PARA>
Supported on:
8100D,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504
8600

</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqROI.ROIMode"><summary>Gets or sets the ROIMode.</summary></member><member name="M:Cognex.VisionPro.ICogAcqROI.GetROIXYWidthHeight(System.Int32@,System.Int32@,System.Int32@,System.Int32@)"><param name="x"><PARA>The x-coordinate of the start of the ROI.</PARA></param><param name="y"><PARA>The y-coordinate of the start of the ROI.</PARA></param><param name="width"><PARA>The width of the ROI</PARA></param><param name="height"><PARA>The height of the ROI.</PARA></param><remarks><PARA>Sets the acquisition region of interest (ROI). The ROI allows a subset of the pixels defined by the video format to be returned by <see cref="M:Cognex.VisionPro.ICogAcqFifo.CompleteAcquire(System.Int32,System.Int32@,System.Int32@)" />.</PARA></remarks><summary>Gets the ROI. The ROI allows a subset of the pixels defined by the video format to be returned by a call to CompleteAcquire.</summary><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqROI ROIParams;
	int x, y, width, height;
	
	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	ROIParams = myAcqFifo.OwnedROIParams;
	if (ROIParams != null)
		ROIParams.GetROIXYWidthHeight(x, y, width, height);
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim ROIParams As Cognex.VisionPro.ICogAcqROI
    Dim x As Long, y As Long, width As Long, height As Long

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    ROIParams = myAcqFifo.OwnedROIParams

    If Not ROIParams Is Nothing Then
        ROIParams.GetROIXYWidthHeight(x, y, width, height)
    End If
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqROI.SetROIXYWidthHeight(System.Int32,System.Int32,System.Int32,System.Int32)"><param name="x"><PARA>The x-coordinate of the start of the ROI.</PARA></param><param name="y"><PARA>The y-coordinate of the start of the ROI.</PARA></param><param name="width"><PARA>The width of the ROI</PARA></param><param name="height"><PARA>The height of the ROI.</PARA></param><summary>Sets the ROI.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the ROI is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqROI_ROI--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfGetROIXYWidthHeight" /></li></ul></event><remarks><PARA>Sets the acquisition region of interest (ROI).</PARA><NOTE>If the ROI specified extends in the positive direction beyond the bounds specified by the video format, it will be silently clipped.</NOTE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>Any parameter is &lt; 0.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqROI ROIParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	ROIParams = myAcqFifo.OwnedROIParams;
	if (ROIParams != null)
		ROIParams.SetROIXYWidthHeight(10, 20, 300, 200);
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim ROIParams As Cognex.VisionPro.ICogAcqROI

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    ROIParams = myAcqFifo.OwnedROIParams

    If Not ROIParams Is Nothing Then
        ROIParams.SetROIXYWidthHeight(10, 20, 300, 200)
    End If
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqROI.IsROIModeSupported(Cognex.VisionPro.CogAcqROIModeConstants)"><param name="mode"></param><summary>Returns True if the corresponding mode setting is supported.</summary></member><member name="T:Cognex.VisionPro.ICogAcqReadoutDirection"><remarks><PARA>Interface for selecting the readout direction.
The camera sensor is read out line by line, where each line is normally read in the horizontal direction
from left to right along the x-axis in the positive x direction. Lines are read sequentially starting at the image top and proceeding vertically down in the positive y direction.</PARA><PARA>You can use these properties to reverse the x- and y-readout directions. If you reverse the horizontal readout, each line will be read from right to left. If you reverse the vertical readout, the bottom line is read out first.</PARA><PARA>
Supported on:
8100D with CDC-100 camera
</PARA></remarks><summary>Interface for readout direction.</summary></member><member name="P:Cognex.VisionPro.ICogAcqReadoutDirection.VerticalReadoutReversed"><remarks><PARA>Sets or gets whether the vertical readout direction is reversed. If True, each line will be read from bottom to top instead of from top to bottom.</PARA><NOTE>This property is supported only on CDC-100 cameras.</NOTE><DEFAULT>False</DEFAULT></remarks><summary>Get or set whether vertical readout direction is reversed.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqReadoutDirection_VerticalReversed--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfVerticalReadoutReversed" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogAcqReadoutDirection.HorizontalReadoutReversed"><remarks><PARA>Sets or gets whether the horizontal readout direction is reversed. If True, each line will be read from right to left instead of from left to right.</PARA><NOTE>This property is supported only on CDC-100 cameras.</NOTE><DEFAULT>False</DEFAULT></remarks><summary>Get or set whether horizontal readout direction is reversed.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqReadoutDirection_HorizontalReversed--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfHorizontalReadoutReversed" /></li></ul></event></member><member name="T:Cognex.VisionPro.ICogAcqSample"><summary>Interface for subsampling.</summary><remarks><PARA>Subsamples acquired images.
You can use subsampling to reduce the image size and may result in faster acquisitions.
Subsample values specify the ration of full-frame pixels to sampled pixels. For example, setting <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> to 8 specifies an 8:1 reduction in the number of pixels along the x-axis. <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> specifies a reduction of pixels along the y-axis.</PARA><PARA>If the camera or frame grabber supports it, x and y subsampling are performed independently. 
If <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True, the x and y values must be the same; in this case
setting either <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> or <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> causes the other value to change.
</PARA><PARA>
Supported on:
8100D,
8501, 8504

</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked"><summary>Returns whether SampleX and SampleY are locked together.If this property is true then setting either SampleX or SampleY will cause the other to be set to the same value.</summary><remarks><PARA>Returns whether <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> and <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> are constrained to the be same value.
If this property is True then, setting either <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> or <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> causes the other value to be set to the same value.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqSample.SampleY"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSample_SampleY--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSampleY" /></li></ul></event><EVENT TYPELIB="." IFACE="ICogAcqFifoEvents" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM><LINK ENUM="CogStateIDs">cogState_MoreThanOneStateIDChanged</LINK></ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK ENUM="CogFAs_AcqFifo">cogFA_AcqFifo_Sampling</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		Fires when the value changes and <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True. 
		(<see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> changed also.)
	</EVENT><remarks><PARA>Sets or gets y-sampling. You can use subsampling to reduce the image size and may result in faster acquisitions.
Subsample values specify the ration of full-frame pixels to sampled pixels. For example, setting <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> to 8 specifies an 8:1 reduction in the number of pixels along the y-axis.</PARA><PARA>If <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True, changing this value sets <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> to the same value.</PARA><DEFAULT>1, no subsampling</DEFAULT></remarks><summary>Get or set Y sampling.</summary><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Cognex CDC-50-33G 640x480";
	ICogAcqSample sampleParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	sampleParams = myAcqFifo.OwnedSampleParams;
	if (sampleParams != null)
		sampleParams.SampleX = 4;
		sampleParams.SampleY = 4;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Cognex CDC-50-33G 640x480"
    Dim sampleParams As Cognex.VisionPro.ICogAcqSample

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    sampleParams = myAcqFifo.OwnedSampleParams

    If Not sampleParams Is Nothing Then
        sampleParams.SampleX = 4
        sampleParams.SampleY = 4
    End If
End Sub
</code></example></member><member name="P:Cognex.VisionPro.ICogAcqSample.SampleX"><remarks><PARA>Sets or gets x-sampling. You can use subsampling to reduce the image size and may result in faster acquisitions.
Subsample values specify the ration of full-frame pixels to sampled pixels. For example, setting <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> to 8 specifies an 8:1 reduction in the number of pixels along the x-axis. </PARA><PARA>If <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True, changing this value sets <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> to the same value.</PARA><DEFAULT>1, no subsampling</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the value changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSample_SampleX--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSampleX" /></li></ul></event><EVENT TYPELIB="." IFACE="ICogAcqFifoEvents" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM><LINK ENUM="CogStateIDs">cogState_MoreThanOneStateIDChanged</LINK></ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK ENUM="CogFAs_AcqFifo">cogFA_AcqFifo_Sampling</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		Fires when the value changes and <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleValuesLocked" /> is True. 
		(<see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> changed also.)
	</EVENT><summary>Get or set X sampling.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is &lt; 0.</para></exception><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqSample sampleParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	sampleParams = myAcqFifo.OwnedSampleParams;
	if (sampleParams != null)
		sampleParams.SampleX = 4;
		sampleParams.SampleY = 4;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim sampleParams As Cognex.VisionPro.ICogAcqSample

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    sampleParams = myAcqFifo.OwnedSampleParams

    If Not sampleParams Is Nothing Then
        sampleParams.SampleX = 4
        sampleParams.SampleY = 4
    End If
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqSample.GetSupportedSampleXValues"><remarks><PARA>Returns the set of values that may be used with the <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleX" /> property.</PARA></remarks><summary>Returns the set of values that may be used with the SampleX property.</summary></member><member name="M:Cognex.VisionPro.ICogAcqSample.GetSupportedSampleYValues"><remarks><PARA>Returns the set of values that may be used with the <see cref="P:Cognex.VisionPro.ICogAcqSample.SampleY" /> property.</PARA></remarks><summary>Returns the set of values that may be used with the SampleY property.</summary></member><member name="T:Cognex.VisionPro.ICogAcqSettlingTime"><summary>Interface for controlling the settling time of a camera.</summary><remarks><PARA>Interface for controlling the settling time of a camera.</PARA><PARA>In general, you should not need to use this interface, and you should select a video format that supports your application.</PARA><PARA><!-- CVL User's Guide table says only 82400/CVM11 -->
Not supported for any VisionPro frame grabber.
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqSettlingTime.SettlingTime"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqWrongTriggerModelException" cgnxHRESULT="E_CogAcq_WrongTriggerModel"><para>The acquisition <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">trigger model</see> is 
<see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the settling time is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSettlingTime_Time--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTime" /></li></ul></event><remarks><PARA>Sets or gets the settling time in milliseconds.</PARA><PARA>In general, you should not need to use this interface, and you should select a video format that supports your application.</PARA><PARA>
This interface allows you to specify the settling time, the time to wait after a trigger before
starting an acquisition. Typically, you would specify a settling time when using a
free-running camera with automatic triggering and ambient illumination to allow a part
to stop moving once it is in position. The settling time should be long enough to ensure
that no portion of the image is in motion during image integration.</PARA><PARA>
To choose an appropriate settling time, you need to consider the characteristics of the
part as well as the latencies of integrating the image. A conservative settling time
depends on whether the camera is a rapid-reset camera or free-running and whether a
strobe is used.
</PARA><PARA>
The following examples illustrate appropriate choices for settling time so that the image
is not blurred. In each example, the grey bars denote frames that were integrated while
the part was still in motion; the solid green bars denote frames that were integrated after
the part stopped moving.
</PARA><PARA>The following figure shows a free-running camera with no strobe in frame integration
mode.</PARA><PICTURE SRC="frame.jpg" HEIGHT="312" WIDTH="662" ALT="Settling time: frame integration" apiSRC="SettlingTime_frame.jpg" /><PARA>The following figure shows a free-running camera with no strobe in field integration
mode.</PARA><PICTURE SRC="field.jpg" HEIGHT="219" WIDTH="369" ALT="Settling time: field integration" apiSRC="SettlingTime_field.jpg" /><PARA>The following figure shows a rapid-reset camera with no strobe.</PARA><PICTURE SRC="rr.jpg" HEIGHT="220" WIDTH="281" ALT="Settling time: rapid reset" apiSRC="SettlingTime_rr.jpg" /><PARA>For a strobed acquisition, the settling time should be zero.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Reads or sets the settling time in milliseconds.</summary></member><member name="T:Cognex.VisionPro.ICogAcqSimultaneous"><summary>Interface for simultaneous acquisition.</summary><remarks><PARA>Interface for implementing <see cref="u:Acquisition.General.Theory.AcqInVisionPro" cgnxAnchor="glossary_synchronous_simultaneous_acquisition">synchronous simultaneous acquisition</see>, also called master/slave acquisition, for an <see cref="T:Cognex.VisionPro.CogAcqFifo" />.</PARA><PARA>When the master acquisition FIFO gets an acquisition request, all of the slave FIFOs also get an acquisition request. See <see cref="u:Acquisition.General.Theory.AcqInVisionPro" cgnxAnchor="simultaneous_acquisition">Simultaneous Acquisition</see> in the <see cref="u:Acquisition.General.Theory.AcqInVisionPro">Acquisition in VisionPro</see> theory topic for more information.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqSimultaneous.Master"><remarks><PARA>Returns the master acquisition FIFO if this is a slave FIFO. Returns null if this is not a slave.</PARA></remarks><summary>Returns the master acquisition fifo if this is a slave. Returns null if this is not a slave.</summary></member><member name="M:Cognex.VisionPro.ICogAcqSimultaneous.CreateSlaveAcqFifo(System.Boolean)"><param name="autoPrepare"><PARA>Sets the  <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> property of the acquisition FIFO that specifies whether the FIFO is automatically <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare">prepared</see> when a property changes.</PARA></param><returns><PARA>The new slave FIFO.</PARA></returns><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when a slave is created for this FIFO. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSimultaneous_Slaves--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSGetSlaves" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="FifoType" /> is not in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</para></exception><!--
    <ERROR_HRESULT NAME="E_CogAcq_PixelFormatNotSupported"><DISPLAY PARAM="Format" /> is not a supported pixel format for this frame grabber.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadVideoFormatException" cgnxHRESULT="E_CogAcq_BadVideoFormat"><para>The video format is not recognized.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNotAllowedForSlaveException" cgnxHRESULT="E_CogAcq_NotAllowedForSlave"><para>This FIFO is already a slave FIFO.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqCannotSlaveException" cgnxHRESULT="E_CogAcq_CannotSlave"><para>This FIFO cannot have a slave FIFO because of incompatible video formats or because there are no available camera ports for slave FIFOs.</para></exception><summary>Create a new slave fifo for simultaneous acquisition. The slave fifo will have the same video format as this fifo.</summary><remarks><PARA>Creates a new slave acquisition FIFO for simultaneous acquisition with the FIFO associated with this object. The camera port of the slave FIFO is chosen to be compatible with the master FIFO.</PARA><PARA>For the Cognex MVS-8120/CVM1 the camera port of the first slave FIFO must be one higher that the camera port of the master FIFO. For example, if the master FIFO uses camera port 2, the first slave FIFO will use camera port 3, the second will use camera port 0, and the third will use camera port 1. It is not an error for two FIFOs to share the same camera port, but you may get unexpected behavior. If <see cref="M:Cognex.VisionPro.ICogAcqSimultaneous.CreateSlaveAcqFifo(System.Boolean)" /> cannot find a suitable camera port, it returns an error.</PARA></remarks><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqSimultaneous simParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	simParams = myAcqFifo.OwnedSimultaneousParams;
	if (simParams != null) {
		ICogAcqFifo slaveFIFO;
		        
		slaveFIFO = simParams.CreateSlaveAcqFifo(True);
	}
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim simParams As Cognex.VisionPro.ICogAcqSimultaneous

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    simParams = myAcqFifo.OwnedSimultaneousParams

    If Not simParams Is Nothing Then
        Dim slaveFIFO As Cognex.VisionPro.ICogAcqFifo
        
        slaveFIFO = simParams.CreateSlaveAcqFifo(True)
    End If
End Sub
</code></example></member><member name="M:Cognex.VisionPro.ICogAcqSimultaneous.GetSlaves"><summary>Returns any slave acquisition fifos.</summary><remarks><PARA>Returns any slave acquisition FIFOs if this is a master FIFO.</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogAcqStrobe"><remarks><PARA>Interface for controlling a strobe light associated with an acquisition FIFO.</PARA><PARA>
Supported on:
8100D,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504,
8600

</PARA></remarks><summary>Interface for controlling a strobe light.</summary></member><member name="P:Cognex.VisionPro.ICogAcqStrobe.StrobePulsePolarityHigh"><summary>Whether strobe pulse polarity is high (True) or low (False).</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity selection is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobe_PulsePolarityHigh--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfPulsePolarityHigh" /></li></ul></event><remarks><PARA>Sets or gets whether the polarity of the strobe pulse is high (True) or low (False).</PARA><NOTE>If you are using  an MVS-8504 frame grabber with the TTL pass-through cable option (P/N 300-0390), the polarity
information is reversed. When this value is True, the active pulse is set to low; when this value is False, the active pulse is set to High.
<!-- CR 31321 --></NOTE><DEFAULT>True</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogAcqStrobe.StrobeEnabledSupported"><summary>Indicates whether the StrobeEnabled property is supported.  If StrobeEnabledSupported is false then changing StrobeEnabled has no effect.</summary><remarks><PARA>Indicates whether this FIFO supports the <see cref="P:Cognex.VisionPro.ICogAcqStrobe.StrobeEnabled" /> property. If the 
	value of this property is false, then setting <see cref="P:Cognex.VisionPro.ICogAcqStrobe.StrobeEnabled" /> has no effect.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqStrobe.StrobeEnabled"><remarks><PARA>Sets or gets whether the strobe is enabled. True if the strobe is enabled, false if the acquisition FIFO uses ambient lighting.</PARA><DEFAULT>False</DEFAULT></remarks><summary>Whether the strobe is enabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the strobe is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobe_Enabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfEnabled" /></li></ul></event></member><member name="T:Cognex.VisionPro.ICogAcqStrobeDelay"><remarks><PARA>Interface for strobe delay. The strobe delay is the delay time between the shutter pulse
and the strobe firing.</PARA><PARA>
Supported on:
8100D,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504,
8600

</PARA></remarks><summary>Interface for strobe delay.</summary></member><member name="P:Cognex.VisionPro.ICogAcqStrobeDelay.StrobeDelay"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the strobe delay changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobeDelay_StrobeDelay--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfStrobeDelay" /></li></ul></event><summary>Get or set strobe delay.</summary><remarks><PARA>Sets or gets the strobe delay in milliseconds. The strobe delay is the delay time between the shutter pulse
and the strobe firing.</PARA><PARA>The strobe delay can be a negative value so that the strobe pulse fires before the shutter pulse. Negative values
are useful when you are using slower strobes such as LED strobes.</PARA><PARA>To determine the delay  time for <see cref="u:Acquisition.CDC_CMOS.Theory.CMOSCams">Cognex CDC cameras</see>, see <see cref="u:Acquisition.CDC_CMOS.Walkthrough.ChooseCDCShutterMode">How to Choose a CDC Shutter Mode</see>.</PARA><DEFAULT>0</DEFAULT></remarks><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqStrobeDelay strobeDelayParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	strobeDelayParams = myAcqFifo.OwnedStrobeDelayParams;
	if (strobeDelayParams != null)
		strobeDelayParams.StrobeDelay = 12;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim strobeDelayParams As Cognex.VisionPro.ICogAcqStrobeDelay

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    strobeDelayParams = myAcqFifo.OwnedStrobeDelayParams

    If Not strobeDelayParams Is Nothing Then
        strobeDelayParams.StrobeDelay = 12
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqStrobePulseDuration"><summary>Interface for controlling the strobe pulse duration.</summary><remarks><PARA>Interface for controlling the strobe pulse duration.</PARA><PARA>
Supported on:
8100D,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8501, 8504,
8600


</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqStrobePulseDuration.StrobePulseDuration"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>0 The new value is &lt; 0.</para></exception><remarks><PARA>Sets or gets the duration of the strobe pulse in milliseconds. The special value zero indicates to use the shortest time supported by the hardware.</PARA><DEFAULT>20e-3 milliseconds</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the strobe duration changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqStrobe_PulseDuration--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfPulseDuration" /></li></ul></event><summary>Reads or sets the strobe pulse duration. The special value of 0 indicates to use the shortest time supported by the hardware.</summary></member><member name="T:Cognex.VisionPro.ICogAcqSync"><remarks><PARA>Interface for controlling a camera's synchronization model.</PARA><PARA>
Supported on:
8100M
</PARA></remarks><summary>Interface for controlling the camera synchronization model.</summary></member><member name="P:Cognex.VisionPro.ICogAcqSync.SyncModel"><remarks><PARA>Sets or gets the camera synchronization model as described by one of the values in  <see cref="T:Cognex.VisionPro.CogAcqSyncModelConstants" /></PARA><PARA><see cref="P:Cognex.VisionPro.ICogAcqSync.SyncModel" /> is supported only on the Cognex MVS-8100M.</PARA><PARA>If you are using a <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats">video format</see> that is described by a Camera Configuration File (CCF), <see cref="P:Cognex.VisionPro.ICogAcqSync.SyncModel" /> has no effect. To select a synchronization model for a CCF-based video format, use the CCF that specifies the synchronization your application requires.</PARA></remarks><summary>Reads or sets the camera synchronization model.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" />  is not in <see cref="T:Cognex.VisionPro.CogAcqSyncModelConstants" /></para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the sync model changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqSyncModel_SyncModel--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfSyncModel" /></li></ul></event><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqSync syncParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	syncParams = myAcqFifo.OwnedSyncParams;
	if (syncParams != null)
		syncParams.SyncModel = CogAcqSyncModelConstants.InternalComposite;
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim syncParams As Cognex.VisionPro.ICogAcqSync

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    syncParams = myAcqFifo.OwnedSyncParams

    If Not syncParams Is Nothing Then
        syncParams.SyncModel = CogAcqSyncModelConstants.InternalComposite
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqTrigger"><summary>Interface for controlling the triggering model of an acquisition fifo.</summary><remarks><PARA>Interface for controlling an acquisition FIFO's trigger model.</PARA><PARA>
Supported on:
8100D,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504,
8600

</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogAcqTrigger.TriggerLowToHigh"><remarks><PARA>Sets or gets the trigger line polarity. True means that a trigger signal is an input line transition from low to high. False means that a trigger signal is an input line transition from high to low.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger polarity is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTrigger_LowToHigh--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerLowToHigh" /></li></ul></event><summary>Reads or sets whether triggers are a low to high transition.</summary><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqTrigger triggerParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	triggerParams = myAcqFifo.OwnedTriggerParams;
	if (triggerParams != null) {
		triggerParams.TriggerEnabled = true;
		triggerParams.TriggerModel = CogAcqTriggerModelConstants.Semi;
		triggerParams.TriggerLowToHigh = true;
	}
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim triggerParams As Cognex.VisionPro.ICogAcqTrigger

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    triggerParams = myAcqFifo.OwnedTriggerParams

    If Not triggerParams Is Nothing Then
        triggerParams.TriggerEnabled = True
        triggerParams.TriggerModel = CogAcqTriggerModelConstants.Semi
        triggerParams.TriggerLowToHigh = True
    End If
End Sub
</code></example></member><member name="P:Cognex.VisionPro.ICogAcqTrigger.TriggerEnabled"><remarks><PARA>Sets or gets whether triggering is enabled. If triggering is disabled and the trigger model is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Manual</see>, acquisition requests will be queued until triggering is enabled. For other trigger models, transitions on the trigger input line are ignored when triggering is disabled.</PARA><PARA>If you are using a frame grabber that supports CVM11, you can specify
encoder-triggered acquisition which is a special case of hardware triggering
for line scan cameras. To use encoder triggering, set the trigger
model as <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Auto</see> or
<see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Semi</see>
and set the  <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> property.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when triggering is enabled or disabled. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTrigger_Enabled--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerEnabled" /></li></ul></event><summary>Reads or sets whether triggers are enabled.</summary><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqTrigger triggerParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	triggerParams = myAcqFifo.OwnedTriggerParams;
	if (triggerParams != null) {
		triggerParams.TriggerEnabled = true;
		triggerParams.TriggerModel = CogAcqTriggerModelConstants.Semi;
		triggerParams.TriggerLowToHigh = true;
	}
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim triggerParams As Cognex.VisionPro.ICogAcqTrigger

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    triggerParams = myAcqFifo.OwnedTriggerParams

    If Not triggerParams Is Nothing Then
        triggerParams.TriggerEnabled = True
        triggerParams.TriggerModel = CogAcqTriggerModelConstants.Semi
        triggerParams.TriggerLowToHigh = True
    End If
End Sub
</code></example></member><member name="P:Cognex.VisionPro.ICogAcqTrigger.TriggerModel"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is not in  <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants" /> or is <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">Slave</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNotAllowedForSlaveException" cgnxHRESULT="E_CogAcq_NotAllowedForSlave"><para>The acquisition FIFO is a slave.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger model is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTrigger_Model--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerModel" /></li></ul></event><summary>Reads or sets the trigger model.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">trigger model</see>.</PARA><PARA>Changing the trigger model stops the current acquisition. Before changing the trigger model, use <see cref="M:Cognex.VisionPro.ICogAcqFifo.Flush" /> to flush any pending acquisition requests.</PARA></remarks><example><code lang="C#">
using Cognex.VisionPro;

private CogFrameGrabbers myFrameGrabbers;
private ICogFrameGrabber myFrameGrabber;
private ICogAcqFifo myAcqFifo;

private void InitializeFifo()
{
	const string VIDEO_FORMAT = "Sony XC75 640x480";
	ICogAcqTrigger triggerParams;

	myFrameGrabbers = new CogFrameGrabbers();
	myFrameGrabber = myFrameGrabbers[0];
	myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, 
		Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey, 0, false);

	triggerParams = myAcqFifo.OwnedTriggerParams;
	if (triggerParams != null) {
		triggerParams.TriggerEnabled = true;
		triggerParams.TriggerModel = CogAcqTriggerModelConstants.Semi;
		triggerParams.TriggerLowToHigh = true;
	}
}
</code><code lang="Visual Basic">
Imports Cognex.VisionPro

Private myFrameGrabbers As CogFrameGrabbers
Private myFrameGrabber As Cognex.VisionPro.ICogFrameGrabber
Private myAcqFifo As Cognex.VisionPro.ICogAcqFifo

Private Sub InitializeFifo()
    Const VIDEO_FORMAT = "Sony XC75 640x480"
    Dim triggerParams As Cognex.VisionPro.ICogAcqTrigger

    myFrameGrabbers = New CogFrameGrabbers
    myFrameGrabber = myFrameGrabbers.Item(0)
    myAcqFifo = myFrameGrabber.CreateAcqFifo(VIDEO_FORMAT, CogAcqFifoPixelFormatConstants.Format8Grey, 0, False)

    triggerParams = myAcqFifo.OwnedTriggerParams

    If Not triggerParams Is Nothing Then
        triggerParams.TriggerEnabled = True
        triggerParams.TriggerModel = CogAcqTriggerModelConstants.Semi
        triggerParams.TriggerLowToHigh = True
    End If
End Sub
</code></example></member><member name="T:Cognex.VisionPro.ICogAcqTriggerFilter"><remarks><PARA>Interface for specifying a trigger filter that sets  trigger width, trigger period, and
trigger delay. A trigger pulse must satisfy the width requirement to become valid, after which the
trigger period begins, and the trigger delay starts.
</PARA><PARA><PICTURE SRC="triggerfilter.gif" HEIGHT="222" WIDTH="606" apiSRC="ICogAcqTriggerFilter_triggerfilter.gif" /></PARA><PARA>
Supported on:
8100D
</PARA></remarks><summary>Interface for specifying a trigger filter.</summary></member><member name="P:Cognex.VisionPro.ICogAcqTriggerFilter.IgnoreMissedTrigger"><summary>Get or set whether isMissed acqfailure can be generated due to a missed trigger when performing acquisition using an area scan camera.  Default is true (missed triggers will not be reported).</summary></member><member name="P:Cognex.VisionPro.ICogAcqTriggerFilter.TriggerDelay"><remarks><PARA>Sets or gets the period of time in milliseconds between the trigger and start of camera integration.</PARA><PARA>
	On a Cognex MVS-8600 frame grabber, the delay is rounded to the nearest multiple
	of the horizontal line period. With a linescan camera,
	the delay takes effect for every line instead of every frame.
	You can use this property wth a
	<see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled">test encoder</see>
	to vary the line rate.
</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger delay changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTriggerFilter_TriggerDelay--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfTriggerDelay" /></li></ul></event><summary>Get or set period of time in milliseconds between trigger and start of camera integration.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception></member><member name="P:Cognex.VisionPro.ICogAcqTriggerFilter.MinTriggerPeriod"><remarks><PARA>Sets or gets the minimum time between triggers in milliseconds. 
Only the first valid trigger within a period will initiate a camera integration cycle. Other valid triggers in that same period
are missed.
You can use this value to help limit the camera acquisition rate. 

</PARA><PARA>Legal values range from 0 to 65.5. Zero specifies that there is no
period requirement. </PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger period changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTriggerFilter_MinTriggerPeriod--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinTriggerPeriod" /></li></ul></event><summary>Get or set minimum time between triggers in ms.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception></member><member name="P:Cognex.VisionPro.ICogAcqTriggerFilter.MinTriggerWidth"><remarks><PARA>Sets or gets the minimum trigger width in milliseconds.  The trigger input signal must be asserted for
at least this amount of time before it is recognized as a valid input trigger. If the trigger does
not meet this width constraint, it is ignored.
</PARA><PARA>The latency between the edge transition of the trigger signal and the start of camera
integration is computed as (<see cref="P:Cognex.VisionPro.ICogAcqTriggerFilter.MinTriggerWidth" /> + <see cref="P:Cognex.VisionPro.ICogAcqTriggerFilter.TriggerDelay" />).</PARA><PARA>The legal values range from 0.003 to 0.258.</PARA><DEFAULT>0.005</DEFAULT></remarks><summary>Get or set minimum trigger width in ms.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="val" /> is &lt; 0.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the trigger width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogAcqTriggerFilter_MinTriggerWidth--><ul><!--SYNTH: Synthesizing AcqEvent flag.--><li><see cref="F:Cognex.VisionPro.CogAcqFifoStateFlags.SfMinTriggerWidth" /></li></ul></event></member><member name="T:Cognex.VisionPro.ICogAcqSettingInfo"><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqSettingInfo.IsPresent(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqSettingInfo.DefaultValue(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqSettingInfo.MinValue(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="M:Cognex.VisionPro.ICogAcqSettingInfo.MaxValue(System.Int32)"><param name="settingID"></param><summary>Cognex Internal use only.</summary></member><member name="T:Cognex.VisionPro.ICogAcqWhiteBalance"><summary>Interface for setting the white balance of a color camera.</summary><remarks>Interface for specifying the white balance of a color camera.</remarks></member><member name="P:Cognex.VisionPro.ICogAcqWhiteBalance.VGain"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UGain is changed.</event><remarks>As the V-gain increases, the image becomes more blue. By adjusting the U- and V-gains, you can correct the color balance for different light sources.</remarks><summary>Gets or sets the gain of the V component in the YUV color model.</summary><exception cref="T:System.ArgumentException">Value &lt; 0 or Value &gt; 1.0.</exception></member><member name="P:Cognex.VisionPro.ICogAcqWhiteBalance.UGain"><summary>Gets or sets the gain of the U component in the YUV color model.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when the UGain is changed.</event><exception cref="T:System.ArgumentException">Value &lt; 0 or Value &gt; 1.0.</exception><remarks>As the U-gain increases, the image becomes more red. By adjusting the U- and V-gains, you can correct the color balance for different light sources.</remarks></member><member name="M:Cognex.VisionPro.ICogAcqWhiteBalance.AutoWhiteBalance"><summary>Sets the white balance automatically if the camera supports it.</summary><remarks>If the camera supports it, this function sets the white balance automatically by finding
			optimal values for <see cref="P:Cognex.VisionPro.ICogAcqWhiteBalance.UGain" /> and <see cref="P:Cognex.VisionPro.ICogAcqWhiteBalance.VGain" />
			for the light source used.
		</remarks></member><member name="T:Cognex.VisionPro.ICogAcqHardwareImagePool"><summary>Interface for Hardware Image Pool.</summary><remarks><para>
    		This property lets you set the size of the image pool memory
    		for a Cognex MVS-8600 frame grabber.
    		</para><para>
    			Use 
    			<see cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" />
    			to get an
    			<see cref="T:Cognex.VisionPro.ICogAcqHardwareImagePool" />
    			from an
    			<see cref="U:Cognex.VisionPro.ICogAcqFifoMembers" />.
    		</para></remarks></member><member name="P:Cognex.VisionPro.ICogAcqHardwareImagePool.UseCustomHardwareImagePool"><summary>When False (the default), HardwareImagePool will always be the same as RecommendedHardwareImagePool.  When True, you can set HardwareImagePool to a specific value.  Normally, you would only set CustomHardwareImagePool to True if you are acquiring very large images and the recommended setting requires too much memory.</summary><remarks><para>
    		Sets or gets whether to use a custom image pool size. 
    	</para><para>
    		When this property is False, the size of the image pool is always
    		<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool" />.
    		When True, the size of the image pool is determined by 
    		<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.HardwareImagePool" /></para><para>
    		Typically you would set this property to True and specify a value
    		for <see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.HardwareImagePool" />
		only if you're acquiring very large images and
    		<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool" />
    		would require too much memory.
    	</para><DEFAULT>
    		False
    	</DEFAULT><seealso cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" /></remarks></member><member name="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool"><summary>Get the recommended number of images in the pool.  Note that the recommended value may change when the region of interest changes.</summary><remarks><para>
    			Gets  the number of images in the pool.
    			This value may change as the <see cref="T:Cognex.VisionPro.ICogAcqROI">region of interest</see>
    			changes.
    		</para><seealso cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" /></remarks></member><member name="P:Cognex.VisionPro.ICogAcqHardwareImagePool.HardwareImagePool"><summary>Get or set number of images in the pool.  A larger value provides more reliable acquisition, but uses more memory.  You will only be able to set the value if CustomHardwareImagePool is set true.</summary><remarks><para>
	    		Sets or gets the number of images in the image pool.
    		</para><para>
    			When 
    			<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.UseCustomHardwareImagePool" />
    			is False, this number is the same as
    			<see cref="P:Cognex.VisionPro.ICogAcqHardwareImagePool.RecommendedHardwareImagePool" />.
    			When True, you can set the number images in the pool as appropriate for your application.
    		</para><para>
    			A larger number of images in the pool provides more reliable acquisition, but uses more memory.
    		</para><seealso cref="P:Cognex.VisionPro.ICogAcqFifo.OwnedHardwareImagePoolParams" /></remarks></member><member name="T:Cognex.VisionPro.ICogAcqCustomProperties"><summary>Interface allowing configuration of hardware specific settings.</summary></member><member name="P:Cognex.VisionPro.ICogAcqCustomProperties.CustomPropsAsString"><summary>Read or set custom properties as a string.</summary></member><member name="P:Cognex.VisionPro.ICogAcqCustomProperties.CustomProps"><summary>Read or set custom properties as a collection.</summary></member><member name="T:Cognex.VisionPro.ICogAcqGigEVisionTransport"><summary>Interface for specifying the GigE Vision Transport for image acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqGigEVisionTransport.LatencyLevel"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or greater than 3.</exception><summary>Reads or sets the latency level of the GigE Vision performance driver. The valid range is 0 (lowest latency) to 3 (lowest CPU). Smaller values reduce acquisition latency and may improve reliability at the expense of higher CPU usage. Default value is 3.</summary><value>Changing the acquisition latency level may improve reliability of the acquisition.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLatencyLevel</event></member><member name="P:Cognex.VisionPro.ICogAcqGigEVisionTransport.PacketSizeMax"><summary>Maximum size of image packets transmitted by the camera.</summary><value>The maximum value can be applied to PacketSize.</value></member><member name="P:Cognex.VisionPro.ICogAcqGigEVisionTransport.PacketSize"><summary>Reads or sets the size of image packets transmitted by the camera. The default is the value that was automatically determined, and will vary based on the camera used and network configuration. In most cases, the packetSize value should not be changed from the default. Ideally, the automatically determined value will be 8000 or larger. A smaller value may indicate that jumbo frames are disabled on the network adapter, or that a switch in the network does not support jumbo frames. The packetSize function controls the GevSCPSPacketSize feature of the camera.</summary><value>Impacts the size of image packets transmitted by the camera.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfPacketSize</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 1 or greater than PacketSizeMax.</exception></member><member name="P:Cognex.VisionPro.ICogAcqGigEVisionTransport.TransportTimeout"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfTransportTimeout</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0.</exception><summary>Reads or sets the maximum timeout, in milliseconds, for the camera to transmit an image. Adjust the transport timeout to a larger value to allow successful acquisition from cameras with a long readout time, as may occur with a linescan camera. Default timeout value is 2000 ms.</summary><value>The maximum timeout, in seconds, for the camera to transmit an image.</value></member><member name="T:Cognex.VisionPro.ICogAcqProfileCamera"><summary>This interface controls which rows of the sensor are analyzed to find the laser line.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.TriggerSignal"><summary>Reads or sets the trigger signal. May be either Opto or Differential.</summary><value>The default is Opto.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfTriggerSignal</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.BinarizationThreshold"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfBinarizationThreshold</event><summary>Reads or sets the Binarization Threshold pixel value when Binary laser detection mode is selected.</summary><value>The default is BinarizationThresholdDefault.</value></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.MinimumBinarizationLineWidth"><value>The default is MinimumBinarizationLineWidthDefault.</value><summary>Reads or sets the Minimum Binarization Linewidth when Binary laser detection mode is selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfMinimumBinarizationLineWidth</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.PeakDetectionMode"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfPeakDetectionMode</event><summary>Reads or sets the selection for laser peak detection.</summary><value>The default is Max.</value></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.LaserDetectionMode"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLaserDetectionMode</event><summary>Determines the tradeoff between maximum speed and accuracy of the laser detection algorithm.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.TriggerType"><summary>Selects the triggering behavior of the camera.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfTriggerType</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.LinkDetectionZones"><value>Applies to the area of the sensor used for laser detection.</value><summary>When true, the base of Zone 2 is linked to the top of Zone 1, such that changes to Zone 1 will automatically make a corresponding adjustment to Zone 2.  This is useful when adjusting the distance between the camera and the object being imaged, as both zones can adjusted by changing only the Zone 1 base.  Note that as the LinkDetectionZones setting is turned on and off, the value of zDetectionBase2 will automatically toggle between an absolute and relative value.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLinkDetectionZones</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.BridgeDetectionZones"><value>Applies to the area of the sensor used for laser detection.</value><summary>When true, the enabled detection zones are combined into a single zone starting at the bottom of the lowest zone and ending at the top of the highest zone.  The ZDetectionSampling setting from Zone 1 is used for the entire combined zone.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfBridgeDetectionZones</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.HighDynamicRange"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfHighDynamicRange</event><value>Controls the maximum line rate by acquiring images with multiple expsures.</value><summary>Read or sets high dynamic range operation. When enabled, the camera uses multiple exposures to increase the dynamic range. This is useful when the laser line passes over both dark and highly reflective regions. Enabling high dynamic range will reduce the maximum line rate. Default value is False.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.LaserMode"><value>Determines the state of laser.</value><summary>Reads or sets the mode of the laser. Default is Strobed. Laser is on when an image is acquired. "On" and "Off" are intended for setup and diagnostic purposes only.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfLaserMode</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.CameraMode"><value>Determines the acquisition mode of the camera.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfCameraMode</event><summary>Reads or sets the operational mode of the camera. The camera mode setting will affect the type of image acquired. Intensity and IntensityWithGraphics images are intended for diagnostic purposes only. Range is for calibrated height profile images. Default mode is IntensityWithGraphics.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.DetectionSensitivityMax"><value>The maximum value can be applied to DetectionSensitivity.</value><summary>Defines the maximum threshold used for detecting the laser. Maximum value will vary with camera model and firmware version.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.DetectionSensitivity"><value>Used to detect where the laser is.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or greater than DetectionSensitivityMax.</exception><summary>Reads or sets the sensitivity of the laser detection. A higher value makes the laser easier to find and allows a lower exposure setting, which in turn allows a higher line rate. A lower value will prevent mistaking noise for the laser in areas where the laser is obscured.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfDetectionSensitivity</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionSamplingMax"><summary>Defines the maximum number of rows can be reduced.</summary><value>The maximum value can be applied to ZDetectionSampling.</value></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionSampling2"><summary>Reads or sets the number of rows used for laser finding to be reduced in detection zone 2.  1 processes every row, 2 processes every other row. Increasing ZDetectionSampling increases the maximum line rate when acquiring range images, but reduces the measurement precision. The increase in maximum line rate is in addition to the increase associated with adjusting ZDetectionBase and ZDetectionHeight. Default value is 1.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 1 or greater than ZDetectionSamplingMax.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionSampling</event><value>May improve maximum line rate by reducing the number of rows used for laser finding.</value></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionSampling"><value>May improve maximum line rate by reducing the number of rows used for laser finding.</value><summary>Reads or sets the number of rows used for laser finding to be reduced. 1 processes every row, 2 processes every other row. Increasing ZDetectionSampling increases the maximum line rate when acquiring range images, but reduces the measurement precision. The increase in maximum line rate is in addition to the increase associated with adjusting ZDetectionBase and ZDetectionHeight. Default value is 1.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionSampling</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 1 or greater than ZDetectionSamplingMax.</exception></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionHeightMax"><value>The maximum value applies to the sum of ZDetectionBase and ZDetectionHeight.</value><summary>Defines the maximum range of heights (in mm) that can be specified via the ZDetection settings.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionEnable2"><summary>Enables or disables the second detection zone.</summary><value>True uses zone 2 to detect the laser.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionZoneEnable2</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionZoneEnable</event><summary>Enables or disables the first detection zone.</summary><value>True uses zone 1 to detect the laser.</value></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionHeight2"><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionHeight2 is the height, in mm, of the second detection range starting at ZDetectionBase2. A smaller ZDetectionHeight2 increases the maximum line rate when acquiring range images, but reduces the measurement range. When converting ZDetectionHeight2 to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary><value>The height, in mm, of the second detection zone.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionHeight</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionBase is greater than ZDetectionHeightMax.</exception></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionHeight"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionBase2 is greater than ZDetectionHeightMax.</exception><value>Applies to the area of the sensor used for laser detection.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionHeight</event><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionHeight is the height, in mm, of the first detection range stating at ZDetectionBase. A smaller ZDetectionHeight increases the maximum line rate when acquiring range images, but reduces the measurement range. When converting ZDetectionHeight to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionBase2"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionHeight is greater than ZDetectionHeightMax.</exception><value>Applies to the area of the sensor used for laser detection.</value><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionBase2 is the distance, in mm, where the detection range begins.  The value is relative to either the top of the first detection zone if LinkDetectionZones is true and the first zone is enabled, or the camera defined origin of the Z axis otherwise. When converting ZDetectionBase2 to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionBase</event></member><member name="P:Cognex.VisionPro.ICogAcqProfileCamera.ZDetectionBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZDetectionBase</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than 0 or its value plus ZDetectionHeight is greater than ZDetectionHeightMax.</exception><summary>Reads or sets the area of the sensor used for laser detection. ZDetectionBase is the distance, in mm, relative to the camera defined origin of the Z axis, where the first detection range begins. When converting ZDetectionBase to discrete sensor rows, the range may be expanded slightly to match the sensor capabilities. The range will only be reduced if it extends off the end of the sensor. This function can be used to ignore reflections and other artifacts that are outside the expected range of heights.</summary><value>Applies to the area of the sensor used for laser detection.</value></member><member name="M:Cognex.VisionPro.ICogAcqProfileCamera.Set2ZDetectionZones(System.Double,System.Double,System.Double,System.Double)"><param name="base">The bottom of the first zone in mm above the z=0 reference point for the camera.  This argument is ignored if ZDetectionEnable is false.</param><param name="height">The top of the first zone in mm relative to base. This argument is ignored if ZDetectionEnable is false.</param><param name="base2">The bottom of the second zone in mm above either the top of the first zone (if both LinkDetectionZones and the first zone are enabled) or the z=0 reference point otherwise. This argument is ignored if ZDetectionEnable2 is false.</param><param name="height2">The top of the second zone in mm relative to base2. This argument is ignored if ZDetectionEnable2 is false.</param><summary>Sets the dimensions of two detection zones simulataneoulsy.</summary></member><member name="T:Cognex.VisionPro.ICogAcqRangeImage"><summary>Interface for specifying the image scaling for image acquisition.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.CalibratedSpaceName3D"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><remarks>This only applies when acquiring a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</remarks><value>The default value is: Sensor3D.</value><summary>The name of the calibrated 3D coordinate space.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.SelectCalibratedSpace2D"><value>The default value is True.</value><summary>Whether or not to use the calibrated 2D coordinate space of the range image as its 2D <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" />. If this value is set to false the SelectedSpaceName will be "@". Otherwise it will be the name of the calibrated 2D space.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><remarks>This only applies when acquiring a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</remarks></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.CalibratedSpaceName2D"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The default value is: Sensor2D.</value><summary>The name of the calibrated 2D coordinate space. This name will be added to the 2D <see cref="P:Cognex.VisionPro.ICogImage.CoordinateSpaceTree" /> of the acquired range image.</summary><remarks>This only applies when acquiring a <see cref="T:Cognex.VisionPro.CogImage16Range" />.</remarks></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.AutoCorrectPixelRowOrder"><value>The default value is True.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><remarks>This currently only applies to the profile camera.</remarks><summary>Whether or not to automatically set the row-order of the acquired image to match the actual appearance of the scene. If this value is set to false, then images acquired in the <see cref="T:Cognex.VisionPro.CogProfileCameraDirectionConstants">LaserToLens</see> direction will have an inverted pixel row order (the image will appear mirrored top-to-bottom with respect to the actual appearance of the scene).</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZContinuityThresholdEnable"><value>The default value is False.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><summary>Whether or not to enable ZContinuityThreshold.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZContinuityThresholdMax"><value>The maximum value can be applied to ZContinuityThreshold.</value><summary>Maximum ZContinuityThreshold value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZContinuityThresholdMin"><summary>Minimum ZContinuityThreshold value allowed.</summary><value>The minimum value can be applied to ZContinuityThreshold</value></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZContinuityThreshold"><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than ZContinuityThresholdMin or greater than ZContinuityThresholdMax.</exception><summary>Specifies a Z height difference in mm. Used when generating range images with a camera. The range image will not interpolate between sensed Z values which differ by more than the ZContinuityThreshold. Default is equal to the default ZDetectionHeight. The default was picked so that it would not affect generated range images.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZContinuityThreshold</event><value>Specifies a maximum Z difference for interpolating between sensed Z values.</value></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZOffsetMax"><value>The maximum value can be applied to ZOffset.</value><summary>Maximum ZOffset value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZOffsetMin"><value>The minimum value can be applied to ZOffset</value><summary>Minimum ZOffset value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZOffset"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZOffset</event><summary>Reads or sets the distance, in mm, relative to the camera defined origin of the Z axis, which corresponds to a pixel value of 0. Used when generating range images. The default is 0.0.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than ZOffsetMin or greater than ZOffsetMax.</exception><value>Defines a distance, in mm, relative camera defined origin of the Z axis, which corresponds to a pixel value of 0.</value></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZScaleMax"><value>The maximum value can be applied to ZScale.</value><summary>Maximum ZScale value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZScaleMin"><summary>Minimum ZScale value allowed.</summary><value>The minimum value can be applied to ZScale.</value></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.ZScale"><value>Defines a distance between an object of interest and the camera in mm of pixel values.</value><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfZScale</event><summary>Reads or sets the scaling in mm of pixel values. Used when generating range images with a camera. When ZScale is positive, pixel values increase towards the camera. When ZScale is negative, pixel values increase away from the camera. Values near 0.0 will be rounded to 0.00001 or -0.00001. Default is 0.01 mm/pixel value. The default was picked to be a round number which also provides the full accuracy of the camera.</summary><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than ZScaleMin or greater than ZScaleMax.</exception></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.YScale"><summary>Reads the dimensions of image pixels in mm in the Y direction. Unlike XScale and ZScale, the YScale setting is not used by the acq system. It is only used to set the Y component of the transform of the acquired image. The default is 1.0.</summary><value>The dimensions of image pixels in mm in the Y direction.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than YScaleMin or greater than YScaleMax.</exception></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.FirstPixelLocationRange"><summary>Defines the range of offset of the output image relative to the center, in mm. The offset must reside within the range. -FirstPixelLocationRange &lt;= FirstPixelLocation &lt;= FirstPixelLocationRange.</summary><value>The range of offset of the output image relative to the center, in mm.</value></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.FirstPixelLocation"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfFirstPixelLocation</event><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than -FirstPixelLocationRange or greater than FirstPixelLocationRange.</exception><value>Offset of the output image relative to the center, in mm.</value><summary>Reads or sets the offset of the output image relative to the center, in mm. Negative offsets are allowed. The default value corresponds to the leftmost location that can be seen at the furthest distance from the camera. Default value is negative, which indicates the left side of the center line.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.XScaleMax"><value>The maximum value can be applied to XScale.</value><summary>Maximum X scale value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.XScaleMin"><value>The minimum value can be applied to XScale.</value><summary>Minimum X scale value allowed.</summary></member><member name="P:Cognex.VisionPro.ICogAcqRangeImage.XScale"><summary>Reads or sets the dimensions of image pixels in mm in the X direction. Used when generating range images. Defaults to the scaling of sensor pixels at the closest distance from the camera that can be measured. This ensures no information is lost in range images for objects close to the camera, but it increases the width of the range image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes. The following state flag may be affected: SfXScale</event><value>The dimensions of image pixels in mm in the X direction.</value><exception cref="T:System.ArgumentOutOfRangeException">If the supplied value is less than XScaleMin or greater than XScaleMax.</exception></member><member name="T:Cognex.VisionPro.ICogAcqFieldCalibration"><summary>Interface for displacement sensor field calibration.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationZScale"><remarks><para>This value is ignored if either <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseFieldCalibration" /> or <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.RemoveSkewFromRangeImage" /> are false.</para><para>The default value is the same as the default for <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.ZScale" />.  The value will be forced to the default if <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseDefaultScales" /> is true </para></remarks><value>The number of mm per pixel value.</value><summary>Gets or sets the scaling from pixel values to mm used when field calibration is in effect.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationYScale"><summary>Gets or sets the range image pixel size in the Y direction used when field calibration is in effect.</summary><remarks><para>This value is ignored if either <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseFieldCalibration" /> or <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.RemoveSkewFromRangeImage" /> are false.</para><para>The default value is the same as the default for <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.XScale" />.  Note that the X and Y scales default to the same value to produce square pixels in the range image.  The value will be forced to the default if <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseDefaultScales" /> is true </para></remarks><value>The size of the range image pixel in the Y direction.</value></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationXScale"><remarks><para>This value is ignored if either <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseFieldCalibration" /> or <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.RemoveSkewFromRangeImage" /> are false.</para><para>The default value is the same as the default for <see cref="P:Cognex.VisionPro.ICogAcqRangeImage.XScale" />.  The value will be forced to the default if <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseDefaultScales" /> is true </para></remarks><summary>Gets or sets the range image pixel size in the X direction used when field calibration is in effect.</summary><value>The size of the range image pixel in the X direction.</value></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseDefaultScales"><remarks><para>When set to true, the values held by <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationXScale" />, <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationYScale" />, and <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationZScale" /> are discarded and replaced with their default values.  If images from multiple sensors are to be stitched together, using the default scaling values is an easy way to guarantee that the range images will be acquired for best stitching performance.</para><para>When set to false, the scaling values can be set as desired.</para></remarks><summary>Gets or sets whether default scaling values or user specified values are used for defining the pixel size of range images.  The default value is true.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.AcqFifoSensorIndex"><summary>The index of this fifo's sensor in the field calibration file, or -1 if the sensor was not found.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationSensorCount"><summary>Gets the number of sensors in the field calibration file.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationSpace3DSensorIndex"><remarks><para>In a multi-sensor setting with image stitching, the FieldCalibrationSpace3DSensorIndex property specifies which sensor's coordinate space (as specified by the <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationSpace3D" /> ) to use when generating the range image. </para><para>In a multi-sensor scenario without image stitching, each sensor should have its own separate field calibration file, so the first sensor in the list is also the only sensor in the file.</para><para>The <see cref="M:Cognex.VisionPro.ICogAcqFieldCalibration.GetFieldCalibrationSensorId" /> method can be used to query the corresponding label given to the sensor in the training application.</para><para>An error will be returned if index is greater than or equal to <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationSensorCount" />.</para></remarks><summary>Gets or sets which sensor's coordinate space is used when generating the range image.  The default value is 0.</summary><value>The index of the sensor whose coordinate space is used when generating the range image.</value></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationSpace3D"><summary>Gets or sets the space to render the range image pixels in.  The default value is Sensor3D.</summary><value>The space to render the range image pixels in.</value></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.RemoveSkewFromRangeImage"><summary>Enables or disables use of field calibration data to remove skew from range images.</summary><remarks><para>This property specifies how the field calibration data is used during acquisition.</para><para>If true, the field calibration data is used to remove skew from the range image:<list type="bullet"><item><description>The range image will be rendered in an orthogonal coordinate space, which is suitable for use with all vision tools</description></item><item><description>The size of the resulting range image is determined by the acquisition system, and will be large enough to contain all data acquired from the sensor.  Further, the size of the image will vary from system to system based on the amount of skew being removed.</description></item><item><description>This option is generally slower and produces larger range images.</description></item></list></para>If false:<para><list type="bullet"><item><description>The range image will be rendered the same way as it would be without field calibration, in a non-orthogonal coordinate system.  Some vision tools may have difficulty handling the skew.</description></item><item><description>This option is faster and with cropping can produce significantly smaller images.</description></item></list></para></remarks></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationFileSuccess"><summary>Gets the status of the field calibration file</summary><returns>True true if the field calibration file was successfully opened and read. False if there is a problem with the field calibration file, including the case where no file was specified.</returns></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.FieldCalibrationFile"><value>The path to the field calibration data file.</value><remarks><para>The default value is an empty string.</para><para>The file is read every time the setter is called, even if the file name is the same. The file is read even if the UseFieldCalibration is false.</para><para>Acquisition will fail if field calibration is enabled and either the file cannot be read, or the sensor is not found in the field calibration file.</para><para>If the file can not be read when the path is set, an exception is thrown, but the path will be set.</para></remarks><summary>Gets or sets the path to the file containing the field calibration data.</summary></member><member name="P:Cognex.VisionPro.ICogAcqFieldCalibration.UseFieldCalibration"><remarks><para>When enabled and a valid field calibration file has been specified, data from the field calibration file is used when rendering the range image.  The field calibration is used to either remove skew from the rendered data, or adjust the coordinate spaces to account for the measured skew, depending on the <see cref="P:Cognex.VisionPro.ICogAcqFieldCalibration.RemoveSkewFromRangeImage" /> setting.</para><para>If disabled, field calibration is not used.</para><para>An acquisition error will occur if field calibration is enabled, but the field calibration file is not specified or cannot be read.</para></remarks><summary>Enables or disables use of field calibration data when acquiring images.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFieldCalibration.GetFieldCalibrationSensorId(System.Int32)"><param name="index">n/a</param><summary>Get the identifier provided by the user at train time for the corresponding sensor.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFieldCalibration.GetFieldCalibrationSpaceName3D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants)"><param name="space">The coordinate space to get the name of.</param><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys3D", "Sensor3D", "YLockedToMotion3D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName3D" /> is used.</para></remarks><summary>Get the name of a 3D coordinate space.</summary><returns>The name of the coordinate space.</returns></member><member name="M:Cognex.VisionPro.ICogAcqFieldCalibration.SetFieldCalibrationSpaceName3D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants,System.String)"><param name="space">The coordinate space which will have its name set.</param><param name="value">The name to set for the coordinate space.</param><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys3D", "Sensor3D", "YLockedToMotion3D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName3D" /> is used.</para></remarks><summary>Set the name of a 3D coordinate space.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFieldCalibration.GetFieldCalibrationSpaceName2D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants)"><param name="space">The coordinate space to get the name of.</param><returns>The name of the coordinate space.</returns><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys2D", "Sensor2D", "YLockedToMotion2D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName2D" /> is used.</para></remarks><summary>Get the name of a 2D coordinate space.</summary></member><member name="M:Cognex.VisionPro.ICogAcqFieldCalibration.SetFieldCalibrationSpaceName2D(Cognex.VisionPro.CogFieldCalibrationSpaceConstants,System.String)"><param name="space">The coordinate space which will have its name set.</param><param name="value">The name to set for the coordinate space.</param><remarks><para>Each space as defined by <see cref="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants" /> can have a name associated with it. The AcqFifo will internally keep track of the names. The default values are a text representation of the coordinate spaces ("Phys2D", "Sensor2D", "YLockedToMotion2D")</para><para>If field calibration is disabled, <see cref="P:Cognex.VisionPro.ICogAcqRangeImageparams.CalibratedSpaceName2D" /> is used.</para></remarks><summary>Set the name of a 2D coordinate space.</summary></member><member name="T:Cognex.VisionPro.ICogFrameGrabber"><remarks><PARA>Interface for controlling a frame grabber.</PARA></remarks><summary>Interface for controlling a frame grabber.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.OutputLines"><summary>Gets the collection of available output lines.  If no output lines are available on this frame grabber the returned collection will have a Count of zero.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.InputLines"><summary>Gets the collection of available input lines.  If no input lines are available on this frame grabber the returned collection will have a Count of zero.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.OwnedImagingDeviceAccess"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogImagingDeviceAccess" /> interface for this frame grabber if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.OwnedGigEAccess"><summary>Gets a <see cref="T:Cognex.VisionPro.ICogGigEAccess" /> interface for this frame grabber if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.Owned1394DCAMAccess"><summary>Gets a <see cref="T:Cognex.VisionPro.ICog1394DCAMAccess" /> interface for this frame grabber if one exists.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.UniqueID"><summary>Internal use only.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.NumVideoChannels"><remarks><PARA>Returns the number of video channels this frame grabber supports. This is the maximum number of simultaneous acquisitions the frame grabber supports.</PARA></remarks><summary>Number of video channels this frame grabber supports. This is the maximum number of simultaneous acquisitions allowed.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats"><remarks><PARA>Returns a collection of video formats that this frame grabber supports. You specify the video format when you <see cref="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)">create an acquisition FIFO</see>.</PARA><PARA>On frame grabbers that support <see cref="u:Acquisition.CDC_CMOS.Theory.CMOSCams">CogLink</see>, <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" /> returns a collection of video formats supported by all connected cameras.
To determine which formats a particular CogLink camera supports, use 
<see cref="T:Cognex.VisionPro.FG8100D.Implementation.Internal.CogLinkCamera8100D">CogLinkCamera8100D</see>.<see cref="P:Cognex.VisionPro.ICogLinkCamera.AvailableVideoFormats" />.
</PARA><PARA>See the 
<see cref="r:cameras">camera support table</see>
 for a list of video formats supported for each frame grabber.</PARA></remarks><summary>Collection of video formats that this frame grabber supports.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.Index"><summary>Index within the collection of frame grabbers of this type.</summary><remarks><PARA>Returns the index of this frame grabber within the collection of frame grabbers of this type.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.SerialNumber"><summary>Serial number of this frame grabber.</summary><remarks><PARA>Serial number of this frame grabber.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogFrameGrabber.Name"><remarks><PARA>Returns the model name of this frame grabber, for example "Cognex 8100M"</PARA></remarks><summary>Name indicating the type of frame grabber.</summary></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.GetAvailableVideoFormatOptions(Cognex.VisionPro.CogAcqVideoFormatOptionConstants,System.String,System.String,System.String,System.String,System.String)"><param name="requestedOptions"><PARA>The options you want reported for the cameras that match the other parameters.</PARA></param><param name="cameraManufacturer"><PARA>The camera manufacturer such as "Pulnix" or "Sony".</PARA></param><param name="cameraModel"><PARA>The camera model such as "TM-7EX".</PARA></param><param name="cameraResolution"><PARA>The camera resolution such as "640x480".</PARA></param><param name="cameraDriveType"><PARA>The type of camera drive such as "IntDrv" or "ExtPLLCo"</PARA></param><param name="cameraOptions"><PARA>The camera options such as "rapid-reset, shutter-sw-EDONPISHAII".</PARA></param><summary>Returns a sorted list of video format options that match the selected criteria.</summary><returns><PARA>The collection of options that matches the criteria.</PARA></returns><remarks><PARA>Returns a sorted list of video format options that match the selected criteria.</PARA><PARA>You specify the video format options that interest you in <paramref name="requestedOptions" /> and use the remaining parameters as filters.

<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetAvailableVideoFormatOptions(Cognex.VisionPro.CogAcqVideoFormatOptionConstants,System.String,System.String,System.String,System.String,System.String)" />
returns a <see cref="T:Cognex.VisionPro.CogStringCollection" /> of video format options that match your criteria.
If you request more than one option,
	the resulting strings contain the options concatenated with a single space between them.

The
	<see cref="M:Cognex.VisionPro.CogStringCollection.GetKey(System.Int32)">key</see>
	of each element in the collection returned is the index of the first available video format  that matches.

You can use this value as an index to <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)"><param name="videoFormat"><PARA>The video format.</PARA></param><summary>Number of camera ports available for the given video format.</summary><remarks><PARA>Returns the number of physical camera ports for a particular <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats">video format</see> on this frame grabber. Camera port numbering starts at zero. The highest camera port number is one less than 
<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
 </PARA><PARA>Your frame grabber may not be able to acquire images from all ports simultaneously. Use <see cref="P:Cognex.VisionPro.ICogFrameGrabber.NumVideoChannels" /> to determine how many images can be acquired at the same time.</PARA><PARA>Refer to the manual for the frame grabber you are using for information on how software port numbers map to the physical ports on your hardware.</PARA><PARA>Compare this function with <see cref="P:Cognex.VisionPro.ICogAcqFifo.NumCameraPorts" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.GetSupportsPixelFormat(Cognex.VisionPro.CogAcqFifoPixelFormatConstants)"><param name="format"><PARA>The pixel format. Must be one of the pixel formats in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</PARA></param><remarks><PARA>
This method is deprecated. It always returns True.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="format" /> is not in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</para></exception><summary>Whether this frame grabber supports the given pixel format.</summary></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.CreateAcqFifo(System.String,Cognex.VisionPro.CogAcqFifoPixelFormatConstants,System.Int32,System.Boolean)"><param name="videoFormat"><PARA>The video format. Must be one of the strings returned by <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" /></PARA></param><param name="fifoType"><PARA>This parameter is ignored. </PARA></param><param name="cameraPort"><PARA>Specifies the camera port to use with the newly created acquisition FIFO. Camera port numbering starts at zero.
Use
	<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
to determine how many camera ports this frame grabber supports.</PARA></param><param name="autoPrepare"><PARA>Sets the  <see cref="P:Cognex.VisionPro.ICogAcqFifo.AutoPrepareEnabled" /> property of the acquisition FIFO that specifies whether the FIFO is automatically <see cref="M:Cognex.VisionPro.ICogAcqFifo.Prepare">prepared</see> when a property changes.</PARA></param><summary>Create a new acquisition fifo on this frame grabber. The value of AutoPrepare will be used as the initial setting of the AutoPrepareEnabled property. If this value is true, the fifo will be prepared after it is created.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Format" /> is not in <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants" />.</para></exception><!--
    <ERROR_HRESULT NAME="E_CogAcq_PixelFormatNotSupported"><DISPLAY PARAM="Format" /> is not a supported pixel format for this frame grabber.</ERROR_HRESULT>
--><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqBadVideoFormatException" cgnxHRESULT="E_CogAcq_BadVideoFormat"><para>The video format is not recognized, or no connected camera supports the video format.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqNoCamerasException" cgnxHRESULT="E_CogAcq_NoCameras"><para>No cameras are connected (CogLink only).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogAcqCannotCreateFifoException" cgnxHRESULT="E_CogAcq_CannotCreateFifo"><para><paramref name="autoPrepare" /> is True and the  FIFO cannot be prepared. This may be because a digital camera is not connected.</para></exception><returns><PARA>An <see cref="T:Cognex.VisionPro.CogAcqFifo" /> suitable for acquiring images of the specified <see cref="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants">pixel format</see> with the specified video format.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.ICogAcqFifo" /> on this frame grabber.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.ICogFrameGrabber.AvailableVideoFormats" /> to get a list of available video formats. They are also listed in the 
<HTMLPASS><A HREF="cameras.html">camera support table</A></HTMLPASS>
.</PARA><PARA>You may get an error creating an acquisition FIFO if the new FIFO and an existing FIFO use the same camera port. The error occurs when the existing FIFO uses <see cref="T:Cognex.VisionPro.CogAcqTriggerModelConstants">hardware triggers</see>. To avoid errors, you must either delete the old FIFO or create the new FIFO with <paramref name="autoPrepare" /> set to False. The following code shows how to avoid this problem.
</PARA><NOTE>
The fifoType argument is ignored.
</NOTE><CODE LANGUAGE="VB">
  Dim iTrig As CogAcqTrigger
  Dim fgs As New CogFrameGrabbers
  Dim fg As CogFrameGrabber
  Dim myFifo As CogAcqFifo
  Set fg = fgs(0)

  Set myFifo = fg.CreateAcqFifo(fg.VideoFormats(0))
  Set iTrig = myFifo
  iTrig.TriggerModel = cogAcqTriggerModelAuto
  iTrig.TriggerEnabled = True
  <ITALIC>... acquire images and process them ...</ITALIC><COMMENTLINE>Before changing video formats, flush the FIFO, then delete it</COMMENTLINE>
  myFifo.Flush
  myFifo = Nothing
  Set myFifo = fg.CreateAcqFifo(fg.VideoFormats(1))
  Set iTrig = myFifo

</CODE></remarks></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.SameHardware(Cognex.VisionPro.ICogFrameGrabber)"><param name="other"><PARA>The other frame grabber.</PARA></param><returns><PARA>True if this frame grabber and <paramref name="other" /> are the same .</PARA></returns><summary>Whether this frame grabber refers to the same hardware as Other.</summary><remarks><PARA>Whether this frame grabber refers to the same hardware as Other.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.Disconnect(System.Boolean)"><param name="AllowRecovery">Determines whether the connection to hardware can be re-established.  It should always be set to true unless it is being called just prior to program termination.</param><summary>Breaks the connection between this software object and the hardware and cleans up the internal software objects.  This function should be called whenever something has caused the state of the hardware to get out of sync wit the software state (i.e. power is temporarily lost to a camera).  It should also be called prior to exiting the application.</summary></member><member name="M:Cognex.VisionPro.ICogFrameGrabber.GetStatus(System.Boolean)"><param name="Cached">n/a</param><summary>Returns the current status of the device.</summary></member><member name="T:Cognex.VisionPro.ICogFrameGrabberCVM"><summary>Interface for finding the CVM id of a frame grabber.</summary><remarks><PARA>Interface for finding the CVM id of a frame grabber.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogFrameGrabberCVM.CVMID"><summary>Returns the id of any attached CVM.</summary><remarks><PARA>Returns the ID of any attached CVM. The CVM ID is the same as the CVM number. For example, the ID of CVM11 is 11.</PARA><PARA> Returns −1 if the frame grabber supports CVMs but there is no CVM present. <BR />
Returns −2 if the frame grabber has no CVM connector.</PARA><PARA>See the example to learn how to test whether your frame grabber supports CVMs.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.ICogFrameGrabberCVM.CVMID" /> for informational purposes only
	and not as a substitute for querying the capabilities of your frame grabber such as 
	<see cref="T:Cognex.VisionPro.ICogFrameGrabber" />.<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetNumCameraPorts(System.String)" />.
</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogFrameGrabberModule"><remarks><PARA>Frame grabber module.</PARA></remarks><summary>Frame grabber module.</summary></member><member name="P:Cognex.VisionPro.ICogFrameGrabberModule.Name"><remarks><PARA>Name of the frame grabber module.</PARA></remarks><summary>Name of the frame grabber module.</summary></member><member name="T:Cognex.VisionPro.ICogGraphicHighlight"><summary>Interface of a highlight capable graphic.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicHighlight.HighlightColor"><summary>Get or set the color of the highlighted feature.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event><value>The color of the highlighted feature. If set to CogColorConstants.None, no highlighting will occur.</value><exception cref="T:System.ArgumentException">If you attempt to set HighlightColor to a an unknown value.</exception></member><member name="P:Cognex.VisionPro.ICogGraphicHighlight.HighlightIndex"><summary>Get or set the index of the feature to be highlighted. If set to -1, no highlighting will occur.</summary><value>The index of the feature to be highlighted.</value><exception cref="T:System.ArgumentOutOfRangeException">If you attempt to set HighlightIndex to a value less than -1.</exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires when this property changes.</event></member><member name="P:Cognex.VisionPro.ICogGraphicHighlight.HighlightRequested"><value>The number of outstanding requests for highlighting.</value><summary>If greater than zero, highlighting is enabled.</summary></member><member name="M:Cognex.VisionPro.ICogGraphicHighlight.HighlightRequest"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires to indicate that HighlightRequested has changed.</event><summary>Enables highlighting by incrementing HighlightRequested.</summary></member><member name="M:Cognex.VisionPro.ICogGraphicHighlight.HighlightRelinquish"><summary>Decrement the HighlightRequested reference count, unless it is already zero. If HighlightRequested reaches zero, highlighting is disabled.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">Fires to indicate that HighlightRequested has changed.</event></member><member name="T:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator"><summary>Iterator describing elliptical arc segments of a general contour.</summary><remarks><PARA>Iterator describing elliptical arc segments of a general contour.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.EllipseFraction"><summary>Returns/sets the fraction of the ellipse that passes through the start, mid and end points.  For slight arcs, using roughly a quarter of the ellipse will usually provide good results. This property must be between 0 and 1 (exclusive).</summary><remarks><PARA>Sets or gets the fraction of the ellipse that passes through the start, mid-, and end points.
For slight arcs, using roughly a quarter of the ellipse usually provides good results. This value must be greater than 0 and less than 1.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the fraction changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the fraction changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction is &lt;= 0 or &gt;= 1.</para></exception></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.MidpointY"><remarks><PARA>Sets or gets the y-coordinate of the elliptical arc midpoint.</PARA></remarks><summary>Returns/sets the Y coordinate of the elliptical arc midpoint.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the midpoint changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the midpoint changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.MidpointX"><remarks><PARA>Sets or gets the x-coordinate of the elliptical arc midpoint.</PARA></remarks><summary>Returns/sets the X coordinate of the elliptical arc midpoint.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the midpoint changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the midpoint changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SegmentType"><summary>Returns the type of this segment of the contour. The segment type can be used to choose the most specific iterator to extract all information about the segment.</summary><remarks><PARA>Returns the type of this segment of the contour.
You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> to choose the most specific iterator 
(<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" /> 
or
<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />)
to extract all information about the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.IsInvalid"><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.IsEnd"><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.IsFirst"><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.Attributes"><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid" />.</PARA></remarks><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.Position"><summary>Returns the position of the iterator in the container.</summary><remarks><PARA>Returns the position of the iterator in the container.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to save an iterator's position and then use <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPosition(System.Int32)" /> to move back to it. The position is not the same as the index of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.Container"><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA></remarks><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.EndAngle"><remarks><PARA>Computes the angle of the tangent to this segment's shape at the end of the segment.
Angles are given in radians and normalized to the range −π to π.
</PARA></remarks><summary>Computes the angle (in radians) of the tangent to this segment's shape at the end of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.StartAngle"><summary>Computes the angle (in radians) of the tangent to this segment's shape at the start of the segment.</summary><remarks><PARA>Computes the angle of the tangent to this segment's shape at the start of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.Length"><summary>Computes the length of this segment of the contour.</summary><remarks><PARA>Computes the length of this segment of the contour.</PARA><NOTE>For segments, such as elliptical arcs, the length computation may require additional time.</NOTE></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.EndAdornmentCustomPen"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Returns/sets the custom pen used to draw the adornment at the end point of the segment.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the end point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.EndFlags"><summary>Returns the flags describing the contour's behavior at end point of the segment.</summary><remarks><PARA>Returns the flags that describe  the contour's behavior at end point of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.EndY"><remarks><PARA>Sets or gets the y-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the Y coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.EndX"><remarks><PARA>Sets or gets the x-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the X coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.CustomPen"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Returns/sets the key that refers to the custom pen properties used for drawing this segment.  A key of 0 (the default) causes the segment to use the pen properties of the contour.</summary><remarks><PARA>Sets or gets the key that refers to the
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens">custom pen</see>
		properties used for drawing this segment.
		Zero means that the segment uses the pen properties of the contour.</PARA><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.StartFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at start point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at start point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.StartAdornmentCustomPen"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><summary>Returns/sets the custom pen used to draw the adornment at the start point of the segment.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the start point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.StartY"><remarks><PARA>Sets or gets the y-coordinate of the start point of the segment.</PARA></remarks><summary>Returns/sets the Y coordinate of the start point of the segment.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="P:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.StartX"><remarks><PARA>Sets or gets the x-coordinate of the start point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the X coordinate of the start point of the segment.</summary></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.MoveToNext"><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> to avoid errors.</PARA></remarks><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.MoveToPrevious"><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><returns><PARA>The new iterator.</PARA></returns><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.GetLineSegmentIterator"><remarks><PARA>Gets the iterator interface that provides full access to line segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />
		 does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, 	you will get an error.
</NOTE></remarks><summary>Gets the iterator interface that provides full access to line segment properties.</summary><returns><PARA>The returned iterator.</PARA></returns></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.GetEllipticalArcSegmentIterator"><remarks><PARA>Gets the iterator interface that provides full access to elliptical arc segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" />
		does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, such as <see cref="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)" />,
	you will get an error.
</NOTE></remarks><summary>Gets the iterator interface that provides full access to arc segment properties.</summary><returns><PARA>The returned iterator.</PARA></returns></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.GetStartMidpointEndEllipseFraction(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>X-coordinate of the start point of the arc.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the arc.</PARA></param><param name="midX"><PARA>X-coordinate of the midpoint of the arc.</PARA></param><param name="midY"><PARA>Y-coordinate of the midpoint of the arc.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the arc.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the arc.</PARA></param><param name="ellipseFraction"><PARA>The fraction of the ellipse that passes through the start, mid-, and end points. This value must be &gt; 0 and &lt; 1.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><summary>Gets StartX, StartY, MidpointX, MidpointY, EndX, EndY, and EllipseFraction of this elliptical arc.</summary><remarks><PARA>Gets the start point, midpoint, end point, and ellipse fraction of this elliptical arc.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetStartMidpointEndEllipseFraction(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>X-coordinate of the start point of the arc.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the arc.</PARA></param><param name="midX"><PARA>X-coordinate of the midpoint of the arc.</PARA></param><param name="midY"><PARA>Y-coordinate of the midpoint of the arc.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the arc.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the arc.</PARA></param><param name="ellipseFraction"><PARA>The fraction of the ellipse that passes through the start, mid-, and end points. This value must be &gt; 0 and &lt; 1.</PARA></param><remarks><PARA>Sets the start point, midpoint, end point, and ellipse fraction of this elliptical arc.</PARA><NOTE>This method also changes the geometry of any connected segments because it changes the start and end of this segment.</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction is &lt;= 0 or &gt;= 1.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeDegenerateEllipticalArcSegException" cgnxHRESULT="E_CogShape_DegenerateEllipticalArcSeg"><para>Points on the elliptical arc segment are colinear.</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Sets StartX, StartY, MidpointX, MidpointY, EndX, EndY, and EllipseFraction of this elliptical arc segment. Note that this method will also change the geometry of any connected segments because it changes the Start and End of this segment.</summary></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.CreateEllipticalArc"><returns><PARA>The elliptical arc.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogEllipticalArc" />with the same geometric and graphics properties as this segment.</PARA></remarks><summary>Creates a new CogEllipticalArc with the same geometric and graphics properties as this segment.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction is &lt;= 0 or &gt;= 1.</para></exception></member><member name="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)"><param name="ellipticalArc"><PARA>The elliptical arc.</PARA></param><remarks><PARA>Sets the arc segment geometry from the specified elliptical arc.
Only the geometry is copied; graphics properties are ignored.</PARA><NOTE>This method also changes the geometry of any connected segments because it changes the start and end of this segment.</NOTE></remarks><summary>Sets the arc segment geometry from the specified elliptical arc. Only the geometry is copied, graphics properties are ignored. Note that this method also changes the geometry of any connected segments because it changes both Start and End of this segment.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The ellipse fraction computed from the arc's <see cref="P:Cognex.VisionPro.CogEllipticalArc.AngleSpan" />  is &lt;= 0 or &gt;= 1.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="ellipticalArc" /> is Nothing.</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT></member><member name="T:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator"><summary>The general contour line segment iterator describes line segments of a general contour.</summary><remarks><PARA>The general contour line segment iterator describes line segments of a general contour.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.SegmentType"><remarks><PARA>Returns the type of this segment of the contour.
You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> to choose the most specific iterator 
(<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" /> 
or
<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />)
to extract all information about the segment.</PARA></remarks><summary>Returns the type of this segment of the contour. The segment type can be used to choose the most specific iterator to extract all information about the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.IsInvalid"><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA></remarks><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.IsEnd"><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.IsFirst"><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.Attributes"><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.Position"><summary>Returns the position of the iterator in the container.</summary><remarks><PARA>Returns the position of the iterator in the container.</PARA><PARA>You can use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to save an iterator's position and then use <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPosition(System.Int32)" /> to move back to it. The position is not the same as the index of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.Container"><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndAngle"><remarks><PARA>Computes the angle of the tangent to this segment's shape at the end of the segment.
Angles are given in radians and normalized to the range −π to π.
</PARA></remarks><summary>Computes the angle (in radians) of the tangent to this segment's shape at the end of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartAngle"><summary>Computes the angle (in radians) of the tangent to this segment's shape at the start of the segment.</summary><remarks><PARA>Computes the angle of the tangent to this segment's shape at the start of the segment.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.Length"><summary>Computes the length of this segment of the contour.</summary><remarks><PARA>Computes the length of this segment of the contour.</PARA><NOTE>For segments, such as elliptical arcs, the length computation may require additional time.</NOTE></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndAdornmentCustomPen"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><summary>Returns/sets the custom pen used to draw the adornment at the end point of the segment.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the end point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at end point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at end point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndY"><remarks><PARA>Sets or gets the y-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the Y coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndX"><remarks><PARA>Sets or gets the x-coordinate of the end point of the segment.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Returns/sets the X coordinate of the end point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.CustomPen"><remarks><PARA>Sets or gets the key that refers to the
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens">custom pen</see>
		properties used for drawing this segment.
		Zero means that the segment uses the pen properties of the contour.</PARA><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><summary>Returns/sets the key that refers to the custom pen properties used for drawing this segment.  A key of 0 (the default) causes the segment to use the pen properties of the contour.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartFlags"><remarks><PARA>Returns the flags that describe  the contour's behavior at start point of the segment.</PARA></remarks><summary>Returns the flags describing the contour's behavior at start point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartAdornmentCustomPen"><summary>Returns/sets the custom pen used to draw the adornment at the start point of the segment.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value is not an existing pen key  that refers to a pen in the contour's 
	<see cref="P:Cognex.VisionPro.CogGeneralContour.OwnedCustomPens" />.
</para></exception><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.ICogGraphicMultiPen" /> used to draw the adornment at the start point of the segment.</PARA><NOTE>Adornments use only the color attribute of the pen. The line width is always 1, and the line style is always solid.</NOTE><DEFAULT>0 (Use the properties of the contour.)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the adornment pen changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartY"><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the y-coordinate of the start point of the segment.</PARA></remarks><summary>Returns/sets the Y coordinate of the start point of the segment.</summary></member><member name="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartX"><summary>Returns/sets the X coordinate of the start point of the segment.</summary><event cref="E:Cognex.VisionPro.CogGeneralContourSegment.Changed" cgnxEvent="multiState"><para>
		
		Fires when the coordinate changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the coordinate changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><remarks><PARA>Sets or gets the x-coordinate of the start point of the segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.MoveToNext"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToNext" /> to avoid errors.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.MoveToPrevious"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.Container" />.</para></exception><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.CogGeneralContourSegmentIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception><returns><PARA>The new iterator.</PARA></returns><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.GetLineSegmentIterator"><remarks><PARA>Gets the iterator interface that provides full access to line segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedLineSegmentIterator" />
		 does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, 	you will get an error.
</NOTE></remarks><summary>Gets the iterator interface that provides full access to line segment properties.</summary><returns><PARA>The returned iterator.</PARA></returns></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.GetEllipticalArcSegmentIterator"><returns><PARA>The returned iterator.</PARA></returns><summary>Gets the iterator interface that provides full access to arc segment properties.</summary><remarks><PARA>Gets the iterator interface that provides full access to elliptical arc segment properties.</PARA><NOTE>If the <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
	<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">EllipticalArc</see><see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.OwnedEllipticalArcSegmentIterator" />
		does not return an error immediately.
	However, if you attempt to set or get
	type-specific properties, such as <see cref="M:Cognex.VisionPro.ICogGeneralContourEllipticalArcSegmentIterator.SetFromEllipticalArc(Cognex.VisionPro.CogEllipticalArc)" />,
	you will get an error.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.GetStartEnd(System.Double@,System.Double@,System.Double@,System.Double@)"><param name="startX"><PARA>X-coordinate of the start point of the segment.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment.</PARA></param><remarks><PARA>Returns the start and end coordinates for the line segment.</PARA></remarks><summary>Returns the start and end coordinates for the line segment.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.SetStartEnd(System.Double,System.Double,System.Double,System.Double)"><param name="startX"><PARA>X-coordinate of the start point of the segment.</PARA></param><param name="startY"><PARA>Y-coordinate of the start point of the segment.</PARA></param><param name="endX"><PARA>X-coordinate of the end point of the segment.</PARA></param><param name="endY"><PARA>Y-coordinate of the end point of the segment.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCoordinatesMustDifferException" cgnxHRESULT="E_CogShape_CoordinatesMustDiffer"><para>
		Points in the new segment are coincident.
	</para></exception><remarks><PARA>Sets the start and end coordinates for the line segment. Note that this may change the start or end coordinates of any segments connected to this one.</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Sets the start and end coordinates for the line segment. Note that this may change the start or end coordinates of any segments connected to this one.</summary></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.CreateLineSegment"><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><summary>Creates a new CogLineSegment with the same geometric and graphics properties as this segment.</summary><returns><PARA>The line segment.</PARA></returns><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogLineSegment" /> with the same geometric and graphics properties as this segment.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.SetFromLineSegment(Cognex.VisionPro.CogLineSegment)"><param name="lineSegment"><PARA>The line segment.</PARA></param><remarks><PARA>Sets the line segment geometry from the given <see cref="T:Cognex.VisionPro.CogLineSegment" />.
Only the geometry is copied; graphics properties are ignored.</PARA><NOTE>This method also changes the geometry of any connected segments because it changes the start and end of this segment.</NOTE></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeBadContourSegTypeException" cgnxHRESULT="E_CogShape_BadContourSegType"><para>The <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.SegmentType" /> is not
		<see cref="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants">Line</see></para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>This iterator is not <see cref="P:Cognex.VisionPro.CogGeneralContourSegmentIterator.IsInvalid">valid</see>.</para></exception><event cref="E:Cognex.VisionPro.CogGeneralContourSegmentIterator.Changed" cgnxEvent="multiState"><para>
		
		Fires when the segment changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Geometry--></ul></event><EVENT TYPELIB="CognexCore" IFACE="ICogGeneralContourEvents" FUNC="SegmentsChanged"><ACTUAL_PARAMS><ACTUAL_PARAM>StartIndex</ACTUAL_PARAM><ACTUAL_PARAM>StartIndex + 1</ACTUAL_PARAM></ACTUAL_PARAMS>
Fires when the segment changes. This event fires in addition to the <LINK IFACE="ICogChangeEvent" FUNC="Change" cref="Cognex.VisionPro.CogChangeEvent.Change" assemblyName="Core" iface="CogChangeEvent" func="Change">change event</LINK>.
	</EVENT><summary>Sets the line segment geometry from the given LineSegment. Only the geometry is copied, graphics properties are ignored. Note that this method also changes the geometry of any connected segments because it changes both Start and End of this segment.</summary></member><member name="T:Cognex.VisionPro.ICogGraphic"><remarks><PARA>Interface to make an object renderable in a CogDisplay control.</PARA></remarks><summary>Interface to make an object renderable in a CogDisplay control.</summary></member><member name="P:Cognex.VisionPro.ICogGraphic.LineWidthInScreenPixels"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineWidthInScreenPixels--><ul /></event><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogGraphic" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks><summary>Line width (in screen pixels) of this graphic.</summary></member><member name="P:Cognex.VisionPro.ICogGraphic.LineStyle"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_LineStyle--><ul /></event><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogGraphic.Color"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Color--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogGraphic" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks><summary>Color of this graphic. Can be any OLE_COLOR.</summary></member><member name="P:Cognex.VisionPro.ICogGraphic.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogGraphic" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><summary>Visible property of this graphic.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_Visible--><ul /></event></member><member name="P:Cognex.VisionPro.ICogGraphic.SelectedSpaceName"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><summary>Coordinate space in which this shape is to be interpreted.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogGraphic" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ICogGraphic.CopyBase(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><summary>Copy a graphic and its derived parameters.</summary><remarks><PARA>Creates a new <see cref="T:Cognex.VisionPro.CogGraphic" /> that copies the specified parameter from this <see cref="T:Cognex.VisionPro.CogGraphic" />.
</PARA></remarks><returns><PARA>The copied <see cref="T:Cognex.VisionPro.CogGraphic" /> object.</PARA></returns></member><member name="T:Cognex.VisionPro.ICogGraphicInteractive"><remarks><PARA>Interface of an interactive graphic.</PARA></remarks><summary>Interface of an interactive graphic.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the degrees of freedom state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_GraphicDOFEnable--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfGraphicDOFEnable" /></li></ul></event><remarks><PARA>Sets or gets which <see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">degrees of freedom</see> (DOF) are enabled for the shape.
	This property allows access to a graphic's 
		<BOLD>GraphicDOFEnable</BOLD>
	property without knowing the specific graphic type.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicDOFConstants">None</see></DEFAULT></remarks><summary>Interactive Degree of freedom for a graphic object.  Allows access to each graphic's GraphicDOFEnable property without knowing the specific graphic type.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.MouseCursor"><summary>Mouse cursor to be displayed when the mouse is over the graphic.  The cursor will be visible only if the graphic is interactive.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the mouse cursor changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_MouseCursor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfMouseCursor" /></li></ul></event><remarks><PARA>Mouse cursor to be displayed when the mouse is over the graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.DragLineWidthInScreenPixels"><summary>Line width of this graphic when dragged.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Line width of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineWidthInScreenPixels" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.DragLineStyle"><event cref="E:Cognex.VisionPro.ICogGraphicInteractive.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragLineStyle" /></li></ul></event><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of the graphic when dragged.</PARA></remarks><summary>Line style of this graphic when dragged.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.DragColor"><summary>Color of this graphic when dragged.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when dragged.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the drag color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_DragColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfDragColor" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedLineWidthInScreenPixels"><remarks><PARA>Line width of this graphic when selected.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineWidthInScreenPixels--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineWidthInScreenPixels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><summary>Line width of this graphic when selected.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedLineStyle"><remarks><PARA><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Line style</see> of this graphic when selected.</PARA></remarks><summary>Line style of this graphic when selected.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected line style changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedLineStyle--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedLineStyle" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedColor"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected color state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_SelectedColor--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelectedColor" /></li></ul></event><summary>Color of this graphic when selected.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogColorConstants">Color</see> of this graphic when selected.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.Selected"><remarks><PARA>True when the shape is selected in a display.</PARA></remarks><summary>True when the shape is selected in a display.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Selected--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfSelected" /></li></ul></event></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.TipText"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_TipText--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfTipText" /></li></ul></event><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.  Newline characters can be used to create multi-line tip text.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicInteractive.Interactive"><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> can be selected and manipulated. See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphicInteractive_Interactive--><ul><!--SYNTH: Synthesizing GraphicInteractive flag.--><li><see cref="F:Cognex.VisionPro.CogGraphicInteractiveStateFlags.SfInteractive" /></li></ul></event></member><member name="E:Cognex.VisionPro.ICogGraphicInteractive.DraggingStopped"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="E:Cognex.VisionPro.ICogGraphicInteractive.Dragging"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.ICogGraphicMultiPen"><remarks><PARA>A CogGraphicMultiPen is an object that can hold pens used to draw graphics that may have many multi-colored sub-parts.</PARA></remarks><summary>A CogGraphicMultiPen is an object that can hold pens used to draw graphics that may have many multi-colored sub-parts.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicMultiPen.PenCount"><summary>Returns the number of custom pens that have been defined.</summary><remarks><PARA>Returns the number of custom pens that have been defined.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.GetPenKey(System.Int32)"><param name="index"><PARA>The index.</PARA></param><summary>Returns the key for the pen at the given Index. Index must be in the range from 0 to PenCount-1 (inclusive).</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="index" />  is &lt; 0 or &gt; (<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenCount" />−1).</para></exception><remarks><PARA>Returns the key for the pen at the given <paramref name="index" />. Index must be in the range from 0 to <see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenCount" />−1.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.GetPenType(System.Int32)"><param name="key"><PARA>The pen key.</PARA></param><remarks><PARA>Returns the type (<see cref="T:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants">Simple</see> or
<see cref="T:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants">Interactive</see>)
of the pen with the given <paramref name="key" />.</PARA></remarks><summary>Returns the type (simple or interactive) of the pen with the given Key.</summary></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.AddSimplePen(Cognex.VisionPro.CogColorConstants,System.Int32,Cognex.VisionPro.CogGraphicLineStyleConstants)"><param name="color"><PARA>The pen color.</PARA></param><param name="lineWidth"><PARA>The line width in pixels.</PARA></param><param name="lineStyle"><PARA>The line style.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="lineWidth" /> is &lt; 1, or
		<paramref name="lineStyle" /> is not in <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants" />.</para></exception><summary>Creates a simple pen with the specified attributes and returns the key.</summary><remarks><PARA>Creates a simple pen with the specified attributes and returns the key.</PARA><NOTE><see cref="M:Cognex.VisionPro.ICogGraphicMultiPen.AddSimplePen(Cognex.VisionPro.CogColorConstants,System.Int32,Cognex.VisionPro.CogGraphicLineStyleConstants)" />
	 never returns the special key value 0 which means to use the default pen properties of the graphic.</NOTE></remarks><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is added. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><returns><PARA>The returned pen key.</PARA></returns></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.AddInteractivePen(System.Int32,System.Int32,System.Int32)"><param name="simplePenKeyWhenNormal"><PARA>The pen to use to draw the graphic in its normal state.</PARA></param><param name="simplePenKeyWhenSelected"><PARA>The pen to use when the graphic is selected.</PARA></param><param name="simplePenKeyWhenDragged"><PARA>The pen to use when the graphic is dragged.</PARA></param><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is added. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><returns><PARA>The returned pen key.</PARA></returns><remarks><PARA>Creates an interactive pen based on the specified simple pens and returns the key. The specified simple pen keys must already exist, or
you can specify 0 to use the contour's default for a particular state.</PARA><PARA>For example, the following line uses custom pens for the normal and dragged state and the contour's default <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedColor" />, <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedLineStyle" />, and <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.SelectedLineWidthInScreenPixels" /> for the selected state.</PARA><CODE LANGUAGE="VB">
MyInteractivePenKey = Contour.CustomPens.AddInteractivePen(MyNormalPenKey, 0, MyDragPenKey)
</CODE><PARA><see cref="M:Cognex.VisionPro.Implementation.Internal.CogGraphicMultiPen.AddInteractivePen(System.Int32,System.Int32,System.Int32)" />
	 never returns the special key value 0.
</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The key value for one of the simple pens is unknown, or
		one of the pens is not a
		<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenType">simple pen</see></para></exception><summary>Creates an interactive pen based on the specified simple pens and returns the key.  The specified simple pen keys must already exist, and zero is a valid key meaning 'use the pen properties of the graphic for the given state'.</summary></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.RemovePen(System.Int32)"><param name="key"><PARA>The pen key of the pen to remove.</PARA></param><summary>Removes the custom pen with the specified Key. The Key must be an existing simple or interactive pen key that is not in use.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogShapePenKeyInUseException" cgnxHRESULT="E_CogShape_PenKeyInUse"><para>The pen with the specified <paramref name="key" /> is in use.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="key" /> is not a known pen key.</para></exception><remarks><PARA>Removes the custom pen with the specified <paramref name="key" />. The <paramref name="key" /> must be an existing
		<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenType">simple or interactive</see>
		pen key that is not in use.</PARA><PARA>A pen key is considered in use if either of the following statements is true:</PARA><LIST><ITEM>A simple pen key is referenced by an interactive pen, even if the interactive key is not in use.</ITEM><ITEM>The pen key is referenced in any part of the shape that can hold a pen key.</ITEM></LIST><PARA>
	Specifically, a pen key is in use if it is a segment's 
		<see cref="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.CustomPen" />,
		<see cref="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.StartAdornmentCustomPen" />,
		<see cref="P:Cognex.VisionPro.ICogGeneralContourLineSegmentIterator.EndAdornmentCustomPen" />,
	 or 	used by any interactive pen.
</PARA></remarks><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is removed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.GetSimplePenAttributes(System.Int32,Cognex.VisionPro.CogColorConstants@,System.Int32@,Cognex.VisionPro.CogGraphicLineStyleConstants@)"><param name="simplePenKey"><PARA>The pen key.</PARA></param><param name="color"><PARA>The pen color.</PARA></param><param name="lineWidth"><PARA>The line width.</PARA></param><param name="lineStyle"><PARA>The line style.</PARA></param><summary>Returns the attributes of the simple pen with the given Key.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="simplePenKey" /> is not a known simple pen key.</para></exception><remarks><PARA>Returns the attributes of the simple pen with the given <paramref name="simplePenKey" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.SetSimplePenAttributes(System.Int32,Cognex.VisionPro.CogColorConstants,System.Int32,Cognex.VisionPro.CogGraphicLineStyleConstants)"><param name="simplePenKey"><PARA>The pen key.</PARA></param><param name="color"><PARA>The pen color.</PARA></param><param name="lineWidth"><PARA>The line width.</PARA></param><param name="lineStyle"><PARA>The line style.</PARA></param><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><remarks><PARA>Sets the attributes of the simple pen with the given <paramref name="simplePenKey" />.</PARA></remarks><summary>Sets the attributes of the simple pen with the given Key.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="simplePenKey" /> is not a known simple pen key.</para></exception></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.GetInteractivePenAttributes(System.Int32,System.Int32@,System.Int32@,System.Int32@)"><param name="interactivePenKey"><PARA>The pen key.</PARA></param><param name="simplePenKeyWhenNormal"><PARA>The pen to use to draw the graphic in its normal state.</PARA></param><param name="simplePenKeyWhenSelected"><PARA>The pen to use when the graphic is selected.</PARA></param><param name="simplePenKeyWhenDragged"><PARA>The pen to use when the graphic is dragged.</PARA></param><summary>Returns the attributes of the interactive pen with the given Key.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="interactivePenKey" /> is not a known interactive pen key.</para></exception><remarks><PARA>Returns the attributes of the interactive pen with the given <paramref name="interactivePenKey" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogGraphicMultiPen.SetInteractivePenAttributes(System.Int32,System.Int32,System.Int32,System.Int32)"><param name="interactivePenKey"><PARA>The pen key.</PARA></param><param name="simplePenKeyWhenNormal"><PARA>The pen to use to draw the graphic in its normal state.</PARA></param><param name="simplePenKeyWhenSelected"><PARA>The pen to use when the graphic is selected.</PARA></param><param name="simplePenKeyWhenDragged"><PARA>The pen to use when the graphic is dragged.</PARA></param><event cref="E:Cognex.VisionPro.CogGeneralContour.Changed" cgnxEvent="multiState"><para>
		
		Fires when the pen is changed. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Shape_Graphic--></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="interactivePenKey" /> is not a known interactive pen key.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The key value for one of the simple pens is unknown, or
		one of the pens is not a 
		<see cref="P:Cognex.VisionPro.ICogGraphicMultiPen.PenType">simple pen</see>.</para></exception><summary>Sets the attributes of the interactive pen with the given Key.</summary><remarks><PARA>Sets the attributes of the interactive pen with the given <paramref name="interactivePenKey" />.</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogGraphicParentChild"><remarks><PARA>Interface implemented by any graphic that can be a parent or a child.</PARA></remarks><summary>Interface implemented by any graphic that can be a parent and/or child.</summary></member><member name="P:Cognex.VisionPro.ICogGraphicParentChild.Children"><summary>Children of this graphic.</summary><remarks><PARA>Children of this graphic.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogGraphicParentChild.Parent"><summary>Parent of this graphic.</summary><remarks><PARA>Parent of this graphic.</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogImage"><summary>Interface that describes a rectangular array of pixels.</summary><remarks><PARA>Interface that describes a rectangular array of pixels.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogImage.PixelFromRootTransform"><remarks><PARA>Returns the transformation that maps points into pixel space ("#") from the root space ("@").</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The transform is NULL.</para></exception><summary>Transformation that maps points into pixel space ("#") from the root space ("@").</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the transform changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_PixelFromRootTransform--><ul /></event></member><member name="P:Cognex.VisionPro.ICogImage.CoordinateSpaceTree"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the coordinate space tree changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_CoordinateSpaceTree--><ul /></event><remarks><PARA>Returns or sets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> for a particular  image. You can use this tree to create a transform that maps points between coordinate spaces.</PARA><PARA>To ensure that all acquired images have the same coordinate space tree, use <see cref="T:Cognex.VisionPro.CogAcqFifo" />.<see cref="P:Cognex.VisionPro.ICogAcqFifo.CoordinateSpaceTree" /> instead.	</PARA></remarks><summary>Returns/sets the tree of all named coordinate spaces for this image.  The tree provides advanced functions for managing coordinate spaces.</summary></member><member name="P:Cognex.VisionPro.ICogImage.SelectedSpaceName"><remarks><PARA>Returns or sets the name of the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> to be used by tools that process this image. 
VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImage_SelectedSpaceName--><ul /></event><exception cref="T:Cognex.VisionPro.Exceptions.CogSpaceTreeInvalidNameSyntaxException" cgnxHRESULT="E_CogSpaceTree_InvalidNameSyntax"><para><paramref name="val" /> is not a valid space name.</para></exception><summary>Returns/sets the name of the coordinate space to be used by tools which process this image.</summary></member><member name="P:Cognex.VisionPro.ICogImage.Height"><remarks><PARA>Returns the height of the image.</PARA></remarks><summary>Height of the image.</summary></member><member name="P:Cognex.VisionPro.ICogImage.Width"><summary>Width of the image.</summary><remarks><PARA>Returns the width of the image.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogImage.Allocated"><summary>Whether there is pixel data associated with this image.</summary><remarks><PARA>Returns True if pixel data is associated with this image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogImage.Allocate(System.Int32,System.Int32)"><param name="width"><PARA>The width of the image in pixels.</PARA></param><param name="height"><PARA>The height of the image in pixels.</PARA></param><summary>Initialize the image with (undefined) pixel data of the given width and height. This method may not be called more than once.</summary><remarks><PARA>Initialize the image of the given height and width with undefined pixel data. You can call <see cref="M:Cognex.VisionPro.ICogImage.Allocate(System.Int32,System.Int32)" /> only once for an image. The allocated pixel space may not be resized.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocateSizeException" cgnxHRESULT="E_CogImage_AllocateSize"><para>The image is already allocated to a different size.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> &lt;= 0.</para></exception></member><member name="M:Cognex.VisionPro.ICogImage.CopyBase(Cognex.VisionPro.CogImageCopyModeConstants)"><param name="copyMode"><PARA>The <see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">copy mode</see>.</PARA></param><returns><PARA>The new image.</PARA></returns><remarks><PARA>Creates a copy of this image in a new image. Pixels may be shared between images by specifying 
	<see cref="T:Cognex.VisionPro.CogImageCopyModeConstants">SharePixels</see> as the copy mode.</PARA></remarks><summary>Create a copy of this image in a new image. Pixels may be shared between images by specifying CopyMode=cogImageCopyModeSharePixels.</summary></member><member name="M:Cognex.VisionPro.ICogImage.GetTransform(System.String,System.String)"><param name="toSpaceName"><PARA>The name of the coordinate space to transform the point to. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><param name="fromSpaceName"><PARA>The name of the coordinate space to transform the point from. The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></param><returns><PARA>The transform that maps a point from the <paramref name="fromSpaceName" /> to the <paramref name="toSpaceName" />.</PARA></returns><remarks><PARA>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the <see cref="P:Cognex.VisionPro.ICogImage.SelectedSpaceName" /> of this image.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoTreeException" cgnxHRESULT="E_CogImage_NoTree"><para>The coordinate space tree is missing.</para></exception><PARA>Also see the errors for <DISPLAY IFACE="ICogCoordinateSpaceTree" />.<see cref="M:Cognex.VisionPro.CogCoordinateSpaceTree.GetTransform(System.String,System.String)" />.</PARA><summary>Returns a transform that maps points from the 'From' coordinate space to the 'To' space.  The special string "." is accepted as an alias for the SelectedSpaceName of this image.</summary></member><member name="M:Cognex.VisionPro.ICogImage.ToBitmap"><returns>The 24-bit RGB Windows bitmap.</returns><summary>Returns a 24-bit RGB Windows bitmap created from this image, regardless of the type of this image.</summary></member><member name="M:Cognex.VisionPro.ICogImage.ScaleImage(System.Int32,System.Int32)"><param name="width">Width in pixels of the desired output image.</param><param name="height">Height in pixels of the desired output image.</param><summary>Creates a scaled version of this image. The dimensions of the returned image (in pixels) are specified by the width and height arguments. The scaling is performed using bilinear interpolation.</summary><returns>The scaled image.</returns></member><member name="T:Cognex.VisionPro.ICogImage24PlanarColorData"><summary>Interface that allows direct access to all three planes of 8-bit image data.</summary><remarks><PARA>Interface that allows direct access to all three planes of 8-bit image data.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogImage24PlanarColorData.Get24PlanarColorPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@)"><param name="dataMode"><PARA>Specifies whether the pixel data are read, write, or read/write. </PARA></param><param name="x"><PARA>The x-coordinate of the portion of the image to get.</PARA></param><param name="y"><PARA>The y-coordinate of the portion of the image to get.</PARA></param><param name="width"><PARA>The width of the image to get.</PARA></param><param name="height"><PARA>The height of the image to get.</PARA></param><param name="pixelMemory0"><PARA>An object that represents the pixel data for the first plane.</PARA></param><param name="pixelMemory1"><PARA>An object that represents the pixel data for the second plane.</PARA></param><param name="pixelMemory2"><PARA>An object that represents the pixel data for the third plane.</PARA></param><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object for each plane of this image. 
	The returned objects can be used to access pixel memory directly.
	You <BOLD>must</BOLD> call each object's
	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />
	method  when you are finished with it.</PARA><PARA>The <paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	parameters let you specify the portion of the image to get. To access the pixel memory for the entire image, specify zero for
	these parameters.
</PARA><PARA>If you request <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">read/write</see> or <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">write-only</see>
	access to the pixel memory when you call <see cref="M:Cognex.VisionPro.CogImage24PlanarColor.Get24PlanarColorPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@,Cognex.VisionPro.ICogImage8PixelMemory@)" />,
	the pixel memory may be copied internally.
	Any changes that you make to the pixel may not be written back to the image until
	you call 	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />.
	Your application should assume that no changes
	to the image take place until then.
	</PARA></remarks><summary>Get objects that can be used to directly access each plane of pixel memory. The caller MUST call Dispose on each of these objects when finished with them.</summary><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="pixelMemory0" />,
		<paramref name="pixelMemory1" />, or
	<paramref name="pixelMemory2" /> is NULL. (C++ only)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException" cgnxHRESULT="E_CogImage_BadCoord"><para><paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	describe a region  that is not entirely within the image.</para></exception></member><member name="T:Cognex.VisionPro.ICogImage16GreyData"><summary>Interface that allows direct access to 16-bit grey scale pixel data.</summary></member><member name="M:Cognex.VisionPro.ICogImage16GreyData.Get16GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="dataMode"></param><param name="x"></param><param name="y"></param><param name="width"></param><param name="height"></param><summary>Gets an object that can be used to directly access pixel memory. The caller MUST call Dispose on this object when finished with it.</summary></member><member name="T:Cognex.VisionPro.ICogImage16PixelMemory"><summary>Interface to an object that provides direct pointer access to 16-bit image pixel memory.</summary></member><member name="P:Cognex.VisionPro.ICogImage16PixelMemory.Stride"><summary>Returns the offset in pixels from one row to the next. May be positive or negative.</summary></member><member name="P:Cognex.VisionPro.ICogImage16PixelMemory.Scan0"><summary>Returns the address of the upper-left pixel.</summary></member><member name="P:Cognex.VisionPro.ICogImage16PixelMemory.Height"><summary>Returns the height of the pixel data.</summary></member><member name="P:Cognex.VisionPro.ICogImage16PixelMemory.Width"><summary>Returns the width of the pixel data.</summary></member><member name="M:Cognex.VisionPro.ICogImage16PixelMemory.Dispose"><summary>Frees up any resources held by the pixel data object. This does not free pixels from the image itself.</summary></member><member name="T:Cognex.VisionPro.ICogImage16Root"><summary>Interface to a root object that holds raw 16-bit pixel data of an image.</summary></member><member name="P:Cognex.VisionPro.ICogImage16Root.Height"><summary>Returns the height of the pixel data.</summary></member><member name="P:Cognex.VisionPro.ICogImage16Root.Width"><summary>Returns the width of the pixel data.</summary></member><member name="M:Cognex.VisionPro.ICogImage16Root.GetRawPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage16PixelMemory@)"><param name="dataMode"></param><param name="x"></param><param name="y"></param><param name="width"></param><param name="height"></param><param name="pixelMemory"></param><summary>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it.</summary></member><member name="T:Cognex.VisionPro.ICogImage16RootBuffer"><summary>Interface to a root object that holds raw 16-bit pixel data of an image in a static buffer.</summary></member><member name="M:Cognex.VisionPro.ICogImage16RootBuffer.Initialize(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IDisposable)"><param name="width"></param><param name="height"></param><param name="scan0"></param><param name="stride"></param><param name="disposable"></param><summary>Initializes the root with the buffered data. If the Disposable parameter is non-NULL, its Dispose method will be called when the memory is no longer needed.</summary></member><member name="T:Cognex.VisionPro.ICogImage8GreyData"><remarks><PARA>Interface that provides direct access to pixel memory as 8-bit grey-scale values.</PARA></remarks><summary>Interface that allows direct access to 8-bit grey scale pixel data.</summary></member><member name="M:Cognex.VisionPro.ICogImage8GreyData.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)"><param name="dataMode"><PARA>Specifies whether the pixel data are read, write, or read/write. </PARA></param><param name="x"><PARA>The x-coordinate of the portion of the image to get.</PARA></param><param name="y"><PARA>The y-coordinate of the portion of the image to get.</PARA></param><param name="width"><PARA>The width of the image to get.</PARA></param><param name="height"><PARA>The height of the image to get.</PARA></param><returns><PARA>An object that represents the pixel data.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadCoordException" cgnxHRESULT="E_CogImage_BadCoord"><para><paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	describe a region  that is not entirely within the image.</para></exception><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object that can be used to access pixel memory directly.
	You <BOLD>must</BOLD> call this object's
	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />
	method  when you are finished with it.</PARA><PARA>The <paramref name="x" />, <paramref name="y" />, <paramref name="height" />, and <paramref name="width" />
	parameters let you specify the portion of the image to get. To access the pixel memory for the entire image, specify zero for
	these parameters.
</PARA><PARA>If you request <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">read/write</see> or <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">write-only</see>
	access to the pixel memory when you call <see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" />,
	the pixel memory may be copied internally.
	Any changes that you make to the pixel may not be written back to the image until
	you call 	<see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />.
	Your application should assume that no changes
	to the image take place until then.
	</PARA></remarks><summary>Gets an object that can be used to directly access pixel memory. The caller MUST call Dispose on this object when finished with it.</summary></member><member name="T:Cognex.VisionPro.ICogImage8PixelMemory"><remarks><PARA>Interface to an object that provides direct pointer access to 8-bit image pixel memory.
	Use <see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" /> to get an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object.
	</PARA><PARA><see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> objects are intended for temporary use within functions that read or write pixel
		data. Caching an <see cref="T:Cognex.VisionPro.CogImage8PixelMemory" /> object for long periods of time could lead to memory congestion.
		You must call <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" /> when you are finished using the object to release any resources
		that it uses. After you do so, any pointer that <see cref="P:Cognex.VisionPro.ICogImage8PixelMemory.Scan0" /> returned becomes invalid.
	</PARA><PARA>If you request <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">read/write</see> or <see cref="T:Cognex.VisionPro.CogImageDataModeConstants">write-only</see>
	access to the pixel memory when you call <see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" />,
	the pixel memory may be copied internally.
	Any changes that you make to the pixel may not be written back to the image until
	you call <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />. Your application should assume that no changes
	to the image take place until then.
	</PARA></remarks><summary>Interface to an object that provides direct pointer access to 8-bit image pixel memory.</summary></member><member name="P:Cognex.VisionPro.ICogImage8PixelMemory.Stride"><remarks><PARA>Returns the offset in pixels from one row to the next. May be positive or negative.</PARA></remarks><summary>Returns the offset in pixels from one row to the next. May be positive or negative.</summary></member><member name="P:Cognex.VisionPro.ICogImage8PixelMemory.Scan0"><summary>Returns the address of the upper-left pixel.</summary><remarks><PARA>Returns the address of the upper-left pixel.</PARA><PARA>The value that <see cref="P:Cognex.VisionPro.ICogImage8PixelMemory.Scan0" /> returns becomes invalid after you call <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogImage8PixelMemory.Height"><remarks><PARA>Returns the height of the pixel data.</PARA></remarks><summary>Returns the height of the pixel data.</summary></member><member name="P:Cognex.VisionPro.ICogImage8PixelMemory.Width"><summary>Returns the width of the pixel data.</summary><remarks><PARA>Returns the width of the pixel data.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose"><remarks><PARA>Releases any resources held by the pixel data object. Calling <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" /> does not destroy
		 the pixels of the image, but indicates that the caller is finished using the pixel data object.
		</PARA><PARA>After calling <see cref="M:Cognex.VisionPro.ICogImage8PixelMemory.Dispose" />, any value that <see cref="P:Cognex.VisionPro.ICogImage8PixelMemory.Scan0" /> returned becomes invalid.</PARA></remarks><summary>Frees up any resources held by the pixel data object. This does not free pixels from the image itself.</summary></member><member name="T:Cognex.VisionPro.ICogImage8Root"><summary>Interface to a root object that holds raw 8-bit pixel data of an image.</summary><remarks><PARA>Interface to a root object that holds raw 8-bit pixel data of an image.</PARA><NOTE>This interface is intended for Cognex use only.</NOTE></remarks></member><member name="P:Cognex.VisionPro.ICogImage8Root.Height"><summary>Returns the height of the pixel data.</summary><remarks><PARA>Returns the height of the pixel data.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogImage8Root.Width"><summary>Returns the width of the pixel data.</summary><remarks><PARA>Returns the width of the pixel data.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogImage8Root.GetRawPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32,Cognex.VisionPro.ICogImage8PixelMemory@)"><param name="dataMode"><PARA>Specifies whether the pixel data are read, write, or read/write. </PARA></param><param name="x"><PARA>The x-coordinate of the portion of the image to get.</PARA></param><param name="y"><PARA>The y-coordinate of the portion of the image to get.</PARA></param><param name="width"><PARA>The width of the image to get.</PARA></param><param name="height"><PARA>The height of the image to get.</PARA></param><param name="pixelMemory"><PARA>An object that represents the pixel data.</PARA></param><summary>Gets an object that can be used to directly access the raw pixel data. The caller MUST call Dispose on this object when finished with it.</summary><exception cref="T:System.NullReferenceException" cgnxHRESULT="E_POINTER"><para><paramref name="pixelMemory" /> is NULL. (C++ only)</para></exception><remarks><PARA>Gets an object that can be used to directly access the raw pixel data.
<!-- 	You <BOLD>must</BOLD> call 
	<LINK IFACE="ICogImage8PixelMemory" FUNC="Dispose"/>
	on this object when you are finished with it. --><NOTE>This method is intended for Cognex use only. To access the pixel data directly, use 
		<see cref="T:Cognex.VisionPro.CogImage8Grey" />.<see cref="M:Cognex.VisionPro.CogImage8Grey.Get8GreyPixelMemory(Cognex.VisionPro.CogImageDataModeConstants,System.Int32,System.Int32,System.Int32,System.Int32)" /> instead.
	</NOTE></PARA></remarks></member><member name="T:Cognex.VisionPro.ICogImage8RootBuffer"><summary>Interface to a root object that holds raw 8-bit pixel data of an image in a static buffer.</summary><remarks><PARA>Interface to a root object that holds raw 8-bit pixel data of an image in a static buffer.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogImage8RootBuffer.Initialize(System.Int32,System.Int32,System.IntPtr,System.Int32,System.IDisposable)"><param name="width"><PARA>The width of the image buffer.</PARA></param><param name="height"><PARA>The height of the image buffer.</PARA></param><param name="scan0"><PARA>Address of the upper-left pixel.</PARA></param><param name="stride"><PARA>The number of pixels from one row to the next. This value can be positive or negative.</PARA></param><param name="disposable"><PARA /></param><summary>Initializes the root with the buffered data. If the Disposable parameter is non-NULL, its Dispose method will be called when the memory is no longer needed.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="width" /> or <paramref name="height" /> &lt;= 0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="scan0" /> = 0.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>abs(<paramref name="stride" />) &lt; <paramref name="width" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.FAILException" cgnxHRESULT="E_FAIL"><para><see cref="T:Cognex.VisionPro.CogImage8Root" /> has already been called.</para></exception><remarks><PARA>Initializes the root with the buffered data. 
	If <paramref name="disposable" /> is not NULL, its 
		<BOLD>Dispose</BOLD>
		method
	will be called when the memory is no longer needed.</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogModelFeature"><summary>A model feature (CogModelFeature) has the model properties Weight and Polarity.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogModelFeature" /> holds the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> properties of a model feature.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogModelFeature.Polarity"><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the polarity changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Polarity--><ul /></event><remarks><PARA>Sets or gets the <see cref="u:Search.PMAlign.Theory.ShapePolarity">polarity</see> of this feature.</PARA><PARA>
The polarity of a given feature may be −1, 0 (undefined), or +1. Polarities of +1 or −1 define where to find brighter pixels relative to the feature geometry.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants">Undefined</see></DEFAULT></remarks><summary>Returns/sets the polarity of this feature. The polarity of a given feature may be -1, 0(undefined), or +1. Polarities of +1 or -1 define where to find brighter pixels relative to the feature geometry, and 0 means undefined.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The new value is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ICogModelFeature.Weight"><remarks><PARA>Sets or gets the weight of this feature.
The weight of a feature determines its relative importance compared to other features of the model.</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>Returns/sets the weight of this feature. The weight of a feature determines its relative importance compared to other features of the model. The weight defaults to 1.0.</summary><event cref="E:Cognex.VisionPro.CogModelFeature.Changed" cgnxEvent="singleState"><para>
		
		Fires when the weight changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogModelFeature_Weight--><ul /></event></member><member name="P:Cognex.VisionPro.ICogModelFeature.ParentFeature"><summary>If this feature has a ParentFeature, then Weight and Polarity are defined with respect to the parent. The effective weight (or polarity) of this feature is its Weight (or Polarity) times the parent's effective weight (or polarity).</summary><remarks><PARA>Returns this feature's parent feature if it has one</PARA><PARA>If this feature has a parent feature, its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> and <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> are defined with respect to the parent.
The effective weight of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the parent's effective weight.
Similarly, the effective polarity of this feature is its <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the parent's effective polarity.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogModelFeature.GetEffectiveWeight"><summary>If this feature has no ParentFeature, then its effective weight is the value of the Weight property. If this feature has a ParentFeature, then the effective weight is the Weight times the effective weight of the ParentFeature.</summary><remarks><PARA>Returns the effective weight of this feature</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective weight is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" /> times the effective weight of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective weight.</PARA></returns></member><member name="M:Cognex.VisionPro.ICogModelFeature.GetEffectivePolarity"><summary>If this feature has no ParentFeature, then its effective polarity is the value of the Polarity property. If this feature has a ParentFeature, then the effective polarity is the Polarity times the effective polarity of the ParentFeature.</summary><remarks><PARA>Returns the effective polarity of this feature.</PARA><PARA>If this feature does not have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the value of <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />. If it does have a <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" /> its effective polarity is the <see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" /> times the effective polarity of the <see cref="P:Cognex.VisionPro.ICogModelFeature.ParentFeature" />.</PARA></remarks><returns><PARA>The effective polarity.</PARA></returns></member><member name="T:Cognex.VisionPro.ICogModelFeatureIterator"><remarks><PARA><see cref="T:Cognex.VisionPro.ICogModelFeatureIterator" />
		iterates over all the features in a shape model and allows setting and getting the
			<see cref="P:Cognex.VisionPro.ICogModelFeature.Weight" />
		and
			<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
		properties.</PARA></remarks><summary>The feature iterator iterates all the features in a shape model, and allows reading and writing of the Weight and Polarity properties.</summary></member><member name="P:Cognex.VisionPro.ICogModelFeatureIterator.IsInvalid"><remarks><PARA>Returns True if this iterator is not positioned at a valid item.</PARA><PARA>If True, setting or getting any item properties produces errors.</PARA><NOTE>An iterator will become invalid if you remove the model feature that it refers to.</NOTE></remarks><summary>Returns True if this iterator is not positioned at a valid item. If True, reading or writing any item properties will produce errors.</summary></member><member name="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd"><summary>Returns True if this iterator is positioned past the last item of the sequence.  If True, calling MoveToNext will return an error, and attempting to read item properties will produce an error. Moving the iterator to a valid item will validate it.</summary><remarks><PARA>Returns True if this iterator is positioned past the last item of the sequence. </PARA><PARA>If True, calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> returns an error, and attempting to read item properties produces an error. Moving the iterator to a valid item validates it.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst"><remarks><PARA>Returns True if this is the first item.</PARA><PARA>If True, a call to <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> returns an error.</PARA></remarks><summary>Returns True if this is the first item.  If True, a call to MoveToPrevious would return an error.</summary></member><member name="P:Cognex.VisionPro.ICogModelFeatureIterator.Attributes"><remarks><PARA>Returns property bits that describe the iterator methods that are valid at the current position of the iterator.</PARA><PARA>To test single attributes you can use <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" />, <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" />, or <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsInvalid" />.</PARA></remarks><summary>Returns property bits describing which iterator methods can be called at the current position of the iterator.</summary></member><member name="P:Cognex.VisionPro.ICogModelFeatureIterator.Position"><summary>Returns the position of the iterator in the container.</summary><remarks><PARA>Returns the position of the iterator in the container.
You can use <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPosition(System.Int32)" /> to return to this position later.
</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogModelFeatureIterator.Container"><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid.</para></exception><remarks><PARA>Returns a reference to the container object being iterated. You can use this to identify the iterator's container.</PARA><NOTE>In most cases this will be either Nothing or a <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</NOTE></remarks><summary>Returns a reference to the container object being iterated.  This can be used for identifying the iterator's container.</summary></member><member name="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPosition(System.Int32)"><param name="position"><PARA>The position to move to. Zero moves to the beginning of the sequence, and −1 moves to the end of the sequence.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidPositionException" cgnxHRESULT="E_CogIterator_InvalidPosition"><para><paramref name="position" /> is out of range or not a valid value.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Container" />.</para></exception><summary>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</summary><remarks><PARA>Moves the iterator to the specified position in the sequence, loading that item's properties into this iterator.</PARA><PARA>Use <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Position" /> to obtain valid positions within the sequence.</PARA><PARA>If <paramref name="position" /> is zero, the iterator  moves to the beginning of the sequence. If <paramref name="position" /> is −1 it moves to the end of the sequence. However, <paramref name="position" /> is not necessarily an item index into the iterator. </PARA></remarks></member><member name="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext"><remarks><PARA>Moves the iterator to the next position, loading that item's properties into this iterator.</PARA><PARA>
If the iterator is at the end position, <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> before calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> to avoid errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the end. (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Container" />.</para></exception><summary>Moves the iterator to the next position, loading that item's properties into this iterator. If the iterator is at the end position, an error is returned. To avoid getting errors, you may wish to check IsEnd.</summary></member><member name="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious"><remarks><PARA>Moves the iterator to the previous position, loading that item's properties into this iterator.</PARA><PARA>If there are no items before the current position, <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> returns an error. 
You may wish to check <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" /> before calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> to avoid errors.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para>The iterator is at the beginning. (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" /> is True.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid because the item set has changed. For example, the iterator is pointing to an item that was removed from the <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Container" />.</para></exception><summary>Moves the iterator to the previous position, loading that item's properties into this iterator. If there are no items before this, an error is returned. To avoid getting errors, you may wish to check IsFirst.</summary></member><member name="M:Cognex.VisionPro.ICogModelFeatureIterator.Copy(System.Int32)"><param name="indexOffset"><PARA>The offset from the current position.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorEndOfContainerException" cgnxHRESULT="E_CogIterator_EndOfContainer"><para><paramref name="indexOffset" /> would place the iterator beyond the end iterator (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> is True) or before the start iterator (<see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsFirst" /> is True).</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogIteratorInvalidIteratorException" cgnxHRESULT="E_CogIterator_InvalidIterator"><para>The iterator is not valid; however if  <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.IsEnd" /> is True (and there are no other errors), this iterator will be copied.</para></exception><summary>Makes a copy of this iterator. The copy will be positioned at the same item as this plus the given IndexOffset. For example, if IndexOffset is +1 the copy will be positioned at the next item, if IndexOffset is -1, the copy will be at the previous item.</summary><remarks><PARA>Makes a copy of this iterator. The copy is positioned at the same item as this item plus the given <paramref name="indexOffset" />. For example, if <paramref name="indexOffset" /> is +1 the copy will be positioned at the next item; if <paramref name="indexOffset" /> is −1, the copy will be at the previous item.</PARA></remarks><returns><PARA>The new iterator.</PARA></returns></member><member name="T:Cognex.VisionPro.ICogShape"><remarks><PARA>Base interface for all closed shapes.</PARA></remarks><summary>Base interface for all shapes.</summary></member><member name="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogGraphic_SelectedSpaceName--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogShape" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogShape.DistanceToPoint(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate to measure from.</PARA></param><param name="y"><PARA>The y-coordinate to measure from.</PARA></param><summary>Shortest distance from a boundary of this shape to the given point. Points within closed shapes return a distance less than zero.</summary><remarks><PARA>Returns the shortest distance from this shape to the given point in the shape's selected coordinate space. Points within closed shapes return a distance less than zero.</PARA><PARA>The distance is measured to a meaningful part of the shape. For example, in measuring the distance to a <see cref="T:Cognex.VisionPro.CogPointMarker" />, only its center is considered meaningful, not the distance to one of the arms.</PARA></remarks><returns><PARA>The distance from the point (<paramref name="x" />, <paramref name="y" />) to the shape.</PARA></returns></member><member name="M:Cognex.VisionPro.ICogShape.Map(Cognex.VisionPro.ICogTransform2D,Cognex.VisionPro.CogCopyShapeConstants)"><param name="transform"><PARA>The transformation object to use.</PARA></param><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the new shape.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="transform" /> is NULL.</para></exception><summary>Maps this shape through the given transform.</summary><returns><PARA>The mapped shape.</PARA></returns><remarks><PARA>Maps this shape using the given transform.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)"><param name="image"><PARA>The image to fit to.</PARA></param><param name="xScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the x-direction.</PARA></param><param name="yScale"><PARA>The amount to scale by in the x-direction. A value of 1.0 means to scale 100% in the y-direction.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties such that its default size is based on the image and its <see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName" />. 
</PARA><PARA>Different shapes behave differently when <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToImage(Cognex.VisionPro.ICogImage,System.Double,System.Double)" /> with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>Scales the shape in the x- and y-directions according to the height and width of the image.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipse" /></PARA></CELL><CELL><PARA>The ellipse is sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" /> have reduced
							the image size. The principal axes of the ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit
							just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />  have reduced
							the image size.  The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The shape is guaranteed to be circular in the selected space
							name, but may not be circular in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The arc or annulus section is centered in the image and sized to fit just within the image after
							<paramref name="xScale" /> and <paramref name="yScale" />have reduced
							the image size. The resulting shape covers the range from 0 to 270 degrees
							in pixel space.  The principal axes of the underlying ellipse are aligned with the image,
							not with the selected space name.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically centered and is horizontal across the image. 
					<paramref name="xScale" /> scales to the width of the image. <paramref name="yScale" /> is ignored.  </PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle,
							and its rotation is maintained.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the image.
							<paramref name="xScale" />  and <paramref name="yScale" />
							are ignored.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.
				<paramref name="xScale" /> and <paramref name="yScale" /> are ignored.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="image" /> is NULL.</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="xScale" /> or <paramref name="yScale" /> is &lt;= 0.0 or &gt; 1.0.</para></exception><summary>Adjust the shape's geometric properties such that its default size is based on the image and its SelectedSpaceName. XScale and YScale are multipliers where 1.0 designates 100% scaling.</summary></member><member name="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)"><param name="boundingRectangle"><PARA>The rectangle that the shape is to fit into.</PARA></param><remarks><PARA>Adjusts the shape's geometric properties so that the shape fits inside a given rectangle.</PARA><NOTE>The coordinates of the bounding box must be given in the same coordinate space as the shape.</NOTE><PARA>Different shapes behave differently when 
	<see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />
	is called.</PARA><TABLE><CAPTION><tab-capt>Behavior of <see cref="M:Cognex.VisionPro.ICogShape.FitToBoundingBox(Cognex.VisionPro.CogRectangle)" />  with different shapes</tab-capt></CAPTION><ROW><TH><tab-head>Shape</tab-head></TH><TH><tab-head>Behavior</tab-head></TH></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipse" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangle" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogRectangleAffine" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCoordinateAxes" /></PARA></CELL><CELL><PARA>The shaped is scaled to the size and location of the
							bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogCircularArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalArc" /><HTMLPASS><br /></HTMLPASS><see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" /></PARA></CELL><CELL><PARA>The shape is scaled to the size and location of the bounding rectangle.
							The resulting shape covers the range from 0 to 270 degrees
							in pixel space.
				</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLineSegment" /></PARA></CELL><CELL><PARA>The line segment is centered vertically and horizontally across the bounding rectangle.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogLine" /></PARA></CELL><CELL><PARA>The line's reference point is centered in the bounding rectangle, and its rotation is maintained.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPolygon" /></PARA></CELL><CELL><PARA>The centroid of the polygon is centered in the bounding box.</PARA></CELL></ROW><ROW><CELL><PARA><see cref="T:Cognex.VisionPro.CogPointMarker" /></PARA></CELL><CELL><PARA>The point  is centered in the bounding rectangle.</PARA></CELL></ROW></TABLE></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="boundingRectangle" /> is NULL.</para></exception><summary>Adjust the shape's geometric properties so that the shape fits inside passed in rectangle.</summary></member><member name="M:Cognex.VisionPro.ICogShape.EnclosingRectangle(Cognex.VisionPro.CogCopyShapeConstants)"><param name="copyFlags"><PARA>Specify <see cref="T:Cognex.VisionPro.CogCopyShapeConstants">which attributes</see> of the shape to copy to the returned rectangle.</PARA></param><summary>Minimum enclosing rectangle of this shape.</summary><remarks><PARA>Returns the smallest rectangle that encloses the shape. A <see cref="T:Cognex.VisionPro.CogLine" /> does not have an enclosing rectangle.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogShapeCannotEncloseException" cgnxHRESULT="E_CogShape_CannotEnclose"><para>The shape is a <see cref="T:Cognex.VisionPro.CogLine" />.</para></exception><returns><PARA>The returned rectangle.</PARA></returns></member><member name="T:Cognex.VisionPro.ICogRegion"><summary>Base interface for all closed shapes.</summary><remarks><PARA>Base interface for all closed shapes.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogRegion.CreateRLE(System.Byte,System.Byte)"><param name="insidePelValue"><PARA /></param><param name="outsidePelValue"><PARA /></param><summary>Create an RLE representation of this Region.</summary><remarks>Creates a &lt;see cref="T:Cognex.VisionPro.CogRLEBuffer"&gt; representation of this region. Note that this method ignores the &lt;see cref="P:Cognex.VisionPro.ICogShape.SelectedSpaceName"&gt; property and instead assumes that the shape is defined in pixel space coordinates. If that is not the case, consider first using the &lt;see cref="M:Cognex.VisionPro.ICogShape.Map"&gt; method to produce a new region that is in pixel space.</remarks><returns><PARA>The RLE representation of this region.</PARA></returns></member><member name="T:Cognex.VisionPro.ICogShapeModel"><remarks><PARA>
	A shape model is an object that holds the
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight">weight</see>
	and
	<see cred="P:Cognex.VisionPro.ICogModelFeature.Polarity" cref="U:">polarity</see>
	information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</PARA></remarks><summary>A CogShapeModel is an object that holds the weight and polarity information that should be applied to a shape (and its subfeatures, if any) when it is used as a synthetic model.</summary></member><member name="P:Cognex.VisionPro.ICogShapeModel.PolarityAdornment"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the adornment changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_PolarityAdornment--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants">polarity adornment</see> of this <see cref="T:Cognex.VisionPro.CogShapeModel" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants">None</see></DEFAULT></remarks><summary>Returns/sets the polarity adornment of this CogShapeModel.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is not in <see cref="T:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants" />.</para></exception></member><member name="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount"><summary>Returns the number of subfeatures of this CogShapeModel. The subfeatures can be iterated by calling CreateSubFeatureIterator.</summary><remarks><PARA>Returns the number of subfeatures of this CogShapeModel. You can call <see cref="M:Cognex.VisionPro.ICogShapeModel.CreateSubFeatureIterator(System.Int32)" /> to create
an <see cref="T:Cognex.VisionPro.CogModelFeatureIteratorGC" /> that lets you examine each of the subfeatures.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogShapeModel.LineWidthInScreenPixels"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line width changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_LineWidthInScreenPixels--><ul /></event><summary>Line width (in screen pixels) of this graphic.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" />  is &lt; 1.</para></exception><remarks><PARA>Sets or gets the width of the line used to draw the <see cref="T:Cognex.VisionPro.CogShapeModel" /> in pixels.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogShapeModel.LineStyle"><summary>Line style of this graphic.</summary><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">line style</see> of this <see cref="T:Cognex.VisionPro.CogShapeModel" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogGraphicLineStyleConstants">Solid</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the line style of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_LineStyle--><ul /></event></member><member name="P:Cognex.VisionPro.ICogShapeModel.Color"><summary>Color of this graphic. Can be any OLE_COLOR.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the color changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_Color--><ul /></event><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogColorConstants">color</see> of this <see cref="T:Cognex.VisionPro.CogShapeModel" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogColorConstants">Cyan</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ICogShapeModel.Visible"><remarks><PARA>Sets or gets whether the <see cref="T:Cognex.VisionPro.CogShapeModel" /> is visible.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the visible state of the shape changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_Visible--><ul /></event><summary>Visible property of this graphic.</summary></member><member name="P:Cognex.VisionPro.ICogShapeModel.SelectedSpaceName"><remarks><PARA>Sets or gets the <see cref="T:Cognex.VisionPro.CogCoordinateSpaceTree" /> of this <see cref="T:Cognex.VisionPro.CogShapeModel" />. 

VisionPro defines <see cref="u:Framework.Coordinates.Theory.CoordSpaceNames" cgnxAnchor="special_space_name_symbols">special space names</see> for the root coordinate space, the pixel coordinate space, the screen coordinate space, as well as others.

</PARA><DEFAULT>"."</DEFAULT></remarks><summary>Coordinate space in which this shape is to be interpreted.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the selected space name changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_SelectedSpaceName--><ul /></event></member><member name="P:Cognex.VisionPro.ICogShapeModel.TipText"><remarks><PARA>Sets or gets the text that describes this <see cref="T:Cognex.VisionPro.CogShapeModel" /> in a tool tip.</PARA></remarks><summary>Text to describe this graphic in a tool tip.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the text changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_TipText--><ul /></event></member><member name="P:Cognex.VisionPro.ICogShapeModel.Interactive"><summary>Interactive property allow this graphic object to be selected. See GraphicDOFEnable for information on governing interactive manipulation of an object.</summary><remarks><PARA>Sets or gets whether this <see cref="T:Cognex.VisionPro.CogShapeModel" /> can be selected and manipulated.
		See <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase" /> for information about interactive manipulation of an object.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
		
		Fires when the interactive state changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogShapeModel_Interactive--><ul /></event></member><member name="P:Cognex.VisionPro.ICogShapeModel.Shape"><remarks><PARA>
	Returns a reference to the shape object associated with this model feature.
	The
		<see cref="P:Cognex.VIsionPro.ICogModelFeature.Weight" />
	and
		<see cref="P:Cognex.VisionPro.ICogModelFeature.Polarity" />
	are applied to this shape when it is used as a synthetic model.
</PARA><PARA>
	This is a read-only property.
	To create a shape model, use the shape's
		<BOLD>MakeShapeModel</BOLD>
	method.
	For instance, to create a shape model for a circle, you would use
		<see cref="M:Cognex.VisionPro.CogCircle.MakeShapeModel(System.Double,Cognex.VisionPro.CogShapeModelPolarityConstants,System.Boolean)">CogCircle.MakeShapeModel</see>.
</PARA></remarks><summary>Returns a reference to the shape object associated with this model feature. The Weight and Polarity are applied to this shape when it is used as a synthetic model.</summary></member><member name="M:Cognex.VisionPro.ICogShapeModel.CreateSubFeatureIterator(System.Int32)"><param name="initialIndex"><PARA>The initial position of the iterator. If this value is −1, the iterator is positioned after the last valid subfeature.</PARA></param><returns><PARA>The iterator.</PARA></returns><summary>Returns a newly created iterator for iterating over all subfeatures.  The iterator is positioned at the subfeature specified by InitialIndex.  A value of -1 creates an iterator that is positioned just after the last valid subfeature.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="IntialIndex" /> &gt;= <see cref="P:Cognex.VisionPro.ICogShapeModel.SubFeatureCount" /> or &lt; 0 (after translating −1 appropriately).</para></exception><PARA><paramref name="." /> does not fire events, but <DISPLAY IFACE="." /> will fire events if the subfeatures are modified.</PARA><remarks><PARA>Returns a newly created iterator for iterating over all subfeatures. The iterator is positioned at the subfeature specified by <paramref name="initialIndex" />. A value of −1 creates an iterator that is positioned just after the last valid subfeature.</PARA><PARA>Most shape models do <BOLD>not</BOLD> have subfeatures, so it is not unusual for this method to return Nothing (or NULL).  Only <see cref="T:Cognex.VisionPro.CogGeneralContour" /> objects have subfeatures.</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogShapeModelCollection"><summary>Interface for a collection of CogShapeModel objects.</summary><remarks><PARA>Interface for a collection of <see cref="T:Cognex.VisionPro.CogShapeModel" /> objects.</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogTransform2D"><summary>Common interface for all 2D transforms.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.CogTransform2D" /> provides a common interface for all two-dimensional transforms.</PARA></remarks></member><member name="P:Cognex.VisionPro.ICogTransform2D.Linear"><summary>Returns true if this is a linear transform.</summary><remarks><PARA>This function always returns True if the transform is of type <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />; it may return True for other types if they implement a transformation that is mathematically equivalent to a linear transformation.</PARA></remarks></member><member name="M:Cognex.VisionPro.ICogTransform2D.MapPoint(System.Double,System.Double,System.Double@,System.Double@)"><param name="x"><PARA>The x-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="y"><PARA>The y-coordinate of the original point in <ITALIC>From</ITALIC> space.</PARA></param><param name="mappedX"><PARA>The resulting mapped x-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><param name="mappedY"><PARA>The resulting mapped y-coordinate in <ITALIC>To</ITALIC> space.</PARA></param><remarks><PARA>Maps the given <ITALIC>from</ITALIC> space point through this transform, filling in the mapped <ITALIC>to</ITALIC> space (x, y) coordinates.</PARA><PARA>
		This method  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.MapPoint(System.Double,System.Double,System.Double@,System.Double@)" /> method of <see cref="T:Cognex.VisionPro.CogTransform2D" />. This method is provided on both interfaces as a convenience to users.</PARA></remarks><summary>Maps the given x,y point through this transform, filling in the mapped x,y coordinates.</summary></member><member name="M:Cognex.VisionPro.ICogTransform2D.MapPoints(System.Double[0:,0:])"><param name="coordinatesXY">A row-major two dimensional array of X,Y point coordinates to be mapped. These elements must be of type double.</param><exception cref="T:System.ArgumentException">If coordinatesXY is not an array of doubles.</exception><returns>A row-major two dimensional array of the mapped X,Y point coordinates. The size of this array is equal to the size of the input array</returns><summary>Map the supplied points through this transform.</summary><exception cref="T:System.ArgumentNullException">If the coordinatesXY parameter is null.</exception></member><member name="M:Cognex.VisionPro.ICogTransform2D.LinearTransform(System.Double,System.Double)"><param name="x"><PARA>The x-coordinate for the point, expressed in <ITALIC>From</ITALIC>coordinates.</PARA></param><param name="y"><PARA>The y-coordinate for the point, expressed in <ITALIC>From</ITALIC> coordinates.</PARA></param><remarks><PARA>Returns a new linear transform that best describes this transform at the given point.</PARA></remarks><returns><PARA>The linear transform that best describes this transform at the given point.</PARA></returns><summary>Returns a new linear transform which best describes this transform at the given point.  The point must be expressed in 'from' coordinates.</summary></member><member name="M:Cognex.VisionPro.ICogTransform2D.BestFitLinearTransform(System.Double[0:,0:],System.Double@)"><param name="fromPoints"><PARA>An array of points, expressed in From coordinates, for which to apply <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.FromPoints" assemblyName="Core" iface="CogTransform2D" func="FromPoints" />.</PARA></param><param name="rmsError"><PARA>If you supply a value for <paramref name="." />, <DISPLAY FUNC="." cref="Cognex.VisionPro.CogTransform2D.RMSError" assemblyName="Core" iface="CogTransform2D" func="RMSError" /> sets it to the RMS error of the points against the returned linear transformation. A value of 0 indicates that the returned transformation exactly maps the points. Note that the RMS error is measured in <ITALIC>To</ITALIC> space.</PARA><PARA><paramref name="." /> is the Root Mean Square (RMS) unweighted Euclidian error between two sets of corresponding points. Set A is composed of the given points (in <ITALIC>From</ITALIC> space) after they have been mapped through this transform into <ITALIC>To</ITALIC> space. Set B is the same points after they have been mapped to <ITALIC>To</ITALIC> space using the <ITALIC>linear</ITALIC> transform returned by this function.</PARA></param><returns><PARA>A <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> object that describes the best-fit linear transform (the one that produces the smallest RMSError of any linear transform).</PARA></returns><summary>Returns a new linear transform which best describes this transform over the given set of points.  The points must be expressed in 'from' coordinates.</summary><remarks><PARA>Returns a new linear transform that best describes this transform over the given set of points. These points must be expressed in <ITALIC>From</ITALIC> coordinates. The returned transform is called the "best-fit linear transform" because it is guaranteed to produce the smallest RMSError of any linear transform.</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogTransformTooFewPointsLinFitException" cgnxHRESULT="E_CogTransform_TooFewPointsLinFit"><para>Too few points were provided to compute a best fit linear transform.</para></exception></member><member name="M:Cognex.VisionPro.ICogTransform2D.CopyBase"><returns><PARA>The cloned transformation object.</PARA></returns><remarks><PARA>Returns a copy of this transformation object.</PARA><PARA>
		This function  performs the same operation as the <see cref="M:Cognex.VisionPro.CogTransform2DLinear.Copy" /> method of
		<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
	The only difference is the type of the returned copy:
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
		<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.CopyBase" />
		method returns an
		<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><summary>Returns a new copy of this transform.</summary></member><member name="M:Cognex.VisionPro.ICogTransform2D.ComposeBase(Cognex.VisionPro.ICogTransform2D)"><param name="rightSide"><PARA>The transform object to compose with this one.</PARA></param><remarks><PARA>Returns a new transform that is the composition of this transform and the specified transform.</PARA><PARA>
		This function
		 performs the same operation as the
		 	<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Compose(Cognex.VisionPro.CogTransform2DLinear)" /> method of
		 	<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />. However, this method returns the transform of most suitable type based on the types of the transform objects being composed. For example, if you compose two linear transforms, the resulting transform is linear.</PARA><PARA>The order in which you compose transformations is important. If you have a transform that maps AFromB and another that maps BFromC, you compose the two to get a single transform that maps AFromC as follows: <CONSOLE>AFromB.ComposeBase(BFromC)</CONSOLE>. You do <ITALIC>not</ITALIC> use: <CONSOLE>BFromC.ComposeBase(AFromB).</CONSOLE></PARA></remarks><returns><PARA>An <see cref="T:Cognex.VisionPro.CogTransform2D" /> that represents the result of the composition.</PARA></returns><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="rightSide" /> is NULL.</para></exception><summary>Returns a new transform which is the composition of the given transform (on the right side) and this one (on the left side).</summary></member><member name="M:Cognex.VisionPro.ICogTransform2D.InvertBase"><remarks><PARA>Returns a transform that is the inverse of this transform. If a transform maps points from space A to space B, the inverse of the transform maps points from space B to space A.</PARA><PARA><see cref="M:Cognex.VisionPro.ICogTransform2D.InvertBase" />
		performs the same operation as the
			<see cref="M:Cognex.VisionPro.CogTransform2DLinear.Invert" />
		method of
			<see cref="T:Cognex.VisionPro.CogTransform2DLinear" />.
			
		The only difference is the type of the returned transform:
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />'s
			<see cref="M:Cognex.VisionPro.ICogTransform2DLinear.InvertBase" />
			method returns an 
			<see cref="T:Cognex.VisionPro.ICogTransform2DLinear" />
		interface.</PARA></remarks><returns><PARA>The inverted transform.</PARA></returns><summary>Returns a new transform which is the inverse of this one.</summary></member><member name="T:Cognex.VisionPro.CogRLERun"><summary>This class holds data that describes a single run within a run length encoded image (CogRLEBuffer). Note that a run is limited to a maximum length of 255 pixels, so an actual run may be represented by several adjacent instances of this object. A default constructed CogRLERun (value and length both zero) is used to denote the end of each row within a CogRLEBuffer.</summary></member><member name="M:Cognex.VisionPro.CogRLERun.#ctor"><summary>Construct a CogRLERun with value and length both set to zero.</summary></member><member name="F:Cognex.VisionPro.CogRLERun.Value"><summary>The greyscale value of this run.</summary></member><member name="F:Cognex.VisionPro.CogRLERun.Length"><summary>The length in pixels of this run. Maximum value is 255.</summary></member><member name="T:Cognex.VisionPro.CogFlushedEventHandler"><summary>Represents the method that will handle the Flushed event of an ICogAcqFifo.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogCompleteEventHandler"><summary>Represents the method that will handle the Complete event of an ICogAcqFifo.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogMovePartEventHandler"><summary>Represents the method that will handle the MovePart event of an ICogAcqFifo.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogOverrunEventHandler"><summary>Represents the method that will handle the Overrun event of an ICogAcqFifo.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogSegmentsChangedEventHandler"><summary>Represents the method that will handle the SegmentsChanged event of a CogGeneralContour.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogSegmentAddedEventHandler"><summary>Represents the method that will handle the SegmentAdded event of a CogGeneralContour.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogSegmentsRemovedEventHandler"><summary>Represents the method that will handle the SegmentsRemoved event of a CogGeneralContour.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogDraggingEventHandler"><summary>Represents the method that will handle the Dragging event of a graphic shape.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogDraggingStoppedEventHandler"><summary>Represents the method that will handle the DraggingStopped event of a graphic shape.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogLowToHighEventHandler"><summary>Represents the method that will handle the LowToHigh event of a CogInputLine.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogHighToLowEventHandler"><summary>Represents the method that will handle the HighToLow event of a CogInputLine.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogMaximizerEvaulateEventHandler"><summary>Represents the method that will handle the Evaluate event of a CogMaximizer.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogVertexChangedEventHandler"><summary>Represents the method that will handle the VertexChanged event of a CogPolygon.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogVertexAddedEventHandler"><summary>Represents the method that will handle the VertexAdded event of a CogPolygon.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogVertexRemovedEventHandler"><summary>Represents the method that will handle the VertexRemoved event of a CogPolygon.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogBulkChangedEventHandler"><summary>Represents the method that will handle the BulkChanged event of a CogPolygon.  The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.Cog1394DCAMBusConfigurationChangedEventHandler"><summary>Represents the method that will handle the BusConfigurationChanged event of a 1394DCAM frame grabber. The method must have the same parameters as this delegate.</summary><param name="sender">n/a</param><param name="e">n/a</param></member><member name="T:Cognex.VisionPro.CogProfileCameraTriggerSignalConstants"><summary>Enumeration of profile camera trigger signals.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraTriggerSignalConstants.Differential"><summary>Differential trigger signal.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraTriggerSignalConstants.Opto"><summary>Opto trigger signal.</summary></member><member name="T:Cognex.VisionPro.CogLensDistortionModelConstants"><summary>Enumeration of lens distortion models.</summary></member><member name="F:Cognex.VisionPro.CogLensDistortionModelConstants.ThreeParamRadial"><remarks>Use the ThreeParamRadial distortion model. May be used for low distortion lenses - where the distortion is not apparent to the human eye - but where distortion correction can improve accuracy performance nonetheless.</remarks></member><member name="F:Cognex.VisionPro.CogLensDistortionModelConstants.NoDistortion"><remarks>In this model no lens distortion is present. May be used for ideal lenses without distortion.</remarks></member><member name="F:Cognex.VisionPro.CogLensDistortionModelConstants.SineTanLawProjection"><remarks>Use the SineTanLawProjection distortion model. May be used for high distortion lenses - short focal length lenses which exhibit apparent distortion.</remarks></member><member name="T:Cognex.VisionPro.CogColorConstants"><remarks><PARA>Enumeration of common colors used for graphics, equivalent to OLE_COLOR.</PARA></remarks><summary>Enumeration of common colors used for graphics, equivalent to OLE_COLOR.</summary></member><member name="F:Cognex.VisionPro.CogColorConstants.Magenta"><remarks><PARA><span style="width: 10em; background: #FF00FF; color:white; padding: 0 1em 0 1em;">Magenta</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Purple"><remarks><PARA><span style="width: 10em; background: #8000ff; color:white; padding: 0 1em 0 1em;">Purple</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Cyan"><remarks><PARA><span style="width: 10em; background: #00FFFF; color:black; padding: 0 1em 0 1em;">Cyan</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.DarkGreen"><remarks><PARA><span style="width: 10em; background: #008000; color:white; padding: 0 1em 0 1em;">Dark Green</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Yellow"><remarks><PARA><span style="width: 10em; background: #FFFF00; color:black; padding: 0 1em 0 1em;">Yellow</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Orange"><remarks><PARA><span style="width: 10em; background: #ff8000; color:black; padding: 0 1em 0 1em;">Orange</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.DarkRed"><remarks><PARA><span style="width: 10em; background: #800000; color:white; padding: 0 1em 0 1em;">Dark Red</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.White"><remarks><PARA><span style="width: 10em; background: #ffffff; color:black; padding: 0 1em 0 1em;">White</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.LightGrey"><remarks><PARA><span style="width: 10em; background: #C0C0C0; color:black; padding: 0 1em 0 1em;">Light Grey</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Grey"><remarks><PARA><span style="width: 10em; background: #808080; color:white; padding: 0 1em 0 1em;">Grey</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.DarkGrey"><remarks><PARA><span style="width: 10em; background: #404040; color:white; padding: 0 1em 0 1em;">Dark Grey</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Black"><remarks><PARA><span style="width: 10em; background: #000000; color:white; padding: 0 1em 0 1em;">Black</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.None"><remarks><PARA>Special color for hidden objects, or to indicate that no graphics should be drawn.</PARA></remarks><summary>Special color for hidden objects, or to indicate that no graphics should be drawn.</summary></member><member name="F:Cognex.VisionPro.CogColorConstants.Blue"><remarks><PARA><span style="width: 10em; background: #0000FF; color:white; padding: 0 1em 0 1em;">Blue</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Green"><remarks><PARA><span style="width: 10em; background: #00FF00; color:black; padding: 0 1em 0 1em;">Green</span></PARA></remarks></member><member name="F:Cognex.VisionPro.CogColorConstants.Red"><remarks><PARA><span style="width: 10em; background: #ff0000; color:white; padding: 0 1em 0 1em;">Red</span></PARA></remarks></member><member name="T:Cognex.VisionPro.CogGraphicLineStyleConstants"><remarks><PARA>Line style constants for drawing graphics.</PARA></remarks><summary>Enumeration of line style constants for drawing graphics.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLineStyleConstants.DashDotDot"><remarks><PARA>A dashed and double-dotted line.</PARA><PARA><PICTURE HEIGHT="14" WIDTH="212" SRC="cogGraphicLineStyleDashDotDot.gif" apiSRC="cogGraphicLineStyleDashDotDot_cogGraphicLineStyleDashDotDot.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicLineStyleConstants.DashDot"><remarks><PARA>A dashed and doted line. </PARA><PARA><PICTURE HEIGHT="14" WIDTH="212" SRC="cogGraphicLineStyleDashDot.gif" apiSRC="cogGraphicLineStyleDashDot_cogGraphicLineStyleDashDot.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicLineStyleConstants.Dot"><remarks><PARA>A dotted line.</PARA><PARA><PICTURE HEIGHT="14" WIDTH="212" SRC="cogGraphicLineStyleDot.gif" apiSRC="cogGraphicLineStyleDot_cogGraphicLineStyleDot.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicLineStyleConstants.Dash"><remarks><PARA>A dashed line.</PARA><PARA><PICTURE HEIGHT="14" WIDTH="212" SRC="cogGraphicLineStyleDash.gif" apiSRC="cogGraphicLineStyleDash_cogGraphicLineStyleDash.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicLineStyleConstants.Solid"><remarks><PARA>A solid line.</PARA><PARA><PICTURE HEIGHT="14" WIDTH="212" SRC="cogGraphicLineStyleSolid.gif" apiSRC="cogGraphicLineStyleSolid_cogGraphicLineStyleSolid.gif" /></PARA></remarks></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceToOutputConstants"><remarks><PARA>Enumeration that specifies which coordinate space will be selected in the output image of a calibration or fixturing operation.</PARA></remarks><summary>Enumeration that specifies which coordinate space will be selected in the output image of a calibration or fixturing operation.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateSpaceToOutputConstants.ParentSpace"><remarks><PARA>The selected space of the output image will be a fully-qualified copy of the parent space name.  Note: the parent space is the selected space of the input image.</PARA></remarks><summary>The selected space of the output image will be a fully-qualified copy of the parent space name.  Note: the parent space is the selected space of the input image.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateSpaceToOutputConstants.ChildSpace"><remarks><PARA>The selected space of the output image will be a fully-qualified copy of the child space name.  Note: the child space is the new space defined by a calibration or fixturing operation.</PARA></remarks><summary>The selected space of the output image will be a fully-qualified copy of the child space name.  Note: the child space is the new space defined by a calibration or fixturing operation.</summary></member><member name="T:Cognex.VisionPro.CogMaskPixelConstants"><summary>Enumeration of mask values that have a common meaning for all VisionPro mask images.</summary><remarks><PARA>Enumeration of mask values that have a common meaning for all VisionPro mask images.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogMaskPixelConstants.Care"><summary>Mask value used to indicate care.  Vision tools will treat the corresponding image pixel as they would if no mask image had been provided.</summary><remarks><PARA>Mask value used to indicate care.  Vision tools will treat the corresponding image pixel as they would if no mask image had been provided.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogMaskPixelConstants.DontCare"><summary>Mask value used to indicate don't care pixels.  The exact interpretation of don't care pixels in a mask image will depend on the specific vision tool.  Typically, the corresponding image pixels are ignored when performing computations.</summary><remarks><PARA>Mask value used to indicate don't care pixels.  The exact interpretation of don't care pixels in a mask image will depend on the specific vision tool.  Typically, the corresponding image pixels are ignored when performing computations.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogAnalysisConstants"><remarks><PARA>Constants describing the outcome of a tool group Results Analysis. </PARA></remarks><summary>Constants describing the outcome of an analysis.</summary></member><member name="F:Cognex.VisionPro.CogAnalysisConstants.Reject"><remarks><PARA>The results analysis for the last run of the tool group triggered a Reject result. </PARA></remarks></member><member name="F:Cognex.VisionPro.CogAnalysisConstants.Warn"><remarks><PARA>The results analysis for the last run of the tool group triggered a Warn result. </PARA></remarks></member><member name="F:Cognex.VisionPro.CogAnalysisConstants.Pass"><remarks><PARA>The results analysis for the last run of the tool group did not trigger a Warn or Reject result.  </PARA></remarks></member><member name="T:Cognex.VisionPro.CogImageDataModeConstants"><remarks><PARA>Enumeration of modes for accessing pixel data of an image.</PARA></remarks><summary>Enumeration of modes for accessing pixel data of an image.</summary></member><member name="F:Cognex.VisionPro.CogImageDataModeConstants.ReadWrite"><remarks><PARA>Data can be both read and written.</PARA></remarks><summary>Data can be both read and written.</summary></member><member name="F:Cognex.VisionPro.CogImageDataModeConstants.Write"><summary>Data are write-only.</summary><remarks><PARA>Data are write-only.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogImageDataModeConstants.Read"><summary>Data are read-only.</summary><remarks><PARA>Data are read-only.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogImageCopyModeConstants"><summary>Enumeration of modes that image copying supports.</summary><remarks><PARA>Enumeration of image copying modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogImageCopyModeConstants.NoPixels"><summary>Copies everything in the image except the pixels.</summary><remarks><PARA>Copy only the image size and properties. No pixel data is copied.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogImageCopyModeConstants.SharePixels"><remarks><PARA>Copy the image size and properties, but use the same pixel data as the source image.</PARA></remarks><summary>Copying the image shares the pixel data with original image.</summary></member><member name="F:Cognex.VisionPro.CogImageCopyModeConstants.CopyPixels"><summary>Copying the image copies the pixel data too.</summary><remarks><PARA>Copying mode that specifies that each pixel is copied from the source image to the destination image.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogImagePixelFormatConstants"><summary>Enumeration of how pixel information can be stored.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PlanarHSI8"><summary>Color, H=S=I=8bits, 8bits/pixel * 3, ICogImage24PlanarColor.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey8_2Byte"><summary>Monochrome, 8bits/pixel, 2bytes/pixel, ICogImage16Grey.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey12Packed"><summary>Monochrome, 12bits/pixel, 2pixels/3bytes, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey10Packed"><summary>Monochrome, 10bits/pixel, 2pixels/3bytes, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey14"><summary>Monochrome, 14bits/pixel, ICogImage16Grey.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey16BigEndian"><summary>Monochrome (Big Endian), 16bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PackedBGR24"><summary>Color, [B,G,R]=[8,8,8], 24bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey12"><summary>Monochrome, 12bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey10"><summary>Monochrome, 10bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PlanarRGB8"><summary>Color, R=G=B=8bits, 8bits/pixel * 3, ICogImage24PlanarColor.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PackedRGB48"><summary>Color, [R,G,B]=[16,16,16], 48bits/pixel.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PackedRGB24"><summary>Color, [R,G,B]=[8,8,8], 24bits/pixel.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.UYV"><summary>Color, YUV 4:4:4, 24bits/pixel.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.UYVY"><summary>Color, YUV 4:2:2, 16bits/pixel (average), no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.UYYVYY"><summary>Color, YUV 4:1:1, 12bits/pixel (average), no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Bayer16"><summary>Color, Bayer, 16bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Bayer8"><summary>Color, Bayer, 8bits/pixel, ICogImage8Grey.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PackedRGB32"><summary>Color, [a,R,G,B]=[8,8,8,8], 32bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.PackedRGB16"><summary>Color, [R,G,B]=[5,6,5], 16bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey16"><summary>Monochrome, 16bits/pixel, no ICogImage support.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Grey8"><summary>Monochrome, 8bits/pixel, ICogImage8Grey.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Unknown"><summary>Native or Unknown Pixel Format.</summary></member><member name="F:Cognex.VisionPro.CogImagePixelFormatConstants.Variable"><summary>Image type is determined after acquisition.</summary></member><member name="T:Cognex.VisionPro.CogImage16EncodingConstants"><summary>Enumeration of 16 bit image encoding.</summary></member><member name="F:Cognex.VisionPro.CogImage16EncodingConstants.Grey16"><summary>Greyscale, 16 bit pixel.</summary></member><member name="F:Cognex.VisionPro.CogImage16EncodingConstants.Grey14"><summary>Greyscale, 14 bit pixel.</summary></member><member name="F:Cognex.VisionPro.CogImage16EncodingConstants.Grey12"><summary>Greyscale, 12 bit pixel.</summary></member><member name="F:Cognex.VisionPro.CogImage16EncodingConstants.Grey10"><summary>Greyscale, 10 bit pixel.</summary></member><member name="F:Cognex.VisionPro.CogImage16EncodingConstants.Grey8"><summary>Greyscale, 8 bit pixel.</summary></member><member name="T:Cognex.VisionPro.CogImageColorSpaceConstants"><summary>Enumeration of color spaces.</summary><remarks><PARA>Enumeration of color spaces.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogImageColorSpaceConstants.HSI"><remarks><PARA>Hue Saturation Intensity (HSI) color space.</PARA></remarks><summary>Hue Saturation Intensity (HSI) color space.</summary></member><member name="F:Cognex.VisionPro.CogImageColorSpaceConstants.RGB"><summary>Red Green Blue (RGB) color space.</summary><remarks><PARA>Red Green Blue (RGB) color space.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogImagePlaneConstants"><summary>Enumeration of image planes.</summary><remarks><PARA>Enumeration of image planes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogImagePlaneConstants.Intensity"><remarks><PARA>Intensity image plane within a <see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">HSI</see> image.</PARA></remarks><summary>Intensity image plane within a cogImageColorSpaceHSI image.</summary></member><member name="F:Cognex.VisionPro.CogImagePlaneConstants.Saturation"><remarks><PARA>Saturation image plane within a <see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">HSI</see> image.</PARA></remarks><summary>Saturation image plane within a cogImageColorSpaceHSI image.</summary></member><member name="F:Cognex.VisionPro.CogImagePlaneConstants.Hue"><remarks><PARA>Hue image plane within a <see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">HSI</see> image.</PARA></remarks><summary>Hue image plane within a cogImageColorSpaceHSI image.</summary></member><member name="F:Cognex.VisionPro.CogImagePlaneConstants.Blue"><remarks><PARA>Blue image plane within a <see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">RGB</see> image.</PARA></remarks><summary>Blue image plane within a cogImageColorSpaceRGB image.</summary></member><member name="F:Cognex.VisionPro.CogImagePlaneConstants.Green"><summary>Green image plane within a cogImageColorSpaceRGB image.</summary><remarks><PARA>Green image plane within a <see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">RGB</see> image.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogImagePlaneConstants.Red"><remarks><PARA>Red image plane within a <see cref="T:Cognex.VisionPro.CogImageColorSpaceConstants">RGB</see> image.</PARA></remarks><summary>Red image plane within a cogImageColorSpaceRGB image.</summary></member><member name="T:Cognex.VisionPro.CogInputLineTriggerModeConstants"><summary>Enumeration of trigger modes for discrete inputs.</summary><remarks><PARA>Enumeration of trigger modes for discrete inputs.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogInputLineTriggerModeConstants.Any"><summary>LowToHigh event is fired for any transition on the input line.</summary></member><member name="F:Cognex.VisionPro.CogInputLineTriggerModeConstants.HighToLow"><summary>A HighToLow event is fired when the input changes from high to low.</summary><remarks><PARA>A HighToLow event is fired when the input changes from high to low.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogInputLineTriggerModeConstants.LowToHigh"><remarks><PARA>A LowToHigh event is fired when the input changes from low to high.</PARA></remarks><summary>A LowToHigh event is fired when the input changes from low to high.</summary></member><member name="F:Cognex.VisionPro.CogInputLineTriggerModeConstants.None"><summary>Changes to the input do not cause events to be fired.</summary><remarks><PARA>Changes to the input do not cause events to be fired.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogInputLineTriggerModeConstants.All"><summary>LowToHigh and HighToLow events are fired.</summary><remarks><PARA>LowToHigh and HighToLow events are fired.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogOutputLinePulseModeConstants"><remarks><PARA>Enumeration of pulse modes for discrete outputs.</PARA></remarks><summary>Enumeration of pulse modes for discrete outputs.</summary></member><member name="F:Cognex.VisionPro.CogOutputLinePulseModeConstants.Low"><summary>When the output's Value is changed from True to False, it returns to True after the pulse duration expires.</summary><remarks><PARA>When the output's Value is changed from True to False, it returns to True after the pulse duration expires.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogOutputLinePulseModeConstants.High"><remarks><PARA>When the output's Value is changed from False to True, it returns to False after the pulse duration expires.</PARA></remarks><summary>When the output's Value is changed from False to True, it returns to False after the pulse duration expires.</summary></member><member name="F:Cognex.VisionPro.CogOutputLinePulseModeConstants.None"><summary>The output is not pulsed, and remains in whatever state is specified by its Value property.</summary><remarks><PARA>The output is not pulsed, and remains in whatever state is specified by its Value property.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogEncoderResolutionConstants"><summary>Valid encoder resolutions.</summary></member><member name="F:Cognex.VisionPro.CogEncoderResolutionConstants.cogEncoderResolution4x"><summary>One count on every encoder edge (recommended, behavior of 8120/CVM11).</summary></member><member name="F:Cognex.VisionPro.CogEncoderResolutionConstants.cogEncoderResolution2x"><summary>One count every 2 edges.</summary></member><member name="F:Cognex.VisionPro.CogEncoderResolutionConstants.cogEncoderResolution1x"><summary>One count every 4 edges (default for 8600).</summary></member><member name="T:Cognex.VisionPro.CogAcqSyncModelConstants"><summary>Enumeration for camera synchronization models.</summary><remarks><PARA>Enumeration for camera synchronization models used by  the <see cref="P:Cognex.VisionPro.ICogAcqSync.SyncModel" /> property which is supported only on the MVS-8100M. </PARA><PARA>For other frame grabbers that use CCF-based video formats, the sync model is described in the <see cref="u:Acquisition.General.Theory.AcqInVisionPro" cgnxAnchor="video_formats">format name</see>.</PARA><PARA>To learn more about synchronization models, see the topic <see cref="u:Acquisition.General.Theory.SynchModels">Synchronization Models.</see></PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.ExternalPixelDrive"><remarks><PARA>The frame grabber derives sync from the camera using the positive-going logic drive signals coming from the camera on the H- and V- wires.  The pixel clock coming from the camera is used directly to sample the image.</PARA></remarks><summary>The frame grabber derives sync from the camera using the positive-going logic drive signals coming from the camera on the H- and V- wires.  The pixel clock coming from the camera is used directly to sample the image.</summary></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.ExternalPixelSync"><remarks><PARA>The frame grabber derives sync from the camera using the negative-going analog sync signals coming from the camera on the H- and V-wires.  The pixel clock coming from the camera is used directly to sample the image.</PARA></remarks><summary>The frame grabber derives sync from the camera using the negative-going analog sync signals coming from the camera on the H- and V-wires.  The pixel clock coming from the camera is used directly to sample the image.</summary></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.ExternalPLLDrive"><remarks><PARA>The frame grabber derives sync from the camera using the positive-going logic drive signals coming from the camera on the H- and V-wires. The pixel clock is regenerated on the frame grabber using the phase locked loop circuitry.</PARA></remarks><summary>The frame grabber derives sync from the camera using the positive-going logic drive signals coming from the camera on the H- and V-wires. The pixel clock is regenerated on the frame grabber using the phase locked loop circuitry.</summary></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.ExternalPLLSync"><remarks><PARA>The frame grabber derives sync from the camera using the negative-going analog sync signals coming from the camera on the H- and V-wires. The pixel clock is regenerated on the frame grabber using the phase locked loop.</PARA></remarks><summary>The frame grabber derives sync from the camera using the negative-going analog sync signals coming from the camera on the H- and V-wires. The pixel clock is regenerated on the frame grabber using the phase locked loop.</summary></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.ExternalPLLComposite"><summary>The frame grabber derives sync from the camera using the composite video/sync signal. The pixel clock used to acquire samples is derived on the frame grabber using phase locked loop circuitry and the horizontal sync signal from the camera.</summary><remarks><PARA>The frame grabber derives sync from the camera using the composite video/sync signal. The pixel clock used to acquire samples is derived on the frame grabber using phase locked loop circuitry and the horizontal sync signal from the camera.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.InternalDrive"><summary>Sync is generated in the frame grabber, and is sent to the camera as logic levels on the H- and V-wires.</summary><remarks><PARA>Sync is generated in the frame grabber, and is sent to the camera as logic levels on the H- and V-wires.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqSyncModelConstants.InternalComposite"><summary>Sync is generated in the frame grabber, and is sent to the camera on the H-sync wire.</summary><remarks><PARA>Sync is generated in the frame grabber, and is sent to the camera on the H-sync wire.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogAcqTriggerModelConstants"><remarks><PARA>Enumeration for trigger models. See <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerModel" />.</PARA><PARA>If you are using a frame grabber that supports CVM11, you can specify
encoder-triggered acquisition which is a special case of hardware triggering
for line scan cameras. To use encoder triggering, set the trigger
model as
<see cref="F:Cognex.VisionPro.CogAcqTriggerModelConstants.Auto" />
or
<see cref="F:Cognex.VisionPro.CogAcqTriggerModelConstants.Semi" />
and set the  <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TriggerFromEncoder" /> property.</PARA><PARA>Some trigger formats may not be available depending on the frame grabber you are using or on the version of VisionPro installed on your computer.</PARA></remarks><summary>Enumeration for triggering image acquisitions.</summary></member><member name="F:Cognex.VisionPro.CogAcqTriggerModelConstants.FreeRun"><summary>Acquires occur automatically at frame rate.</summary><remarks><PARA>Acquisitions occur automatically at the highest frame rate that the camera and frame grabber support.</PARA><PARA>Your should not call <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" /> when using this trigger model.</PARA><PARA>When <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerEnabled" /> is False, no acquisition takes place until you enable triggers.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqTriggerModelConstants.Slave"><summary>Trigger model used by slave fifos - this is not settable.</summary><remarks><PARA>This trigger model is used by slave acquisition FIFOs. You cannot pass this value to <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerModel" />.</PARA><PARA>See <see cref="M:Cognex.VisionPro.ICogAcqSimultaneous.CreateSlaveAcqFifo(System.Boolean)" /> to learn how to create slave acquisition FIFOS.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqTriggerModelConstants.Semi"><summary>Acquires are primed by a call to StartAcquire. An external trigger initiates the acquire.</summary><remarks><PARA>Acquisitions are primed by a call to <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" />. The acquisition actually starts when a <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerLowToHigh">transition</see> on an external trigger line is detected.</PARA><PARA>When <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerEnabled" /> is False, transitions on the input line are ignored until you enable triggers.</PARA><PARA>The transition on the trigger input line can be high to low or low to high. Use <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerLowToHigh" /> to change the polarity of the trigger line.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqTriggerModelConstants.Auto"><summary>Acquires are initiated by an external trigger. It is an error to call StartAcquire.</summary><remarks><PARA>Acquisition starts when a <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerLowToHigh">transition</see> on an external trigger line is detected. This trigger model is sometimes called a "hardware trigger." It is an error to call <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" />.</PARA><PARA>When <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerEnabled" /> is False, transitions on the input line are ignored until you enable triggers.</PARA><PARA>The transition on the trigger input line can be high to low or low to high. Use <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerLowToHigh" /> to change the polarity of the trigger line.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqTriggerModelConstants.Manual"><remarks><PARA>Acquisition starts with a call to <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" />. Since no I/O input lines are involved, this trigger model is sometimes called "software triggering."</PARA><PARA>When <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerEnabled" /> is True, acquisition starts as soon as possible after you call  <see cref="M:Cognex.VisionPro.ICogAcqFifo.StartAcquire" /> or <see cref="M:Cognex.VisionPro.ICogAcqFifo.Acquire(System.Int32@)" />. When  <see cref="P:Cognex.VisionPro.ICogAcqTrigger.TriggerEnabled" /> is False, acquisition requests are queued until you enable triggers.</PARA><PARA>On the MVS-8100M and MVS-8100C, manual strobing should be used only during
development and for diagnostic purposes. For production applications, always use
hardware triggering to initiate strobes.</PARA></remarks><summary>Acquires are initiated by a call to StartAcquire.</summary></member><member name="T:Cognex.VisionPro.CogAcqOffsetClampConstants"><summary>Enumeration for offset and clamping.</summary><remarks><PARA>Enumeration for <see cref="P:Cognex.VisionPro.ICogAcqOffsetClamp.OffsetClampMode">offset and clamping</see>.</PARA><TABLE><ROW><TH ROWSPAN="1" COLSPAN="1"><tab-head>Platform</tab-head></TH><TH ROWSPAN="1" COLSPAN="1"><tab-head>Shift Offset</tab-head></TH><TH ROWSPAN="1" COLSPAN="1"><tab-head>Min Clamp</tab-head></TH><TH ROWSPAN="1" COLSPAN="1"><tab-head>Max Clamp</tab-head></TH></ROW><ROW><CELL ROWSPAN="1" COLSPAN="1"><PARA>8100d</PARA></CELL><CELL ROWSPAN="1" COLSPAN="1"><PARA>15</PARA></CELL><CELL ROWSPAN="1" COLSPAN="1"><PARA>15</PARA></CELL><CELL ROWSPAN="1" COLSPAN="1"><PARA>240</PARA></CELL></ROW></TABLE></remarks></member><member name="F:Cognex.VisionPro.CogAcqOffsetClampConstants.Both"><summary>Shift output pixel values and then clamp then.</summary><remarks><PARA>Shift output pixel values in an acquired image by a fixed offset and then clamp them.
Values below the minimum value after shifting are set to the minimum; values above the maximum after shifting are set to the maximum.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqOffsetClampConstants.Clamp"><summary>Clamp output pixel values.</summary><remarks><PARA>Clamp output pixel values in an acquired image to minimum and maximum values.
Values below the minimum value are set to the minimum; values above the maximum are set to the maximum.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqOffsetClampConstants.None"><summary>No clamping or offset.</summary><remarks><PARA>Do not change output values in acquired images.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogAcqVideoFormatOptionConstants"><remarks><PARA>Enumeration of types of information that can be returned from <see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetAvailableVideoFormatOptions(Cognex.VisionPro.CogAcqVideoFormatOptionConstants,System.String,System.String,System.String,System.String,System.String)" />. You can OR these values to obtain different combinations of information</PARA></remarks><summary>Enumeration of types that can be returned from GetAvailableVideoFormatOptions.</summary></member><member name="F:Cognex.VisionPro.CogAcqVideoFormatOptionConstants.CameraOptions"><remarks><PARA>The collection will contain the camera options such as rapid reset, software shutter, and so on.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqVideoFormatOptionConstants.CameraDriveType"><remarks><PARA>The collection will contain the camera drive type.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqVideoFormatOptionConstants.CameraResolution"><remarks><PARA>The collection will contain the video format resolution.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqVideoFormatOptionConstants.CameraModel"><remarks><PARA>The collection will contain the camera model.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqVideoFormatOptionConstants.CameraManufacturer"><remarks><PARA>The collection will contain the camera manufacturer.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogAcqFifoPixelFormatConstants"><summary>Enumeration of types of acquisition fifo.</summary><remarks><PARA>Enumeration of types of <see cref="T:Cognex.VisionPro.ICogAcqFifo" /> pixel formats.</PARA><PARA>Some pixel formats may not be available depending on the frame grabber, video format, and camera that you are using, or on the version of VisionPro installed on your computer.
	Use
		<see cref="M:Cognex.VisionPro.ICogFrameGrabber.GetSupportsPixelFormat(Cognex.VisionPro.CogAcqFifoPixelFormatConstants)" />
	to determine if a particular pixel format is supported for your configuration.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format3Plane"><remarks><PARA>A 3-plane image. Each pixel of each plane has a value that ranges from 0 (black) to 255 (white).</PARA></remarks><summary>Three planes of 8 bit data.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format32RGB"><remarks><PARA>24-bit RGB with an 8 bit alpha byte. The three low-order bytes contain the red, green, and blue values. The remaining byte contains an alpha value.</PARA></remarks><summary>24 bit RGB with an 8 bit alpha byte.</summary></member><member name="F:Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format565RGB"><summary>Packed 5-6-5 RGB images.</summary><remarks><PARA>16-bit RGB images packed as 5 red, 6 green, and 5 blue bits. The bits are packed like this: rrrr rggg gggb bbbb</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format16Grey"><summary>16 bit grey scale images.</summary><remarks><PARA>16-bit grey scale images. Each pixel has a value that ranges from 0 (black) to 65535 (white).</PARA></remarks></member><member name="F:Cognex.VisionPro.CogAcqFifoPixelFormatConstants.Format8Grey"><summary>8 bit grey scale images.</summary><remarks><PARA>8-bit grey scale images. Each pixel has a value that ranges from 0 (black) to 255 (white).</PARA></remarks></member><member name="T:Cognex.VisionPro.CogAcqFifoCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogAcqFifoTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogAcqFifo Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA></remarks><summary>Enumeration of data that can be returned by the Tool's CreateCurrentRecord function.</summary></member><member name="T:Cognex.VisionPro.CogAcqFifoLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be returned by the Tool's CreateLastRunRecord function.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogAcqFifoTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogAcqFifo Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA></remarks></member><member name="T:Cognex.VisionPro.CogAcqFifoLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogAcqFifoTool.LastRunRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogAcqFifo Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCopyShapeConstants"><remarks><PARA>Enumeration that specifies which aspects of shapes to copy.</PARA></remarks><summary>Enumeration of copy constants for duplicating shapes.</summary></member><member name="F:Cognex.VisionPro.CogCopyShapeConstants.Children"><summary>Copy any children of the current shape into the new shape.</summary><remarks><PARA>Copy any children of the current shape into the new shape.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCopyShapeConstants.DOFs"><remarks><PARA>Copy the enabled degrees of freedom into the shape.</PARA></remarks><summary>Copy DOF Enables into the new shape.</summary></member><member name="F:Cognex.VisionPro.CogCopyShapeConstants.BasicGraphics"><summary>Copy the ICogGraphic and ICogGraphicInteractive properties into the new shape. Does not copy the DOF Enables.</summary><remarks><PARA>Copy the <see cref="T:Cognex.VisionPro.CogGraphic" /> and <see cref="T:Cognex.VisionPro.CogGraphicInteractive" /> properties into the new shape. Does not copy the enabled degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCopyShapeConstants.GeometryOnly"><remarks><PARA>Only the geometric properties that define the shape will be copied into the new shape.</PARA></remarks><summary>Only the geometric properties that define the shape will be copied into the new shape.</summary></member><member name="F:Cognex.VisionPro.CogCopyShapeConstants.All"><summary>Copy all properties including child shapes into the new shape.</summary><remarks><PARA>Copy all properties including child shapes into the new shape.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogRectangleDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogRectangle.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogRectangle" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the degree of freedom constants of an interactive rectangle shape.</summary></member><member name="F:Cognex.VisionPro.CogRectangleDOFConstants.Size"><summary>Enables interactive manipulation of size of the rectangle.</summary><remarks><PARA>Allows changing the height and width of the rectangle independently of each other.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogRectangleDOFConstants.Scale"><summary>Enables interactive manipulation of relative X,Y scale of the rectangle.</summary><remarks><PARA>Allows changing the height and width while keeping the ratio of their lengths constant.</PARA><PARA>If 
		<see cref="T:Cognex.VisionPro.CogRectangleDOFConstants">Size</see>
		 is enabled, it overrides this degree of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogRectangleDOFConstants.None"><remarks><PARA>Disable all degrees of freedom.</PARA></remarks><summary>Disables interactive manipulation of all degrees of freedom of the rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks><summary>Enables interactive manipulation of rotation of the rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleDOFConstants.Position"><summary>Enables interactive manipulation of X,Y position of the rectangle.</summary><remarks><PARA>Allow changing of position.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogRectangleAffineDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogRectangleAffine.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogRectangleAffine" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the DOF constants of an interactive affine rectangle shape.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.Size"><remarks><PARA>Allows changing the height and width of the rectangle independently of each other.</PARA></remarks><summary>Enables interactive manipulation of size of the affine rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.Skew"><remarks><PARA>Allow changing the skew of the affine rectangle.</PARA></remarks><summary>Enables interactive manipulation of skew of the affine rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.Rotation"><remarks><PARA>Allow rotation of the affine rectangle.</PARA></remarks><summary>Enables interactive manipulation of rotation of the affine rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.Scale"><remarks><PARA>Allows changing the height and width while keeping the ratio of their lengths constant.</PARA><PARA>If 
	<see cref="T:Cognex.VisionPro.CogRectangleAffineDOFConstants">Size</see>
	is enabled, it overrides this degree of freedom.</PARA></remarks><summary>Enables interactive manipulation of relative scale of the X length to the Y length of the affine rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.None"><remarks><PARA>Disable all degrees of freedom.</PARA></remarks><summary>Disables interactive manipulation of all degrees of freedom of the affine rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the affine rectangle.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDOFConstants.Position"><summary>Enables interactive manipulation of X,Y position of the affine rectangle.</summary><remarks><PARA>Allow changing of position.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogShapeModelPolarityConstants"><remarks><PARA>Enumeration of possible polarity values for model features.</PARA></remarks><summary>Enumeration of possible polarity values for model features.</summary></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityConstants.PositiveOne"><remarks><PARA>If the feature is a closed shape, a polarity of positive one means the image is brighter outside the shape than inside. For open shapes, positive polarity means that following the tangent vector along the shape, brighter pixels are on the left.</PARA></remarks><summary>If the feature is a closed shape, a polarity of positive one means the image is brighter outside the shape than inside. For open shapes, positive polarity means that following the tangent vector along the shape, brighter pixels are on the left.</summary></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityConstants.Undefined"><summary>The polarity of the feature is not defined.</summary><remarks><PARA>The polarity of the feature is not defined.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityConstants.NegativeOne"><remarks><PARA>If the feature is a closed shape, a polarity of negative one means the image is brighter inside the shape than outside. For open shapes, negative polarity means that following the tangent vector along the shape, brighter pixels are on the right.</PARA></remarks><summary>If the feature is a closed shape, a polarity of negative one means the image is brighter inside the shape than outside. For open shapes, negative polarity means that following the tangent vector along the shape, brighter pixels are on the right.</summary></member><member name="T:Cognex.VisionPro.CogModelFeatureIteratorAttributeConstants"><summary>Bit field of attributes for the iterator.  The bits indicate which operations are available at the current position of the iterator.</summary><remarks><PARA>Bit field of <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Attributes">attributes</see>  for <see cref="T:Cognex.VisionPro.CogModelFeatureIteratorGC" />. The bits indicate the iterator methods that are valid at the current position of the iterator.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogModelFeatureIteratorAttributeConstants.Invalid"><summary>When this bit is set, the iterator is not in a valid state. Attempting to read or write item properties of an invalid iterator will produce an error. Iterator attribute properties can still be read.</summary><remarks><PARA>When this bit is set, the iterator is not in a valid state. Attempting to read or write item properties of an invalid iterator produces an error. Getting iterator <see cref="P:Cognex.VisionPro.ICogModelFeatureIterator.Attributes">attribute properties</see>  is allowed.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogModelFeatureIteratorAttributeConstants.End"><summary>When this bit is set, the iterator is positioned past the final item in the sequence and is invalid. In this state, calling MoveToNext or attempting to read item properties will produce an error. Moving to a valid item will validate the iterator.</summary><remarks><PARA>When this bit is set, the iterator is positioned past the final item in the sequence and is invalid. In this state, calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToNext" /> or attempting to read item properties produces an error. Moving to a valid item validates the iterator.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogModelFeatureIteratorAttributeConstants.First"><summary>When this bit is set, the iterator is positioned at the first item in the sequence. In this state, there are no items before the iterator so calling MoveToPrevious will produce an error. Note that 'First' does not imply the iterator is valid.</summary><remarks><PARA>When this bit is set, the iterator is positioned at the first item in the sequence. In this state, there are no items before the iterator so calling <see cref="M:Cognex.VisionPro.ICogModelFeatureIterator.MoveToPrevious" /> produces an error. Note that being positioned at the first item does not imply the iterator is valid.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants"><remarks><PARA>Enumeration of adornments for a CogShapeModel.</PARA></remarks><summary>Enumeration of adornments for a CogShapeModel.</summary></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants.SolidDiamond"><remarks><PARA>Show a diamond shape with the two triangular halves filled oppositely black or white, with black on the side expected to be darker, and white on the side expected to be brighter, based on the shape's polarity.</PARA></remarks><summary>Show a diamond shape with the two triangular halves filled oppositely black or white, with black on the side expected to be darker, and white on the side expected to be brighter, based on the shape's polarity.</summary></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants.SolidArrowWithTangentArrow"><summary>Show a solid arrow pointing in the tangent direction, and a solid arrow normal vector, pointing to the side expected to be brighter, according to the shape's polarity.</summary><remarks><PARA>Show a solid arrow pointing in the tangent direction, and a solid arrow normal vector, pointing to the side expected to be brighter, according to the shape's polarity.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants.SolidArrow"><summary>Show a solid arrow pointing in the direction expected to be brighter, according to shape's polarity.</summary><remarks><PARA>Show a solid arrow pointing in the direction expected to be brighter, according to shape's polarity.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeModelPolarityAdornmentConstants.None"><summary>Show no adornments on the shape model.</summary><remarks><PARA>Show no adornments on the shape model.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants"><summary>Enumeration for affine rectangle direction adornments.</summary><remarks><PARA>Enumeration for affine rectangle direction adornments.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants.SolidArrow"><remarks><PARA>Configures the affine rectangle to show a solid arrow adornment in this direction.</PARA></remarks><summary>Configures the affine rectangle to show a solid arrow adornment in this direction.</summary></member><member name="F:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants.Arrow"><summary>Configures the affine rectangle to show an open arrow adornment in this direction.</summary><remarks><PARA>Configures the affine rectangle to show an open arrow adornment in this direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogRectangleAffineDirectionAdornmentConstants.None"><remarks><PARA>Configures the affine rectangle to show no adornment in this direction.</PARA></remarks><summary>Configures the affine rectangle to show no adornment in this direction.</summary></member><member name="T:Cognex.VisionPro.CogGraphicDOFConstants"><summary>Enumeration for the degree of freedom for any shape.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.ICogGraphicInteractive.GraphicDOFEnableBase">enabled</see> for a  <see cref="T:Cognex.VisionPro.CogGraphicInteractive" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicDOFConstants.None"><remarks><PARA>Disable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicDOFConstants.Position"><remarks><PARA>Allow changing of position.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogGraphicLabelDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogGraphicLabel.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogGraphicLabel" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the graphic degree of freedom enable constants of an interactive text label.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the Label.</summary><remarks><PARA>Disable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicLabelDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the Label.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelDOFConstants.Position"><summary>Enables interactive manipulation of the position of the label.</summary><remarks><PARA>Allow changing of position.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogGraphicLabelAlignmentConstants"><remarks><PARA>Enumeration of alignment options for a CogGraphicLabel.</PARA></remarks><summary>Enumeration of alignment options for a CogGraphicLabel.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.BottomRight"><summary>The anchor point of the label is the bottom right point of its bounding box.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.BottomCenter"><summary>The anchor point of the label is the bottom center point of its bounding box.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.BottomLeft"><summary>The anchor point of the label is the bottom left point of its bounding box.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.BaselineRight"><summary>The anchor point of the label is the right most point of the line where the bottom of the characters are drawn.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.BaselineCenter"><summary>The anchor point of the label is the center point of the line where the bottom of the characters are drawn.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.BaselineLeft"><summary>The anchor point of the label is the left most point of the line where the bottom of the characters are drawn.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.TopRight"><summary>The anchor point of the label is the top right point of its bounding box.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.TopCenter"><summary>The anchor point of the label is the top center point of its bounding box.</summary></member><member name="F:Cognex.VisionPro.CogGraphicLabelAlignmentConstants.TopLeft"><summary>The anchor point of the label is the top left point of its bounding box.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxesDOFConstants"><summary>Enumeration for the graphic degree of freedom enable constants of an interactive coordinate axes.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogCoordinateAxes.GraphicDOFEnable" /> for <see cref="T:Cognex.VisionPro.CogCoordinateAxes" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.Skew"><remarks><PARA>Allow changing the skew of the coordinate axes.</PARA></remarks><summary>Enables interactive manipulation of the skew of the coordinate axes.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.Rotation"><remarks><PARA>Allow rotation of the coordinate axes.</PARA></remarks><summary>Enables interactive manipulation of the rotation of the coordinate axes.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.Aspect"><summary>Enables interactive manipulation of X-axis of the coordinate axes independently of the Y-axis.</summary><remarks><PARA>Allow changing each axis independently of the other.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.Scale"><summary>Enables interactive manipulation of the size of the axis arms of the coordinate axes.</summary><remarks><PARA>Allow changing each axis while maintaining the ratio of their lengths.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the coordinate axes.</summary><remarks><PARA>Disable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the coordinate axes.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxesDOFConstants.Position"><remarks><PARA>Allow changing of position.</PARA></remarks><summary>Enables interactive manipulation of the X,Y position of the coordinate axes.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants"><remarks><PARA>Enumeration for coordinate axes endpoint adornments.</PARA></remarks><summary>Enumeration for coordinate axes endpoint adornments.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants.SolidArrow"><remarks><PARA>Show a solid (filled) arrow head at the end of the coordinate axes.</PARA></remarks><summary>Show a solid (filled) arrow head at the end of the coordinate axes.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants.Arrow"><summary>Show an open arrow head at the end of the coordinate axes.</summary><remarks><PARA>Show a solid (filled) arrow head at the end of the coordinate axes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesEndPointAdornmentConstants.None"><remarks><PARA>Show no adornments at the end of the coordinate axes.</PARA></remarks><summary>Show no adornments at the end of the coordinate axes.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxesModeConstants"><summary>Controls which properties determine how the axes is drawn and how interactive manipulation of the axes affects the axes mathematical properties.</summary><remarks><PARA>Constants that determine which properties are used to draw the <see cref="T:Cognex.VisionPro.CogCoordinateAxes" /> and how interactive manipulation affects the mathematical properties of the axes.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesModeConstants.Screen"><remarks><PARA>The graphic is drawn based on  the <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedXAxisLength" /> and <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedAspect" /> properties.  Interactive manipulation of the arm lengths modifies only the displayed representation of the axes and not the mathematical properties.</PARA></remarks><summary>The CogCoordinateAxes is drawn from the DisplayedXAxisLength and DisplayedAspect properties.  Interactive manipulation of the arm lengths will only modify the displayed representation of the axes and not the mathematical properties.</summary></member><member name="F:Cognex.VisionPro.CogCoordinateAxesModeConstants.Mathematical"><summary>The graphic is drawn from the XAxisLength, Aspect, DisplayedScaleFactorX and DisplayedScaleFactorY properties.  Interactive manipulation of the axes size will modify the XAxisLength and Aspect properties.</summary><remarks><PARA>The graphic is drawn based on the <see cref="P:Cognex.VisionPro.CogCoordinateAxes.XAxisLength" />, <see cref="P:Cognex.VisionPro.CogCoordinateAxes.Aspect" />, <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorX" />, and <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorY" /> properties.  Interactive manipulation of the axes size modifies the <see cref="P:Cognex.VisionPro.CogCoordinateAxes.XAxisLength" /> and <see cref="P:Cognex.VisionPro.CogCoordinateAxes.Aspect" /> properties.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCoordinateAxesModeConstants.Scale"><summary>The graphic is drawn from the XAxisLength, Aspect, DisplayedScaleFactorX and DisplayedScaleFactorY properties.  Interactive manipulation of the axes size will modify the DisplayedScaleFactorX and DisplayedScaleFactorY properties.</summary><remarks><PARA>The graphic is drawn based on the <see cref="P:Cognex.VisionPro.CogCoordinateAxes.XAxisLength" />, <see cref="P:Cognex.VisionPro.CogCoordinateAxes.Aspect" />, <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorX" /> and <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorY" /> properties.  Interactive manipulation of the axes size modifies the <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorX" /> and <see cref="P:Cognex.VisionPro.CogCoordinateAxes.DisplayedScaleFactorY" /> properties.
.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogPointMarkerDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogPointMarker.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogPointMarker" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the graphic degree of freedom enable constants of an interactive point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerDOFConstants.None"><remarks><PARA>Disable all degrees of freedom.</PARA></remarks><summary>Disables all movement of the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks><summary>Enables all degrees of freedom for the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerDOFConstants.Position"><summary>This DOF allows the user to manipulate the X,Y position of the point marker center.</summary><remarks><PARA>Allow changing of position.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants"><summary>Enumeration of selections for GraphicType property in ICogPointMarker.</summary><remarks><PARA>Constants that describe the graphics used to display a  <see cref="T:Cognex.VisionPro.CogPointMarker" />. See <see cref="P:Cognex.VisionPro.CogPointMarker.GraphicType" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.CenteredLineSegment"><remarks><PARA>Displays a line segment with its center at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="12" HEIGHT="7" SRC="cogPointMarkerGraphicTypeCenteredLineSegment.gif" apiSRC="cogPointMarkerGraphicTypeCenteredLineSegment_cogPointMarkerGraphicTypeCenteredLineSegment.gif" /></PARA></remarks><summary>Displays a line segment with its center at the X,Y coordinates of the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.InwardArrow"><remarks><PARA>Displays an arrow terminating at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="15" HEIGHT="9" SRC="cogPointMarkerGraphicTypeInwardArrow.gif" apiSRC="cogPointMarkerGraphicTypeInwardArrow_cogPointMarkerGraphicTypeInwardArrow.gif" /></PARA></remarks><summary>Displays an arrow terminating at the X,Y coordinates of the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.OutwardArrow"><remarks><PARA>Displays an arrow originating at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="15" HEIGHT="9" SRC="cogPointMarkerGraphicTypeOutwardArrow.gif" apiSRC="cogPointMarkerGraphicTypeOutwardArrow_cogPointMarkerGraphicTypeOutwardArrow.gif" /></PARA></remarks><summary>Displays an arrow originating at the X,Y coordinates of the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.Square"><summary>Display a square with the center point at the X,Y coordinates of the point marker.</summary><remarks><PARA>Display a square with the center point at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="12" HEIGHT="12" SRC="cogPointMarkerGraphicTypeSquare.gif" apiSRC="cogPointMarkerGraphicTypeSquare_cogPointMarkerGraphicTypeSquare.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.Circle"><remarks><PARA>Displays a circle with the center point at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="11" HEIGHT="11" SRC="cogPointMarkerGraphicTypeCircle.gif" apiSRC="cogPointMarkerGraphicTypeCircle_cogPointMarkerGraphicTypeCircle.gif" /></PARA></remarks><summary>Displays a circle with the center point at the X,Y coordinates of the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.Crosshair"><remarks><PARA>Displays a circle with a cross at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="11" HEIGHT="11" SRC="cogPointMarkerGraphicTypeCrosshair.gif" apiSRC="cogPointMarkerGraphicTypeCrosshair_cogPointMarkerGraphicTypeCrosshair.gif" /></PARA></remarks><summary>Displays a circle with a cross at the X,Y coordinates of the point marker.</summary></member><member name="F:Cognex.VisionPro.CogPointMarkerGraphicTypeConstants.Cross"><summary>Displays a cross with the center point at the X,Y coordinates of the point marker.</summary><remarks><PARA>Displays a cross with the center point at the (x,y) coordinates of the point marker.</PARA><PARA><PICTURE WIDTH="11" HEIGHT="11" SRC="cogPointMarkerGraphicTypeCross.gif" apiSRC="cogPointMarkerGraphicTypeCross_cogPointMarkerGraphicTypeCross.gif" /></PARA></remarks></member><member name="T:Cognex.VisionPro.CogPolygonVertexColorConstants"><summary>Enumeration of selections for VertexAdornmentColor property.</summary><remarks><PARA>Enumeration of selections for VertexAdornmentColor property.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Magenta"><summary>Draw this vertex adornment in magenta.</summary><remarks><PARA>Draw this vertex adornment in magenta.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Purple"><remarks><PARA>Draw this vertex adornment in purple.</PARA></remarks><summary>Draw this vertex adornment in purple.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Cyan"><remarks><PARA>Draw this vertex adornment in cyan.</PARA></remarks><summary>Draw this vertex adornment in cyan.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.DarkGreen"><remarks><PARA>Draw this vertex adornment in dark green.</PARA></remarks><summary>Draw this vertex adornment in dark green.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Yellow"><remarks><PARA>Draw this vertex adornment in yellow.</PARA></remarks><summary>Draw this vertex adornment in yellow.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Orange"><summary>Draw this vertex adornment in orange.</summary><remarks><PARA>Draw this vertex adornment in orange.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.DarkRed"><remarks><PARA>Draw this vertex adornment in dark red.</PARA></remarks><summary>Draw this vertex adornment in dark red.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.White"><remarks><PARA>Draw this vertex adornment in white.</PARA></remarks><summary>Draw this vertex adornment in white.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.LightGrey"><summary>Draw this vertex adornment in light grey.</summary><remarks><PARA>Draw this vertex adornment in light grey.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Grey"><remarks><PARA>Draw this vertex adornment in grey.</PARA></remarks><summary>Draw this vertex adornment in grey.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.DarkGrey"><remarks><PARA>Draw this vertex adornment in dark grey.</PARA></remarks><summary>Draw this vertex adornment in dark grey.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Black"><remarks><PARA>Draw this vertex adornment in black.</PARA></remarks><summary>Draw this vertex adornment in black.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Auto"><remarks><PARA>Draw this vertex adornment in the same color as the shape itself.</PARA></remarks><summary>Draw this vertex adornment in the same color as the shape itself.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.None"><summary>Do not draw this vertex adornment.</summary><remarks><PARA>Do not draw this vertex adornment.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Blue"><remarks><PARA>Draw this vertex adornment in blue.</PARA></remarks><summary>Draw this vertex adornment in blue.</summary></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Green"><summary>Draw this vertex adornment in green.</summary><remarks><PARA>Draw this vertex adornment in green.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexColorConstants.Red"><remarks><PARA>Draw this vertex adornment in red.</PARA></remarks><summary>Draw this vertex adornment in red.</summary></member><member name="T:Cognex.VisionPro.CogPolygonVertexAdornmentConstants"><summary>Enumeration of vertex adornments.</summary><remarks><PARA>Enumeration of vertex adornments. Use <see cref="P:Cognex.VisionPro.CogPolygon.VertexAdornment" /> to set the adornment style.

	The adornment  applies to all vertices, but you can use
	<see cref="M:Cognex.VisionPro.CogPolygon.SetVertexAdornmentColor(System.Int32,Cognex.VisionPro.CogPolygonVertexColorConstants)" />
		to hide or to change the color of the adornment for each vertex.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexAdornmentConstants.SolidCircle"><summary>Show a solid (filled) circle at each vertex.</summary><remarks><PARA>Show a solid (filled) circle at each vertex.</PARA><PARA><PICTURE SRC="cogPolygonVertexAdornmentSolidCircle.gif" apiSRC="cogPolygonVertexAdornmentSolidCircle_cogPolygonVertexAdornmentSolidCircle.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexAdornmentConstants.SolidSquare"><summary>Show a solid (filled) square at each vertex.</summary><remarks><PARA>Show a solid (filled) square at each vertex.</PARA><PARA><PICTURE SRC="cogPolygonVertexAdornmentSolidSquare.gif" apiSRC="cogPolygonVertexAdornmentSolidSquare_cogPolygonVertexAdornmentSolidSquare.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonVertexAdornmentConstants.None"><summary>Show no adornments at the vertices.</summary><remarks><PARA>Show no adornments at the vertices.</PARA><PARA><PICTURE SRC="cogPolygonVertexAdornmentNone.gif" apiSRC="cogPolygonVertexAdornmentNone_cogPolygonVertexAdornmentNone.gif" /></PARA></remarks></member><member name="T:Cognex.VisionPro.CogPolygonFillConstants"><remarks><PARA>Enumeration of selections for <see cref="P:Cognex.VisionPro.CogPolygon.FillMode" /> property in <see cref="T:Cognex.VisionPro.CogPolygon" /> used to determine whether a point lies within a polygon. The two algorithms can produce different results.</PARA></remarks><summary>Enumeration of selections for FillMode property in ICogPolygon.</summary></member><member name="F:Cognex.VisionPro.CogPolygonFillConstants.WindingNumber"><remarks><PARA>Use the winding number algorithm to determine whether a point lies within a polygon.

A point is considered inside the polygon if an observer standing at a given point
would make at least one revolution about the point
as a ray that extends from the point to the polygon
traces the shape from vertex to vertex.
</PARA><PARA>Another way to describe this algorithm is to label each line segment − if it goes in a counterclockwise direction relative to the point and + if it goes clockwise relative to the point. Then trace a ray from the point through the polygon, adding 1 for each + segment crossed and subtracting 1 for each − segment crossed. If the result is not zero, the point is inside the polygon.</PARA><PARA>In the following picture, the point <ITALIC>P</ITALIC> is outside the polygon. </PARA><PARA><PICTURE SRC="windingout.gif" apiSRC="cogPolygonFillWindingNumber_windingout.gif" /></PARA><PARA>In the following picture the point <ITALIC>Q</ITALIC> is inside the polygon.
(Under the
	<see cref="T:Cognex.VisionPro.CogPolygonFilConstants">EvenOdd</see>
this point would be considered outside the polygon.)
</PARA><PARA><PICTURE SRC="windingin.gif" apiSRC="cogPolygonFillWindingNumber_windingin.gif" /></PARA></remarks><summary>Use the winding number algorithm to distinguish inside from outside for this polygon.</summary></member><member name="F:Cognex.VisionPro.CogPolygonFillConstants.EvenOdd"><remarks><PARA>Use the even/odd algorithm to determine whether a point lies within a polygon.</PARA><PARA>If a ray from a point crosses the polygon an odd number of times, the point is inside the polygon. If the ray crosses the polygon an even number of time, the point is outside the polygon.
</PARA><PARA>
In the following picture, the points
<ITALIC>P</ITALIC> and <ITALIC>Q</ITALIC> are considered to be outside the polygon because a ray drawn from each point crosses the polygon an even number of times. The point <ITALIC>R</ITALIC> is inside the polygon because a ray drawn from it crosses the polygon only once.</PARA><PARA><PICTURE SRC="cogPolygonFillEvenOdd.gif" apiSRC="cogPolygonFillEvenOdd_cogPolygonFillEvenOdd.gif" /></PARA></remarks><summary>Use the even/odd algorithm to distinguish inside from outside for this polygon.</summary></member><member name="T:Cognex.VisionPro.CogPolygonDOFConstants"><remarks><PARA>Enumeration for the degree of freedom constants of an interactive polygon shape.</PARA></remarks><summary>Enumeration for the degree of freedom constants of an interactive polygon shape.</summary></member><member name="F:Cognex.VisionPro.CogPolygonDOFConstants.VertexPositions"><remarks><PARA>Enables interactive manipulation of individual vertex positions.</PARA></remarks><summary>Enables interactive manipulation of individual vertex positions.</summary></member><member name="F:Cognex.VisionPro.CogPolygonDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the polygon.</summary><remarks><PARA>Disables interactive manipulation of all degrees of freedom of the polygon.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogPolygonDOFConstants.All"><remarks><PARA>Enables interactive manipulation of all degrees of freedom of the polygon.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the polygon.</summary></member><member name="F:Cognex.VisionPro.CogPolygonDOFConstants.Position"><remarks><PARA>Enables interactive manipulation of the position of the entire polygon.</PARA></remarks><summary>Enables interactive manipulation of the position of the entire polygon.</summary></member><member name="T:Cognex.VisionPro.CogLineDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogLine.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogLine" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the graphic degree of freedom enable constants of an interactive line.</summary></member><member name="F:Cognex.VisionPro.CogLineDOFConstants.Rotation"><remarks><PARA>Enables interactive manipulation of the rotation of the <see cref="T:Cognex.VisionPro.CogLine" /> about the reference point.</PARA></remarks><summary>Enables interactive manipulation of the rotation of the line about the reference point.</summary></member><member name="F:Cognex.VisionPro.CogLineDOFConstants.None"><summary>Disables all interactive modification of the Line.</summary><remarks><PARA>Disables all interactive modification of the <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineDOFConstants.All"><remarks><PARA>Enables all degrees of freedom for the <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></remarks><summary>Enables all degrees of freedom for the Line.</summary></member><member name="F:Cognex.VisionPro.CogLineDOFConstants.Position"><remarks><PARA>Enables interactive repositioning of the <see cref="T:Cognex.VisionPro.CogLine" />.</PARA></remarks><summary>Enables interactive repositioning of the Line.</summary></member><member name="T:Cognex.VisionPro.CogLineAdornmentConstants"><remarks><PARA>Enumeration for a <see cref="T:Cognex.VisionPro.CogLine" /> reference point <see cref="P:Cognex.VisionPro.CogLine.Adornment">adornment</see>.</PARA></remarks><summary>Enumeration for the line's reference point adornment.</summary></member><member name="F:Cognex.VisionPro.CogLineAdornmentConstants.SolidArrowInDisplay"><summary>Show a solid (filled) arrow head pointing in the direction of the line at the centerpoint of the portion of the line in the display.</summary><remarks><PARA>Show a solid (filled) arrow head pointing in the direction of the line at the center point of the portion of the line in the display.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineAdornmentConstants.ArrowInDisplay"><summary>Show an open arrow head pointing in the direction of the line at the centerpoint of the portion of the line in the display.</summary><remarks><PARA>Show an open arrow head pointing in the direction of the line at the center point of the portion of the line in the display.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineAdornmentConstants.SolidArrowAtReferencePoint"><summary>Show a solid (filled) arrow head pointing in the direction of the line at the reference point on the line.</summary><remarks><PARA>Show a solid (filled) arrow head pointing in the direction of the line at the reference point on the line.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineAdornmentConstants.ArrowAtReferencePoint"><summary>Show an open arrow head pointing in the direction of the line at the reference point on the line.</summary><remarks><PARA>Show an open arrow head pointing in the direction of the line at the reference point on the line.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineAdornmentConstants.None"><summary>Show no adornment on the line.</summary><remarks><PARA>Show no adornment on the line.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogLineSegmentDOFConstants"><summary>Enumeration for the degree of freedom constants of an interactive line segment.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogLineSegment.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogLineSegment" />.
You can OR these constants to combine different degrees of freedom.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineSegmentDOFConstants.BothPoints"><remarks><PARA>Allow changing of both start and end points.</PARA></remarks><summary>Enables interactive manipulation of both points of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentDOFConstants.StartPoint"><summary>Enables interactive manipulation of the start point of the line segment.</summary><remarks><PARA>Allow changing of the start point.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogLineSegmentDOFConstants.EndPoint"><remarks><PARA>Allow changing of the end point.</PARA></remarks><summary>Enables interactive manipulation of the end point of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentDOFConstants.None"><remarks><PARA>Disable all degrees of freedom.</PARA></remarks><summary>Disables all interactive modification of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentDOFConstants.All"><remarks><PARA>Enable all degrees of freedom.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentDOFConstants.Position"><remarks><PARA>Allow changing of position.</PARA></remarks><summary>Enables interactive manipulation of the position of the line segment.</summary></member><member name="T:Cognex.VisionPro.CogLineSegmentAdornmentConstants"><remarks><PARA>Enumeration for line segment endpoint adornments.</PARA></remarks><summary>Enumeration for line segment endpoint adornments.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentAdornmentConstants.SolidCircle"><summary>Show a solid (filled) circle at the end of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentAdornmentConstants.SolidSquare"><summary>Show a solid (filled) square at the end of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentAdornmentConstants.SolidArrow"><summary>Show a solid (filled) arrow head at the end of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentAdornmentConstants.Arrow"><summary>Show an open arrow head at the end of the line segment.</summary></member><member name="F:Cognex.VisionPro.CogLineSegmentAdornmentConstants.None"><summary>Show no adornments at the end of the line segment.</summary></member><member name="T:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants"><remarks><PARA>Enumeration for ellipse direction adornments.</PARA></remarks><summary>Enumeration for ellipse direction adornments.</summary></member><member name="F:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants.SolidArrow"><remarks><PARA>Configures the ellipse to show a solid arrow adornment in this direction.</PARA></remarks><summary>Configures the ellipse to show a solid arrow adornment in this direction.</summary></member><member name="F:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants.Arrow"><summary>Configures the ellipse to show an open arrow adornment in this direction.</summary><remarks><PARA>Configures the ellipse to show an open arrow adornment in this direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipseDirectionAdornmentConstants.None"><summary>Configures the ellipse to show no adornment in this direction.</summary><remarks><PARA>Configures the ellipse to show no adornment in this direction.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogEllipseDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogEllipse.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogEllipse" /> shape. You can OR these constants to combine different degrees of freedom.</PARA></remarks><summary>Enumeration for the degree of freedom constants of an interactive ellipse shape.</summary></member><member name="F:Cognex.VisionPro.CogEllipseDOFConstants.Size"><remarks><PARA>Allows changing the length of both radii independently of each other.</PARA></remarks><summary>Enables interactive manipulation of both radii of the ellipse independently.</summary></member><member name="F:Cognex.VisionPro.CogEllipseDOFConstants.Rotation"><summary>Enables interactive manipulation of the rotation of the ellipse.</summary><remarks><PARA>Allow rotation of the ellipse.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipseDOFConstants.Scale"><summary>Enables interactive manipulation of both radii of the ellipse while keeping the ratio of their lengths constant.  Note: If the 'Size' DOF is enabled, it will override this one.</summary><remarks><PARA>
Allows changing the radii of the ellipse while keeping the ratio of their lengths constant.</PARA><PARA>If  
	<see cref="T:Cognex.VisionPro.CogEllipseDOFConstants.Size" />
	 is enabled, it overrides this degree of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipseDOFConstants.None"><remarks><PARA>Disable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipseDOFConstants.All"><summary>Enables interactive manipulation of all degrees of freedom for the ellipse.</summary><remarks><PARA>Enable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipseDOFConstants.Position"><remarks><PARA>Allow changing of position.</PARA></remarks><summary>Enables interactive manipulation of the X,Y position of the ellipse's center.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalArcAdornmentConstants"><summary>Enumeration for elliptical arc endpoint adornments.</summary><remarks><PARA>Enumeration for elliptical arc endpoint adornments.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcAdornmentConstants.SolidCircle"><remarks><PARA>Show a solid (filled) circle at the end of the elliptical arc.</PARA></remarks><summary>Show a solid (filled) circle at the end of the elliptical arc.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcAdornmentConstants.SolidSquare"><remarks><PARA>Show a solid (filled) square at the end of the elliptical arc.</PARA></remarks><summary>Show a solid (filled) square at the end of the elliptical arc.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcAdornmentConstants.SolidArrow"><summary>Show a solid (filled) arrow head at the end of the elliptical arc.</summary><remarks><PARA>Show a solid (filled) arrow head at the end of the elliptical arc.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcAdornmentConstants.Arrow"><remarks><PARA>Show an open arrow head at the end of the elliptical arc.</PARA></remarks><summary>Show an open arrow head at the end of the elliptical arc.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcAdornmentConstants.None"><summary>Show no adornments at the end of the elliptical arc.</summary><remarks><PARA>Show no adornments at the end of the elliptical arc.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogEllipticalArcDirectionAdornmentConstants"><remarks><PARA>Enumeration for elliptical arc direction adornments.  These adornment arrows indicate the direction from the start point of the arc to its end point.</PARA></remarks><summary>Enumeration for elliptical arc direction adornments.  These adornment arrows indicate the direction from the start point of the arc to its end point.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcDirectionAdornmentConstants.SolidArrow"><summary>Configure the elliptical arc to show a solid arrow adornment.</summary><remarks><PARA>Configure the elliptical arc to show a solid arrow adornment.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcDirectionAdornmentConstants.Arrow"><remarks><PARA>Configure the elliptical arc to show an open arrow adornment.</PARA></remarks><summary>Configure the elliptical arc to show an open arrow adornment.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcDirectionAdornmentConstants.None"><remarks><PARA>Configure the elliptical arc to show no direction adornment.</PARA></remarks><summary>Configure the elliptical arc to show no direction adornment.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalArcDOFConstants"><summary>Enumeration for the degree of freedom constants of an interactive elliptical arc shape.  These constants control how the shape can be manipulated on a display.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogEllipticalArc.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogEllipticalArc" />. You can OR these constants to combine different degrees of freedom.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.ArcSpanFourPi"><remarks><PARA>If interactive manipulation of the arc's span
(<see cref="T:Cognex.VisionPro.CogEllipticalArcDOFConstants.ArcSpan" />)
is enabled, setting this bit allows the span to vary between 4Pi and −4Pi.  If this bit is not set, the limits for interactive manipulation are 2Pi and −2Pi.</PARA></remarks><summary>If interactive manipulation of the arc's span is enabled, setting this bit allows the span to vary between 4 * Pi and -4 * Pi.  The limits for interactive manipulation are 2 * Pi and -2 * Pi if this bit is not set.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.ConstrainedSpan"><summary>Enables interactive manipulation of the curvature of the elliptical arc while constraining it to pass through the endpoints and the bend handle.  This DOF allows the user to change the fraction of the full ellipse that appears between the arc endpoints.</summary><remarks><PARA>Enables interactive manipulation of the curvature of the elliptical arc while constraining it to pass through the endpoints and the bend handle.  This DOF allows the user to change the fraction of the full ellipse that appears between the arc endpoints.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.Bend"><remarks><PARA>Enables interactive manipulation of the curvature of the elliptical arc.  Notice that changing the curvature is likely to affect the center, radii, rotation, start and span of the arc, but will not modify its endpoints.</PARA></remarks><summary>Enables interactive manipulation of the curvature of the elliptical arc.  Notice that changing the curvature is likely to affect the center, radii, rotation, start and span of the arc, but will not modify its endpoints.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.ArcSpan"><summary>Enables interactive manipulation of the length of the elliptical arc.  Either end of the arc can be slid along the underlying ellipse, without changing the ellipse's center, radii or rotation.</summary><remarks><PARA>Enables interactive manipulation of the length of the elliptical arc.  Either end of the arc can be slid along the underlying ellipse, without changing the ellipse's center, radii or rotation.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.EndPoints"><remarks><PARA>Enables interactive manipulation of both endpoints of the elliptical arc.  Notice that changing an endpoint is likely to affect the center, radii, rotation, start and span of the arc, but will not modify the other endpoint.</PARA></remarks><summary>Enables interactive manipulation of both endpoints of the elliptical arc.  Notice that changing an endpoint is likely to affect the center, radii, rotation, start and span of the arc, but will not modify the other endpoint.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.None"><remarks><PARA>Disables interactive manipulation of the elliptical arc.</PARA></remarks><summary>Disables interactive manipulation of the elliptical arc.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.All"><summary>Enables interactive manipulation of all degrees of freedom for the elliptical arc.</summary><remarks><PARA>Enables interactive manipulation of all degrees of freedom for the elliptical arc.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalArcDOFConstants.Position"><summary>Enables interactive manipulation of the X,Y position of the elliptical arc.  Changing the position will not affect the radii, rotation, start or span of the arc.</summary><remarks><PARA>Enables interactive manipulation of the (x,y) position of the elliptical arc.  Changing the position will not affect the radii, rotation, start or span of the arc.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants"><remarks><PARA>Enumeration for elliptical annulus section direction adornments.  These adornment arrows can be used indicate the radial or arc direction.</PARA></remarks><summary>Enumeration for elliptical annulus section direction adornments.  These adornment arrows can be used indicate the radial or arc direction.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants.SolidArrow"><summary>Configure the elliptical annulus arcs, or radial lines, to show a solid arrow adornment.</summary><remarks><PARA>Configure the elliptical annulus arcs, or radial lines, to show a solid arrow adornment.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants.Arrow"><remarks><PARA>Configure the elliptical annulus arcs, or radial lines, to show an open arrow adornment.</PARA></remarks><summary>Configure the elliptical annulus arcs, or radial lines, to show an open arrow adornment.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDirectionAdornmentConstants.None"><remarks><PARA>Configure the elliptical annulus arcs, or radial lines, to show no direction adornment.</PARA></remarks><summary>Configure the elliptical annulus arcs, or radial lines, to show no direction adornment.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSectionCenterArcAdornmentConstants"><remarks><PARA>Enumeration for selecting a center arc adornment for the elliptical annulus section.</PARA></remarks><summary>Enumeration for selecting a center arc adornment for the elliptical annulus section.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionCenterArcAdornmentConstants.DottedArc"><remarks><PARA>Configures the elliptical annulus section to show a dotted center arc adornment.</PARA></remarks><summary>Configures the elliptical annulus section to show a dotted center arc adornment.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionCenterArcAdornmentConstants.SolidArc"><remarks><PARA>Configures the elliptical annulus section to show a solid center arc adornment.</PARA></remarks><summary>Configures the elliptical annulus section to show a solid center arc adornment.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionCenterArcAdornmentConstants.None"><remarks><PARA>Configures the elliptical annulus section to show no center arc adornment.</PARA></remarks><summary>Configures the elliptical annulus section to show no center arc adornment.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogEllipticalAnnulusSection.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSection" />. You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the degree of freedom constants of an interactive elliptical annulus section shape.  These constants control how the shape can be manipulated on a display.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.SectionSpanFourPi"><remarks><PARA>If interactive manipulation of the annulus section's span

(<see cref="T:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.Span" />)
 is enabled, setting this bit allows the span to vary between 4Pi and −4Pi.  If this bit is not set, the limits for interactive manipulation are 2Pi and −2Pi.</PARA></remarks><summary>If interactive manipulation of the annulus section's span is enabled, setting this bit allows the span to vary between 4 * Pi and -4 * Pi.  The limits for interactive manipulation are 2 * Pi and -2 * Pi if this bit is not set.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.Radii"><summary>Enables interactive manipulation of the radii of the elliptical annulus section.  Changing one radius will not affect the center, rotation, start or span of the annulus, nor will it modify the other radius.</summary><remarks><PARA>Enables interactive manipulation of the radii of the elliptical annulus section.  Changing one radius will not affect the center, rotation, start or span of the annulus, nor will it modify the other radius.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.ConstrainedSpan"><summary>Enables interactive manipulation of the curvature of the elliptical annulus section while constraining the manipulation arc to pass through the endpoints and the bend handle.  Changes the fraction of the full ellipse that appears between the endpoints.</summary><remarks><PARA>Enables interactive manipulation of the curvature of the elliptical annulus section while constraining the manipulation arc to pass through the endpoints and the bend handle.  Changes the fraction of the full ellipse that appears between the endpoints.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.Bend"><remarks><PARA>Enables interactive manipulation of the curvature of the annulus section.  Changing the curvature is likely to affect the center, radii, rotation, start, span and radial scale of the annulus, but will not modify the endpoints of the manipulation arc.</PARA></remarks><summary>Enables interactive manipulation of the curvature of the annulus section.  Changing the curvature is likely to affect the center, radii, rotation, start, span and radial scale of the annulus, but will not modify the endpoints of the manipulation arc.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.SectionSpan"><summary>Enables interactive manipulation of the arc length of the elliptical annulus section.  Either end of the section can be slid along the underlying ellipse, without changing ellipse's center, radii, or rotation.</summary><remarks><PARA>Enables interactive manipulation of the arc length of the elliptical annulus section.  Either end of the section can be slid along the underlying ellipse, without changing ellipse's center, radii, or rotation.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.EndPoints"><summary>Enables interactive manipulation of the endpoints of the manipulation arc in the annulus section.  Notice that changing an endpoint is likely to affect the center, radii, rotation, start, span and radial scale of the annulus, but not the other endpoint.</summary><remarks><PARA>Enables interactive manipulation of the endpoints of the manipulation arc in the annulus section.  Notice that changing an endpoint is likely to affect the center, radii, rotation, start, span and radial scale of the annulus, but not the other endpoint.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.None"><remarks><PARA>Disables interactive manipulation of the elliptical annulus section.</PARA></remarks><summary>Disables interactive manipulation of the elliptical annulus section.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.All"><remarks><PARA>Enables interactive manipulation of all degrees of freedom for the elliptical annulus section.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom for the elliptical annulus section.</summary></member><member name="F:Cognex.VisionPro.CogEllipticalAnnulusSectionDOFConstants.Position"><remarks><PARA>Enables interactive manipulation of the (x,y) position of the elliptical annulus section.  Changing the position will not affect the radii, rotation, start, span or radial scale of the annulus.</PARA></remarks><summary>Enables interactive manipulation of the X,Y position of the elliptical annulus section.  Changing the position will not affect the radii, rotation, start, span or radial scale of the annulus.</summary></member><member name="T:Cognex.VisionPro.CogCircleDOFConstants"><summary>Enumeration for the graphic degree of freedom enable constants of an interactive circle shape.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogCircle.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogCircle" /> shape. You can OR these constants to combine different degrees of freedom.
.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircleDOFConstants.Radius"><summary>Enables interactive manipulation of the circle's radius.</summary><remarks><PARA>Allow changing the radius of the circle.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircleDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the circle.</summary><remarks><PARA>Disable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircleDOFConstants.All"><summary>Enables interactive manipulation of all degrees of freedom of the circle.</summary><remarks><PARA>Enable all degrees of freedom.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircleDOFConstants.Position"><remarks><PARA>Allow changing of position.</PARA></remarks><summary>Enables interactive manipulation of the X,Y position of the circle's center.</summary></member><member name="T:Cognex.VisionPro.CogCircularArcAdornmentConstants"><remarks><PARA>Enumeration for circular arc end point adornments.</PARA></remarks><summary>Enumeration for circular arc end point adornments.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcAdornmentConstants.SolidCircle"><summary>Show a solid (filled) circle at the end of the circular arc.</summary><remarks><PARA>Show a solid (filled) circle at the end of the circular arc.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcAdornmentConstants.SolidSquare"><remarks><PARA>Show a solid (filled) square at the end of the circular arc.</PARA></remarks><summary>Show a solid (filled) square at the end of the circular arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcAdornmentConstants.SolidArrow"><remarks><PARA>Show a solid (filled) arrow head at the end of the circular arc.</PARA></remarks><summary>Show a solid (filled) arrow head at the end of the circular arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcAdornmentConstants.Arrow"><remarks><PARA>Show an open arrow head at the end of the circular arc.</PARA></remarks><summary>Show an open arrow head at the end of the circular arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcAdornmentConstants.None"><summary>Show no adornments at the end of the circular arc.</summary><remarks><PARA>Show no adornments at the end of the circular arc.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCircularArcDirectionAdornmentConstants"><summary>Enumeration for circular arc direction adornments.</summary><remarks><PARA>Enumeration for elliptical annulus section direction adornments. These adornment arrows can be used indicate the radial or arc direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDirectionAdornmentConstants.SolidArrow"><summary>Show a solid arrow adornment to indicate arc direction.</summary><remarks><PARA>Show a solid arrow adornment to indicate arc direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDirectionAdornmentConstants.Arrow"><summary>Show an open arrow adornment to indicate arc direction.</summary><remarks><PARA>Show an open arrow adornment to indicate arc direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDirectionAdornmentConstants.None"><remarks><PARA>Show no adornment to indicate arc direction.</PARA></remarks><summary>Show no adornment to indicate arc direction.</summary></member><member name="T:Cognex.VisionPro.CogCircularArcDOFConstants"><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogCircularArc.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogCircularArc" />. You can OR these constants to combine different degrees of freedom.
</PARA></remarks><summary>Enumeration for the graphic degree of freedom enable constants of an interactive circular arc shape.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.ArcSpanFourPi"><summary>Extends interactive manipulation of the circular arc's span up to four Pi. Note that if cogCircularArcDOFArcSpan is not enabled, this DOF setting has no effect.</summary><remarks><PARA>If interactive manipulation of the circular arc's span
(<see cref="T:Cognex.VisionPro.CogCircularArcDOFConstants.ArcSpan" />)
 is enabled, setting this bit allows the span to vary between 4Pi and −4Pi.  If this bit is not set, the limits for interactive manipulation are 2Pi and −2Pi.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.Bend"><remarks><PARA>Enables interactive manipulation of the circular arc's curvature, keeping the two end points constant. This DOF typically modifies all geometric properties of the circular arc.</PARA></remarks><summary>Enables interactive manipulation of the circular arc's curvature, keeping the two end points constant. This typically modifies all geometric properties of the circular arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.EndPoints"><summary>Enables interactive manipulation of the circular arc's end points, keeping the arc height and opposite end point constant. This typically modifies all geometric properties of the circular arc.</summary><remarks><PARA>Enables interactive manipulation of the circular arc's end points, keeping the arc height and opposite end point constant. This typically modifies all geometric properties of the circular arc.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.ArcSpan"><remarks><PARA>Enables interactive manipulation of the circular arc's <see cref="P:Cognex.VisionPro.CogCircularArc.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogCircularArc.AngleSpan" />.</PARA></remarks><summary>Enables interactive manipulation of the circular arc's AngleStart and AngleSpan up to two Pi.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the circular arc.</summary><remarks><PARA>Disables interactive manipulation of all degrees of freedom of the circular arc.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.All"><remarks><PARA>Enables interactive manipulation of all degrees of freedom of the circular arc.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the circular arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcDOFConstants.Position"><remarks><PARA>Enables interactive manipulation of the (x,y) position of the circular arc's center.</PARA></remarks><summary>Enables interactive manipulation of the X,Y position of the circular arc's center.</summary></member><member name="T:Cognex.VisionPro.CogCircularArcDisplayModeConstants"><remarks><PARA>Enumeration for circular arc display modes.</PARA></remarks><summary>Enumeration for circular arc display modes.</summary></member><member name="F:Cognex.VisionPro.CogCircularArcDisplayModeConstants.Screen"><summary>Display the arc with the screen radius specified in the DisplayedRadiusInScreenPixels property.</summary><remarks><PARA>Display the arc with the screen radius specified in the DisplayedRadiusInScreenPixels property.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularArcDisplayModeConstants.Mathematical"><summary>Display the arc with the normal geometric radius specified in the Radius property.</summary><remarks><PARA>Display the arc with the normal geometric radius specified in the Radius property.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants"><summary>Enumeration for circular annulus section direction adornments.</summary><remarks><PARA>Enumeration for circular annulus section direction adornments.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants.SolidArrow"><summary>Configures the circular annulus arcs, or radial lines, to show a solid arrow direction adornment.</summary><remarks><PARA>Configures the circular annulus arcs, or radial lines, to show a solid arrow direction adornment.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants.Arrow"><remarks><PARA>Configures the circular annulus arcs, or radial lines, to show an open arrow direction adornment.</PARA></remarks><summary>Configures the circular annulus arcs, or radial lines, to show an open arrow direction adornment.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDirectionAdornmentConstants.None"><summary>Configures the circular annulus arcs, or radial lines, to show no direction adornment.</summary><remarks><PARA>Configures the circular annulus arcs, or radial lines, to show no direction adornment.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSectionCenterArcAdornmentConstants"><summary>Enumeration for circular annulus section center arc adornment.</summary><remarks><PARA>Enumeration for circular annulus section center arc adornment.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionCenterArcAdornmentConstants.DottedArc"><remarks><PARA>Configures the circular annulus section to show a dotted center arc.</PARA></remarks><summary>Configures the circular annulus section to show a dotted center arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionCenterArcAdornmentConstants.SolidArc"><remarks><PARA>Configures the circular annulus section to show a solid center arc.</PARA></remarks><summary>Configures the circular annulus section to show a solid center arc.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionCenterArcAdornmentConstants.None"><summary>Configures the circular annulus section to show no center arc.</summary><remarks><PARA>Configures the circular annulus section to show no center arc.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants"><summary>Enumeration for the graphic degree of freedom enable constants of an interactive circular annulus section shape.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogCircularAnnulusSection" />. You can OR these constants to combine different degrees of freedom.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.SectionSpanFourPi"><summary>Extends interactive manipulation of the circular annulus section's span up to four Pi. Note that if cogCircularAnnulusSectionDOFSectionSpan is not enabled, this DOF setting has no effect.</summary><remarks><PARA>If interactive manipulation of the circular annulus section's span (<see cref="T:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.SectionSpan" />
 is enabled,
 setting this bit allows the span to vary between 4Pi and −4Pi.  If this bit is not set, the limits for interactive manipulation are 2Pi and −2Pi.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.Radii"><remarks><PARA>Enables interactive manipulation of the circular annulus section's start and end arcs radii, keeping the opposite arc's radius a constant. These handles modify the Radius and RadialScale properties of the circular annulus section.</PARA></remarks><summary>Enables interactive manipulation of the circular annulus section's start and end arcs radii, keeping the opposite arc's radius a constant. These handles modify the Radius and RadialScale properties of the circular annulus section.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.Bend"><summary>Enables interactive manipulation of the circular annulus section's curvature, keeping the two center arc end points constant. This typically modifies all geometric properties of the circular annulus section.</summary><remarks><PARA>Enables interactive manipulation of the circular annulus section's curvature, keeping the two center arc end points constant. This typically modifies all geometric properties of the circular annulus section.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.EndPoints"><summary>Enables interactive manipulation of the circular annulus section's center arc end points, keeping the section height and opposite center arc end point constant. This typically modifies all geometric properties of the circular annulus section.</summary><remarks><PARA>Enables interactive manipulation of the circular annulus section's center arc end points, keeping the section height and opposite center arc end point constant. This typically modifies all geometric properties of the circular annulus section.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.SectionSpan"><summary>Enables interactive manipulation of the circular annulus section's AngleStart and AngleSpan up to two Pi.</summary><remarks><PARA>Enables interactive manipulation of the circular annulus section's <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleStart" /> and <see cref="P:Cognex.VisionPro.CogCircularAnnulusSection.AngleSpan" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the circular annulus section.</summary><remarks><PARA>Disables interactive manipulation of all degrees of freedom of the circular annulus section.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.All"><remarks><PARA>Enables interactive manipulation of all degrees of freedom of the circular annulus section.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the circular annulus section.</summary></member><member name="F:Cognex.VisionPro.CogCircularAnnulusSectionDOFConstants.Position"><remarks><PARA>Enables interactive manipulation of the (x,y) position of the circular annulus section's center.</PARA></remarks><summary>Enables interactive manipulation of the X,Y position of the circular annulus section's center.</summary></member><member name="T:Cognex.VisionPro.CogCompositeShapeDOFConstants"><summary>Enumeration for the graphic degree of freedom enable constants of an interactive composite shape.</summary><remarks><PARA>
Enumeration that describes which degrees of freedom (DOF) are <see cref="P:Cognex.VisionPro.CogCompositeShape.GraphicDOFEnable" /> for an interactive <see cref="T:Cognex.VisionPro.CogCompositeShape" />. You can OR these constants to combine different degrees of freedom.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.Size"><remarks><PARA>Enables interactive manipulation of the size of the graphics contained in the composite shape.</PARA></remarks><summary>Enables interactive manipulation of the size of the graphics contained in the composite shape.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.Skew"><remarks><PARA>Enables interactive manipulation of skew of the composite shape.</PARA></remarks><summary>Enables interactive manipulation of skew of the composite shape.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.Rotation"><remarks><PARA>Enables interactive manipulation of rotation of the composite shape.</PARA></remarks><summary>Enables interactive manipulation of rotation of the composite shape.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.Scale"><remarks><PARA>Enables interactive manipulation of scale of the composite shape.</PARA></remarks><summary>Enables interactive manipulation of scale of the composite shape.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.None"><summary>Disables interactive manipulation of all degrees of freedom of the composite shape.</summary><remarks><PARA>Disables interactive manipulation of all degrees of freedom of the composite shape.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.All"><remarks><PARA>Enables interactive manipulation of all degrees of freedom of the composite shape.</PARA></remarks><summary>Enables interactive manipulation of all degrees of freedom of the composite shape.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeDOFConstants.Position"><summary>Enables interactive manipulation of X,Y position of the composite shape.</summary><remarks><PARA>Enables interactive manipulation of x,y position of the composite shape.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants"><remarks><PARA>Enumeration of composite shape composition modes. Use 
  <see cref="P:Cognex.VisionPro.CogCompositeShape.CompositionMode" />

  to set the composition mode. If the composition mode is 
  <see cref="F:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants.Uniform" />,
  all of the composite shape's graphic properties (line style,
  width, color, and so on) are propagated to all of the
  subshapes.</PARA></remarks><summary>Enumeration of composite shape composition modes.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants.Freeform"><summary>In this mode, the shape will act as a conglomerate of shapes with many different colors, line styles, etc. Graphics properties of the composite are not propagated to the sub-shapes.</summary><remarks><PARA>In this mode the shape acts as a conglomerate of shapes with potentially many different colors, line styles, and so on. Graphics properties of the composite shape are not propagated to the subshapes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCompositeShapeCompositionModeConstants.Uniform"><remarks><PARA>In this mode the composite shape acts as if it were a single rigid unified shape, with one color, line style, and so on. Graphics properties of the composite shape are propagated to the subshapes.</PARA></remarks><summary>In this mode, the shape will act as a single rigid unified shape, with one color, line style, etc. Graphics properties of the composite are propagated to the sub-shapes.</summary></member><member name="T:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants"><summary>Enumeration for composite shape direction adornments.</summary><remarks><PARA>Enumeration for composite shape direction adornments.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants.SolidArrow"><summary>Configures the composite shape to show a solid arrow adornment in this direction.</summary><remarks><PARA>Configures the composite shape to show a solid arrow adornment in this direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants.Arrow"><remarks><PARA>Configures the composite shape to show an open arrow adornment in this direction.</PARA></remarks><summary>Configures the composite shape to show an open arrow adornment in this direction.</summary></member><member name="F:Cognex.VisionPro.CogCompositeShapeDirectionAdornmentConstants.None"><summary>Configures the composite shape to show no adornment in this direction.</summary><remarks><PARA>Configures the composite shape to show no adornment in this direction.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogMaskGraphicTransparencyConstants"><remarks><PARA>Enumeration of transparency constants.</PARA></remarks><summary>Enumeration of transparency constants.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphicTransparencyConstants.Full"><summary>The mask value is transparent.</summary><remarks><PARA>The mask value is transparent.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogMaskGraphicTransparencyConstants.Half"><remarks><PARA>The mask value is translucent.  A 50/50 color blend is performed with background.</PARA></remarks><summary>The mask value is translucent.  A 50/50 color blend is performed with background.</summary></member><member name="F:Cognex.VisionPro.CogMaskGraphicTransparencyConstants.None"><summary>The mask value is opaque.</summary><remarks><PARA>The mask value is opaque.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogShapePolarizeCombineModeConstants"><remarks><PARA>Enumeration of possible modes that the shape polarization operator can use for combining the original shape polarities with the polarities derived from the image.</PARA></remarks><summary>Enumeration of possible modes that the shape polarization operator can use for combining the original shape polarities with the polarities derived from the image.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarizeCombineModeConstants.SetUndefined"><summary>Assign undefined polarities when the original shape polarities and polarities derived from the image are both defined but contradictory.</summary><remarks><PARA>Assign undefined polarities when the original shape polarities and polarities derived from the image are both defined but contradictory.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapePolarizeCombineModeConstants.ImagePrecedence"><remarks><PARA>Use polarities derived from the image when the original shape polarities and polarities derived from the image are both defined but contradictory.</PARA></remarks><summary>Use polarities derived from the image when the original shape polarities and polarities derived from the image are both defined but contradictory.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarizeCombineModeConstants.OriginalPrecedence"><remarks><PARA>Use original shape polarities when the original shape polarities and polarities derived from the image are both defined but contradictory.</PARA></remarks><summary>Use original shape polarities when the original shape polarities and polarities derived from the image are both defined but contradictory.</summary></member><member name="F:Cognex.VisionPro.CogShapePolarizeCombineModeConstants.IgnoreOriginal"><remarks><PARA>Set output shape polarities based on polarities derived from image, completely ignoring original shape polarities.</PARA></remarks><summary>Set output shape polarities based on polarities derived from image, completely ignoring original shape polarities.</summary></member><member name="T:Cognex.VisionPro.CogShapeExtractVocabularyConstants"><summary>Enumeration of primitive shapes that may be extracted.  The shape vocabulary is an integer that is obtained by ORing together the vocabulary constants of the desired primitive shapes.</summary><remarks><PARA>Enumeration of primitive shapes that may be extracted. The shape vocabulary is an integer that is obtained by ORing together the vocabulary constants of the desired primitive shapes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractVocabularyConstants.CircularArc"><remarks><PARA>Setting this bit enables extraction of elliptical arcs that are constrained to be circular. This includes arcs that may be part of a contour.</PARA></remarks><summary>Setting this bit enables extraction of elliptical arcs that are constrained to be circular.  This includes arcs that may be part of a contour.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtractVocabularyConstants.Ellipse"><summary>Setting this bit enables extraction of ellipses.</summary><remarks><PARA>Setting this bit enables extraction of ellipses.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractVocabularyConstants.Circle"><summary>Setting this bit enables extraction of circles.</summary><remarks><PARA>Setting this bit enables extraction of circles.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractVocabularyConstants.LineSegment"><summary>Setting this bit enables extraction of line segments.  This includes line segments that may be part of a contour.</summary><remarks><PARA>Setting this bit enables extraction of line segments. This includes line segments that may be part of a contour.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractVocabularyConstants.All"><summary>Enables extraction of all available primitive shapes.</summary><remarks><PARA>Enables extraction of all available primitive shapes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractVocabularyConstants.EllipticalArc"><summary>Setting this bit enables extraction of elliptical arcs.  This includes arcs that may be part of a contour.</summary><remarks><PARA>Setting this bit enables extraction of elliptical arcs. This includes arcs that may be part of a contour.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogShapeExtractClosureConstants"><remarks><PARA>Enumeration of options used to indicate whether open and/or closed shapes should be extracted from the input image.</PARA></remarks><summary>Enumeration of options used to indicate whether open and/or closed shapes should be extracted from the input image.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtractClosureConstants.Closed"><summary>Extract only closed shapes.</summary><remarks><PARA>Extract only closed shapes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractClosureConstants.DontCare"><summary>Extract both open and closed shapes.</summary><remarks><PARA>Extract both open and closed shapes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractClosureConstants.Open"><remarks><PARA>Extract only open shapes.</PARA></remarks><summary>Extract only open shapes.</summary></member><member name="T:Cognex.VisionPro.CogShapeExtractPolarityConstants"><summary>Enumeration of options used to specify the desired polarity of any extracted closed shapes.  The polarity setting has no effect on the extraction of open shapes.</summary><remarks><PARA>Enumeration of options used to specify the desired polarity of any extracted closed shapes. The polarity setting has no effect on the extraction of open shapes.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractPolarityConstants.DarkOnLight"><summary>Extract only those closed shapes which are dark on a light background.</summary><remarks><PARA>Extract only those closed shapes which are dark on a light background.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractPolarityConstants.LightOnDark"><remarks><PARA>Extract only those closed shapes which are light on a dark background.</PARA></remarks><summary>Extract only those closed shapes which are light on a dark background.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtractPolarityConstants.DontCare"><remarks><PARA>Extract all closed shapes regardless of polarity.</PARA></remarks><summary>Extract all closed shapes regardless of polarity.</summary></member><member name="T:Cognex.VisionPro.CogShapeExtractRankModeConstants"><remarks><PARA>Enumeration of possible shape ranking modes. The returned collection of shapes is sorted from highest rank to lowest. If more shapes than the maximum number requested are found then the lowest ranking shapes are discarded.</PARA></remarks><summary>Enumeration of possible shape ranking modes.  The returned collection of shapes is sorted from highest rank to lowest.  If more shapes than the maximum number requested are found then the lowest ranking shapes are discarded.</summary></member><member name="F:Cognex.VisionPro.CogShapeExtractRankModeConstants.Proximity"><summary>Rank shapes based on their distance from the shape specified by the ProximityShape parameter.  Shapes closer to the proximity shape rank higher.</summary><remarks><PARA>Rank shapes based on their distance from the shape specified by the ProximityShape parameter. Shapes closer to the proximity shape rank higher.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractRankModeConstants.Contrast"><summary>Rank shapes based on average contrast along their length.  Higher contrast shapes rank higher.</summary><remarks><PARA>Rank shapes based on average contrast along their length. Higher contrast shapes rank higher.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogShapeExtractRankModeConstants.Perimeter"><remarks><PARA>Rank shapes based on perimeter length. Longer shapes rank higher.</PARA></remarks><summary>Rank shapes based on perimeter length.  Longer shapes rank higher.</summary></member><member name="T:Cognex.VisionPro.CogStandardCursorConstants"><summary>Enumerates the standard mouse cursors that can be used with interactive graphics.  The selected cursor will appear in the display whenever the mouse is hovering near the interactive graphic.</summary><remarks><PARA>Enumerates the standard mouse cursors used for tool graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.SkewHandle"><summary>This cursor indicates an interactive 'handle' graphic.  Manipulating the handle will change the skew of the graphic to which the handle is attached.</summary><remarks><PARA>A handle cursor used to indicate that a handle is used for skew.</PARA><PARA><PICTURE SRC="cogStandardCursorSkewHandle.gif" apiSRC="cogStandardCursorSkewHandle_cogStandardCursorSkewHandle.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.RotateHandle"><remarks><PARA>A handle cursor used to indicate that a handle is used for rotation.</PARA><PARA><PICTURE SRC="cogStandardCursorRotateHandle.gif" apiSRC="cogStandardCursorRotateHandle_cogStandardCursorRotateHandle.gif" /></PARA></remarks><summary>This cursor indicates an interactive 'handle' graphic.  Manipulating the handle will change the rotation of the graphic to which the handle is attached.</summary></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.AspectConstrainedSizeHandle"><remarks><PARA>A handle cursor used to indicate that a graphic is resizable but that its aspect 
	ratio is fixed.</PARA><PARA><PICTURE SRC="cogStandardCursorAspectConstrainedSizeHandle.gif" apiSRC="cogStandardCursorAspectConstrainedSizeHandle_cogStandardCursorAspectConstrainedSizeHandle.gif" /></PARA></remarks><summary>This cursor indicates an interactive 'handle' graphic.  Manipulating the handle will change the size of the graphic to which the handle is attached, while retaining that graphic's aspect ratio.</summary></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.UnconstrainedSizeHandle"><summary>This cursor indicates an interactive 'handle' graphic.  Manipulating the handle will change the size of the graphic to which the handle is attached.</summary><remarks><PARA>A handle cursor used to indicate that the graphic can be resized without restriction.</PARA><PARA><PICTURE SRC="cogStandardCursorUnconstrainedSizeHandle.gif" apiSRC="cogStandardCursorUnconstrainedSizeHandle_cogStandardCursorUnconstrainedSizeHandle.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.ManipulableGraphic"><summary>This cursor indicates an interactive graphic that can be selected and manipulated.</summary><remarks><PARA>An attention cursor used to indicate that a graphic is manipulable.</PARA><PARA><PICTURE SRC="cogStandardCursorManipulableGraphic.gif" apiSRC="cogStandardCursorManipulableGraphic_cogStandardCursorManipulableGraphic.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.SelectableGraphic"><summary>This cursor indicates an interactive graphic that can be selected, but not manipulated.</summary><remarks><PARA>An attention cursor used to indicate that a graphic is selectable (but not manipulable).</PARA><PARA><PICTURE SRC="cogStandardCursorSelectableGraphic.gif" apiSRC="cogStandardCursorSelectableGraphic_cogStandardCursorSelectableGraphic.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.TipTextGraphic"><summary>This cursor indicates an interactive graphic that may have associated TipText, but cannot be selected or manipulated in any way.</summary><remarks><PARA>An attention cursor used to indicate that a graphic has tooltip text available.</PARA><PARA><PICTURE SRC="cogStandardCursorTipTextGraphic.gif" apiSRC="cogStandardCursorTipTextGraphic_cogStandardCursorTipTextGraphic.gif" /></PARA></remarks></member><member name="F:Cognex.VisionPro.CogStandardCursorConstants.Default"><summary>This cursor is the default for all interactive graphics.  It appears as a small '+' in the display.</summary></member><member name="T:Cognex.VisionPro.CogFitEllipseResultGraphicConstants"><remarks><PARA>Constants used to specify desired result graphics for CreateResultGraphics().</PARA></remarks><summary>Constants used to specify desired result graphics for CreateResultGraphics().</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseResultGraphicConstants.EllipseCenter"><summary>Draw the center of the ellipse that was fit through the supplied points as a point marker.</summary><remarks><PARA>Draw the center of the ellipse that was fit through the supplied points as a point marker.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseResultGraphicConstants.Ellipse"><summary>Draw the shape that was fit through the supplied points.</summary><remarks><PARA>Draw the shape that was fit through the supplied points.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseResultGraphicConstants.IgnoredPoints"><summary>Draw the points ignored in the fitting operation as red point markers.</summary><remarks><PARA>Draw the points ignored in the fitting operation as red point markers.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseResultGraphicConstants.UsedPoints"><remarks><PARA>Draw the points used in the fitting operation as green point markers.</PARA></remarks><summary>Draw the points used in the fitting operation as green point markers.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseResultGraphicConstants.TipText"><remarks><PARA>Add tooltip text to each graphic drawn.</PARA></remarks><summary>Add tooltip text to each graphic drawn.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseResultGraphicConstants.All"><remarks><PARA>Draw all the result graphics.</PARA></remarks><summary>Draw all the result graphics.</summary></member><member name="T:Cognex.VisionPro.CogFitEllipseCurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitEllipseTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitEllipse Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitellipsetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseCurrentRecordConstants.InputPoints"><summary>Include a manipulable point marker for each input point in the current record.</summary><remarks><PARA>Include a manipulable point marker for each input point in the current record.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseCurrentRecordConstants.InputImage"><remarks><PARA>Include the graphics image in the CurrentRecord.</PARA></remarks><summary>Include the graphics image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseCurrentRecordConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseCurrentRecordConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitEllipseTool.LastRunRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitEllipse Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitellipsetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants.Ellipse"><remarks><PARA>Include the fitted shape in the LastRunRecord.</PARA></remarks><summary>Include the fitted shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants.IgnoredPoints"><remarks><PARA>Include a point marker for each point ignored in the fitting in the LastRunRecord.</PARA></remarks><summary>Include a point marker for each point ignored in the fitting in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants.UsedPoints"><remarks><PARA>Include a point marker for each point used in the fitting in the LastRunRecord.</PARA></remarks><summary>Include a point marker for each point used in the fitting in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitEllipseLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitEllipseTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitEllipse Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitellipsetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the graphics image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the graphics image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the graphics image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the graphics image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordDiagConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitEllipseLastRunRecordDiagConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitCircleResultGraphicConstants"><remarks><PARA>Constants used to specify desired result graphics for CreateResultGraphics().</PARA></remarks><summary>Constants used to specify desired result graphics for CreateResultGraphics().</summary></member><member name="F:Cognex.VisionPro.CogFitCircleResultGraphicConstants.CircleCenter"><summary>Draw the center of the circle that was fit through the supplied points as a point marker.</summary><remarks><PARA>Draw the center of the circle that was fit through the supplied points as a point marker.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleResultGraphicConstants.Circle"><remarks><PARA>Draw the shape that was fit through the supplied points.</PARA></remarks><summary>Draw the shape that was fit through the supplied points.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleResultGraphicConstants.IgnoredPoints"><remarks><PARA>Draw the points ignored in the fitting operation as red point markers.</PARA></remarks><summary>Draw the points ignored in the fitting operation as red point markers.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleResultGraphicConstants.UsedPoints"><summary>Draw the points used in the fitting operation as green point markers.</summary><remarks><PARA>Draw the points used in the fitting operation as green point markers.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleResultGraphicConstants.TipText"><remarks><PARA>Add tooltip text to each graphic drawn.</PARA></remarks><summary>Add tooltip text to each graphic drawn.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleResultGraphicConstants.All"><summary>Draw all the result graphics.</summary><remarks><PARA>Draw all the result graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitCircleCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitCircleTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitCircle Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitcircletool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleCurrentRecordConstants.InputPoints"><remarks><PARA>Include a manipulable point marker for each input point in the current record.</PARA></remarks><summary>Include a manipulable point marker for each input point in the current record.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleCurrentRecordConstants.InputImage"><summary>Include the graphics image in the CurrentRecord.</summary><remarks><PARA>Include the graphics image in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleCurrentRecordConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleCurrentRecordConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitCircleLastRunRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitCircleTool.LastRunRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitCircle Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitcircletool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordConstants.Circle"><remarks><PARA>Include the fitted shape in the LastRunRecord.</PARA></remarks><summary>Include the fitted shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordConstants.IgnoredPoints"><summary>Include a point marker for each point ignored in the fitting in the LastRunRecord.</summary><remarks><PARA>Include a point marker for each point ignored in the fitting in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordConstants.UsedPoints"><summary>Include a point marker for each point used in the fitting in the LastRunRecord.</summary><remarks><PARA>Include a point marker for each point used in the fitting in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitCircleLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitCircleTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitCircle Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitcircletool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordDiagConstants.InputImageDeepCopy"><summary>Include a deep copy of the graphics image in the LastRunRecord.</summary><remarks><PARA>Include a deep copy of the graphics image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordDiagConstants.InputImageByReference"><remarks><PARA>Include a reference to the graphics image in the LastRunRecord.</PARA></remarks><summary>Include a reference to the graphics image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordDiagConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitCircleLastRunRecordDiagConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitLineResultGraphicConstants"><remarks><PARA>Constants used to specify desired result graphics for CreateResultGraphics().</PARA></remarks><summary>Constants used to specify desired result graphics for CreateResultGraphics().</summary></member><member name="F:Cognex.VisionPro.CogFitLineResultGraphicConstants.Line"><remarks><PARA>Draw the shape that was fit through the supplied points.</PARA></remarks><summary>Draw the shape that was fit through the supplied points.</summary></member><member name="F:Cognex.VisionPro.CogFitLineResultGraphicConstants.IgnoredPoints"><remarks><PARA>Draw the points ignored in the fitting operation as red point markers.</PARA></remarks><summary>Draw the points ignored in the fitting operation as red point markers.</summary></member><member name="F:Cognex.VisionPro.CogFitLineResultGraphicConstants.UsedPoints"><remarks><PARA>Draw the points used in the fitting operation as green point markers.</PARA></remarks><summary>Draw the points used in the fitting operation as green point markers.</summary></member><member name="F:Cognex.VisionPro.CogFitLineResultGraphicConstants.TipText"><remarks><PARA>Add tooltip text to each graphic drawn.</PARA></remarks><summary>Add tooltip text to each graphic drawn.</summary></member><member name="F:Cognex.VisionPro.CogFitLineResultGraphicConstants.All"><remarks><PARA>Draw all the result graphics.</PARA></remarks><summary>Draw all the result graphics.</summary></member><member name="T:Cognex.VisionPro.CogFitLineCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitLineTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitLine Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitlinetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitLineCurrentRecordConstants.InputPoints"><summary>Include a manipulable point marker for each input point in the current record.</summary><remarks><PARA>Include a manipulable point marker for each input point in the current record.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineCurrentRecordConstants.InputImage"><summary>Include the graphics image in the CurrentRecord.</summary><remarks><PARA>Include the graphics image in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineCurrentRecordConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineCurrentRecordConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitLineLastRunRecordConstants"><summary>Enumeration of non-diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitLineTool.LastRunRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitLine Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitlinetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordConstants.Line"><remarks><PARA>Include the fitted shape in the LastRunRecord.</PARA></remarks><summary>Include the fitted shape in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordConstants.IgnoredPoints"><remarks><PARA>Include a point marker for each point ignored in the fitting in the LastRunRecord.</PARA></remarks><summary>Include a point marker for each point ignored in the fitting in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordConstants.UsedPoints"><summary>Include a point marker for each point used in the fitting in the LastRunRecord.</summary><remarks><PARA>Include a point marker for each point used in the fitting in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogFitLineLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.CogFitLineTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogFitLine Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogfitlinetool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the graphics image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the graphics image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the graphics image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the graphics image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordDiagConstants.None"><remarks><PARA>Record no information.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogFitLineLastRunRecordDiagConstants.All"><remarks><PARA>Record all information.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants"><summary>Aggregate tolerance status values for the CogDataAnalysisTool.</summary><remarks><PARA>Aggregate tolerance status values for the CogDataAnalysisTool.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants.Reject"><remarks><PARA>One or more 
	<see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />s do not meet the Reject limits.  Alternatively, if 
<see cref="P:Cognex.VisionPro.CogDataAnalysis.RejectOnInvalidData" /> was true, then invalid data may have produced the reject status.</PARA><PARA>
	This value is equivalent to <see cref="T:Cognex.VisionPro.CogErrConstants">s_CogTool_Reject</see></PARA></remarks><summary>One or more CurrentValue properties do not meet the Reject limits.  Alternatively, if RejectOnInvalidData was true, then invalid data may have produced the reject status.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants.Warn"><remarks><PARA>One or more CurrentValues do not meet the warning limits, but no values reject.</PARA><PARA>
	This value is equivalent to <see cref="T:Cognex.VisionPro.CogErrConstants">s_CogTool_Warn</see></PARA></remarks><summary>One or more CurrentValue properties do not meet the warning limits, but no values reject.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysisToolToleranceStatusConstants.Pass"><remarks><PARA>All <see cref="P:Cognex.VisionPro.CogStatistics.CurrentValue" />s are within the specified limits.</PARA><PARA>
	This value is equivalent to <see cref="T:Cognex.VisionPro.CogErrConstants">S_OK</see></PARA></remarks><summary>All CurrentValue properties are within the specified limits.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants"><summary>Tolerance status values for each ICogDataAnalysisChannel.</summary><remarks><PARA>Tolerance status values for each <see cref="T:Cognex.VisionPro.CogStatistics" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants.InvalidValue"><summary>The value has not been set to a new value before testing the tolerance limits, that is, the value was invalid (i.e. stale or not set).</summary><remarks><PARA>The value had not been updated before the tool was run.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants.RejectHigh"><remarks><PARA>The value is greater than the <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" />.</PARA></remarks><summary>The value is greater than the RejectHighLimit.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants.RejectLow"><summary>The value is less than the RejectLowLimit.</summary><remarks><PARA>The value is less than the <see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants.WarnHigh"><summary>The value is greater than the WarnHighLimit but less than or equal to the RejectHighLimit.</summary><remarks><PARA>The value is greater than the <see cref="P:Cognex.VisionPro.CogStatistics.WarnHighLimit" /> but less than or equal to the <see cref="P:Cognex.VisionPro.CogStatistics.RejectHighLimit" />.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants.WarnLow"><remarks><PARA>The value is less than the 
	<see cref="P:Cognex.VisionPro.CogStatistics.WarnLowLimit" /> but greater than or equal to the 
<see cref="P:Cognex.VisionPro.CogStatistics.RejectLowLimit" />.</PARA></remarks><summary>The value is less than the WarnLowLimit but greater than or equal to the RejectLowLimit.</summary></member><member name="F:Cognex.VisionPro.CogDataAnalysisToleranceStatusConstants.Pass"><remarks><PARA>The value is within the specified limits.</PARA></remarks><summary>The value is within the specified limits.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants"><summary>Enumeration of the types of segments in a contour.</summary><remarks><PARA>Enumeration of the types of segments in a contour.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants.Line"><summary>Indicates a line segment of the contour.</summary><remarks><PARA>Indicates a line segment of the contour.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourSegmentTypeConstants.EllipticalArc"><summary>Indicates an elliptical arc segment of the contour.</summary><remarks><PARA>Indicates an elliptical arc segment of the contour.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogGeneralContourVertexConstants"><summary>Enumeration of bit flags indicating special conditions at a vertex in a general contour.</summary><remarks><PARA>Enumeration of bit flags indicating special conditions at a vertex in a general contour.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourVertexConstants.Closed"><remarks><PARA>Indicates that the vertex is closing a chain of connected segments.</PARA></remarks><summary>Indicates that the vertex is closing a chain of connected segments.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourVertexConstants.Connected"><remarks><PARA>Indicates that the vertex is connecting two neighboring segments.</PARA></remarks><summary>Indicates that the vertex is connecting two neighboring segments.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourVertexConstants.FlagNone"><summary>Indicates that the vertex is not connecting two neighboring segments, is not closing a chain of connected segments, and has no other special properties.</summary><remarks><PARA>Indicates that the vertex is not connecting two neighboring segments, is not closing a chain of connected segments, and has no other special properties.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogGeneralContourVertexAdornmentConstants"><remarks><PARA>Enumeration of vertex adornments.</PARA></remarks><summary>Enumeration of vertex adornments.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourVertexAdornmentConstants.SolidCircle"><remarks><PARA>Show a solid (filled) circle at each vertex.</PARA></remarks><summary>Show a solid (filled) circle at each vertex.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourVertexAdornmentConstants.SolidSquare"><remarks><PARA>Show a solid (filled) square at each vertex.</PARA></remarks><summary>Show a solid (filled) square at each vertex.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourVertexAdornmentConstants.None"><remarks><PARA>Show no adornments at the vertices.</PARA></remarks><summary>Show no adornments at the vertices.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContourDirectionAdornmentConstants"><remarks><PARA>Enumeration of direction adornments for the <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></remarks><summary>Enumeration of direction adornments for the CogGeneralContour.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourDirectionAdornmentConstants.SolidArrow"><summary>Show a solid arrow adornment to indicate contour direction.</summary><remarks><PARA>Show a solid arrow adornment to indicate contour direction.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourDirectionAdornmentConstants.Arrow"><remarks><PARA>Show an open arrow adornment to indicate contour direction.</PARA></remarks><summary>Show an open arrow adornment to indicate contour direction.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourDirectionAdornmentConstants.None"><remarks><PARA>Show no adornment indicating contour direction.</PARA></remarks><summary>Show no adornment indicating contour direction.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContourSegmentIteratorAttributeConstants"><remarks><PARA>Bit field of attributes for the iterator. The bits indicate which operations are available at the current position of the iterator.</PARA></remarks><summary>Bit field of attributes for the iterator.  The bits indicate which operations are available at the current position of the iterator.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourSegmentIteratorAttributeConstants.Invalid"><summary>When this bit is set, the iterator is not in a valid state. Attempting to read or write item properties of an invalid iterator will produce an error. Iterator attribute properties can still be read.</summary><remarks><PARA>When this bit is set, the iterator is not in a valid state. Attempting to read or write item properties of an invalid iterator will produce an error. Iterator attribute properties can still be read.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourSegmentIteratorAttributeConstants.End"><remarks><PARA>When this bit is set, the iterator is positioned past the final item in the sequence and is invalid. In this state, calling MoveToNext or attempting to read item properties will produce an error. Moving to a valid item will validate the iterator.</PARA></remarks><summary>When this bit is set, the iterator is positioned past the final item in the sequence and is invalid. In this state, calling MoveToNext or attempting to read item properties will produce an error. Moving to a valid item will validate the iterator.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourSegmentIteratorAttributeConstants.First"><summary>When this bit is set, the iterator is positioned at the first item in the sequence. In this state, there are no items before the iterator so calling MoveToPrevious will produce an error. Note that 'First' does not imply the iterator is valid.</summary><remarks><PARA>When this bit is set, the iterator is positioned at the first item in the sequence. In this state, there are no items before the iterator so calling MoveToPrevious will produce an error. Note that 'First' does not imply the iterator is valid.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants"><remarks><PARA>Enumeration of 
	<see cref="M:Cognex.VisionPro.ICogGraphicMultiPen.GetPenType(System.Int32)">pen types</see> in <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></remarks><summary>Enumeration of pen types in ICogGraphicMultiPen.</summary></member><member name="F:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants.Interactive"><summary>The pen is an interactive type consisting of one simple pen for each of the three interactive states (normal, selected, and dragged).</summary><remarks><PARA>The pen is an interactive type consisting of one simple pen for each of the three interactive states (normal, selected, and dragged).</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGraphicMultiPenPenTypeConstants.Simple"><remarks><PARA>The pen is a simple type consisting of a color, line style and line width.</PARA></remarks><summary>The pen is a simple type consisting of a color, line style and line width.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContourDOFConstants"><remarks><PARA>Enumeration of DOF constants for a <see cref="T:Cognex.VisionPro.CogGeneralContour" />.</PARA></remarks><summary>Enumeration of DOF constants for a CogGeneralContour.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourDOFConstants.EllipticalArcConstrainedSpan"><remarks><PARA>Enables interactive manipulation of the curvature of elliptical arc segments, constraining them to pass through the endpoints and bend handle. This DOF allows the user to change the fraction of the full ellipse that appears between the arc endpoints.</PARA></remarks><summary>Enables interactive manipulation of the curvature of elliptical arc segments, constraining them to pass through the endpoints and bend handle.  This DOF allows the user to change the fraction of the full ellipse that appears between the arc endpoints.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourDOFConstants.EllipticalArcBend"><summary>Enables interactive manipulation of the curvature of elliptical arc segments.  Notice that changing the curvature is likely to affect the center, radii, rotation, start and span of the arc, but will not modify its endpoints.</summary><remarks><PARA>Enables interactive manipulation of the curvature of elliptical arc segments. Notice that changing the curvature is likely to affect the center, radii, rotation, start and span of the arc, but will not modify its endpoints.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourDOFConstants.VertexPosition"><summary>Enables interactive manipulation of the position of any vertex of the contour.</summary><remarks><PARA>Enables interactive manipulation of the position of any vertex of the contour.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourDOFConstants.None"><remarks><PARA>Disables interactive manipulation of the contour.</PARA></remarks><summary>Disables interactive manipulation of the contour.</summary></member><member name="F:Cognex.VisionPro.CogGeneralContourDOFConstants.All"><summary>Enables interactive manipulation of all degrees of freedom for the contour.</summary><remarks><PARA>Enables interactive manipulation of all degrees of freedom for the contour.</PARA></remarks></member><member name="F:Cognex.VisionPro.CogGeneralContourDOFConstants.Position"><summary>Enables interactive manipulation of the X,Y position of the general contour.  Changing the position will affect the Start and End points of all the segments.</summary><remarks><PARA>Enables interactive manipulation of the X,Y position of the general contour. Changing the position will affect the Start and End points of all the segments.</PARA></remarks></member><member name="T:Cognex.VisionPro.CogCustomPropertyTypeConstants"><summary>Enumeration of custom property types.  Provides guidance as to what is a valid setting.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeUnknown"><summary>Unknown type.  Can be set, but no guidance for validity can be given.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeCategory"><summary>Category feature.  This feature simply contains other features.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeBoolean"><summary>Boolean feature.  Valid values are 'True' and 'False'.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeCommand"><summary>Command feature.  Feature cannot be set, only executed.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeFloat"><summary>Float feature.  Feature should be set to a numeric value.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeInteger"><summary>Integer feature.  Feature should be set to a numeric integer value.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeEnum"><summary>Enumerated feature, use GetValidEnumValues() to determine valid settings.</summary></member><member name="F:Cognex.VisionPro.CogCustomPropertyTypeConstants.TypeString"><summary>String feature.  Usually read-only things like version info.</summary></member><member name="T:Cognex.VisionPro.CogVisionToolMultiThreadingThreadCountModeConstants"><summary>Enumeration for vision tools multithreading modes.</summary></member><member name="F:Cognex.VisionPro.CogVisionToolMultiThreadingThreadCountModeConstants.UserSpecified"><summary>Specify that multithreaded aware vision tools should usethe user specified (via the ThreadCount property) number of threads.</summary></member><member name="F:Cognex.VisionPro.CogVisionToolMultiThreadingThreadCountModeConstants.HardwareDefined"><summary>Specify that multithreaded aware vision tools should useas many threads as there are processor cores.</summary></member><member name="T:Cognex.VisionPro.CogAcqROIModeConstants"><summary>ROI Mode.</summary></member><member name="F:Cognex.VisionPro.CogAcqROIModeConstants.Manual"><summary>Causes the ROI settings to be written directly to hardware, and the size of the acquired image will not be adjusted if it is larger than the requested ROI.</summary></member><member name="F:Cognex.VisionPro.CogAcqROIModeConstants.Automatic"><summary>Allows the acq software to adjust the ROI to the capabilities of the hardware and apply a window to the acquired image if the ROI is not supported in hardware.</summary></member><member name="T:Cognex.VisionPro.CogAcqCameraModeConstants"><summary>Laser Height Camera Mode.</summary></member><member name="F:Cognex.VisionPro.CogAcqCameraModeConstants.RangeWithGrey"><summary>Camera operates as a linescan camera and outputs combined range and grey data. Output format is range data.</summary></member><member name="F:Cognex.VisionPro.CogAcqCameraModeConstants.IntensityWithGraphics"><summary>Camera outputs intensity image from sensor with added graphics showing the results of the laser peak detection algorithm. Output format is RGB planar.</summary></member><member name="F:Cognex.VisionPro.CogAcqCameraModeConstants.Intensity"><summary>Camera outputs intensity image from sensor. Ouput format is 8-bit greyscale.</summary></member><member name="F:Cognex.VisionPro.CogAcqCameraModeConstants.Range"><summary>Camera operates as a linescan camera and outputs range data in real world units. Output format is range data.</summary></member><member name="T:Cognex.VisionPro.CogAcqLaserModeConstants"><summary>Laser Mode.</summary></member><member name="F:Cognex.VisionPro.CogAcqLaserModeConstants.Strobed"><summary>Laser only on during image exposure.</summary></member><member name="F:Cognex.VisionPro.CogAcqLaserModeConstants.Off"><summary>Laser always off.</summary></member><member name="F:Cognex.VisionPro.CogAcqLaserModeConstants.On"><summary>Laser always on.</summary></member><member name="T:Cognex.VisionPro.CogImageConvertBayerTypeConstants"><summary>Enumeration of Bayer image types.</summary></member><member name="F:Cognex.VisionPro.CogImageConvertBayerTypeConstants.GB"><summary>Upper left pixel is Green followed by Blue.</summary></member><member name="F:Cognex.VisionPro.CogImageConvertBayerTypeConstants.BG"><summary>Upper left pixel is Blue followed by Green.</summary></member><member name="F:Cognex.VisionPro.CogImageConvertBayerTypeConstants.RG"><summary>Upper left pixel is Red followed by Green.</summary></member><member name="F:Cognex.VisionPro.CogImageConvertBayerTypeConstants.GR"><summary>Upper left pixel is Green followed by Red.</summary></member><member name="T:Cognex.VisionPro.CogProfileCameraDirectionConstants"><summary>Scene motion directions for profile cameras.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraDirectionConstants.LaserToLens"><summary>Scene moves in the laser-to-lens direction.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraDirectionConstants.LensToLaser"><summary>Scene moves in the lens-to-laser direction.</summary></member><member name="T:Cognex.VisionPro.CogProfileCameraScanModeConstants"><summary>Trigger behavior for profile cameras.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraScanModeConstants.Union"><summary>One scan region covering the full extent of both individual regions.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraScanModeConstants.Both"><summary>Enable both scan regions.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraScanModeConstants.TwoOnly"><summary>Only use scan region 2.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraScanModeConstants.OneOnly"><summary>Only use scan region 1.</summary></member><member name="T:Cognex.VisionPro.CogProfileCameraTriggerTypeConstants"><summary>Trigger behavior for profile cameras.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraTriggerTypeConstants.EdgeAndLevel"><summary>The first image is acquired on an active-going edge of the trigger signal, and as long as the trigger signal remains active subsequent images will be acquired in a continuous fashion.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraTriggerTypeConstants.EdgeOnly"><summary>Image acquisition only occurs on an active-going edge of the trigger signal.</summary></member><member name="T:Cognex.VisionPro.CogProfileCameraLaserDetectionModeConstants"><summary>Options for laser detection mode.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraLaserDetectionModeConstants.Fast"><summary>Allows higher line rates than Standard mode, but with less accuracy.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraLaserDetectionModeConstants.Standard"><summary>Provides the best possible accuracy, with a lower maximum line rate.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraLaserDetectionModeConstants.Binary"><summary>Binary detection mode. Allows higher line rates than Fast mode, but with less accuracy.</summary></member><member name="T:Cognex.VisionPro.CogProfileCameraBinaryModeConstants"><summary>Binary mode constants and limits.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraBinaryModeConstants.BinarizationThresholdDefault"><summary>Default value for Binarization Threshold.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraBinaryModeConstants.MinimumBinarizationLineWidthMax"><summary>Upper limit for Minimum Binarization Linewidth.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraBinaryModeConstants.MinimumBinarizationLineWidthDefault"><summary>Default Minimum Binarization Linewidth.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraBinaryModeConstants.MinimumBinarizationLineWidthMin"><summary>Lower limit for Minimum Binarization Linewidth.</summary></member><member name="T:Cognex.VisionPro.CogProfileCameraPeakDetectionModeConstants"><summary>Options for peak detection mode.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraPeakDetectionModeConstants.Farthest"><summary>Uses peak farthest from camera for height calculation.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraPeakDetectionModeConstants.Closest"><summary>Uses peak closest to camera for height calculation.</summary></member><member name="F:Cognex.VisionPro.CogProfileCameraPeakDetectionModeConstants.Max"><summary>Uses peak of maximum strength for height calculation. The default.</summary></member><member name="T:Cognex.VisionPro.CogFrameGrabberStatusConstants"><summary>Possible states of a frame grabber or camera.</summary></member><member name="F:Cognex.VisionPro.CogFrameGrabberStatusConstants.NotSupported"><summary>Device does not support querying status.</summary></member><member name="F:Cognex.VisionPro.CogFrameGrabberStatusConstants.Misconfigured"><summary>Device is present, but has a configuration error.</summary></member><member name="F:Cognex.VisionPro.CogFrameGrabberStatusConstants.Active"><summary>Device is present and functioning.</summary></member><member name="F:Cognex.VisionPro.CogFrameGrabberStatusConstants.InActive"><summary>Device was not present in last enumeration.</summary></member><member name="T:Cognex.VisionPro.CogMotionInputConstants"><summary>Enumeration of valid modes for a linescan encoder.</summary></member><member name="F:Cognex.VisionPro.CogMotionInputConstants.Encoderless"><summary>Linescan acquisition is performed using the test encoder.  The frequency of the test encoder is computed from the inputs: <see cref="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedDistancePerLine" /> and <see cref="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedMotionSpeed" />.  This mode is intended for systems which have no hardware encoder.</summary></member><member name="F:Cognex.VisionPro.CogMotionInputConstants.SimulatedEncoder"><summary>Linescan acquisition is performed using the test encoder.  The frequency of the test encoder simulates a hardware encoder that is currently unavailable.  The relevant encoder inputs are: <see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" />, <see cref="P:Cognex.VisionPro.ICogAcqLineScan.EncoderResolution" />, <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycle" />, and <see cref="P:Cognex.VisionPro.ICogAcqLineScan.ExpectedMotionSpeed" />.  If the physical motion is steady at the expected speed and the <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycle" /> setting is accurate, there should be little observable difference between real and simulated encoders.  You can switch between real and simulated encoder mode without changing any other encoder parameters.</summary></member><member name="F:Cognex.VisionPro.CogMotionInputConstants.Encoder"><summary>Linescan acquisition is performed using a real hardware encoder.  The relevant encoder inputs are: <see cref="M:Cognex.VisionPro.ICogAcqLineScan.SetStepsPerLine(System.Int32,System.Int32)" />, <see cref="P:Cognex.VisionPro.ICogAcqLineScan.EncoderResolution" />, and <see cref="P:Cognex.VisionPro.ICogAcqLineScan.DistancePerCycle" />.</summary></member><member name="F:Cognex.VisionPro.CogMotionInputConstants.Legacy"><summary>Linescan acquisition is performed using either a hardware encoder or the test encoder, depending upon the setting of <see cref="P:Cognex.VisionPro.ICogAcqLineScan.TestEncoderEnabled" />.  This mode is intended for hardware which does not support <see cref="P:Cognex.VisionPro.ICogAcqLineScan.MotionInput" />.</summary></member><member name="T:Cognex.VisionPro.CogFieldCalibrationSpaceConstants"><summary>Enumeration of coordinate spaces that are available in a field calibrated range image.</summary></member><member name="F:Cognex.VisionPro.CogFieldCalibrationSpaceConstants.YLockedToMotion3D"><summary>A 3D coordinate space that has the same origin as Sensor3D, but whose Y-axis is parallel to the motion observed during field calibration.  The Z-axis direction is as close as possible to the Z-axis of Sensor3D.</summary></member><member name="F:Cognex.VisionPro.CogFieldCalibrationSpaceConstants.Sensor3D"><summary>The 3D coordinate space attached to the sensor.</summary></member><member name="F:Cognex.VisionPro.CogFieldCalibrationSpaceConstants.Phys3D"><summary>A common 3D coordinate space for all DS sensors.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogModelFeatureIteratorGC.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelCircle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipse.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelEllipticalArc.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelGeneralContour.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelLineSegment.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPolygon.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelPropCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.Implementation.Internal.CogShapeModelRectangleAffine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.SubtreeMovedEventHandler"><summary>Occurs after a subtree is moved within this tree.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.SubtreeDeletedEventHandler"><summary>Occurs after a subtree is deleted from this tree.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.TransformChangedEventHandler"><summary>Occurs after a transform is changed in this tree.  Note that the meaning of any spaces descending from the changed transform will also be altered.  This event can be fired in a variety of ways.  For example: (1) by a call to the ChangeTransform method, (2) by call to the AddSpace method that replaces an existing transform, (3) by modifying a transform that was added to the tree by reference (not copied).</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.NameChangedEventHandler"><summary>Occurs after a space name is changed in this tree.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.TreeAddedEventHandler"><summary>Occurs after a new tree is added to this tree.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.SpaceAddedEventHandler"><summary>Occurs after a new space is added to this tree.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateSpaceTree.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.KeyChangedEventHandler"><summary>Occurs after an item's key is changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.KeyChangingEventHandler"><summary>Occurs before an item's key is changed.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicChildren.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogCADFile.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCircle.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogCircle.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogCircle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSection.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSection.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogCircularAnnulusSection.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCircularArc.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogCircularArc.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogCircularArc.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCompositeShape.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogCompositeShape.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogCompositeShape.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxes.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxes.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogCoordinateAxes.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogStatistics.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.KeyChangedEventHandler"><summary>Occurs after an item's key is changed.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.KeyChangingEventHandler"><summary>Occurs before an item's key is changed.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogDataAnalysis.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogEllipse.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogEllipse.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogEllipse.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSection.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSection.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalAnnulusSection.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalArc.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalArc.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogEllipticalArc.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitCircle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitEllipse.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogFitLine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour.SegmentsRemovedEventHandler"><summary>Occurs after one or more segments are deleted from the general contour.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour.SegmentAddedEventHandler"><summary>Occurs after a segment is added to the general contour.</summary></member><member name="T:Cognex.VisionPro.CogGeneralContour.SegmentsChangedEventHandler"><summary>Occurs after a geometric property of one or more segments is changed in the general contour.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicInteractiveCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogGraphicLabel.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogGraphicLabel.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogGraphicLabel.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage24PlanarColor.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage8Grey.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogImage16Grey.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogInputLine.HighToLowEventHandler"><summary>Occurs after an input line's state has changed from high to low.</summary><summary>Occurs after an input line's state has changed from high to low.</summary></member><member name="T:Cognex.VisionPro.CogInputLine.LowToHighEventHandler"><summary>Occurs after an input line's state has changed from low to high.</summary><summary>Occurs after an input line's state has changed from low to high.</summary></member><member name="T:Cognex.VisionPro.CogInputLine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogLine.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogLine.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogLine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogLineSegment.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogLineSegment.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogLineSegment.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogMaskGraphic.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogMaskGraphic.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogMaskGraphic.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogMaximizer.EvaluateEventHandler"><summary>Occurs when the Execute method of CogMaximizer is run.   Each time it is fired, the handler for this event must compute a Fitness value that corresponds to the supplied Position value. The Execute method continues to fire this event until it has determined which input Position value produces the highest output Fitness value  (or until the event handler terminates the Execute method prematurely, by failing to set the Continue parameter to true.</summary></member><member name="T:Cognex.VisionPro.CogOutputLine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogPointMarker.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogPointMarker.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogPointMarker.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.BulkChangedEventHandler"><summary>Occurs after a bulk change to the polygon, such as a call to SetVertices or loading from an archive.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.VertexRemovedEventHandler"><summary>Occurs after one or more vertices are deleted from the polygon.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.VertexAddedEventHandler"><summary>Occurs after one or more vertices are added to the polygon.</summary></member><member name="T:Cognex.VisionPro.CogPolygon.VertexChangedEventHandler"><summary>Occurs after the x or y coordinate of a single vertex is changed in the polygon.</summary></member><member name="T:Cognex.VisionPro.CogRLEBuffer.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogRectangle.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogRectangle.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogRectangle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogRectangleAffine.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.CogRectangleAffine.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member><member name="T:Cognex.VisionPro.CogRectangleAffine.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogShapeExtract.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogShapeModelCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogShapePolarize.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.KeyChangedEventHandler"><summary>Occurs after an item's key is changed.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.KeyChangingEventHandler"><summary>Occurs before an item's key is changed.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.MovedItemEventHandler"><summary>Occurs after an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.MovingItemEventHandler"><summary>Occurs before an item is moved to a new index.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.ReplacedItemEventHandler"><summary>Occurs after an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.ReplacingItemEventHandler"><summary>Occurs before an item is replaced in this collection.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.RemovedItemEventHandler"><summary>Occurs after an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.RemovingItemEventHandler"><summary>Occurs before an item is removed from this collection.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.InsertedItemEventHandler"><summary>Occurs after an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.InsertingItemEventHandler"><summary>Occurs before an item is inserted into this collection.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.ClearedEventHandler"><summary>Occurs after this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogStringCollection.ClearingEventHandler"><summary>Occurs before this collection is cleared.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DComposed.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DLinear.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DPerspectiveAndRadial.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DLinescan.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DRigid.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.CogTransform2DCameraCalibration.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ICog1394DCAMAccess.BusConfigurationChangedEventHandler"><summary>Occurs when a bus configuration changed (e.g. unplugged or bus reset) is detected for this frame grabber.</summary><remarks><para>
    		This event fires whenever there is a change in the IEEE1394 bus configuration. In general, the only appropriate
    		action for your application to take in reponse to this event is to terminate the application gracefully. Once this
    		event fires, the acquisition hardware and software may no longer be consistent, and the only way to fix that 
    		is to restart the application.
    	</para></remarks></member><member name="T:Cognex.VisionPro.ICogAcqFifo.OverrunEventHandler"><summary>Occurs after a FIFO has missed a trigger.  This usually means that triggers are coming in too fast to be processed.</summary><remarks><PARA>Event fired from an <see cref="T:Cognex.VisionPro.CogAcqFifo" /> when an overrun occurs.</PARA><PARA>The acquisition failed because even though the
acquisition system was able to obtain the required
resources, it was unable to start the acquisition in a timely
fashion.</PARA><PARA>
Supported on:
8100D,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504

</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogAcqFifo.CompleteEventHandler"><summary>Occurs after a FIFO has completed an acquisition, perhaps unsuccessfully.  If the acquisition was unsuccessful, Acquire or CompleteAcquire will return an error.  The acquisition may have been initiated by a call to Acquire, a call to StartAcquire, or by the acquisition system if you are using auto-trigger mode.</summary></member><member name="T:Cognex.VisionPro.ICogAcqFifo.MovePartEventHandler"><summary>Occurs when an acquisition FIFO determines that the camera's field of view can be changed without affecting the acquired image.</summary><remarks><PARA>Event fired from an <see cref="T:Cognex.VisionPro.ICogAcqFifo">acquisition FIFO</see> when the camera's field of view can be changed without affecting the acquired image.</PARA><PARA>With interlaced video formats an acquisition enters the movable state during the acquisition's next-to-last
vertical blank interval. With an RS170 camera, for example, an acquisition would enter
the movable state 17 ms (one field time) before it enters the <see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" /> state.
</PARA><PARA>Some frame grabbers, such as the MVS-8100L and the MVS-8100M, cannot
detect the next-to-last vertical blank interval. When using one
of these frame grabbers, the acquisition enters the movable and complete states at the
same time. In such cases, the move-part event always fires first, followed
immediately by the <see cref="E:Cognex.VisionPro.ICogAcqFifo.Complete" /> event.</PARA><PARA>
Supported on:
8100D,
8100L,
8100M,
8100M+,
8120/CVM1,
8120/CVM6,
8120/CVM9,
8120/CVM11,
8501, 8504,
8601, 8602

</PARA></remarks></member><member name="T:Cognex.VisionPro.ICogAcqFifo.FlushedEventHandler"><summary>Occurs after an acquisition FIFO is flushed.</summary></member><member name="T:Cognex.VisionPro.ICogGraphicInteractive.DraggingStoppedEventHandler"><summary>Occurs after the drag operation of an interactive graphic is complete.</summary></member><member name="T:Cognex.VisionPro.ICogGraphicInteractive.DraggingEventHandler"><summary>Occurs when an interactive graphic is being dragged.</summary></member></members></doc>