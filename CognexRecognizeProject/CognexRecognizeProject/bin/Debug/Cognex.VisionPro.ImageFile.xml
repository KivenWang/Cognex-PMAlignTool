<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.ImageFile</name></assembly><members><member name="T:Cognex.VisionPro.Exceptions.CogImageFileMultipleImagesNotSupportedException"><summary>The exception that is thrown when the image provider does not support multiple images.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogImageFileUnknownImageFileExtensionException"><summary>The exception that is thrown when the specified image file's extension does not correspond to any of the registered image file providers.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileProviderStateFlags"><summary>Class that defines the state flags for the ICogImageFileProvider interface.  Each static field in this class defines a single bit flag.  These flags may appear in the EventArgs of a Changed event fired by any class implementing ICogImageFileProvider.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileProviderStateFlags.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileProviderStateFlags.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileProviderStateFlags.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFile"><summary>Object supporting access to image files.</summary><remarks><PARA>The <see cref="T:Cognex.VisionPro.ImageFile.CogImageFile" /> supports generic access to image files using any of the registered image file providers.</PARA><PARA>If you know the image file format ahead of time or if you need specific image file functionality, you can use the appropriate image file provider interface, rather than <see cref="T:Cognex.VisionPro.ImageFile.CogImageFile" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.#ctor(Cognex.VisionPro.ImageFile.CogImageFile)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFile.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFile.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFile.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFile.SfProvider"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Provider may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.SupportedFileTypes"><remarks><PARA>Returns an <see cref="T:Cognex.VisionPro.CogStringCollection" /> that contains the file extensions of the supported image file types.</PARA></remarks><summary>File extensions of image file types that are supported.</summary><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
    ' Determine how many image file types are supportedDim FileTypes as CogStringCollection
    Dim FileTypes As New CogStringCollection
    FileTypes = imagefile.SupportedFileTypes
    MessageBox.Show("Number of supported file types: " + FileTypes.Count)
    </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
    
    // Determine how many image file types are supportedDim FileTypes as CogStringCollection
    CogStringCollection FileTypes=new CogStringCollection(); 
    FileTypes = imagefile.SupportedFileTypes;
    MessageBox.Show("Number of supported file types: " + FileTypes.Count);
    </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.Provider"><summary>The image file provider for the current open file or 0 if there is no file open.</summary><remarks><PARA>Returns the image file provider for the currently open file or NULL if no file is open. You can use the <see cref="P:Cognex.VisionPro.ImageFile.CogImageFile.Provider" /> to query for a specific interface of an underlying image file provider. For example, a client control may use this property to display TIFF-specific property pages.</PARA></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
    ' Get file provider
    Dim objImageFileProvider As Object
    objImageFileProvider = imagefile.Provider
    </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
    
   // Get file provider
    object objImageFileProvider;
    objImageFileProvider = imagefile.Provider;
    </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.FilterText"><summary>A string suitable for displaying in a CommonDialog Control.</summary><remarks><PARA>A string that contains the filter text used by the Filter property of a CommonDialog control to select various types of image files.</PARA></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
    ' Use the FilterText property
    objCommonDialog.Filter = ImageFile.FilterText    
     </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
    
   // Use the FilterText property
    objCommonDialog.Filter = ImageFile.FilterText;
   
     </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.OpenMode"><summary>Mode in which the file was opened.</summary><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks><example><code lang="Visual Basic">
    Imports Cognex.Visionpro.ImageFile 
    
    If imagefile.OpenMode = CogImageFileModeConstants.Write Then
      MessageBox.Show("File Is Open in Write Mode")
    End If
    </code><code lang="C#">
     using Cognex.Visionpro.ImageFile;
      if (imagefile.OpenMode == CogImageFileModeConstants.Write)
    {
      MessageBox.Show ("File Is Open in Write Mode");
    }
    </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.FileName"><remarks><PARA>Name of the last opened file. If no file is open, <see cref="P:Cognex.VisionPro.ImageFile.CogImageFile.FileName" /> is NULL.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>Name of last opened file.</summary><example><code lang="Visual Basic">
    Imports Cognex.Visionpro.ImageFile 
     
    ' Get the name of the last opened file and display it
    Dim strFileName As String
    strFileName = imagefile.FileName
    MessageBox.Show("Last file opened was:" + strFileName)
    </code><code lang="C#">
     using Cognex.Visionpro.ImageFile;
     
     // Get the name of the last opened file and display it
    string  strFileName;
    strFileName = imagefile.FileName;
    MessageBox.Show("Last file opened was:" + strFileName);
      
     </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
    ' Get an image from fileDim ImageFile as New CogImageFile
    Dim Image As CogImage8Grey
    imagefile.Open("c:\image.bmp", CogImageFileModeConstants.Read)
    Image = imagefile.Item(0)
    imagefile.Close()
    </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.Count"><summary>Gets the number of items contained in this collection.</summary><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
    ' Find the count of images in an image fileDim ImageFile as New CogImageFile
    imagefile.Open("c:\image.cdb", CogImageFileModeConstants.Read)
    Dim ImageCount As Integer
    ImageCount = ImageFile.Count
    </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
     
    // Find the count of images in an image fileDim ImageFile as New CogImageFile
    imagefile.Open("c:\\image.cdb", CogImageFileModeConstants.Read);
    int ImageCount;
    ImageCount = imagefile.Count;
     </code></example></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFile.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the image file to open.</PARA></param><param name="mode"><PARA>A <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" /> value that indicates that mode in which to open the image file.</PARA></param><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><PARA>If you do not specify an <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">file open mode</see>, <see cref="M:Cognex.VisionPro.ImageFile.CogImageFile.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)" /> defaults to <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read </see>.</PARA></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The property is changed. 
	</EVENT><summary>Open an image file.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageFileUnknownImageFileExtensionException" cgnxHRESULT="E_CogImageFile_UnknownImageFileExtension"><para>A supplied image file extension was not recognized.</para></exception><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
     ' Append an image to a file
    Dim ImageFile1 As New CogImageFile
    ImageFile1.Open("c:\image.bmp", CogImageFileModeConstants.Read)
    </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
    
    // Append an image to a file
    CogImageFile ImageFile1= new CogImageFile(); 
    ImageFile1.Open("c:\\image.bmp", CogImageFileModeConstants.Read);
    </code></example></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.Close"><summary>Close an open image file.</summary><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" /> property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.CogImageFile.Close" /> has no effect.</PARA></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The property is changed. 
	</EVENT><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
     ' Append an image to a file
    Dim ImageFile1 As New CogImageFile
    Dim Image As CogImage8Grey
    ImageFile1.Open("c:\image.bmp", CogImageFileModeConstants.Read)
    Image = ImageFile1(0)

    </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
    
    // Append an image to a file
    CogImageFile ImageFile1= new CogImageFile(); 
    CogImage8Grey Image; 
    ImageFile1.Open("c:\\image.bmp", CogImageFileModeConstants.Read);
    Image =(CogImage8Grey) ImageFile1[0];
    ImageFile1.Close();
    </code></example></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageFileMultipleImagesNotSupportedException" cgnxHRESULT="E_CogImageFile_MultipleImagesNotSupported"><para>The image provider does not support multiple images.</para></exception><summary>Append image to end of file.</summary><event cref="E:Cognex.VisionPro.ImageFile.CogImageFile.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks><example><code lang="Visual Basic">
    Imports Cognex.VisionPro.ImageFile
    
     ' Append an image to a file
    Dim ImageFile1 As New CogImageFile
    Dim Image As CogImage8Grey
    ImageFile1.Open("c:\image.bmp", CogImageFileModeConstants.Read)
    Image = ImageFile1(0)
    ImageFile1.Close()

    Dim ImageFile2 As New CogImageFile
    ImageFile2.Open("c:\image_copy.bmp", CogImageFileModeConstants.Write)
    ImageFile2.Append(Image)
    ImageFile2.Close()
    </code><code lang="C#">
    using Cognex.VisionPro.ImageFile;
    
    // Append an image to a file
    CogImageFile ImageFile1= new CogImageFile(); 
    CogImage8Grey Image; 
    ImageFile1.Open("c:\\image.bmp", CogImageFileModeConstants.Read);
    Image =(CogImage8Grey) ImageFile1[0];
    ImageFile1.Close();
    CogImageFile ImageFile2 =new CogImageFile(); 
    ImageFile2.Open("c:\\image_copy.bmp", CogImageFileModeConstants.Write);
    ImageFile2.Append(Image);
    ImageFile2.Close();
    </code></example></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><summary>Delete the specified images from the current open file.</summary><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The disk space occupied by the deleted images is reclaimed.
	</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFile.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFile.DeleteImage(System.Int32)"><param name="imageIndex"><PARA>The index of the image to delete.</PARA></param><summary>Delete the specified image from the current open file.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><remarks><PARA>Delete the specified image from the current open file. This function is equivalent to 
	<see cref="M:Cognex.VisionPro.ImageFile.CogImageFile.Delete(System.Int32[])" />, except that you supply a single image index as an Integer.</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFile.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="E:Cognex.VisionPro.ImageFile.CogImageFile.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileBMP"><summary>Object supporting access to .bmp files.</summary><remarks><PARA>Interface that supports access to bitmap (.bmp) image files.</PARA><PARA>24-bit color bitmap files are opened in color. Bitmap files of any other day are converted to grey-scale first.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.#ctor(Cognex.VisionPro.ImageFile.CogImageFileBMP)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfXPelsPerMeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XPelsPerMeter may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfYPelsPerMeter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by YPelsPerMeter may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.YPelsPerMeter"><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileBMP.Changed" cgnxEvent="singleState"><para>
		
		The property is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileBMP_YPelsPerMeter--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfYPelsPerMeter" /></li></ul></event><summary>The biYPelsPerMeter field of the bitmap header of the last image read or the next image to be written.</summary><remarks><PARA>The biYPelsPerMeter field of the bitmap header of the last image read or the next image to be written. This property defaults to zero because many applications that write bitmaps set the biYPelsPerMeter field to zero.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.XPelsPerMeter"><remarks><PARA>The biXPelsPerMeter field of the bitmap header of the last image read or the next image to be written. This property defaults to zero because many applications that write bitmaps set the biXPelsPerMeter field to zero.</PARA><DEFAULT>0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileBMP.Changed" cgnxEvent="singleState"><para>
		
		The property is changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileBMP_XPelsPerMeter--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileBMP.SfXPelsPerMeter" /></li></ul></event><summary>The biXPelsPerMeter field of the bitmap header of the last image read or the next image to be written.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.Description"><summary>Description of this file type to be used in a Common File Dialog.</summary><remarks><PARA>Text string with a description of this file type. Can be used in a control.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.FileTypes"><remarks><PARA>A string that contains a semicolon separated list of file types that this image file provider can read or write. The following example string specifies file types for a Cognex Image Database provider: "idb;cdb".</PARA></remarks><summary>Semicolon separated list of file types that this provider can read or write.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.OpenMode"><summary>Mode in which the file was opened (or cogImageFile_Closed if no file open).</summary><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.FileName"><remarks><PARA>Name of the last opened file.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>Name of last opened file.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileBMP.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><param name="mode"><PARA>A 
		<see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" />  value indicating the mode in which to open the image file.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read</see>.</DEFAULT></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><summary>Open an image file using the given mode.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.Close"><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" />  property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close" /> has no effect.</PARA></remarks><summary>Close an open image file.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No image file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception><summary>Append image to end of an open file.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The storage space occupied by the deleted images is reclaimed.
	</PARA></remarks><summary>Delete the specified images from the current open file.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileBMP.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageFile.CogImageFileBMP.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileCDB"><summary>Object supporting access to .cdb /.idb files.</summary><remarks><PARA>Interface that supports access to Cognex image database (.cdb, .idb) files.</PARA><NOTE>
When you save an image to a Cognex image file (.IDB) or Cognex image database (.CDB) using this tool, the
tool saves the image, the selected space name of the image, and the coordinate space tree associated with the image. 
When you load an image from an .IDB or .CDB file, the selected space and the coordinate space tree are both restored 
as well.
</NOTE></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.#ctor(Cognex.VisionPro.ImageFile.CogImageFileCDB)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileCDB.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileCDB.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileCDB.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.Description"><summary>Description of this file type to be used in a Common File Dialog.</summary><remarks><PARA>Text string with a description of this file type. Can be used in a control.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.FileTypes"><summary>Semicolon separated list of file types that this provider can read or write.</summary><remarks><PARA>A string that contains a semicolon separated list of file types that this image file provider can read or write. The following example string specifies file types for a Cognex Image Database provider: "idb;cdb".</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.OpenMode"><summary>Mode in which the file was opened (or cogImageFile_Closed if no file open).</summary><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.FileName"><remarks><PARA>Name of the last opened file.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>Name of last opened file.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileCDB.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><param name="mode"><PARA>A 
		<see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" />  value indicating the mode in which to open the image file.</PARA></param><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception><summary>Open an image file using the given mode.</summary><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read</see>.</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.Close"><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><summary>Close an open image file.</summary><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" />  property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close" /> has no effect.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks><summary>Append image to end of an open file.</summary><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No image file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><summary>Delete the specified images from the current open file.</summary><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The storage space occupied by the deleted images is reclaimed.
	</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.ReadComment(System.Int32)"><param name="imageIndex"><PARA>The index for the image comment to retrieve.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The value supplied for <paramref name="imageIndex" /> is out of range</para></exception><returns><PARA>The image comment.</PARA></returns><remarks><PARA>Reads the comment at the given image collection index.</PARA></remarks><summary>Read the comment at the given index.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileCDB.AppendImageAndComment(Cognex.VisionPro.ICogImage,System.String)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><param name="comment"><PARA>A comment that describes the image.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No File is open</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception><summary>Append image and comment to end of file.</summary><remarks><PARA>Appends an image and comment to the end of an image database file. This function also 
	appends the selected space of the image and the coordinate space tree associated with the image.</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileCDB.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="E:Cognex.VisionPro.ImageFile.CogImageFileCDB.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileJPEG"><summary>Object supporting access to .jpg files.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.#ctor(Cognex.VisionPro.ImageFile.CogImageFileJPEG)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileJPEG.SfQuality"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Quality may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileJPEG.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileJPEG.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileJPEG.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Quality"><summary>Quality to use for writing JPEG files in the range 0-100. Default value is 100.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Description"><remarks><PARA>Text string with a description of this file type. Can be used in a control.</PARA></remarks><summary>Description of this file type to be used in a Common File Dialog.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.FileTypes"><summary>Semicolon separated list of file types that this provider can read or write.</summary><remarks><PARA>A string that contains a semicolon separated list of file types that this image file provider can read or write. The following example string specifies file types for a Cognex Image Database provider: "idb;cdb".</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.OpenMode"><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks><summary>Mode in which the file was opened (or cogImageFile_Closed if no file open).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.FileName"><remarks><PARA>Name of the last opened file.</PARA><DEFAULT>NULL</DEFAULT></remarks><summary>Name of last opened file.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><param name="mode"><PARA>A 
		<see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" />  value indicating the mode in which to open the image file.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception><summary>Open an image file using the given mode.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read</see>.</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Close"><summary>Close an open image file.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" />  property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close" /> has no effect.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><summary>Append image to end of an open file.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No image file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><summary>Delete the specified images from the current open file.</summary><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The storage space occupied by the deleted images is reclaimed.
	</PARA></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileJPEG.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageFile.CogImageFileJPEG.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFilePNG"><summary>Object supporting access to .png files.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.#ctor(Cognex.VisionPro.ImageFile.CogImageFilePNG)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFilePNG.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFilePNG.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFilePNG.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.Description"><remarks><PARA>Text string with a description of this file type. Can be used in a control.</PARA></remarks><summary>Description of this file type to be used in a Common File Dialog.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.FileTypes"><summary>Semicolon separated list of file types that this provider can read or write.</summary><remarks><PARA>A string that contains a semicolon separated list of file types that this image file provider can read or write. The following example string specifies file types for a Cognex Image Database provider: "idb;cdb".</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.OpenMode"><summary>Mode in which the file was opened (or cogImageFile_Closed if no file open).</summary><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.FileName"><summary>Name of last opened file.</summary><remarks><PARA>Name of the last opened file.</PARA><DEFAULT>NULL</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFilePNG.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><param name="mode"><PARA>A 
		<see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" />  value indicating the mode in which to open the image file.</PARA></param><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read</see>.</DEFAULT></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><summary>Open an image file using the given mode.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.Close"><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><summary>Close an open image file.</summary><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" />  property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close" /> has no effect.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No image file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception><summary>Append image to end of an open file.</summary><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The storage space occupied by the deleted images is reclaimed.
	</PARA></remarks><summary>Delete the specified images from the current open file.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFilePNG.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.ImageFile.CogImageFilePNG.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileTIFF"><summary>Object supporting access to .tif files.</summary><remarks><PARA>Interface that supports access to Tagged Image File Format (.tif) files.</PARA><PARA>24-bit color TIFF files are opened in color; each plane of the color image must be an 8-bit image.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.#ctor(Cognex.VisionPro.ImageFile.CogImageFileTIFF)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTIFF.SfCount"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Count may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTIFF.SfFileName"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by FileName may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTIFF.SfOpenMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OpenMode may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Description"><remarks><PARA>Text string with a description of this file type. Can be used in a control.</PARA></remarks><summary>Description of this file type to be used in a Common File Dialog.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.FileTypes"><remarks><PARA>A string that contains a semicolon separated list of file types that this image file provider can read or write. The following example string specifies file types for a Cognex Image Database provider: "idb;cdb".</PARA></remarks><summary>Semicolon separated list of file types that this provider can read or write.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.OpenMode"><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks><summary>Mode in which the file was opened (or cogImageFile_Closed if no file open).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.FileName"><summary>Name of last opened file.</summary><remarks><PARA>Name of the last opened file.</PARA><DEFAULT>NULL</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><param name="mode"><PARA>A 
		<see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" />  value indicating the mode in which to open the image file.</PARA></param><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read</see>.</DEFAULT></remarks><summary>Open an image file using the given mode.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Close"><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" />  property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close" /> has no effect.</PARA></remarks><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><summary>Close an open image file.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No image file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception><summary>Append image to end of an open file.</summary><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><summary>Delete the specified images from the current open file.</summary><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The storage space occupied by the deleted images is reclaimed.
	</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.ReadTag(System.Int32,System.Int32)"><param name="imageIndex"><PARA>The index position of the image.</PARA></param><param name="tag"><PARA>The image tag for which to retrieve data.</PARA></param><remarks><PARA>Reads the data associated with the specified image tag. If the TIFF count field for this tag is greater than one and the tag does not contain ASCII information, 
		<see cref="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.ReadTag(System.Int32,System.Int32)" />  returns an array containing the tag data. 
		<see cref="M:Cognex.VisionPro.ImageFile.CogImageFileTIFF.ReadTag(System.Int32,System.Int32)" />  returns an empty variant if the tag does not exist.</PARA></remarks><summary>Read the data associated with the specified tag.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The index specified for <paramref name="imageIndex" /> is out of range.</para></exception><returns><PARA>The data associated with the specified image tag, or an empty variant if the tag does not exist.</PARA></returns></member><member name="E:Cognex.VisionPro.ImageFile.CogImageFileTIFF.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileTool"><remarks><PARA>Interface for the image file tool, which is used to record to and play back images from an image file.</PARA></remarks><summary>The image file tool.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTool.#ctor(Cognex.VisionPro.ImageFile.CogImageFileTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTool.#ctor(System.IntPtr)"><param name="impl">n/a</param><summary>Constructs a new instance of this class using com pointer.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfOperator"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Operator may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfCurrentImageIndex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentImageIndex may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfNextImageIndex"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by NextImageIndex may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfImageIndexIncrement"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ImageIndexIncrement may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfOutputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.InputImage"><summary>Input image. This property may be set to enable recording.</summary><remarks><DEFAULT>0</DEFAULT><PARA>Returns or sets the input image, which is used to enable image recording. In record mode, the input image is appended to the currently open image file. </PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfInputImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.OutputImage"><remarks><PARA>In read (playback) mode, when the tool is run the output image is set to the current image in the open image. Each invocation of <see cref="M:Cognex.VisionPro.ImageFile.CogImageFileTool.Run" /> updates <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.OutputImage" />.</PARA></remarks><summary>Output image. This is updated by each invocation of Run.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.ImageIndexIncrement"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileTool_ImageIndexIncrement--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfImageIndexIncrement" /></li></ul></event><remarks><DEFAULT>1</DEFAULT><PARA>Number of images to increment after invocation of <see cref="M:Cognex.VisionPro.ImageFile.CogImageFileTool.Run" />. Used when scrolling through an open image file.</PARA></remarks><summary>Number of images to increment after invocation of Run.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.NextImageIndex"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileTool_NextImageIndex--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfNextImageIndex" /></li></ul></event><summary>Next image index.</summary><remarks><DEFAULT>0</DEFAULT><PARA>Next image index. When the <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.Operator">Operator</see> opens a new image file, the <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.NextImageIndex" /> property is set to zero if the file is opened for reading or writing; or set to NumImages if the file is opened for update. <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.NextImageIndex" /> is reset to the default any time the operator is changed.</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentImageIndex"><remarks><DEFAULT>-1</DEFAULT><PARA>Current image index within the currently open image file. If a new file is opened for reading (playback mode) or writing (record mode), <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentImageIndex" /> is set to -1. If the file is opened for update, <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentImageIndex" /> is set to NumImages - 1.</PARA></remarks><summary>Current image index.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.Operator"><remarks><PARA>Returns or sets the operator for this tool.</PARA><PARA>If a new operator has an open mode of read or close, <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.Operator" /> sets <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentImageIndex" /> to -1 and <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.NextImageIndex" /> to 0. If the new operator has an open mode of write or update, <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.Operator" /> sets <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentImageIndex" /> to NumImages - 1 and <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.NextImageIndex" /> to NumImages.</PARA></remarks><summary>Operator of the tool.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
		
Fires when the value of this property changes. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Misc--><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfLastRunRecordEnable" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfLastRunRecordDiagEnable" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfCurrentRecordEnable" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfOperator" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfImageIndexIncrement" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfInputImage" /></li><!--FA:cogFA_ImageFileTool_Indices--><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfCurrentImageIndex" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfNextImageIndex" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</PARA></remarks><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.LastRunRecordDiagEnable"><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfLastRunRecordDiagEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.LastRunRecordEnable"><remarks><PARA>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</PARA></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfLastRunRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.ImageFile.CogImageFileTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
		
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileTool" /> returns or in a
		<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfOutputImage" /></li><!--FA:cogFA_Tool_CurrentRecord--><!--FA:cogFA_ImageFileTool_Indices--><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfCurrentImageIndex" /></li><li><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileTool.SfNextImageIndex" /></li></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>Performs the tool's primary function. In read (playback) mode, the tool sets the <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.OutputImage" /> to the current image in the open image file. In write (record) mode, the tool appends the <see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.InputImage" /> to the current open image file.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.CogImageFileTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.ICogImageFileProvider"><remarks><PARA>Implements methods and properties used by objects that support access to specific image file formats.</PARA></remarks><summary>Interface implemented by all objects that support a specific image file format.</summary></member><member name="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Description"><remarks><PARA>Text string with a description of this file type. Can be used in a control.</PARA></remarks><summary>Description of this file type to be used in a Common File Dialog.</summary></member><member name="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileTypes"><summary>Semicolon separated list of file types that this provider can read or write.</summary><remarks><PARA>A string that contains a semicolon separated list of file types that this image file provider can read or write. The following example string specifies file types for a Cognex Image Database provider: "idb;cdb".</PARA></remarks></member><member name="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.OpenMode"><summary>Mode in which the file was opened (or cogImageFile_Closed if no file open).</summary><remarks><PARA><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Mode</see> in which the file was opened, or <see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" />  if no file is open. This is a read only property.</PARA><DEFAULT><see cref="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed" /></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName"><summary>Name of last opened file.</summary><remarks><PARA>Name of the last opened file.</PARA><DEFAULT>NULL</DEFAULT></remarks></member><member name="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Open(System.String,Cognex.VisionPro.ImageFile.CogImageFileModeConstants)"><param name="fileName"><PARA>The name of the file to open.</PARA></param><param name="mode"><PARA>A 
		<see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants" />  value indicating the mode in which to open the image file.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="mode" /> is not a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">value</see>.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para>An error occurred while opening the specified file.</para></exception><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><remarks><PARA>Opens an image file using the image file provider that corresponds to the file's extension. If more than one image file provider supports the extension, the one selected is undefined.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">Read</see>.</DEFAULT></remarks><summary>Open an image file using the given mode.</summary></member><member name="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close"><summary>Close an open image file.</summary><EVENT TYPELIB="CognexCore" IFACE="ICogChangeEvent" FUNC="Change"><ACTUAL_PARAMS><ACTUAL_PARAM>-1</ACTUAL_PARAM><ACTUAL_PARAM>Empty</ACTUAL_PARAM><ACTUAL_PARAM><LINK TYPELIB="CognexCore" ENUM="CogFAs_Global">cogFA_Misc</LINK></ACTUAL_PARAM></ACTUAL_PARAMS>
		The state has changed. 
	</EVENT><remarks><PARA>Closes the open image file and sets the <see cref="P:Cognex.VisionPro.ImageFile.ICogImageFileProvider.FileName" />  property to "". If an image file is not currently open, calling <see cref="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Close" /> has no effect.</PARA></remarks></member><member name="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Append(Cognex.VisionPro.ICogImage)"><param name="newImage"><PARA>The <see cref="T:Cognex.VisionPro.CogImage" /> to append to file.</PARA></param><remarks><PARA>Appends an image to the end of an image file.</PARA></remarks><summary>Append image to end of an open file.</summary><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The new image count is provided in <paramref name="NewValue" />.
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="newImage" /> is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No image file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The image file is not opened in a <see cref="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants">mode</see> that permits writing.</para></exception></member><member name="M:Cognex.VisionPro.ImageFile.ICogImageFileProvider.Delete(System.Int32[])"><param name="imageIndices"><PARA>The image indices to delete.</PARA></param><summary>Delete the specified images from the current open file.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogNoFileOpenException" cgnxHRESULT="E_Cog_NoFileOpen"><para>No file is open.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogBadFileModeException" cgnxHRESULT="E_Cog_BadFileMode"><para>The file is not open for writing.</para></exception><remarks><PARA>Delete the specified images from the current open file. You specify the images to delete by supplying 
	a dynamic array containing the indices of the images to delete.</PARA><PARA>
	The storage space occupied by the deleted images is reclaimed.
	</PARA></remarks><event cref="E:Cognex.VisionPro.ImageFile.CogImageFileProvider.Changed" cgnxEvent="singleState"><para>
		
		The number of images in the file has changed. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogImageFileProvider_Count--><ul /></event></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileModeConstants"><summary>Enumeration of file open modes.</summary><remarks><PARA>An enumeration of image file open modes.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Write"><remarks><PARA>Creates a new image file for reading and writing.</PARA></remarks><summary>Mode for creating a new file for reading and writing.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Read"><summary>Mode for opening an existing file for reading.</summary><remarks><PARA>Opens an existing image file for reading.</PARA></remarks></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Closed"><remarks><PARA>Mode returned when no image file is open. It is not valid to open a file in this mode.</PARA></remarks><summary>Mode returned when no file is open - no valid to open in this mode.</summary></member><member name="F:Cognex.VisionPro.ImageFile.CogImageFileModeConstants.Update"><remarks><PARA>Opens an existing image file for reading and writing.</PARA></remarks><summary>Mode for opening an existing file for reading and writing.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.LastRunRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageFile Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileLastRunRecordDiagConstants"><summary>Enumeration of Diagnostic data that can be returned by the Tool's CreateLastRunRecord function.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageFile Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileCurrentRecordConstants"><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.ImageFile.CogImageFileTool.CurrentRecordEnable" /> to specify the 
<!--TAGFIX: 0 nodes matched the following tag --><see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogImageFile Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA></remarks></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFile.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileBMP.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileCDB.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileJPEG.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFilePNG.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.ImageFile.CogImageFileTIFF.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>